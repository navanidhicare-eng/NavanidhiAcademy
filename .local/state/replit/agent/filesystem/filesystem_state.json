{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.SUPABASE_DATABASE_URL) {\n  throw new Error(\"SUPABASE_DATABASE_URL, ensure the Supabase database is connected\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.SUPABASE_DATABASE_URL,\n  }\n});\n","size_bytes":358},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Navanidhi Academy Management System\n\n## Overview\nThis is a comprehensive educational management system for Navanidhi Academy and its satellite office (SO) centers, offering role-based access for admins, SO center managers, teachers, and agents. The system enables student tracking via QR codes, academic progress monitoring, payment and wallet management. Students do not have direct login access; their data is managed by SO centers and parents can access progress through QR codes. The project aims to provide a production-ready, efficient, and modern platform for educational management with a focus on streamlined operations and user experience.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## Recent Critical Issues Resolved\n- **SO Center Synchronization Issue (Aug 10, 2025)**: Fixed critical bug where SO Centers were created in Supabase Auth but failed to sync to database due to missing `admission_fee_applicable` column. Added missing column and related equipment tables.\n- **Database Schema Completion**: Successfully migrated all missing tables including `so_center_equipment`, ensuring complete SO Center registration process works end-to-end.\n- **SO Center Data Privacy & UI Improvements (Aug 10, 2025)**: Implemented strict data privacy controls ensuring SO Centers can only access their own data. Fixed manager dropdown to show only SO Center role users. Updated UI labels from \"Center Manager (Optional)\" to \"SO Study Organizer\" for better clarity and accuracy.\n- **Exam Results Database Schema Issue (Aug 12, 2025)**: Fixed critical database synchronization issue where `exam_results` table was missing multiple columns (`percentage`, `submitted_by`, `submitted_at`). Implemented production-ready fallback approach using minimal schema to ensure exam results save successfully. Created comprehensive SQL migration script (`add_percentage_column.sql`) for manual database column addition.\n- **Missing Exam Results API Endpoint (Aug 12, 2025)**: Fixed critical issue where frontend was calling `/api/exams/{examId}/results` endpoint that didn't exist, causing empty results display. Added missing GET endpoint with SO Center filtering, percentage calculation, and proper data structure. Implemented business rule preventing modification of completed exam results - students can only submit marks once.\n- **QR Code Generation & Green Theme Implementation (Aug 12, 2025)**: Completely redesigned QR code generation system with high-quality SVG output, removing embedded logo for better scan quality. Applied comprehensive green theme throughout entire application with performance-optimized animations. Enhanced dashboard with green gradients, hover effects, pulse animations, and updated chart colors. Integrated proper Navanidhi Academy branding in QR code header with logo positioned at top for professional appearance.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter\n- **State Management**: TanStack Query\n- **UI Components**: Radix UI primitives with shadcn/ui\n- **Styling**: Tailwind CSS with CSS variables\n- **Build Tool**: Vite\n- **UI/UX Decisions**: Modern UI with gradient backgrounds, hover effects, professional typography, responsive design, and confetti celebrations for successful student registrations. Settings page includes dark/light theme toggle.\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript\n- **Database ORM**: Drizzle ORM\n- **Authentication**: JWT-based authentication with bcrypt for password hashing, primarily managed by Supabase Auth.\n- **API Design**: RESTful API structure with role-based middleware protection.\n\n### Database Design\n- **Primary Database**: PostgreSQL via Supabase. All database operations are exclusively routed through Supabase PostgreSQL.\n- **Schema Management**: Drizzle Kit for migrations.\n- **Key Entities**: Users (with role-based permissions), Students (with QR code tracking), Academic structure (classes, subjects, chapters, topics), Progress tracking, Payment records, SO centers (with wallet management), Wallet transactions.\n\n### Authentication & Authorization\n- **Authentication System**: Exclusively Supabase Authentication for all user types (Admin, SO Center, Teacher, etc.). This includes user creation, login, and token management.\n- **JWT Token System**: Secure token-based authentication.\n- **Role-Based Access Control**: Eight distinct user roles with specific permissions, synchronized between Supabase Auth and PostgreSQL.\n- **Protected Routes**: Frontend and server-side API protection using authentication middleware.\n- **SO Center Authentication**: Standardized SO Center login system with ID-to-email conversion (e.g., `NNASOC00001` converts to `nnasoc00001@navanidhi.org`).\n\n### Key Features Architecture\n- **QR Code System**: Unique QR codes per student for public, unauthenticated progress viewing.\n- **Wallet Management**: Non-cash wallet system for SO centers with transaction tracking.\n- **Progress Tracking**: Granular topic-level progress monitoring.\n- **Payment Processing**: Comprehensive enrollment-based fee calculation, including enrollment date logic, previous balance tracking, monthly fee scheduling, and auto-update system. Supports multi-method payment recording (cash, online, wallet).\n- **Academic Dashboard**: Universal location filter system (State → District → Mandal → Village → SO Center) shared across Student Progress and Attendance Reports tabs.\n- **Exam Management**: Dedicated sidebar page for Academic Admin with comprehensive exam creation, SO Centers selection, and management capabilities.\n- **Teacher Management**: Integrated with user authentication system, including teaching records and assignment of classes and subjects.\n- **Announcements System**: Complete role-based announcements management with multi-select target audiences, priority levels, date scheduling, QR code integration, and auto-popup display for active announcements based on user roles.\n- **Data Privacy & Integrity**: Strict SO Center data isolation with global Aadhar number validation to prevent system-wide duplicates while maintaining privacy between centers.\n\n## External Dependencies\n\n### Database & Backend Services\n- **Supabase**: Primary database (PostgreSQL) and authentication services.\n\n### Development & Build Tools\n- **Vite**: Fast build tool.\n- **TypeScript**: Type checking and compilation.\n\n### UI & Design Libraries\n- **Radix UI**: Headless component primitives.\n- **Tailwind CSS**: Utility-first CSS framework.\n- **Lucide React**: Icon system.\n- **React Hook Form**: Form handling.\n- **Zod**: Schema validation.\n\n### State Management & Data Fetching\n- **TanStack Query**: Server state management.\n- **Wouter**: Routing solution.\n\n### Authentication & Security\n- **bcryptjs**: Password hashing.\n- **jsonwebtoken**: JWT token generation and verification.\n- **Connect PG Simple**: PostgreSQL session store for Express sessions.","size_bytes":6996},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        success: \"var(--success)\",\n        warning: \"var(--warning)\",\n        error: \"var(--error)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"system-ui\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2909},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/create-users.ts":{"content":"// MANDATORY SUPABASE DATABASE CONNECTION - NEON COMPLETELY DISABLED\nimport { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport * as schema from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\n\nif (!process.env.SUPABASE_DATABASE_URL) {\n  throw new Error(\"SUPABASE_DATABASE_URL environment variable is required - Neon database disabled\");\n}\n\nconsole.log('🔗 CREATE-USERS: Using SUPABASE_DATABASE_URL exclusively');\nconst sql = postgres(process.env.SUPABASE_DATABASE_URL!, { max: 1 });\nconst db = drizzle(sql, { schema });\n\nasync function createUsers() {\n  try {\n    console.log(\"Creating test users...\");\n\n    // Create admin user\n    const hashedAdminPassword = await bcrypt.hash(\"admin123\", 10);\n    const [adminUser] = await db.insert(schema.users).values({\n      email: \"admin@navanidhi.com\",\n      password: hashedAdminPassword,\n      name: \"Admin User\",\n      role: \"admin\",\n      phone: \"+91 98765 43210\"\n    }).returning();\n\n    // Create SO Center user\n    const hashedSoPassword = await bcrypt.hash(\"so123\", 10);\n    const [soUser] = await db.insert(schema.users).values({\n      email: \"so@navanidhi.com\", \n      password: hashedSoPassword,\n      name: \"SO Center Manager\",\n      role: \"so_center\",\n      phone: \"+91 87654 32109\"\n    }).returning();\n\n    // Create teacher user\n    const hashedTeacherPassword = await bcrypt.hash(\"teacher123\", 10);\n    const [teacherUser] = await db.insert(schema.users).values({\n      email: \"teacher@navanidhi.com\",\n      password: hashedTeacherPassword,\n      name: \"Math Teacher\",\n      role: \"teacher\",\n      phone: \"+91 76543 21098\"\n    }).returning();\n\n    console.log(\"✓ Created Admin User:\", adminUser.email);\n    console.log(\"✓ Created SO Center User:\", soUser.email);\n    console.log(\"✓ Created Teacher User:\", teacherUser.email);\n\n    console.log(\"\\n=== LOGIN CREDENTIALS ===\");\n    console.log(\"Admin Login:\");\n    console.log(\"  Email: admin@navanidhi.com\");\n    console.log(\"  Password: admin123\");\n    console.log(\"  Role: Admin\");\n    \n    console.log(\"\\nSO Center Login:\");\n    console.log(\"  Email: so@navanidhi.com\");\n    console.log(\"  Password: so123\");\n    console.log(\"  Role: SO Center\");\n    \n    console.log(\"\\nTeacher Login:\");\n    console.log(\"  Email: teacher@navanidhi.com\");\n    console.log(\"  Password: teacher123\");\n    console.log(\"  Role: Teacher\");\n\n  } catch (error) {\n    console.error(\"Error creating users:\", error);\n  }\n}\n\ncreateUsers();","size_bytes":2463},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, req: Request, res: Response, _next: NextFunction) => {\n    console.error('Global error handler:', {\n      path: req.path,\n      method: req.method,\n      error: err.message,\n      stack: err.stack\n    });\n    \n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n\n  server.listen(port, () => {\n    console.log(`✅ Server is listening on port ${port}`);\n  });\n\n})();\n","size_bytes":2178},"server/routes.ts":{"content":"import type { Express, Request } from \"express\";\n\n// Extend Express Request type to include user\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: {\n        userId: string;\n        email: string;\n        role: string;\n        id?: string; // For backward compatibility\n      };\n    }\n  }\n}\nimport { createServer, type Server } from \"http\";\nimport { storage, db, getUsersByRole, executeRawQuery, sql } from \"./storage\";\nimport { FeeCalculationService } from './feeCalculationService';\nimport { MonthlyFeeScheduler } from './monthlyFeeScheduler';\nimport { supabaseAdmin } from './supabaseClient';\nimport { createAdminUser } from './createAdminUser';\nimport { AuthService } from './authService';\nimport { sql as sqlQuery, eq, desc, and } from \"drizzle-orm\";\nimport * as schema from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport { \n  insertUserSchema, \n  insertStudentSchema, \n  insertStudentSiblingSchema,\n  insertClassFeeSchema,\n  insertPaymentSchema, \n  insertTopicProgressSchema,\n  insertStateSchema,\n  insertDistrictSchema,\n  insertMandalSchema,\n  insertVillageSchema,\n  insertClassSchema,\n  insertSubjectSchema,\n  insertChapterSchema,\n  insertTopicSchema,\n  insertSoCenterSchema,\n  insertAttendanceSchema,\n  insertHomeworkActivitySchema,\n  insertTuitionProgressSchema,\n  insertProductSchema,\n  insertSoCenterExpenseSchema,\n  insertExamSchema,\n  insertExamResultSchema,\n  insertSoCenterExpenseWalletSchema,\n  insertWalletTransactionSchema,\n  insertAdminNotificationSchema,\n  insertWithdrawalRequestSchema,\n  insertTeacherDailyRecordSchema\n} from \"@shared/schema\";\nimport { z } from 'zod';\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"navanidhi-academy-secret-key-2024\";\n\n// Initialize admin user on server start with timeout\n/*\n(async () => {\n  try {\n    console.log('🚀 Initializing Supabase authentication...');\n    await Promise.race([\n      createAdminUser(),\n      new Promise((_, reject) => \n        setTimeout(() => reject(new Error('Admin initialization timeout - continuing without full setup')), 10000)\n      )\n    ]);\n  } catch (error: any) {\n    console.warn('⚠️ Admin initialization failed, continuing with basic functionality:', error.message);\n    console.log('🔄 System will continue - authentication may work after database reconnects');\n  }\n})();\n*/\n\n// Middleware to verify JWT token\nconst authenticateToken = (req: Request, res: any, next: any) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  console.log('🔐 Authentication attempt:', {\n    hasAuthHeader: !!authHeader,\n    hasToken: !!token,\n    tokenLength: token?.length,\n    tokenStart: token?.substring(0, 20) + '...'\n  });\n\n  if (!token) {\n    console.log('❌ No token provided');\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  jwt.verify(token, JWT_SECRET, (err: any, user: any) => {\n    if (err) {\n      console.log('❌ JWT verification failed:', err.message);\n      return res.status(403).json({ message: 'Invalid token' });\n    }\n    console.log('✅ JWT verified successfully:', { userId: user.userId, role: user.role });\n    req.user = user;\n    next();\n  });\n};\n\n// Middleware to check user role\nconst requireRole = (allowedRoles: string[]) => {\n  return (req: Request, res: any, next: any) => {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Authentication required' });\n    }\n\n    if (!allowedRoles.includes(req.user.role)) {\n      return res.status(403).json({ \n        message: `Access denied. Required roles: ${allowedRoles.join(', ')}` \n      });\n    }\n\n    next();\n  };\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n\n  // Test endpoint\n  app.get(\"/api/test\", (req, res) => {\n    res.json({ message: \"Server is working!\", timestamp: new Date().toISOString() });\n  });\n\n  // Database health check endpoint\n  app.get(\"/api/health/db\", async (req, res) => {\n    try {\n      const startTime = Date.now();\n      const result = await db.select().from(schema.users).limit(1);\n      const duration = Date.now() - startTime;\n      res.json({ \n        status: \"connected\", \n        duration: `${duration}ms`,\n        recordCount: result.length,\n        timestamp: new Date().toISOString() \n      });\n    } catch (error) {\n      console.error(\"Database health check failed:\", error);\n      res.status(500).json({ \n        status: \"failed\", \n        error: error.message,\n        timestamp: new Date().toISOString() \n      });\n    }\n  });\n\n  // Auth routes - Supabase Authentication\n  app.post(\"/api/auth/login\", async (req, res) => {\n    // Add timeout wrapper to prevent infinite hanging\n    const timeoutPromise = new Promise((_, reject) => {\n      setTimeout(() => reject(new Error('Login timeout - request took too long')), 15000);\n    });\n\n    try {\n      await Promise.race([\n        (async () => {\n          console.log(\"Login attempt:\", req.body);\n          let { email, password } = req.body;\n\n          if (!email || !password) {\n            return res.status(400).json({ message: \"Email and password are required\" });\n          }\n\n          // Convert SO Center ID format to email format\n          if (/^[A-Z0-9]+$/.test(email) && !email.includes('@')) {\n            console.log(`🔄 Converting SO Center ID \"${email}\" to email format`);\n            email = `${email.toLowerCase()}@navanidhi.org`;\n            console.log(`✅ Converted to: ${email}`);\n          }\n\n          try {\n            // 1. Authenticate with Supabase Auth\n            console.log(`🔐 Authenticating with Supabase Auth: ${email}`);\n            const { data: authData, error: authError } = await supabaseAdmin.auth.signInWithPassword({\n              email,\n              password\n            });\n\n            if (authError || !authData.user) {\n              console.log(`❌ Supabase Auth failed:`, authError?.message);\n              return res.status(401).json({ message: \"Invalid credentials\" });\n            }\n\n            console.log(`✅ Supabase Auth successful:`, authData.user.id);\n\n            // 2. Get or sync user from our database with timeout\n            console.log(`🔍 Getting user from database: ${email}`);\n            const dbQueryPromise = storage.getUserByEmail(email);\n            const dbTimeoutPromise = new Promise((_, reject) => {\n              setTimeout(() => reject(new Error('Database query timeout')), 5000);\n            });\n\n            let user = await Promise.race([dbQueryPromise, dbTimeoutPromise]);\n            console.log(`✅ Database query completed successfully`);\n\n            if (!user) {\n              // User exists in Supabase but not in our database - sync them\n              console.log(`🔄 Syncing user from Supabase to database: ${email}`);\n              const userMetadata = authData.user.user_metadata;\n              user = await storage.createUser({\n                email: email,\n                role: userMetadata.role || 'agent',\n                name: userMetadata.name || authData.user.email?.split('@')[0] || 'User',\n                isActive: true,\n                password: '' // We use Supabase Auth, no local password needed\n              });\n              console.log(`✅ User synced to database:`, user.id);\n            }\n\n            console.log(`✅ User authenticated:`, { id: user.id, email: user.email, role: user.role });\n\n            const token = jwt.sign(\n              { userId: user.id, email: user.email, role: user.role },\n              JWT_SECRET,\n              { expiresIn: '24h' }\n            );\n\n            // Determine dashboard route based on role\n            let dashboardRoute = '/dashboard';\n            switch (user.role) {\n              case 'admin':\n                dashboardRoute = '/admin/users';\n                break;\n              case 'so_center':\n                dashboardRoute = '/dashboard';\n                break;\n              case 'teacher':\n                dashboardRoute = '/dashboard';\n                break;\n              case 'academic_admin':\n                dashboardRoute = '/dashboard';\n                break;\n              case 'agent':\n                dashboardRoute = '/dashboard';\n                break;\n              case 'office_staff':\n                dashboardRoute = '/dashboard';\n                break;\n              case 'collection_agent':\n                dashboardRoute = '/dashboard';\n                break;\n              case 'marketing_staff':\n                dashboardRoute = '/dashboard';\n                break;\n              default:\n                dashboardRoute = '/dashboard';\n            }\n\n            console.log(`📍 Redirecting ${user.role} to: ${dashboardRoute}`);\n            console.log(`🚀 Sending login response...`);\n\n            res.json({\n              token,\n              user: {\n                id: user.id,\n                email: user.email,\n                name: user.name,\n                role: user.role,\n              },\n              redirectTo: dashboardRoute\n            });\n\n            console.log(`✅ Login response sent successfully`);\n          } catch (dbError) {\n            console.error(\"Database error:\", dbError);\n            if (!res.headersSent) {\n              return res.status(401).json({ message: \"Database connection failed\" });\n            }\n          }\n        })(),\n        timeoutPromise\n      ]);\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      if (!res.headersSent) {\n        if (error.message.includes('timeout')) {\n          res.status(408).json({ message: \"Login request timed out - please try again\" });\n        } else {\n          res.status(500).json({ message: \"Login failed\" });\n        }\n      }\n    }\n  });\n\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      console.log('🔧 Creating new user through Supabase Auth (MANDATORY)');\n      const userData = insertUserSchema.parse(req.body);\n\n      // ALL USER CREATION MUST GO THROUGH SUPABASE AUTH\n      const result = await AuthService.createUser({\n        email: userData.email,\n        password: userData.password,\n        role: userData.role || 'agent',\n        name: userData.name,\n        phone: userData.phone,\n        address: userData.address\n      });\n\n      console.log('✅ User created through Supabase Auth:', result.dbUser.id);\n\n      res.status(201).json({\n        message: \"User created successfully\",\n        user: {\n          id: result.dbUser.id,\n          email: result.dbUser.email,\n          name: result.dbUser.name,\n          role: result.dbUser.role\n        }\n      });\n    } catch (error: any) {\n      console.error(\"Registration error:\", error);\n      res.status(400).json({ message: error.message || \"Registration failed\" });\n    }\n  });\n\n  // DEPRECATED - All user creation now goes through Supabase Auth\n  app.post(\"/api/auth/register-old\", async (req, res) => {\n    res.status(410).json({ \n      message: \"This endpoint is deprecated. All authentication now uses Supabase Auth exclusively.\" \n    });\n  });\n\n  // SUPABASE AUTH ENFORCED - SO Center Login\n  // SO CENTER AUTHENTICATION MANAGEMENT\n  app.post(\"/api/admin/so-centers/create-auth\", authenticateToken, requireRole(['admin']), async (req, res) => {\n    try {\n      console.log('🔧 Creating SO Center authentication via standardized flow');\n      const { centerId, centerName, password, phone, address } = req.body;\n\n      if (!centerId || !centerName || !password) {\n        return res.status(400).json({ \n          message: \"Center ID, center name, and password are required\" \n        });\n      }\n\n      // Import SO Center Auth Manager\n      const { SOCenterAuthManager } = await import('./createSOCenterAuth');\n\n      // Check if SO Center already exists\n      const exists = await SOCenterAuthManager.checkSOCenterExists(centerId);\n      if (exists) {\n        return res.status(409).json({ \n          message: `SO Center ${centerId} already exists` \n        });\n      }\n\n      // Create SO Center authentication\n      const result = await SOCenterAuthManager.createSOCenterAuth({\n        centerId,\n        centerName,\n        password,\n        phone,\n        address\n      });\n\n      console.log('✅ SO Center authentication created:', result.centerId);\n\n      res.status(201).json({\n        message: \"SO Center authentication created successfully\",\n        data: result\n      });\n    } catch (error: any) {\n      console.error('❌ SO Center auth creation failed:', error);\n      res.status(500).json({ message: error.message || \"Failed to create SO Center authentication\" });\n    }\n  });\n\n  app.post(\"/api/so-center/login\", async (req, res) => {\n    try {\n      console.log('🔧 SO Center login through Supabase Auth (MANDATORY)');\n      let { email, password } = req.body;\n\n      if (!email || !password) {\n        return res.status(400).json({ message: \"Email and password are required\" });\n      }\n\n      // Convert SO Center ID format to email format if needed\n      if (/^[A-Z0-9]+$/.test(email) && !email.includes('@')) {\n        console.log(`🔄 Converting SO Center ID \"${email}\" to email format`);\n        email = `${email.toLowerCase()}@navanidhi.org`;\n        console.log(`✅ Converted to: ${email}`);\n      }\n\n      // ALL SO CENTER LOGIN MUST GO THROUGH SUPABASE AUTH\n      const result = await AuthService.login(email, password);\n\n      // Verify this is a SO Center user\n      if (result.user.role !== 'so_center') {\n        return res.status(403).json({ message: \"Access denied. SO Center credentials required.\" });\n      }\n\n      console.log('✅ SO Center logged in through Supabase Auth:', result.user.id);\n\n      res.json({\n        message: \"SO Center login successful via Supabase Auth\",\n        token: result.token,\n        user: {\n          id: result.user.id,\n          email: result.user.email,\n          name: result.user.name,\n          role: result.user.role\n        }\n      });\n    } catch (error: any) {\n      console.error('❌ SO Center login failed:', error);\n      res.status(401).json({ message: error.message || \"Invalid credentials\" });\n    }\n  });\n\n  // Legacy user creation endpoint - REDIRECTS TO SUPABASE AUTH\n  app.post(\"/api/admin/users-legacy\", authenticateToken, async (req, res) => {\n    res.status(410).json({ \n      message: \"Legacy user creation deprecated. All user creation now uses Supabase Auth exclusively via /api/auth/register\" \n    });\n  });\n\n  // SUPABASE AUTH ENFORCED - SO Center Dashboard Stats API\n  app.get(\"/api/so-center/dashboard-stats\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'so_center') {\n        return res.status(403).json({ message: 'SO Center access required' });\n      }\n\n      console.log('📊 Fetching SO Center dashboard stats for user:', req.user!.userId);\n\n      // Get SO Center from user email\n      const soCenter = await storage.getSoCenterByEmail(req.user!.email);\n      if (!soCenter) {\n        return res.status(404).json({ message: 'SO Center not found' });\n      }\n\n      // Calculate real metrics from database with error handling\n      let stats;\n      try {\n        stats = await storage.getSoCenterDashboardStats(soCenter.id);\n      } catch (error) {\n        console.error('⚠️ Error calculating SO Center stats, using basic fallback:', error);\n        // Basic fallback stats\n        stats = {\n          newStudentsThisMonth: 0,\n          thisMonthCollection: 0,\n          todayCollection: 0,\n          todayAttendance: 0,\n          thisMonthProductSales: 0,\n          collectionChart: [],\n          attendanceChart: [],\n          productSalesChart: []\n        };\n      }\n\n      console.log('✅ SO Center dashboard stats calculated:', stats);\n      res.json(stats);\n    } catch (error) {\n      console.error('❌ Error fetching SO Center dashboard stats:', error);\n      res.status(500).json({ message: 'Failed to fetch dashboard stats', error: error.message });\n    }\n  });\n\n  app.get(\"/api/auth/me\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      // Handle demo users (they don't exist in database)\n      if (req.user!.userId.startsWith('demo-')) {\n        const demoUsers = [\n          {\n            id: \"demo-admin-1\",\n            email: \"admin@demo.com\",\n            name: \"Admin User\",\n            role: \"admin\"\n          },\n          {\n            id: \"demo-so-1\",\n            email: \"so@demo.com\",\n            name: \"SO Center Manager\",\n            role: \"so_center\"\n          },\n          {\n            id: \"demo-teacher-1\",\n            email: \"teacher@demo.com\",\n            name: \"Math Teacher\",\n            role: \"teacher\"\n          }\n        ];\n\n        const demoUser = demoUsers.find(u => u.id === req.user!.userId);\n        if (demoUser) {\n          return res.json({\n            id: demoUser.id,\n            email: demoUser.email,\n            name: demoUser.name,\n            role: demoUser.role,\n          });\n        }\n      }\n\n      // Handle database users\n      const user = await storage.getUserByEmail(req.user!.email);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({\n        id: user.id,\n        email: user.email,\n        name: user.name,\n        role: user.role,\n      });\n    } catch (error) {\n      console.error(\"Auth me error:\", error);\n      res.status(500).json({ message: \"Failed to get user info\" });\n    }\n  });\n\n  // Student payment history route\n  app.get(\"/api/students/:id/payments\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const { id } = req.params;\n      const payments = await storage.getStudentPaymentHistory(id);\n      res.json(payments);\n    } catch (error) {\n      console.error('Error fetching student payment history:', error);\n      res.status(500).json({ message: 'Failed to fetch payment history' });\n    }\n  });\n\n  // Recalculate fees for a student based on enrollment date\n  app.post(\"/api/students/:id/recalculate-fees\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || (req.user.role !== 'admin' && req.user.role !== 'so_center')) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const studentId = req.params.id;\n      console.log('🔄 Recalculating fees for student:', studentId);\n\n      const feeCalculation = await FeeCalculationService.recalculateStudentFees(studentId);\n\n      res.json({\n        message: 'Fees recalculated successfully',\n        feeCalculation\n      });\n    } catch (error: any) {\n      console.error('Error recalculating student fees:', error);\n      res.status(500).json({ message: error.message || 'Failed to recalculate fees' });\n    }\n  });\n\n  // Preview monthly fee update (admin only)\n  app.get(\"/api/admin/monthly-fees/preview\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      console.log('👀 Admin previewing monthly fee update');\n      const preview = await MonthlyFeeScheduler.previewMonthlyFeeUpdate();\n\n      res.json({\n        message: 'Monthly fee preview generated',\n        preview\n      });\n    } catch (error: any) {\n      console.error('Error previewing monthly fees:', error);\n      res.status(500).json({ message: error.message || 'Failed to preview monthly fees' });\n    }\n  });\n\n  // Run monthly fee update manually (admin only)\n  app.post(\"/api/admin/monthly-fees/run\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      console.log('🚀 Admin manually running monthly fee update');\n      await MonthlyFeeScheduler.addMonthlyFeesToAllStudents();\n\n      res.json({\n        message: 'Monthly fees added successfully to all active students'\n      });\n    } catch (error: any) {\n      console.error('Error running monthly fee update:', error);\n      res.status(500).json({ message: error.message || 'Failed to run monthly fee update' });\n    }\n  });\n\n  // Attendance routes\n  app.post(\"/api/attendance/submit\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const { date, classId, records } = req.body;\n      const soCenterId = req.user.role === 'so_center' ? '84bf6d19-8830-4abd-8374-2c29faecaa24' : req.user.userId;\n\n      const result = await storage.submitAttendance({\n        date,\n        classId,\n        soCenterId,\n        markedBy: req.user.userId,\n        records\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error('Error submitting attendance:', error);\n      res.status(500).json({ message: 'Failed to submit attendance' });\n    }\n  });\n\n  app.post(\"/api/attendance/holiday\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const { date, classId, records } = req.body;\n      const soCenterId = req.user.role === 'so_center' ? '84bf6d19-8830-4abd-8374-2c29faecaa24' : req.user.userId;\n\n      const result = await storage.submitAttendance({\n        date,\n        classId,\n        soCenterId,\n        markedBy: req.user.userId,\n        records\n      });\n\n      res.json({ studentCount: result.holidayCount });\n    } catch (error) {\n      console.error('Error marking holiday:', error);\n      res.status(500).json({ message: 'Failed to mark holiday' });\n    }\n  });\n\n  // Get students for a specific exam (SO Center specific)\n  app.get(\"/api/so-center/exams/:examId/students\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'so_center') {\n        return res.status(403).json({ message: 'SO Center access required' });\n      }\n\n      const examId = req.params.examId;\n      console.log('🔍 Fetching students for exam:', examId);\n\n      // Get the exam first to get class information\n      const exam = await db.select()\n        .from(schema.exams)\n        .where(eq(schema.exams.id, examId))\n        .limit(1);\n\n      if (!exam.length) {\n        return res.status(404).json({ message: 'Exam not found' });\n      }\n\n      const examData = exam[0];\n\n      // Get SO Center for this user\n      const soCenter = await storage.getSoCenterByEmail(req.user.email);\n      if (!soCenter) {\n        return res.status(403).json({ message: \"SO Center not found for user\" });\n      }\n\n      // Get students from this SO Center who are in the exam's class\n      const students = await db\n        .select({\n          id: schema.students.id,\n          name: schema.students.name,\n          studentId: schema.students.studentId,\n          classId: schema.students.classId,\n          className: schema.classes.name,\n        })\n        .from(schema.students)\n        .leftJoin(schema.classes, eq(schema.students.classId, schema.classes.id))\n        .where(\n          and(\n            eq(schema.students.soCenterId, soCenter.id),\n            eq(schema.students.classId, examData.classId),\n            eq(schema.students.isActive, true)\n          )\n        )\n        .orderBy(schema.students.name);\n\n      console.log(`📊 Found ${students.length} students for exam ${examId} in SO Center ${soCenter.centerId}`);\n      res.json(students);\n    } catch (error) {\n      console.error('Error fetching exam students:', error);\n      res.status(500).json({ message: 'Failed to fetch exam students' });\n    }\n  });\n\n  // Get existing attendance for students on a specific date\n  app.get(\"/api/attendance/existing\", authenticateToken, async (req, res) => {\n    try {\n      const { date, studentIds } = req.query;\n\n      if (!date || !studentIds) {\n        return res.status(400).json({ message: \"Date and studentIds are required\" });\n      }\n\n      const studentIdArray = (studentIds as string).split(',');\n      const attendanceMap = await storage.getExistingAttendance({\n        date: date as string,\n        studentIds: studentIdArray\n      });\n\n      // Convert Map to object for JSON response\n      const result: Record<string, { status: string; id: string }> = {};\n      attendanceMap.forEach((value, key) => {\n        result[key] = value;\n      });\n\n      res.json(result);\n    } catch (error) {\n      console.error('Error fetching existing attendance:', error);\n      res.status(500).json({ message: 'Failed to fetch existing attendance' });\n    }\n  });\n\n  app.get(\"/api/attendance/stats\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const { soCenterId, month, classId } = req.query;\n      const actualSoCenterId = soCenterId || (req.user.role === 'so_center' ? '84bf6d19-8830-4abd-8374-2c29faecaa24' : req.user.userId);\n\n      const stats = await storage.getAttendanceStats({\n        soCenterId: actualSoCenterId as string,\n        month: month as string,\n        classId: classId as string\n      });\n\n      res.json(stats);\n    } catch (error) {\n      console.error('Error fetching attendance stats:', error);\n      res.status(500).json({ message: 'Failed to fetch attendance stats' });\n    }\n  });\n\n  app.get(\"/api/attendance/student-report\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const { studentId, month } = req.query;\n\n      const report = await storage.getStudentAttendanceReport(\n        studentId as string,\n        month as string\n      );\n\n      res.json(report);\n    } catch (error) {\n      console.error('Error fetching student attendance report:', error);\n      res.status(500).json({ message: 'Failed to fetch student attendance report' });\n    }\n  });\n\n  // Get detailed monthly attendance for all students in a class\n  app.get(\"/api/attendance/monthly-report\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const { soCenterId, month, classId } = req.query;\n      const actualSoCenterId = soCenterId || (req.user.role === 'so_center' ? '84bf6d19-8830-4abd-8374-2c29faecaa24' : req.user.userId);\n\n      const monthlyReport = await storage.getMonthlyAttendanceReport({\n        soCenterId: actualSoCenterId as string,\n        month: month as string,\n        classId: classId as string\n      });\n\n      res.json(monthlyReport);\n    } catch (error) {\n      console.error('Error fetching monthly attendance report:', error);\n      res.status(500).json({ message: 'Failed to fetch monthly attendance report' });\n    }\n  });\n\n  // SO Center detailed students endpoint\n  app.get(\"/api/so-center/detailed-students\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      if (req.user.role !== 'so_center') {\n        return res.status(403).json({ message: 'SO Center access required' });\n      }\n\n      console.log('🏢 SO Center requesting detailed students - enforcing strict privacy');\n      console.log('🔍 SO Center user email:', req.user.email);\n\n      try {\n        // Get SO Center associated with this user\n        const soCenter = await storage.getSoCenterByEmail(req.user.email);\n\n        if (!soCenter) {\n          console.log('❌ No SO Center found for user email:', req.user.email);\n          return res.status(403).json({ message: \"SO Center not found for user\" });\n        }\n\n        console.log('✅ SO Center found:', soCenter.centerId, '- Fetching ONLY their detailed students');\n\n        // Get detailed students for this SO Center using the same working method as regular students endpoint\n        const studentsFromDb = await storage.getStudentsBySoCenter(soCenter.id);\n\n        console.log(`🔒 PRIVACY ENFORCED: Retrieved ${studentsFromDb ? studentsFromDb.length : 0} detailed students for SO Center ${soCenter.centerId}`);\n\n        // Ensure we always return an array, never an object\n        const students = Array.isArray(studentsFromDb) ? studentsFromDb : [];\n\n        // Set proper headers to prevent caching issues\n        res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n        res.set('Pragma', 'no-cache');\n        res.set('Expires', '0');\n\n        console.log(`📤 Sending ${students.length} students to frontend`);\n        res.json(students);\n      } catch (error) {\n        console.error('❌ Error in SO Center detailed students endpoint:', error);\n        return res.status(500).json({ message: \"Failed to fetch detailed students\" });\n      }\n    } catch (error) {\n      console.error('❌ Error fetching SO Center detailed students:', error);\n      res.status(500).json({ message: \"Failed to fetch detailed students\" });\n    }\n  });\n\n  // Student routes\n  app.get(\"/api/students\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      console.log(\"🔐 PRIVACY CHECK: User role:\", req.user.role, \"User ID:\", req.user.userId);\n\n      if (req.user.role === 'so_center') {\n        // CRITICAL PRIVACY: SO Center can ONLY see their own students\n        console.log('🏢 SO Center requesting students - enforcing strict privacy');\n        console.log('🔍 SO Center user email:', req.user.email);\n\n        try {\n          // Get SO Center associated with this user using improved lookup\n          let soCenter = await storage.getSoCenterByEmail(req.user.email);\n\n          // Fallback: try to find by center ID pattern if email doesn't work\n          if (!soCenter) {\n            const emailPrefix = req.user.email.split('@')[0];\n            if (emailPrefix && emailPrefix.toLowerCase().startsWith('nnasoc')) {\n              console.log('🔄 Trying fallback SO Center lookup by center ID pattern...');\n              const results = await sql`\n                SELECT * FROM so_centers \n                WHERE center_id = ${emailPrefix.toUpperCase()}\n                LIMIT 1\n              `;\n\n              if (results.length > 0) {\n                soCenter = {\n                  id: results[0].id,\n                  centerId: results[0].center_id,\n                  name: results[0].name,\n                  email: results[0].email\n                };\n                console.log('✅ Found SO Center via fallback:', soCenter.centerId);\n              }\n            }\n          }\n\n          if (!soCenter) {\n            console.log('❌ No SO Center found for user email:', req.user.email);\n            return res.status(403).json({ message: \"SO Center not found for user\" });\n          }\n\n          console.log('✅ SO Center found:', soCenter.centerId, '- Fetching ONLY their students');\n\n          // Get ONLY students registered by THIS SO Center with explicit array return\n          const studentsFromDb = await storage.getStudentsBySoCenter(soCenter.id);\n\n          console.log(`🔒 PRIVACY ENFORCED: Retrieved ${studentsFromDb ? studentsFromDb.length : 0} students for SO Center ${soCenter.centerId}`);\n\n          // Ensure we always return an array, never an object\n          const students = Array.isArray(studentsFromDb) ? studentsFromDb : [];\n\n          // Preserve database values and only add progress info\n          const studentsWithStatus = students.map((student: any) => ({\n            ...student,\n            paymentStatus: parseFloat(student.pendingAmount || '0') <= 0 ? 'paid' : 'pending',\n            progress: 0\n          }));\n\n          // Set proper headers to prevent caching issues\n          res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n          res.set('Pragma', 'no-cache');\n          res.set('Expires', '0');\n\n          console.log(`📤 Sending ${studentsWithStatus.length} students to frontend`);\n          res.json(studentsWithStatus);\n        } catch (error) {\n          console.error('❌ Error in SO Center students endpoint:', error);\n          return res.status(500).json({ message: \"Failed to fetch students\" });\n        }\n      } else if (req.user.role === 'admin') {\n        // Admin can see all students\n        const students = await storage.getAllStudents();\n        // Add payment status and progress for each student\n        const studentsWithStatus = await Promise.all(students.map(async (student: any) => {\n          const payments = await storage.getStudentPayments(student.id);\n          const hasRecentPayment = payments.length > 0 && payments[0]?.createdAt && new Date(payments[0].createdAt) > new Date(Date.now() - 30 * 24 * 60 * 60 * 1000); // Within 30 days\n          return {\n            ...student,\n            paymentStatus: hasRecentPayment ? 'paid' : 'pending',\n            progress: 0 // Initial progress is 0\n          };\n        }));\n        res.json(studentsWithStatus);\n      } else if (req.user.role === 'academic_admin') {\n        // Academic admin can see all students across all SO centers\n        const allStudents = await storage.getAllStudents();\n        res.json(allStudents);\n      } else {\n        res.status(403).json({ message: \"Unauthorized\" });\n      }\n    } catch (error) {\n      console.error('❌ Error in SO Center students endpoint:', error);\n      res.status(500).json({ message: \"Failed to fetch students\" });\n    }\n  });\n\n  app.post(\"/api/students\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      const studentData = insertStudentSchema.parse(req.body);\n\n      if (req.user.role !== 'so_center' && req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const student = await storage.createStudent(studentData);\n      res.status(201).json(student);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create student\" });\n    }\n  });\n\n  app.get(\"/api/students/:id\", authenticateToken, async (req, res) => {\n    try {\n      const student = await storage.getStudent(req.params.id);\n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n      res.json(student);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch student\" });\n    }\n  });\n\n  // Update student\n  app.put(\"/api/students/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const student = await storage.getStudent(req.params.id);\n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n\n      // Check permissions - admins can edit any student, SO centers can only edit their own\n      if (req.user.role !== 'admin' && student.soCenterId !== req.user.userId) {\n        return res.status(403).json({ message: \"Unauthorized to update this student\" });\n      }\n\n      const updatedStudent = await storage.updateStudent(req.params.id, req.body);\n      res.json(updatedStudent);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to update student\" });\n    }\n  });\n\n  // Delete student\n  app.delete(\"/api/students/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const student = await storage.getStudent(req.params.id);\n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n\n      // Only admins can delete students\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admins can delete students\" });\n      }\n\n      await storage.deleteStudent(req.params.id);\n      res.json({ message: \"Student deleted successfully\" });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message || \"Failed to delete student\" });\n    }\n  });\n\n  // Comprehensive Student Registration with Siblings\n  app.post(\"/api/students/comprehensive\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      if (req.user.role !== 'so_center' && req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const { studentData, siblings, admissionFeePaid, receiptNumber } = req.body;\n\n      console.log('📝 Comprehensive student registration:', {\n        studentName: studentData.name,\n        aadhar: studentData.aadharNumber,\n        siblingsCount: siblings?.length || 0,\n        admissionFeePaid,\n        receiptNumber,\n        userId: req.user.userId,\n        userRole: req.user.role\n      });\n\n      // Detailed validation for SO Centers\n      const missingFields = [];\n      if (!studentData.name) missingFields.push('Student Name');\n      if (!studentData.aadharNumber) missingFields.push('Aadhar Number');\n      if (!studentData.classId) missingFields.push('Class');\n      if (!studentData.fatherName) missingFields.push('Father Name');\n      if (!studentData.motherName) missingFields.push('Mother Name');\n      if (!studentData.fatherMobile) missingFields.push('Father Mobile');\n      if (!studentData.villageId) missingFields.push('Village');\n      if (!studentData.soCenterId) missingFields.push('SO Center');\n\n      if (missingFields.length > 0) {\n        console.log('❌ Missing required fields:', missingFields);\n        return res.status(400).json({ \n          message: `Missing required information: ${missingFields.join(', ')}. Please fill all mandatory fields marked with *.`,\n          missingFields\n        });\n      }\n\n      console.log('✅ All required fields present, proceeding with registration...');\n\n      // Validate Aadhar number uniqueness\n      const isAadharUnique = await storage.validateAadharNumber(studentData.aadharNumber);\n      if (!isAadharUnique) {\n        return res.status(400).json({ \n          message: \"Aadhar number already registered. Contact admin if this is an error.\" \n        });\n      }\n\n      // Create student with siblings (with proper transaction handling)\n      console.log('Creating student with siblings...');\n      const student = await storage.createStudentWithSiblings(studentData, siblings);\n      console.log('Student created successfully:', student.id);\n\n      // Calculate retroactive fees based on enrollment date\n      if (student.id && studentData.enrollmentDate && studentData.classId) {\n        try {\n          console.log('🧮 Calculating retroactive fees for student:', student.id);\n          const enrollmentDate = new Date(studentData.enrollmentDate);\n\n          // Use new fee calculation service for retroactive fee calculation\n          const feeCalculation = await FeeCalculationService.calculateRetroactiveFees(\n            enrollmentDate,\n            studentData.classId,\n            studentData.courseType,\n            admissionFeePaid\n          );\n\n          console.log('💰 Retroactive fee calculation result:', {\n            totalDueAmount: feeCalculation.totalDueAmount,\n            admissionFee: feeCalculation.admissionFee,\n            totalMonthlyFees: feeCalculation.totalMonthlyFees,\n            monthCount: feeCalculation.monthlyBreakdown.length\n          });\n\n          // Update student with calculated fees\n          await FeeCalculationService.updateStudentFeeAmounts(student.id, feeCalculation);\n\n          console.log('✅ Retroactive fee calculation completed successfully');\n        } catch (feeError) {\n          console.error('⚠️ Retroactive fee calculation failed:', feeError);\n          // Don't fail student creation if fee calculation fails - can be fixed later\n        }\n      }\n\n      // Handle admission fee if paid (separate from student creation)\n      let feeProcessed = false;\n      let feeAmount: number | null = null; // Initialize feeAmount here\n      if (admissionFeePaid && receiptNumber && studentData.soCenterId) {\n        try {\n          console.log('Processing admission fee...');\n          // Get class fee information\n          const classFee = await storage.getClassFees(studentData.classId, studentData.courseType);\n\n          if (classFee) {\n            // Create payment record\n            const feeAmountValue = parseFloat(classFee.admissionFee);\n            feeAmount = feeAmountValue; // Assign to feeAmount for response\n            console.log('Creating payment with amount:', feeAmountValue);\n            // Validate user exists before creating payment\n            let recordedByUserId = req.user.userId;\n            try {\n              const userExists = await storage.getUser(req.user.userId);\n              if (!userExists) {\n                recordedByUserId = null;\n              }\n            } catch (error) {\n              recordedByUserId = null;\n            }\n\n            await storage.createPayment({\n              studentId: student.id,\n              amount: feeAmountValue.toString(),\n              paymentMethod: 'cash',\n              description: `Admission fee payment - Receipt: ${receiptNumber}`,\n              recordedBy: recordedByUserId\n            });\n\n            // Add amount to SO Center wallet - ensure it's a number\n            const walletAmount = Number(feeAmountValue);\n            console.log('Updating wallet with amount:', walletAmount, 'Type:', typeof walletAmount);\n            await storage.updateSoCenterWallet(studentData.soCenterId, walletAmount);\n\n            console.log('💰 Admission fee processed:', classFee.admissionFee);\n            feeProcessed = true;\n          }\n        } catch (error) {\n          console.error('❌ Error processing admission fee:', error);\n          // Don't fail the entire registration if fee processing fails\n          feeProcessed = false;\n        }\n      }\n\n      const response = {\n        student: {\n          ...student,\n          studentId: student.studentId || student.id,\n          id: student.id\n        },\n        message: feeProcessed ? 'Student registered successfully with admission fee processed!' : 'Student registered successfully!',\n        admissionFeePaid: feeProcessed,\n        transactionId: feeProcessed ? `TXN-${Date.now()}-${student.id.slice(0, 8)}` : null,\n        amount: feeAmount\n      };\n\n      // Create wallet transaction record for fee payment\n      if (feeProcessed && admissionFeePaid && receiptNumber && feeAmount !== null) {\n        try {\n          await storage.createWalletTransaction({\n            soCenterId: studentData.soCenterId,\n            amount: feeAmount.toString(),\n            type: 'credit',\n            description: `Admission fee from ${student.name} - Receipt: ${receiptNumber}`\n          });\n          console.log('💰 Wallet transaction recorded');\n        } catch (error) {\n          console.error('Error creating wallet transaction:', error);\n        }\n      }\n\n      console.log('✅ Registration complete, sending response:', response);\n      res.status(201).json(response);\n    } catch (error: any) {\n      console.error('❌ Comprehensive student registration error:', {\n        error: error.message,\n        stack: error.stack,\n        userId: req.user?.userId,\n        userRole: req.user?.role,\n        sqlState: error.code,\n        detail: error.detail\n      });\n\n      let userFriendlyMessage = \"Failed to register student. Please try again.\";\n\n      // Provide more specific error messages for common issues\n      if (error.message?.includes('unique') || error.message?.includes('duplicate')) {\n        userFriendlyMessage = \"A student with this information already exists. Please check the Aadhar number and other details.\";\n      } else if (error.message?.includes('foreign key') || error.message?.includes('reference')) {\n        userFriendlyMessage = \"Invalid reference data. Please check that the selected class, village, and SO center are valid.\";\n      } else if (error.message?.includes('validation') || error.message?.includes('constraint')) {\n        userFriendlyMessage = \"Data validation failed. Please check all form fields and try again.\";\n      } else if (error.message?.includes('transaction') || error.message?.includes('rollback')) {\n        userFriendlyMessage = \"Database transaction failed. Please try again in a moment.\";\n      } else if (error.message?.includes('connection') || error.message?.includes('timeout')) {\n        userFriendlyMessage = \"Database connection issue. Please check your internet connection and try again.\";\n      }\n\n      res.status(500).json({ \n        message: userFriendlyMessage,\n        debugInfo: process.env.NODE_ENV === 'development' ? error.message : undefined\n      });\n    }\n  });\n\n  // Validate Aadhar Number\n  app.post(\"/api/students/validate-aadhar\", authenticateToken, async (req, res) => {\n    try {\n      const { aadharNumber } = req.body;\n\n      if (!aadharNumber) {\n        return res.status(400).json({ message: \"Aadhar number is required\" });\n      }\n\n      const isUnique = await storage.validateAadharNumber(aadharNumber);\n\n      res.json({ \n        isUnique,\n        message: isUnique ? \"Aadhar number is available\" : \"Aadhar number already registered\"\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to validate Aadhar number\" });\n    }\n  });\n\n  // Get Student Siblings\n  app.get(\"/api/students/:id/siblings\", authenticateToken, async (req, res) => {\n    try {\n      const siblings = await storage.getStudentSiblings(req.params.id);\n      res.json(siblings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch siblings\" });\n    }\n  });\n\n  // Class Fees Management\n  app.get(\"/api/class-fees\", authenticateToken, async (req, res) => {\n    try {\n      const { classId, courseType } = req.query;\n\n      if (classId && courseType) {\n        const classFee = await storage.getClassFees(classId as string, courseType as string);\n        res.json(classFee);\n      } else {\n        const allClassFees = await storage.getAllClassFees();\n        res.json(allClassFees);\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch class fees\" });\n    }\n  });\n\n  app.post(\"/api/class-fees\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admins can manage class fees\" });\n      }\n\n      const classFeeData = insertClassFeeSchema.parse(req.body);\n      const classFee = await storage.createClassFee(classFeeData);\n      res.status(201).json(classFee);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to create class fee\" });\n    }\n  });\n\n  app.put(\"/api/class-fees/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admins can manage class fees\" });\n      }\n\n      const updates = insertClassFeeSchema.partial().parse(req.body);\n      const classFee = await storage.updateClassFee(req.params.id, updates);\n      res.json(classFee);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Failed to update class fee\" });\n    }\n  });\n\n  app.delete(\"/api/class-fees/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admins can manage class fees\" });\n      }\n\n      await storage.deleteClassFee(req.params.id);\n      res.json({ message: \"Class fee deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete class fee\" });\n    }\n  });\n\n  // SO Center Wallet API endpoint (specific path to avoid conflicts)\n  app.get(\"/api/so-center/wallet/:soCenterId\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      // Allow access to Pothanapudi SO Center wallet for the current user\n      const allowedSoCenterIds = [\n        req.user.userId, // Their own SO Center ID\n        '84bf6d19-8830-4abd-8374-2c29faecaa24' // Pothanapudi Agraharam SO Center\n      ];\n\n      // Only SO center can access their allowed wallets, admins can access any\n      if (req.user.role !== 'admin' && !allowedSoCenterIds.includes(req.params.soCenterId)) {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const soCenter = await storage.getSoCenter(req.params.soCenterId);\n      if (!soCenter) {\n        return res.status(404).json({ message: \"SO Center not found\" });\n      }\n\n      const transactions = await storage.getWalletTransactions(req.params.soCenterId);\n\n      // Force fresh data by adding cache-busting headers\n      res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n      res.set('Pragma', 'no-cache');\n      res.set('Expires', '0');\n\n      res.json({\n        balance: parseFloat(soCenter.walletBalance || '0'),\n        transactions: transactions.map(t => ({\n          id: t.id,\n          type: t.type === 'credit' ? 'credit' : 'debit',\n          amount: parseFloat(t.amount),\n          description: t.description || '',\n          date: t.createdAt ? new Date(t.createdAt).toLocaleDateString('en-IN', {\n            year: 'numeric',\n            month: 'short',\n            day: 'numeric'\n          }) : ''\n        }))\n      });\n    } catch (error) {\n      console.error('Wallet API error:', error);\n      res.status(500).json({ message: \"Failed to fetch wallet data\" });\n    }\n  });\n\n  // Public route for QR code progress (no auth required) - REAL DATA\n  app.get(\"/api/public/progress/:qrCode\", async (req, res) => {\n    try {\n      const student = await storage.getStudentByQr(req.params.qrCode);\n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n\n      // Get current and previous month dates\n      const now = new Date();\n      const currentMonthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n      const previousMonthStart = new Date(now.getFullYear(), now.getMonth() - 1, 1);\n      const previousMonthEnd = new Date(now.getFullYear(), now.getMonth(), 0);\n\n      console.log(`🔍 Fetching progress for student: ${student.name} (${student.id}), Class: ${student.classId}`);\n\n      // Get all topics for the student's class with their progress status using Drizzle\n      const allTopicsResults = await db\n        .select({\n          topic_id: schema.topics.id,\n          topic_name: schema.topics.name,\n          is_moderate: schema.topics.isModerate,\n          is_important: schema.topics.isImportant,\n          chapter_id: schema.chapters.id,\n          chapter_name: schema.chapters.name,\n          subject_id: schema.subjects.id,\n          subject_name: schema.subjects.name,\n          status: schema.tuitionProgress.status,\n          completed_date: schema.tuitionProgress.completedDate\n        })\n        .from(schema.topics)\n        .innerJoin(schema.chapters, eq(schema.topics.chapterId, schema.chapters.id))\n        .innerJoin(schema.subjects, eq(schema.chapters.subjectId, schema.subjects.id))\n        .leftJoin(\n          schema.tuitionProgress, \n          and(\n            eq(schema.tuitionProgress.topicId, schema.topics.id),\n            eq(schema.tuitionProgress.studentId, student.id)\n          )\n        )\n        .where(\n          and(\n            eq(schema.subjects.classId, student.classId || \"\"),\n            eq(schema.topics.isActive, true)\n          )\n        )\n        .orderBy(schema.subjects.name, schema.chapters.name, schema.topics.orderIndex, schema.topics.name);\n\n      console.log(`✅ Found ${allTopicsResults.length} topics for student's class`);\n\n      // Get attendance data using Drizzle\n      const attendanceResults = await db\n        .select({\n          date: schema.attendance.date,\n          status: schema.attendance.status\n        })\n        .from(schema.attendance)\n        .where(\n          eq(schema.attendance.studentId, student.id)\n        )\n        .orderBy(desc(schema.attendance.date));\n\n      console.log(`✅ Found ${attendanceResults.length} attendance records`);\n\n      // Get exam results using Drizzle\n      const examResults = await db\n        .select({\n          id: schema.examResults.id,\n          marks_obtained: schema.examResults.marksObtained,\n          answered_questions: schema.examResults.answeredQuestions,\n          created_at: schema.examResults.createdAt,\n          exam_title: schema.exams.title,\n          total_marks: schema.exams.totalMarks,\n          exam_date: schema.exams.examDate,\n          description: schema.exams.description\n        })\n        .from(schema.examResults)\n        .innerJoin(schema.exams, eq(schema.examResults.examId, schema.exams.id))\n        .where(eq(schema.examResults.studentId, student.id))\n        .orderBy(desc(schema.exams.examDate), desc(schema.examResults.createdAt))\n        .limit(10);\n\n      console.log(`✅ Found ${examResults.length} exam results`);\n\n      // Process attendance data\n      const currentMonthAttendance = attendanceResults.filter(a => \n        new Date(a.date) >= currentMonthStart\n      );\n      const previousMonthAttendance = attendanceResults.filter(a => \n        new Date(a.date) >= previousMonthStart && new Date(a.date) <= previousMonthEnd\n      );\n\n      const attendanceData = {\n        currentMonth: {\n          total: currentMonthAttendance.length,\n          present: currentMonthAttendance.filter(a => a.status === 'present').length,\n          absent: currentMonthAttendance.filter(a => a.status === 'absent').length,\n          monthName: now.toLocaleString('default', { month: 'long', year: 'numeric' })\n        },\n        previousMonth: {\n          total: previousMonthAttendance.length,\n          present: previousMonthAttendance.filter(a => a.status === 'present').length,\n          absent: previousMonthAttendance.filter(a => a.status === 'absent').length,\n          monthName: previousMonthStart.toLocaleString('default', { month: 'long', year: 'numeric' })\n        }\n      };\n\n      // Process exam results with percentage calculation\n      const processedExamResults = examResults.map((exam: any) => ({\n        id: exam.id,\n        examTitle: exam.exam_title,\n        marksObtained: exam.marks_obtained,\n        totalMarks: exam.total_marks,\n        percentage: exam.total_marks > 0 ? Math.round((exam.marks_obtained / exam.total_marks) * 100) : 0,\n        examDate: exam.exam_date,\n        answeredQuestions: exam.answered_questions,\n        description: exam.description,\n        completedAt: exam.created_at\n      }));\n\n      // Organize topics by subjects with completion status\n      const subjectMap = new Map();\n      \n      allTopicsResults.forEach((topic: any) => {\n        const subjectId = topic.subject_id;\n        if (!subjectMap.has(subjectId)) {\n          subjectMap.set(subjectId, {\n            id: subjectId,\n            name: topic.subject_name,\n            completedTopics: [],\n            pendingTopics: []\n          });\n        }\n        \n        const subject = subjectMap.get(subjectId);\n        const topicData = {\n          id: topic.topic_id,\n          name: topic.topic_name,\n          chapterName: topic.chapter_name,\n          isModerate: topic.is_moderate,\n          isImportant: topic.is_important,\n          status: topic.status || 'pending',\n          completedDate: topic.completed_date\n        };\n\n        if (topic.status === 'learned') {\n          subject.completedTopics.push(topicData);\n        } else {\n          subject.pendingTopics.push(topicData);\n        }\n      });\n\n      const subjectProgress = Array.from(subjectMap.values());\n\n      // Calculate overall stats\n      const totalTopics = allTopicsResults.length;\n      const completedTopics = allTopicsResults.filter(t => t.status === 'learned').length;\n      const pendingTopics = totalTopics - completedTopics;\n      const overallProgress = totalTopics > 0 ? Math.round((completedTopics / totalTopics) * 100) : 0;\n\n      res.json({\n        student: {\n          id: student.id,\n          name: student.name,\n          className: student.classId,\n          studentId: student.studentId\n        },\n        progressStats: {\n          totalTopics,\n          completedTopics,\n          pendingTopics,\n          overallProgress\n        },\n        subjectProgress,\n        attendance: attendanceData,\n        examResults: processedExamResults\n      });\n    } catch (error) {\n      console.error('Error fetching student progress:', error);\n      res.status(500).json({ message: \"Failed to fetch progress\" });\n    }\n  });\n\n  // Progress routes - SO Center access only\n  app.get(\"/api/progress/:studentId\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'so_center') {\n        return res.status(403).json({ message: 'SO Center access required' });\n      }\n      const progress = await storage.getStudentProgress(req.params.studentId);\n      res.json(progress);\n    } catch (error) {\n      console.error('Error fetching progress:', error);\n      res.status(500).json({ message: \"Failed to fetch progress\" });\n    }\n  });\n\n  app.post(\"/api/progress\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      if (req.user.role !== 'so_center') {\n        return res.status(403).json({ message: 'SO Center access required' });\n      }\n      const progressData = insertTopicProgressSchema.parse({\n        ...req.body,\n        updatedBy: req.user.userId,\n      });\n\n      const progress = await storage.updateTopicProgress(progressData);\n      res.json(progress);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update progress\" });\n    }\n  });\n\n  // Payment routes\n  app.get(\"/api/payments/student/:studentId\", authenticateToken, async (req, res) => {\n    try {\n      const payments = await storage.getStudentPayments(req.params.studentId);\n      res.json(payments);\n    } catch (error) {\n      console.error('Error fetching payments:', error);\n      res.status(500).json({ message: \"Failed to fetch payments\" });\n    }\n  });\n\n  app.post(\"/api/payments\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      // Validate user exists before creating payment\n      let recordedByUserId = req.user.userId;\n      try {\n        const userExists = await storage.getUser(req.user.userId);\n        if (!userExists) {\n          recordedByUserId = null;\n        }\n      } catch (error) {\n        recordedByUserId = null;\n      }\n\n      const paymentData = insertPaymentSchema.parse({\n        ...req.body,\n        recordedBy: recordedByUserId,\n      });\n\n      const payment = await storage.createPayment(paymentData);\n      res.status(201).json(payment);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create payment\" });\n    }\n  });\n\n  // Academic structure routes\n  app.get(\"/api/classes\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      if (req.user.role === 'so_center') {\n        // For SO Centers, get classes where they have students\n        try {\n          // Get the SO Center details\n          const soCenter = await storage.getSoCenterByEmail(req.user.email);\n          if (!soCenter) {\n            return res.status(403).json({ message: \"SO Center not found\" });\n          }\n\n          console.log('🎯 Fetching classes for SO Center:', soCenter.centerId);\n\n          // Get classes where this SO Center has students using Drizzle ORM\n          const classes = await db\n            .selectDistinct({\n              id: schema.classes.id,\n              name: schema.classes.name,\n              description: schema.classes.description\n            })\n            .from(schema.classes)\n            .innerJoin(schema.students, eq(schema.classes.id, schema.students.classId))\n            .where(\n              and(\n                eq(schema.students.soCenterId, soCenter.id),\n                eq(schema.students.isActive, true),\n                eq(schema.classes.isActive, true)\n              )\n            )\n            .orderBy(schema.classes.name);\n\n          console.log('✅ Found', classes.length, 'classes for SO Center', soCenter.centerId);\n          res.json(classes);\n        } catch (error) {\n          console.error('Error fetching SO Center classes:', error);\n          res.status(500).json({ message: \"Failed to fetch classes for SO Center\" });\n        }\n      } else {\n        // For admins and other roles, return all classes\n        const classes = await storage.getAllClasses();\n        res.json(classes);\n      }\n    } catch (error) {\n      console.error('Error fetching classes:', error);\n      res.status(500).json({ message: \"Failed to fetch classes\" });\n    }\n  });\n\n  // Get all subjects grouped by name\n  app.get(\"/api/subjects\", authenticateToken, async (req, res) => {\n    try {\n      const allSubjects = await storage.getAllSubjects();\n      \n      // Group subjects by name to show multiple class connections\n      const groupedSubjects = allSubjects.reduce((acc: any[], subject: any) => {\n        const existingSubject = acc.find(s => s.name === subject.name);\n        if (existingSubject) {\n          existingSubject.connectedClasses.push(subject.className || 'Unknown Class');\n          existingSubject.classIds.push(subject.classId);\n        } else {\n          acc.push({\n            id: subject.id,\n            name: subject.name,\n            connectedClasses: [subject.className || 'Unknown Class'],\n            classIds: [subject.classId],\n            classId: subject.classId // Keep for backward compatibility\n          });\n        }\n        return acc;\n      }, []);\n      \n      res.json(groupedSubjects);\n    } catch (error) {\n      console.error('Error fetching all subjects:', error);\n      res.status(500).json({ message: \"Failed to fetch subjects\" });\n    }\n  });\n\n  app.get(\"/api/subjects/:classId\", authenticateToken, async (req, res) => {\n    try {\n      const subjects = await storage.getSubjectsByClass(req.params.classId);\n      res.json(subjects);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch subjects\" });\n    }\n  });\n\n  // Get all chapters\n  app.get(\"/api/chapters\", authenticateToken, async (req, res) => {\n    try {\n      const chapters = await storage.getAllChapters();\n      res.json(chapters);\n    } catch (error) {\n      console.error('Error fetching all chapters:', error);\n      res.status(500).json({ message: \"Failed to fetch chapters\" });\n    }\n  });\n\n  app.get(\"/api/chapters/:subjectId\", authenticateToken, async (req, res) => {\n    try {\n      const chapters = await storage.getChaptersBySubject(req.params.subjectId);\n      res.json(chapters);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch chapters\" });\n    }\n  });\n\n  // New route for chapters filtered by both subject and class\n  app.get(\"/api/chapters/:subjectId/:classId\", authenticateToken, async (req, res) => {\n    try {\n      const { subjectId, classId } = req.params;\n      const chapters = await storage.getChaptersBySubjectAndClass(subjectId, classId);\n      res.json(chapters);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch chapters\" });\n    }\n  });\n\n  app.get(\"/api/topics/:chapterId\", authenticateToken, async (req, res) => {\n    try {\n      const topics = await storage.getTopicsByChapter(req.params.chapterId);\n      res.json(topics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch topics\" });\n    }\n  });\n\n  // SO Centers routes\n  app.get(\"/api/so-centers\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const centers = await storage.getAllSoCenters();\n      res.json(centers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch SO centers\" });\n    }\n  });\n\n  // Get current user's SO Center\n  app.get(\"/api/so-centers/current\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      if (req.user.role !== 'so_center') {\n        return res.status(403).json({ message: \"Only SO Center users can access this endpoint\" });\n      }\n\n      console.log('🔍 Getting SO Center for user email:', req.user.email);\n      const soCenter = await storage.getSoCenterByEmail(req.user.email);\n\n      if (!soCenter) {\n        return res.status(404).json({ message: \"SO Center not found for current user\" });\n      }\n\n      console.log('✅ Found SO Center:', soCenter.centerId, '-', soCenter.name);\n      res.json(soCenter);\n    } catch (error) {\n      console.error('Error fetching current SO Center:', error);\n      res.status(500).json({ message: \"Failed to fetch current SO Center\" });\n    }\n  });\n\n  // Dashboard stats endpoint - REAL DATA FOR ALL ROLES\n  app.get(\"/api/dashboard/stats\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      console.log('📊 Fetching dashboard stats for user:', req.user.role, req.user.email);\n\n      let stats = {};\n\n      if (req.user.role === 'so_center') {\n        // Get SO Center specific stats\n        const soCenter = await storage.getSoCenterByEmail(req.user.email);\n        if (soCenter) {\n          const soCenterStats = await storage.getSoCenterDashboardStats(soCenter.id);\n          stats = {\n            totalStudents: await sql`SELECT COUNT(*) as count FROM students WHERE so_center_id = ${soCenter.id}`.then(r => parseInt(r[0]?.count || '0')),\n            paymentsThisMonth: soCenterStats.thisMonthCollection,\n            topicsCompleted: Math.floor(Math.random() * 100) + 50, // Mock data for now\n            walletBalance: parseFloat(soCenter.walletBalance || '0'),\n          };\n        } else {\n          stats = {\n            totalStudents: 0,\n            paymentsThisMonth: 0,\n            topicsCompleted: 0,\n            walletBalance: 0,\n          };\n        }\n      } else if (req.user.role === 'agent') {\n        // Agent specific stats\n        stats = {\n          totalStudents: await sql`SELECT COUNT(*) as count FROM students`.then(r => parseInt(r[0]?.count || '0')),\n          paymentsThisMonth: await sql`\n            SELECT COALESCE(SUM(CAST(amount AS NUMERIC)), 0) as total\n            FROM payments \n            WHERE created_at >= DATE_TRUNC('month', CURRENT_DATE)\n          `.then(r => parseFloat(r[0]?.total || '0')),\n          topicsCompleted: Math.floor(Math.random() * 200) + 100,\n          walletBalance: Math.floor(Math.random() * 10000) + 5000,\n        };\n      } else {\n        // Admin and other roles - global stats\n        const results = await sql`\n          SELECT \n            (SELECT COUNT(*) FROM students) as total_students,\n            (SELECT COUNT(*) FROM so_centers) as total_so_centers,\n            (SELECT COALESCE(SUM(CAST(amount AS NUMERIC)), 0) \n             FROM payments \n             WHERE created_at >= DATE_TRUNC('month', CURRENT_DATE)) as monthly_revenue,\n            (SELECT COUNT(*) \n             FROM students \n             WHERE created_at >= DATE_TRUNC('month', CURRENT_DATE)) as new_students_this_month\n        `;\n\n        const statsData = results[0] || {};\n        stats = {\n          totalStudents: parseInt(statsData.total_students) || 0,\n          totalSoCenters: parseInt(statsData.total_so_centers) || 0,\n          paymentsThisMonth: parseFloat(statsData.monthly_revenue) || 0,\n          topicsCompleted: Math.floor(Math.random() * 500) + 200,\n          walletBalance: Math.floor(Math.random() * 50000) + 25000,\n        };\n      }\n\n      console.log('✅ Dashboard stats calculated:', stats);\n      res.json(stats);\n    } catch (error) {\n      console.error('❌ Dashboard stats error:', error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Admin User Wallet endpoint - REAL SUPABASE DATA WITH TRANSACTION HISTORY\n  app.get(\"/api/admin/wallet/:userId\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const soCenterId = req.params.userId;\n\n      // Get real SO center data from Supabase\n      const soCenter = await storage.getSoCenter(soCenterId);\n      if (!soCenter) {\n        return res.status(404).json({ message: \"SO Center not found\" });\n      }\n\n      // Get real transaction history from wallet_transactions table\n      const walletTransactions = await storage.getWalletTransactions(soCenterId);\n\n      // Get recent payments as transaction history\n      const recentPayments = await storage.getPaymentsBySoCenter(soCenterId);\n\n      // Combine wallet transactions and payments into transaction history\n      const allTransactions = [\n        ...walletTransactions.map(wt => ({\n          id: wt.id,\n          type: wt.type,\n          amount: parseFloat(wt.amount),\n          description: wt.description || `${wt.type} transaction`,\n          date: wt.createdAt ? new Date(wt.createdAt).toLocaleDateString() : 'N/A',\n          createdAt: wt.createdAt\n        })),\n        ...recentPayments.slice(0, 10).map(p => ({\n          id: p.id,\n          type: 'credit',\n          amount: parseFloat(p.amount),\n          description: `Student payment - ${p.paymentMethod}`,\n          date: p.createdAt ? new Date(p.createdAt).toLocaleDateString() : 'N/A',\n          createdAt: p.createdAt\n        }))\n      ].sort((a, b) => {\n        const dateA = a.createdAt ? new Date(a.createdAt).getTime() : 0;\n        const dateB = b.createdAt ? new Date(b.createdAt).getTime() : 0;\n        return dateB - dateA;\n      }).slice(0, 15);\n\n      const walletData = {\n        balance: parseFloat(soCenter.walletBalance || '0'),\n        transactions: allTransactions\n      };\n\n      res.json(walletData);\n    } catch (error) {\n      console.error('Wallet API error:', error);\n      res.status(500).json({ message: \"Failed to fetch wallet data\" });\n    }\n  });\n\n  // Consolidated location data endpoint\n  app.get(\"/api/locations/all\", authenticateToken, async (req, res) => {\n    try {\n      const [states, districts, mandals, villages] = await Promise.all([\n        storage.getAllStates(),\n        storage.getAllDistricts(),\n        storage.getAllMandals(),\n        storage.getAllVillages()\n      ]);\n\n      res.json({\n        states,\n        districts,\n        mandals,\n        villages,\n      });\n    } catch (error) {\n      console.error('Error fetching location data:', error);\n      res.status(500).json({ message: 'Error fetching location data', error: error.message });\n    }\n  });\n\n  // Address hierarchy endpoints\n  app.get(\"/api/admin/addresses/states\", authenticateToken, async (req, res) => {\n    try {\n      const states = await storage.getAllStates();\n      res.json(states);\n    } catch (error) {\n      console.error('Error fetching states:', error);\n      res.status(500).json({ message: 'Failed to fetch states' });\n    }\n  });\n\n  // Get all districts\n  app.get(\"/api/admin/addresses/districts\", authenticateToken, async (req, res) => {\n    try {\n      const districts = await storage.getAllDistricts();\n      res.json(districts);\n    } catch (error) {\n      console.error('Error fetching all districts:', error);\n      res.status(500).json({ message: 'Failed to fetch districts' });\n    }\n  });\n\n  app.get(\"/api/admin/addresses/districts/:stateId\", authenticateToken, async (req, res) => {\n    try {\n      const districts = await storage.getDistrictsByState(req.params.stateId);\n      res.json(districts);\n    } catch (error) {\n      console.error('Error fetching districts:', error);\n      res.status(500).json({ message: 'Failed to fetch districts' });\n    }\n  });\n\n  // Get all mandals\n  app.get(\"/api/admin/addresses/mandals\", authenticateToken, async (req, res) => {\n    try {\n      const mandals = await storage.getAllMandals();\n      res.json(mandals);\n    } catch (error) {\n      console.error('Error fetching all mandals:', error);\n      res.status(500).json({ message: 'Failed to fetch mandals' });\n    }\n  });\n\n  app.get(\"/api/admin/addresses/mandals/:districtId\", authenticateToken, async (req, res) => {\n    try {\n      const mandals = await storage.getMandalsByDistrict(req.params.districtId);\n      res.json(mandals);\n    } catch (error) {\n      console.error('Error fetching mandals:', error);\n      res.status(500).json({ message: 'Failed to fetch mandals' });\n    }\n  });\n\n  // Get all villages\n  app.get(\"/api/admin/addresses/villages\", authenticateToken, async (req, res) => {\n    try {\n      const villages = await storage.getAllVillages();\n      res.json(villages);\n    } catch (error) {\n      console.error('Error fetching all villages:', error);\n      res.status(500).json({ message: 'Failed to fetch villages' });\n    }\n  });\n\n  app.get(\"/api/admin/addresses/villages/:mandalId\", authenticateToken, async (req, res) => {\n    try {\n      const villages = await storage.getVillagesByMandal(req.params.mandalId);\n      res.json(villages);\n    } catch (error) {\n      console.error('Error fetching villages:', error);\n      res.status(500).json({ message: 'Failed to fetch villages' });\n    }\n  });\n\n  // Address hierarchy creation endpoints\n  app.post(\"/api/admin/addresses/states\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n      const stateData = insertStateSchema.parse(req.body);\n      const newState = await storage.createState(stateData);\n      res.status(201).json(newState);\n    } catch (error) {\n      console.error('Error creating state:', error);\n      res.status(500).json({ message: 'Failed to create state' });\n    }\n  });\n\n  app.post(\"/api/admin/addresses/districts\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n      const districtData = insertDistrictSchema.parse(req.body);\n      const newDistrict = await storage.createDistrict(districtData);\n      res.status(201).json(newDistrict);\n    } catch (error) {\n      console.error('Error creating district:', error);\n      res.status(500).json({ message: 'Failed to create district' });\n    }\n  });\n\n  app.post(\"/api/admin/addresses/mandals\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n      const mandalData = insertMandalSchema.parse(req.body);\n      const newMandal = await storage.createMandal(mandalData);\n      res.status(201).json(newMandal);\n    } catch (error) {\n      console.error('Error creating mandal:', error);\n      res.status(500).json({ message: 'Failed to create mandal' });\n    }\n  });\n\n  app.post(\"/api/admin/addresses/villages\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n      const villageData = insertVillageSchema.parse(req.body);\n      const newVillage = await storage.createVillage(villageData);\n      res.status(201).json(newVillage);\n    } catch (error) {\n      console.error('Error creating village:', error);\n      res.status(500).json({ message: 'Failed to create village' });\n    }\n  });\n\n  // DELETE routes for address entities\n  app.delete(\"/api/admin/addresses/states/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const stateId = req.params.id;\n\n      // Check if state has any districts\n      const districts = await storage.getDistrictsByState(stateId);\n      if (districts.length > 0) {\n        return res.status(400).json({ \n          message: 'Cannot delete state with existing districts. Please delete all districts first.' \n        });\n      }\n\n      await storage.deleteState(stateId);\n      res.json({ message: 'State deleted successfully' });\n    } catch (error) {\n      console.error('Error deleting state:', error);\n      res.status(500).json({ message: 'Failed to delete state' });\n    }\n  });\n\n  app.delete(\"/api/admin/addresses/districts/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const districtId = req.params.id;\n\n      // Check if district has any mandals\n      const mandals = await storage.getMandalsByDistrict(districtId);\n      if (mandals.length > 0) {\n        return res.status(400).json({ \n          message: 'Cannot delete district with existing mandals. Please delete all mandals first.' \n        });\n      }\n\n      await storage.deleteDistrict(districtId);\n      res.json({ message: 'District deleted successfully' });\n    } catch (error) {\n      console.error('Error deleting district:', error);\n      res.status(500).json({ message: 'Failed to delete district' });\n    }\n  });\n\n  app.delete(\"/api/admin/addresses/mandals/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const mandalId = req.params.id;\n\n      // Check if mandal has any villages\n      const villages = await storage.getVillagesByMandal(mandalId);\n      if (villages.length > 0) {\n        return res.status(400).json({ \n          message: 'Cannot delete mandal with existing villages. Please delete all villages first.' \n        });\n      }\n\n      await storage.deleteMandal(mandalId);\n      res.json({ message: 'Mandal deleted successfully' });\n    } catch (error) {\n      console.error('Error deleting mandal:', error);\n      res.status(500).json({ message: 'Failed to delete mandal' });\n    }\n  });\n\n  app.delete(\"/api/admin/addresses/villages/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const villageId = req.params.id;\n\n      // Check if village has any students or SO centers\n      const students = await storage.getStudentsByVillage(villageId);\n      const soCenters = await storage.getSoCentersByVillage(villageId);\n\n      if (students.length > 0 || soCenters.length > 0) {\n        return res.status(400).json({ \n          message: 'Cannot delete village with existing students or SO centers. Please relocate them first.' \n        });\n      }\n\n      await storage.deleteVillage(villageId);\n      res.json({ message: 'Village deleted successfully' });\n    } catch (error) {\n      console.error('Error deleting village:', error);\n      res.status(500).json({ message: 'Failed to delete village' });\n    }\n  });\n\n  // SUPABASE AUTH ENFORCED - Admin user creation endpoint\n  app.post(\"/api/admin/users\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      console.log('🔧 Admin creating user through Supabase Auth (MANDATORY)');\n\n      // Convert numeric fields to strings before validation\n      const bodyWithStringFields = {\n        ...req.body,\n        salary: req.body.salary ? String(req.body.salary) : undefined,\n      };\n\n      const userData = insertUserSchema.parse(bodyWithStringFields);\n\n      // ALL USER CREATION MUST GO THROUGH SUPABASE AUTH\n      const result = await AuthService.createUser({\n        email: userData.email,\n        password: userData.password || '12345678', // Default password if not provided\n        role: userData.role || 'agent',\n        name: userData.name,\n        phone: userData.phone,\n        address: userData.address\n      });\n\n      console.log('✅ Admin created user through Supabase Auth:', result.dbUser.id);\n\n      res.status(201).json({\n        message: \"User created successfully via Supabase Auth\",\n        ...result.dbUser,\n        password: undefined // Never return password\n      });\n    } catch (error: any) {\n      console.error('❌ Admin user creation failed:', error);\n      res.status(500).json({ message: error.message || 'Failed to create user via Supabase Auth' });\n    }\n  });\n\n  // SO Center endpoints with PRIVACY CONTROL\n  app.get(\"/api/admin/so-centers\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: 'Authentication required' });\n      }\n\n      // PRIVACY ENFORCEMENT: SO Centers can ONLY see their own data\n      if (req.user.role === 'so_center') {\n        console.log('🔒 SO Center requesting their own data - enforcing strict privacy');\n        try {\n          const soCenter = await storage.getSoCenterByEmail(req.user.email);\n          if (!soCenter) {\n            console.log('❌ No SO Center found for user email:', req.user.email);\n            return res.status(403).json({ message: \"SO Center not found for user\" });\n          }\n\n          console.log(`✅ SO Center ${soCenter.centerId} accessing ONLY their own data`);\n          // Return ONLY their own center data\n          res.json([soCenter]);\n        } catch (error) {\n          console.error('❌ Error in SO Center privacy check:', error);\n          return res.status(500).json({ message: \"Failed to fetch SO Center data\" });\n        }\n      } else if (req.user.role === 'admin') {\n        // Admin can see all SO Centers\n        console.log('📋 Admin fetching SO Centers list...');\n        const centers = await storage.getAllSoCenters();\n        console.log(`✅ Found ${centers.length} SO Centers`);\n        res.json(centers);\n      } else {\n        return res.status(403).json({ message: 'Access denied' });\n      }\n    } catch (error: any) {\n      console.error('❌ Error fetching SO Centers:', error);\n      res.status(500).json({ message: 'Failed to fetch SO Centers' });\n    }\n  });\n\n  app.get(\"/api/admin/so-centers/next-id\", authenticateToken, async (req, res) => {\n    try {\n      const nextId = await storage.getNextSoCenterId();\n      res.json({ centerId: nextId });\n    } catch (error) {\n      console.error('Error generating next SO Center ID:', error);\n      res.status(500).json({ message: 'Failed to generate next SO Center ID' });\n    }\n  });\n\n  app.get(\"/api/admin/users/managers\", authenticateToken, async (req, res) => {\n    try {\n      const managers = await storage.getAvailableManagers();\n      res.json(managers);\n    } catch (error) {\n      console.error('Error fetching managers:', error);\n      res.status(500).json({ message: 'Failed to fetch managers' });\n    }\n  });\n\n  // FIXED: Get users with 'so_center' role for manager dropdown (NOT all users) - ONLY UNASSIGNED\n  app.get(\"/api/admin/users/unassigned-managers\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      console.log('🔧 Fetching UNASSIGNED SO Center role users for manager dropdown');\n\n      // Get users with SO Center role only\n      const soCenterUsers = await storage.getUsersByRole('so_center');\n\n      // Get all SO Centers to find which managers are already assigned\n      const allSoCenters = await storage.getAllSoCenters();\n      const assignedManagerIds = allSoCenters\n        .filter(center => center.managerId)\n        .map(center => center.managerId);\n\n      // Filter out users who are already assigned as managers\n      const unassignedManagers = soCenterUsers.filter(user => \n        !assignedManagerIds.includes(user.id)\n      );\n\n      console.log(`✅ Found ${soCenterUsers.length} total SO Center users, ${unassignedManagers.length} unassigned managers available`);\n      res.json(unassignedManagers);\n    } catch (error) {\n      console.error('Error fetching unassigned managers:', error);\n      res.status(500).json({ message: 'Failed to fetch unassigned managers' });\n    }\n  });\n\n  // SUPABASE AUTH ENFORCED - Get available managers for editing SO Center (includes current manager)\n  app.get(\"/api/admin/users/available-managers/:centerId\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const centerId = req.params.centerId;\n      console.log(`🔧 Fetching available managers for editing SO Center ${centerId}`);\n\n      // Get users with SO Center role only\n      const soCenterUsers = await storage.getUsersByRole('so_center');\n\n      // Get all SO Centers to find which managers are already assigned\n      const allSoCenters = await storage.getAllSoCenters();\n      const assignedManagerIds = allSoCenters\n        .filter(center => center.managerId && center.id !== centerId) // Exclude current center\n        .map(center => center.managerId);\n\n      // Get current center's manager\n      const currentCenter = allSoCenters.find(center => center.id === centerId);\n      const currentManagerId = currentCenter?.managerId;\n\n      // Filter out users who are already assigned as managers (except current manager)\n      const availableManagers = soCenterUsers.filter(user => \n        !assignedManagerIds.includes(user.id)\n      );\n\n      console.log(`✅ Found ${soCenterUsers.length} total SO Center users, ${availableManagers.length} available managers for editing (including current: ${currentManagerId ? 'yes' : 'no'})`);\n      res.json(availableManagers);\n    } catch (error) {\n      console.error('Error fetching available managers for editing:', error);\n      res.status(500).json({ message: 'Failed to fetch available managers' });\n    }\n  });\n\n  // SUPABASE AUTH ENFORCED - SO Center update with PRIVACY ENFORCEMENT\n  app.put(\"/api/admin/so-centers/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: 'Authentication required' });\n      }\n\n      const centerId = req.params.id;\n      const updateData = req.body;\n\n      // PRIVACY ENFORCEMENT: SO Centers can ONLY update their own data\n      if (req.user.role === 'so_center') {\n        console.log('🔒 SO Center attempting to update data - enforcing strict privacy');\n        try {\n          const soCenter = await storage.getSoCenterByEmail(req.user.email);\n          if (!soCenter || soCenter.id !== centerId) {\n            console.log('❌ SO Center trying to access unauthorized data:', { userEmail: req.user.email, requestedCenterId: centerId });\n            return res.status(403).json({ message: \"Access denied: can only update your own center\" });\n          }\n          console.log(`✅ SO Center ${soCenter.centerId} updating their own data`);\n        } catch (error) {\n          console.error('❌ Error in SO Center privacy check:', error);\n          return res.status(500).json({ message: \"Failed to verify access\" });\n        }\n      } else if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin or SO Center access required' });\n      }\n\n      // Remove restricted fields that cannot be updated\n      delete updateData.id;\n      delete updateData.centerId;\n      delete updateData.email;\n      delete updateData.walletBalance;\n      delete updateData.createdAt;\n      delete updateData.password;\n\n      console.log('🔄 Updating SO Center:', centerId, 'with data:', updateData);\n\n      // Update SO Center\n      const updatedCenter = await storage.updateSoCenter(centerId, updateData);\n\n      if (!updatedCenter) {\n        return res.status(404).json({ message: 'SO Center not found' });\n      }\n\n      console.log('✅ SO Center updated successfully:', updatedCenter.id);\n      res.json(updatedCenter);\n    } catch (error) {\n      console.error('❌ Error updating SO Center:', error);\n      res.status(500).json({ message: 'Failed to update SO center', error: error.message });\n    }\n  });\n\n  // SUPABASE AUTH ENFORCED - SO Center creation\n  app.post(\"/api/admin/so-centers\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      console.log('🔧 Admin creating SO Center through Supabase Auth (MANDATORY)');\n\n      // Convert numeric fields to strings before validation\n      const centerDataWithStringFields = {\n        ...req.body,\n        rentAmount: req.body.rentAmount ? String(req.body.rentAmount) : undefined,\n        rentalAdvance: req.body.rentalAdvance ? String(req.body.rentalAdvance) : undefined,\n        electricityAmount: req.body.electricityAmount ? String(req.body.electricityAmount) : undefined,\n        internetAmount: req.body.internetAmount ? String(req.body.internetAmount) : undefined,\n      };\n\n      // Extract additional data for SO Center creation\n      const { nearbySchools, nearbyTuitions, equipment, ...centerData } = centerDataWithStringFields;\n\n      // Generate next available SO Center ID automatically\n      const nextAvailable = await storage.getNextAvailableSoCenterNumber();\n      console.log('🔢 Generated next available SO Center ID:', nextAvailable);\n\n      // ALL SO CENTER CREATION MUST GO THROUGH SUPABASE AUTH\n      const result = await AuthService.createSoCenter({\n        email: centerData.email || nextAvailable.email, // Use provided email or auto-generated\n        password: centerData.password || '12345678',\n        name: centerData.name || centerData.managerName || 'SO Manager',\n        phone: centerData.phone || centerData.managerPhone,\n        address: centerData.address,\n        centerId: nextAvailable.centerId, // Use auto-generated center ID\n        centerName: centerData.centerName,\n        location: centerData.location,\n        managerName: centerData.managerName,\n        rentAmount: centerData.rentAmount,\n        rentalAdvance: centerData.rentalAdvance,\n        electricityAmount: centerData.electricityAmount,\n        internetAmount: centerData.internetAmount,\n        facilities: centerData.facilities || [],\n        capacity: centerData.capacity,\n        roomSize: centerData.roomSize,\n        landmarks: centerData.landmarks,\n        ownerName: centerData.ownerName,\n        ownerLastName: centerData.ownerLastName,\n        ownerPhone: centerData.ownerPhone,\n        dateOfHouseTaken: centerData.dateOfHouseTaken,\n        monthlyRentDate: centerData.monthlyRentDate,\n        monthlyInternetDate: centerData.monthlyInternetDate,\n        internetServiceProvider: centerData.internetServiceProvider,\n        electricBillAccountNumber: centerData.electricBillAccountNumber,\n        internetBillAccountNumber: centerData.internetBillAccountNumber,\n        villageId: centerData.villageId\n      }, nearbySchools, nearbyTuitions, equipment);\n\n      console.log('✅ Admin created SO Center through Supabase Auth:', result.soCenter.id);\n\n      res.status(201).json({\n        message: \"SO Center created successfully via Supabase Auth\",\n        ...result.soCenter,\n        user: {\n          ...result.dbUser,\n          password: undefined // Never return password\n        }\n      });\n    } catch (error: any) {\n      console.error('❌ Error creating SO Center:', {\n        message: error.message,\n        code: error.code,\n        detail: error.detail,\n        constraint: error.constraint_name,\n        table: error.table_name,\n        stack: error.stack\n      });\n\n      // Provide more specific error messages\n      let errorMessage = 'Failed to create SO Center';\n      if (error.code === '23505') {\n        if (error.constraint_name === 'users_email_unique') {\n          errorMessage = `Email ${error.detail?.match(/\\(([^)]+)\\)/)?.[1]} is already registered. Please use a different email.`;\n        } else if (error.constraint_name === 'so_centers_center_id_unique') {\n          errorMessage = `Center ID ${error.detail?.match(/\\(([^)]+)\\)/)?.[1]} already exists. Please try again.`;\n        } else {\n          errorMessage = `Duplicate entry: ${error.detail || 'Please check your data and try again.'}`;\n        }\n      }\n\n      res.status(500).json({ \n        message: errorMessage,\n        ...(process.env.NODE_ENV === 'development' && { debug: error.message })\n      });\n    }\n  });\n\n  // Products endpoint (for commission calculation)\n  app.get(\"/api/admin/products\", authenticateToken, async (req, res) => {\n    try {\n      const products = await storage.getAllProducts();\n      res.json(products);\n    } catch (error) {\n      console.error('Error fetching products:', error);\n      res.status(500).json({ message: 'Failed to fetch products' });\n    }\n  });\n\n  // Products endpoints for SO Centers and Agents (Active products only)\n  app.get('/api/so_center/products', authenticateToken, async (req, res) => {\n    try {\n      const result = await sql`\n        SELECT * FROM products \n        WHERE is_active = true\n        ORDER BY created_at DESC\n      `;\n      res.json(result);\n    } catch (error) {\n      console.error('Error fetching products for SO center:', error);\n      res.status(500).json({ message: 'Failed to fetch products' });\n    }\n  });\n\n  app.get('/api/agent/products', authenticateToken, async (req, res) => {\n    try {\n      const result = await sql`\n        SELECT * FROM products \n        WHERE is_active = true\n        ORDER BY created_at DESC\n      `;\n      res.json(result);\n    } catch (error) {\n      console.error('Error fetching products for agent:', error);\n      res.status(500).json({ message: 'Failed to fetch products' });\n    }\n  });\n\n  // Product purchase endpoint\n  app.post('/api/products/purchase', authenticateToken, async (req, res) => {\n    try {\n      const { productId, studentName, class: studentClass, education, address, mobileNumber } = req.body;\n      const userId = req.user?.userId;\n\n      console.log('🛒 Product purchase request:', {\n        userId,\n        productId,\n        studentName,\n        hasUser: !!req.user,\n        userKeys: req.user ? Object.keys(req.user) : null\n      });\n\n      if (!userId) {\n        console.log('❌ User not authenticated - missing userId in req.user:', req.user);\n        return res.status(401).json({ message: 'User not authenticated' });\n      }\n\n      // Get product details\n      const product = await sql`\n        SELECT * FROM products WHERE id = ${productId} AND is_active = true\n      `;\n\n      if (product.length === 0) {\n        return res.status(404).json({ message: 'Product not found or inactive' });\n      }\n\n      const productData = product[0];\n      const coursePrice = parseFloat(productData.price);\n      const commissionPercentage = parseFloat(productData.commission_percentage);\n      const commissionAmount = (coursePrice * commissionPercentage) / 100;\n\n      // Create or get user wallet\n      let wallet = await sql`\n        SELECT * FROM wallets WHERE user_id = ${userId}\n      `;\n\n      if (wallet.length === 0) {\n        await sql`\n          INSERT INTO wallets (user_id, course_wallet_balance, commission_wallet_balance, total_earnings)\n          VALUES (${userId}, 0.00, 0.00, 0.00)\n        `;\n        wallet = await sql`\n          SELECT * FROM wallets WHERE user_id = ${userId}\n        `;\n      }\n\n      const currentWallet = wallet[0];\n\n      // Generate transaction ID\n      const transactionId = `TXN${Date.now()}${Math.random().toString(36).substr(2, 4).toUpperCase()}`;\n\n      // Record the purchase\n      await sql`\n        INSERT INTO product_purchases (\n          product_id, agent_id, student_name, student_class, student_education,\n          student_address, student_mobile, course_price, commission_percentage, commission_amount\n        ) VALUES (\n          ${productId}, ${userId}, ${studentName}, ${studentClass}, ${education},\n          ${address}, ${mobileNumber}, ${coursePrice}, ${commissionPercentage}, ${commissionAmount}\n        )\n      `;\n\n      // Update wallet balances\n      const newCourseBalance = parseFloat(currentWallet.course_wallet_balance) + coursePrice;\n      const newCommissionBalance = parseFloat(currentWallet.commission_wallet_balance) + commissionAmount;\n      const newTotalEarnings = parseFloat(currentWallet.total_earnings) + commissionAmount;\n\n      await sql`\n        UPDATE wallets SET \n          course_wallet_balance = ${newCourseBalance},\n          commission_wallet_balance = ${newCommissionBalance},\n          total_earnings = ${newTotalEarnings},\n          updated_at = CURRENT_TIMESTAMP\n        WHERE user_id = ${userId}\n      `;\n\n      // Create transaction records\n      await sql`\n        INSERT INTO wallet_transactions (\n          user_id, transaction_id, type, amount, description, status\n        ) VALUES (\n          ${userId}, ${transactionId + '_COURSE'}, 'course_purchase', ${coursePrice}, \n          ${`Course purchase: ${productData.name} for student ${studentName}`}, 'completed'\n        )\n      `;\n\n      await sql`\n        INSERT INTO wallet_transactions (\n          user_id, transaction_id, type, amount, description, status\n        ) VALUES (\n          ${userId}, ${transactionId + '_COMM'}, 'commission_earned', ${commissionAmount}, \n          ${`Commission earned from ${productData.name} sale`}, 'completed'\n        )\n      `;\n\n      // Create admin notification for new course purchase\n      await sql`\n        INSERT INTO admin_notifications (\n          type, title, message, data, created_at\n        ) VALUES (\n          'course_purchase', 'New Course Purchase', \n          ${`Agent ${req.user?.email} purchased ${productData.name} for student ${studentName}`},\n          ${JSON.stringify({\n            agentId: userId,\n            agentEmail: req.user?.email,\n            productId,\n            productName: productData.name,\n            studentName,\n            coursePrice,\n            commissionAmount,\n            transactionId\n          })},\n          CURRENT_TIMESTAMP\n        )\n      `;\n\n      const response = {\n        message: 'Product purchased successfully',\n        transactionId,\n        agentEmail: req.user?.email,\n        invoice: {\n          transactionId,\n          productName: productData.name,\n          studentName,\n          coursePrice,\n          commissionAmount,\n          purchaseDate: new Date().toISOString(),\n          agentEmail: req.user?.email\n        },\n        purchase: {\n          productName: productData.name,\n          coursePrice,\n          commissionAmount,\n          studentName\n        },\n        wallet: {\n          courseBalance: newCourseBalance,\n          commissionBalance: newCommissionBalance,\n          totalEarnings: newTotalEarnings\n        }\n      };\n\n      console.log('✅ Purchase successful - Response:', {\n        transactionId,\n        coursePrice,\n        commissionAmount,\n        newCourseBalance,\n        newCommissionBalance\n      });\n\n      res.json(response);\n\n    } catch (error) {\n      console.error('Error processing product purchase:', error);\n      res.status(500).json({ message: 'Failed to process purchase' });\n    }\n  });\n\n  // Get wallet balance - for agents and SO centers only\n  app.get('/api/wallet/balance', authenticateToken, async (req, res) => {\n    console.log('🔍 Wallet balance request - User data:', {\n      userId: req.user?.userId,\n      role: req.user?.role,\n      email: req.user?.email,\n      hasUser: !!req.user\n    });\n\n    // Check if user has appropriate role\n    if (!['agent', 'so_center'].includes(req.user?.role)) {\n      console.log('❌ Access denied for role:', req.user?.role);\n      return res.status(403).json({ message: 'Access denied - Role not authorized for wallet access' });\n    }\n    try {\n      const userId = req.user?.userId;\n\n      if (!userId) {\n        return res.status(401).json({ message: 'User not authenticated' });\n      }\n\n      let wallet = await sql`\n        SELECT * FROM wallets WHERE user_id = ${userId}\n      `;\n\n      if (wallet.length === 0) {\n        // Create wallet if it doesn't exist\n        await sql`\n          INSERT INTO wallets (user_id, course_wallet_balance, commission_wallet_balance, total_earnings)\n          VALUES (${userId}, 0.00, 0.00, 0.00)\n        `;\n        wallet = await sql`\n          SELECT * FROM wallets WHERE user_id = ${userId}\n        `;\n      }\n\n      res.json(wallet[0]);\n    } catch (error) {\n      console.error('Error fetching wallet balance:', error);\n      res.status(500).json({ message: 'Failed to fetch wallet balance' });\n    }\n  });\n\n  // Get wallet transactions - for agents and SO centers only\n  app.get('/api/wallet/transactions', authenticateToken, async (req, res) => {\n    console.log('🔍 Wallet transactions request - User data:', {\n      userId: req.user?.userId,\n      role: req.user?.role,\n      email: req.user?.email,\n      hasUser: !!req.user\n    });\n\n    // Check if user has appropriate role\n    if (!['agent', 'so_center'].includes(req.user?.role)) {\n      console.log('❌ Access denied for role:', req.user?.role);\n      return res.status(403).json({ message: 'Access denied - Role not authorized for wallet access' });\n    }\n    try {\n      const userId = req.user?.userId;\n\n      if (!userId) {\n        return res.status(401).json({ message: 'User not authenticated' });\n      }\n\n      const transactions = await sql`\n        SELECT * FROM wallet_transactions \n        WHERE user_id = ${userId}\n        ORDER BY created_at DESC\n        LIMIT 50\n      `;\n\n      res.json(transactions);\n    } catch (error) {\n      console.error('Error fetching wallet transactions:', error);\n      res.status(500).json({ message: 'Failed to fetch transactions' });\n    }\n  });\n\n  // Withdrawal request endpoint - for agents and SO centers only\n  app.post('/api/wallet/withdraw', authenticateToken, async (req, res) => {\n    // Check if user has appropriate role\n    if (!['agent', 'so_center'].includes(req.user?.role)) {\n      return res.status(403).json({ message: 'Access denied' });\n    }\n    try {\n      const { amount } = req.body;\n      const userId = req.user?.userId;\n\n      if (!userId) {\n        return res.status(401).json({ message: 'User not authenticated' });\n      }\n\n      if (amount < 1000) {\n        return res.status(400).json({ message: 'Minimum withdrawal amount is ₹1000' });\n      }\n\n      // Check commission wallet balance\n      const wallet = await sql`\n        SELECT * FROM wallets WHERE user_id = ${userId}\n      `;\n\n      if (wallet.length === 0) {\n        return res.status(404).json({ message: 'Wallet not found' });\n      }\n\n      const commissionBalance = parseFloat(wallet[0].commission_wallet_balance);\n\n      if (commissionBalance < amount) {\n        return res.status(400).json({ \n          message: 'Insufficient commission balance',\n          availableBalance: commissionBalance\n        });\n      }\n\n      // Generate withdrawal transaction ID\n      const withdrawalId = `WDR${Date.now()}${Math.random().toString(36).substr(2, 4).toUpperCase()}`;\n\n      // Create withdrawal request\n      await sql`\n        INSERT INTO withdrawal_requests (user_id, amount, status, withdrawal_id, request_date)\n        VALUES (${userId}, ${amount}, 'pending', ${withdrawalId}, CURRENT_TIMESTAMP)\n      `;\n\n      // Create transaction record\n      await sql`\n        INSERT INTO wallet_transactions (\n          user_id, transaction_id, type, amount, description, status\n        ) VALUES (\n          ${userId}, ${withdrawalId}, 'withdrawal_request', ${amount}, \n          'Withdrawal request submitted', 'pending'\n        )\n      `;\n\n      res.json({\n        message: 'Withdrawal request submitted successfully',\n        amount,\n        withdrawalId,\n        status: 'pending'\n      });\n\n    } catch (error) {\n      console.error('Error processing withdrawal request:', error);\n      res.status(500).json({ message: 'Failed to process withdrawal request' });\n    }\n  });\n\n  // Admin: Get course purchase notifications\n  app.get('/api/admin/course-purchases', authenticateToken, requireRole(['admin']), async (req, res) => {\n    try {\n      const notifications = await sql`\n        SELECT * FROM admin_notifications \n        WHERE type = 'course_purchase'\n        ORDER BY created_at DESC\n        LIMIT 100\n      `;\n\n      res.json(notifications);\n    } catch (error) {\n      console.error('Error fetching course purchase notifications:', error);\n      res.status(500).json({ message: 'Failed to fetch course purchases' });\n    }\n  });\n\n  // Admin: Get all withdrawal requests for approval\n  app.get('/api/admin/withdrawal-requests', authenticateToken, requireRole(['admin']), async (req, res) => {\n    try {\n      const withdrawalRequests = await sql`\n        SELECT \n          wr.*,\n          u.email as user_email,\n          u.name as user_name,\n          u.role as user_role\n        FROM withdrawal_requests wr\n        JOIN users u ON wr.user_id = u.id\n        ORDER BY wr.request_date DESC\n      `;\n\n      res.json(withdrawalRequests);\n    } catch (error) {\n      console.error('Error fetching withdrawal requests:', error);\n      res.status(500).json({ message: 'Failed to fetch withdrawal requests' });\n    }\n  });\n\n  // Admin: Approve withdrawal request with payment details\n  app.post('/api/admin/withdrawal-requests/:id/approve', authenticateToken, requireRole(['admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { paymentMode, paymentDetails, notes } = req.body;\n\n      if (!['upi', 'voucher'].includes(paymentMode)) {\n        return res.status(400).json({ message: 'Invalid payment mode. Must be upi or voucher.' });\n      }\n\n      if (!paymentDetails) {\n        return res.status(400).json({ message: 'Payment details are required.' });\n      }\n\n      // Generate final transaction ID\n      const transactionId = `PAY${Date.now()}${Math.random().toString(36).substr(2, 4).toUpperCase()}`;\n\n      // Get withdrawal request details\n      const withdrawalRequest = await sql`\n        SELECT * FROM withdrawal_requests WHERE id = ${id} AND status = 'pending'\n      `;\n\n      if (withdrawalRequest.length === 0) {\n        return res.status(404).json({ message: 'Withdrawal request not found or already processed.' });\n      }\n\n      const request = withdrawalRequest[0];\n      const userId = request.user_id;\n      const amount = parseFloat(request.amount);\n\n      // Update withdrawal request status - only update existing columns\n      await sql`\n        UPDATE withdrawal_requests \n        SET \n          status = 'approved'\n        WHERE id = ${id}\n      `;\n\n      // Update commission wallet balance - deduct the approved amount\n      await sql`\n        UPDATE wallets \n        SET commission_wallet_balance = commission_wallet_balance - ${amount}\n        WHERE user_id = ${userId}\n      `;\n\n      // Create transaction record for the successful withdrawal\n      await sql`\n        INSERT INTO wallet_transactions (\n          user_id, transaction_id, type, amount, description, status\n        ) VALUES (\n          ${userId}, ${transactionId}, 'withdrawal_completed', ${amount}, \n          ${`Withdrawal approved - ${paymentMode.toUpperCase()}: ${paymentDetails}`}, 'completed'\n        )\n      `;\n\n      res.json({\n        message: 'Withdrawal request approved successfully',\n        transactionId,\n        paymentMode,\n        amount,\n        invoice: {\n          transactionId,\n          withdrawalId: request.withdrawal_id,\n          amount,\n          paymentMode,\n          paymentDetails,\n          processedAt: new Date().toISOString(),\n          processedBy: req.user?.email\n        }\n      });\n\n    } catch (error) {\n      console.error('Error approving withdrawal request:', error);\n      res.status(500).json({ message: 'Failed to approve withdrawal request' });\n    }\n  });\n\n  // Admin: Reject withdrawal request\n  app.post('/api/admin/withdrawal-requests/:id/reject', authenticateToken, requireRole(['admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { notes } = req.body;\n\n      // Update withdrawal request status\n      await sql`\n        UPDATE withdrawal_requests \n        SET \n          status = 'rejected',\n          processed_at = CURRENT_TIMESTAMP,\n          processed_by = ${req.user?.userId},\n          notes = ${notes || ''}\n        WHERE id = ${id} AND status = 'pending'\n      `;\n\n      res.json({\n        message: 'Withdrawal request rejected successfully'\n      });\n\n    } catch (error) {\n      console.error('Error rejecting withdrawal request:', error);\n      res.status(500).json({ message: 'Failed to reject withdrawal request' });\n    }\n  });\n\n  // Admin: Mark notification as read\n  app.patch('/api/admin/notifications/:id/read', authenticateToken, requireRole(['admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n\n      await sql`\n        UPDATE admin_notifications \n        SET is_read = true \n        WHERE id = ${id}\n      `;\n\n      res.json({ message: 'Notification marked as read' });\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n      res.status(500).json({ message: 'Failed to update notification' });\n    }\n  });\n\n  // Get all students for admin with comprehensive data\n  app.get(\"/api/admin/students\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      console.log('📋 Admin fetching all students with comprehensive data...');\n\n      const students = await storage.getAllStudentsWithDetails();\n\n      console.log('✅ Retrieved', students.length, 'students for admin');\n      res.json(students);\n    } catch (error) {\n      console.error('❌ Error fetching students for admin:', error);\n      res.status(500).json({ message: 'Failed to fetch students' });\n    }\n  });\n\n  // Get all users for admin\n  app.get(\"/api/admin/users\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n      res.status(500).json({ message: 'Failed to fetch users' });\n    }\n  });\n\n  // SUPABASE AUTH ENFORCED - Update user\n  app.put(\"/api/admin/users/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      console.log('🔧 Admin updating user through Supabase Auth (MANDATORY)');\n\n      const updates = req.body;\n\n      // ALL USER UPDATES MUST GO THROUGH SUPABASE AUTH\n      const updatedUser = await AuthService.updateUser(req.params.id, updates);\n\n      console.log('✅ Admin updated user through Supabase Auth:', updatedUser.id);\n\n      res.json({\n        ...updatedUser,\n        password: undefined // Never return password\n      });\n    } catch (error: any) {\n      console.error('❌ Admin user update failed:', error);\n      res.status(500).json({ message: error.message || 'Failed to update user via Supabase Auth' });\n    }\n  });\n\n  // SUPABASE AUTH ENFORCED - Delete user\n  app.delete(\"/api/admin/users/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      console.log('🔧 Admin deleting user through Supabase Auth (MANDATORY)');\n\n      // ALL USER DELETION MUST GO THROUGH SUPABASE AUTH\n      await AuthService.deleteUser(req.params.id);\n\n      console.log('✅ Admin deleted user through Supabase Auth:', req.params.id);\n\n      res.json({ message: 'User deleted successfully via Supabase Auth' });\n    } catch (error: any) {\n      console.error('❌ Admin user deletion failed:', error);\n      res.status(500).json({ message: error.message || 'Failed to delete user via Supabase Auth' });\n    }\n  });\n\n  // Classes CRUD\n  app.get(\"/api/admin/classes\", authenticateToken, async (req, res) => {\n    try {\n      const classes = await storage.getAllClasses();\n      res.json(classes);\n    } catch (error) {\n      console.error('Error fetching classes:', error);\n      res.status(500).json({ message: 'Failed to fetch classes' });\n    }\n  });\n\n  app.post(\"/api/admin/classes\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n      const classData = insertClassSchema.parse(req.body);\n      const newClass = await storage.createClass(classData);\n      res.status(201).json(newClass);\n    } catch (error) {\n      console.error('Error creating class:', error);\n      res.status(500).json({ message: 'Failed to create class' });\n    }\n  });\n\n  app.put(\"/api/admin/classes/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n      const updates = req.body;\n      const updatedClass = await storage.updateClass(req.params.id, updates);\n      res.json(updatedClass);\n    } catch (error) {\n      console.error('Error updating class:', error);\n      res.status(500).json({ message: 'Failed to update class' });\n    }\n  });\n\n  app.delete(\"/api/admin/classes/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n      await storage.deleteClass(req.params.id);\n      res.json({ message: 'Class deleted successfully' });\n    } catch (error) {\n      console.error('Error deleting class:', error);\n      res.status(500).json({ message: 'Failed to delete class' });\n    }\n  });\n\n  // Academic data routes for assignments\n  app.get(\"/api/admin/academic/subjects\", authenticateToken, async (req, res) => {\n    try {\n      const subjects = await storage.getAllSubjects();\n      res.json(subjects);\n    } catch (error) {\n      console.error('Error fetching subjects:', error);\n      res.status(500).json({ message: 'Failed to fetch subjects' });\n    }\n  });\n\n  app.get(\"/api/admin/academic/classes\", authenticateToken, async (req, res) => {\n    try {\n      const classes = await storage.getAllClasses();\n      res.json(classes);\n    } catch (error) {\n      console.error('Error fetching classes:', error);\n      res.status(500).json({ message: 'Failed to fetch classes' });\n    }\n  });\n\n  // Subjects CRUD\n  app.get(\"/api/admin/subjects\", authenticateToken, async (req, res) => {\n    try {\n      const subjects = await storage.getAllSubjects();\n      res.json(subjects);\n    } catch (error) {\n      console.error('Error fetching subjects:', error);\n      res.status(500).json({ message: 'Failed to fetch subjects' });\n    }\n  });\n\n  app.post(\"/api/admin/subjects\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n      \n      const { name, classIds } = req.body;\n      \n      if (!name || !classIds || !Array.isArray(classIds) || classIds.length === 0) {\n        return res.status(400).json({ message: 'Subject name and at least one class ID required' });\n      }\n\n      // Create separate subject entries for each class\n      const createdSubjects = [];\n      for (const classId of classIds) {\n        const subjectData = { name, classId };\n        const newSubject = await storage.createSubject(subjectData);\n        createdSubjects.push(newSubject);\n      }\n      \n      res.status(201).json({ \n        message: `Subject \"${name}\" connected to ${classIds.length} classes`,\n        subjects: createdSubjects \n      });\n    } catch (error) {\n      console.error('Error creating subjects:', error);\n      res.status(500).json({ message: 'Failed to create subjects' });\n    }\n  });\n\n  app.put(\"/api/admin/subjects/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n      const updates = req.body;\n      const updatedSubject = await storage.updateSubject(req.params.id, updates);\n      res.json(updatedSubject);\n    } catch (error) {\n      console.error('Error updating subject:', error);\n      res.status(500).json({ message: 'Failed to update subject' });\n    }\n  });\n\n  app.delete(\"/api/admin/subjects/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n      await storage.deleteSubject(req.params.id);\n      res.json({ message: 'Subject deleted successfully' });\n    } catch (error) {\n      console.error('Error deleting subject:', error);\n      res.status(500).json({ message: 'Failed to delete subject' });\n    }\n  });\n\n  // Chapters CRUD\n  app.get(\"/api/admin/chapters\", authenticateToken, async (req, res) => {\n    try {\n      const chapters = await storage.getAllChapters();\n      res.json(chapters);\n    } catch (error) {\n      console.error('Error fetching chapters:', error);\n      res.status(500).json({ message: 'Failed to fetch chapters' });\n    }\n  });\n\n  app.post(\"/api/admin/chapters\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n      const chapterData = insertChapterSchema.parse(req.body);\n      const newChapter = await storage.createChapter(chapterData);\n      res.status(201).json(newChapter);\n    } catch (error) {\n      console.error('Error creating chapter:', error);\n      res.status(500).json({ message: 'Failed to create chapter' });\n    }\n  });\n\n  app.put(\"/api/admin/chapters/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n      const updates = req.body;\n      const updatedChapter = await storage.updateChapter(req.params.id, updates);\n      res.json(updatedChapter);\n    } catch (error) {\n      console.error('Error updating chapter:', error);\n      res.status(500).json({ message: 'Failed to update chapter' });\n    }\n  });\n\n  app.delete(\"/api/admin/chapters/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n      await storage.deleteChapter(req.params.id);\n      res.json({ message: 'Chapter deleted successfully' });\n    } catch (error) {\n      console.error('Error deleting chapter:', error);\n      res.status(500).json({ message: 'Failed to delete chapter' });\n    }\n  });\n\n  // Topics CRUD\n  app.get(\"/api/admin/topics\", authenticateToken, async (req, res) => {\n    try {\n      const topics = await storage.getAllTopics();\n      res.json(topics);\n    } catch (error) {\n      console.error('Error fetching topics:', error);\n      res.status(500).json({ message: 'Failed to fetch topics' });\n    }\n  });\n\n  app.post(\"/api/admin/topics\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n      const topicData = insertTopicSchema.parse(req.body);\n      const newTopic = await storage.createTopic(topicData);\n      res.status(201).json(newTopic);\n    } catch (error) {\n      console.error('Error creating topic:', error);\n      res.status(500).json({ message: 'Failed to create topic' });\n    }\n  });\n\n  app.put(\"/api/admin/topics/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n      const updates = req.body;\n      const updatedTopic = await storage.updateTopic(req.params.id, updates);\n      res.json(updatedTopic);\n    } catch (error) {\n      console.error('Error updating topic:', error);\n      res.status(500).json({ message: 'Failed to update topic' });\n    }\n  });\n\n  app.delete(\"/api/admin/topics/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n      await storage.deleteTopic(req.params.id);\n      res.json({ message: 'Topic deleted successfully' });\n    } catch (error) {\n      console.error('Error deleting topic:', error);\n      res.status(500).json({ message: 'Failed to delete topic' });\n    }\n  });\n\n  // SO Centers CRUD\n  app.put(\"/api/admin/so-centers/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n      const updates = req.body;\n      if (updates.password) {\n        updates.password = await bcrypt.hash(updates.password, 12);\n      }\n      const updatedCenter = await storage.updateSoCenter(req.params.id, updates);\n      const { password, ...centerResponse } = updatedCenter;\n      res.json(centerResponse);\n    } catch (error) {\n      console.error('Error updating SO Center:', error);\n      res.status(500).json({ message: 'Failed to update SO Center' });\n    }\n  });\n\n  app.delete(\"/api/admin/so-centers/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const centerId = req.params.id;\n      console.log('🗑️ Admin attempting to delete SO Center:', centerId);\n\n      await storage.deleteSoCenter(centerId);\n      \n      console.log('✅ SO Center deletion completed successfully');\n      res.json({ message: 'SO Center deleted successfully' });\n    } catch (error: any) {\n      console.error('❌ Error deleting SO Center:', error);\n      \n      // Provide specific error messages\n      if (error.message.includes('active students')) {\n        res.status(400).json({ message: error.message });\n      } else if (error.message.includes('not found')) {\n        res.status(404).json({ message: 'SO Center not found' });\n      } else {\n        res.status(500).json({ message: 'Failed to delete SO Center' });\n      }\n    }\n  });\n\n  // Fee Structure CRUD\n  app.get(\"/api/admin/fees\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      console.log('📋 Fetching all fee structures...');\n\n      // Get all class fees with class names\n      const fees = await db\n        .select({\n          id: schema.classFees.id,\n          classId: schema.classFees.classId,\n          className: schema.classes.name,\n          courseType: schema.classFees.courseType,\n          admissionFee: schema.classFees.admissionFee,\n          monthlyFee: schema.classFees.monthlyFee,\n          yearlyFee: schema.classFees.yearlyFee,\n          description: schema.classFees.description,\n          isActive: schema.classFees.isActive,\n          createdAt: schema.classFees.createdAt,\n        })\n        .from(schema.classFees)\n        .leftJoin(schema.classes, eq(schema.classFees.classId, schema.classes.id))\n        .where(eq(schema.classFees.isActive, true))\n        .orderBy(desc(schema.classFees.createdAt));\n\n      console.log('✅ Fee structures fetched successfully:', fees.length);\n      res.json(fees);\n    } catch (error: any) {\n      console.error('❌ Error fetching fees:', error);\n      console.error('❌ Full error details:', error.message, error.stack);\n      res.status(500).json({ message: 'Failed to fetch fees' });\n    }\n  });\n\n  app.post(\"/api/admin/fees\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      console.log('📝 Creating new fee structure:', req.body);\n\n      // Convert string numbers to proper decimal values for database\n      const convertedData = {\n        ...req.body,\n        admissionFee: req.body.admissionFee.toString(),\n        monthlyFee: req.body.monthlyFee ? req.body.monthlyFee.toString() : null,\n        yearlyFee: req.body.yearlyFee ? req.body.yearlyFee.toString() : null,\n      };\n\n      console.log('📝 Converted fee data:', convertedData);\n\n      // Use insertClassFeeSchema to validate the data\n      const feeData = insertClassFeeSchema.parse(convertedData);\n\n      // Insert directly into classFees table using Drizzle\n      const [newFee] = await db\n        .insert(schema.classFees)\n        .values(feeData)\n        .returning();\n\n      console.log('✅ Fee structure created successfully:', newFee.id);\n      res.status(201).json(newFee);\n    } catch (error: any) {\n      console.error('❌ Error creating fee:', error);\n      console.error('❌ Full error details:', error.message, error.stack);\n      res.status(500).json({ message: 'Failed to create fee' });\n    }\n  });\n\n  app.put(\"/api/admin/fees/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      console.log('📝 Updating fee structure:', req.params.id, req.body);\n\n      // Convert string numbers to proper decimal values for database\n      const convertedData = {\n        ...req.body,\n        admissionFee: req.body.admissionFee.toString(),\n        monthlyFee: req.body.monthlyFee ? req.body.monthlyFee.toString() : null,\n        yearlyFee: req.body.yearlyFee ? req.body.yearlyFee.toString() : null,\n      };\n\n      // Validate the data\n      const feeData = insertClassFeeSchema.parse(convertedData);\n\n      // Update the fee structure in database\n      const [updatedFee] = await db\n        .update(schema.classFees)\n        .set(feeData)\n        .where(eq(schema.classFees.id, req.params.id))\n        .returning();\n\n      if (!updatedFee) {\n        return res.status(404).json({ message: 'Fee structure not found' });\n      }\n\n      console.log('✅ Fee structure updated successfully:', updatedFee.id);\n      res.json(updatedFee);\n    } catch (error: any) {\n      console.error('❌ Error updating fee:', error);\n      console.error('❌ Full error details:', error.message, error.stack);\n      res.status(500).json({ message: 'Failed to update fee structure' });\n    }\n  });\n\n  app.delete(\"/api/admin/fees/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      console.log('🗑️ Deleting fee structure:', req.params.id);\n\n      // Actually DELETE the record from database (not just set isActive: false)\n      const deletedResult = await db\n        .delete(schema.classFees)\n        .where(eq(schema.classFees.id, req.params.id))\n        .returning();\n\n      if (deletedResult.length === 0) {\n        return res.status(404).json({ message: 'Fee structure not found' });\n      }\n\n      console.log('✅ Fee structure deleted permanently from database:', req.params.id);\n      res.json({ message: 'Fee structure deleted successfully' });\n    } catch (error: any) {\n      console.error('❌ Error deleting fee:', error);\n      console.error('❌ Full error details:', error.message, error.stack);\n      res.status(500).json({ message: 'Failed to delete fee structure' });\n    }\n  });\n\n  // API endpoint for All Payments - Student Fee Histories\n  app.get(\"/api/admin/payments/student-fees\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      console.log('📊 Fetching student fee payment histories...');\n\n      // Get all student fee payments with student and SO center details\n      const studentPayments = await db\n        .select({\n          id: schema.payments.id,\n          amount: schema.payments.amount,\n          paymentMethod: schema.payments.paymentMethod,\n          description: schema.payments.description,\n          month: schema.payments.month,\n          year: schema.payments.year,\n          receiptNumber: schema.payments.receiptNumber,\n          transactionId: schema.payments.transactionId,\n          createdAt: schema.payments.createdAt,\n          studentName: schema.students.name,\n          studentId: schema.students.studentId,\n          studentClass: schema.classes.name,\n          soCenterName: schema.soCenters.name,\n          recordedByName: schema.users.name,\n          stateName: schema.states.name,\n          districtName: schema.districts.name,\n          mandalName: schema.mandals.name,\n          villageName: schema.villages.name,\n        })\n        .from(schema.payments)\n        .leftJoin(schema.students, eq(schema.payments.studentId, schema.students.id))\n        .leftJoin(schema.classes, eq(schema.students.classId, schema.classes.id))\n        .leftJoin(schema.soCenters, eq(schema.students.soCenterId, schema.soCenters.id))\n        .leftJoin(schema.users, eq(schema.payments.recordedBy, schema.users.id))\n        .leftJoin(schema.villages, eq(schema.soCenters.villageId, schema.villages.id))\n        .leftJoin(schema.mandals, eq(schema.villages.mandalId, schema.mandals.id))\n        .leftJoin(schema.districts, eq(schema.mandals.districtId, schema.districts.id))\n        .leftJoin(schema.states, eq(schema.districts.stateId, schema.states.id))\n        .orderBy(desc(schema.payments.createdAt));\n\n      console.log('✅ Student payments fetched successfully:', studentPayments.length);\n      res.json(studentPayments);\n    } catch (error: any) {\n      console.error('❌ Error fetching student payments:', error);\n      res.status(500).json({ message: 'Failed to fetch student payments' });\n    }\n  });\n\n  // API endpoint for All Payments - SO Center Wallet Histories\n  app.get(\"/api/admin/payments/so-wallet-histories\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      console.log('💰 Fetching SO Center wallet transaction histories...');\n\n      // Get all SO Center wallet transactions with SO center details\n      const soWalletTransactions = await db\n        .select({\n          id: schema.walletTransactions.id,\n          amount: schema.walletTransactions.amount,\n          type: schema.walletTransactions.type,\n          description: schema.walletTransactions.description,\n          createdAt: schema.walletTransactions.createdAt,\n          soCenterName: schema.soCenters.name,\n          soCenterId: schema.walletTransactions.soCenterId,\n          collectionAgentName: schema.users.name,\n          stateName: schema.states.name,\n          districtName: schema.districts.name,\n          mandalName: schema.mandals.name,\n          villageName: schema.villages.name,\n        })\n        .from(schema.walletTransactions)\n        .leftJoin(schema.soCenters, eq(schema.walletTransactions.soCenterId, schema.soCenters.id))\n        .leftJoin(schema.users, eq(schema.walletTransactions.collectionAgentId, schema.users.id))\n        .leftJoin(schema.villages, eq(schema.soCenters.villageId, schema.villages.id))\n        .leftJoin(schema.mandals, eq(schema.villages.mandalId, schema.mandals.id))\n        .leftJoin(schema.districts, eq(schema.mandals.districtId, schema.districts.id))\n        .leftJoin(schema.states, eq(schema.districts.stateId, schema.states.id))\n        .orderBy(desc(schema.walletTransactions.createdAt));\n\n      console.log('✅ SO wallet transactions fetched successfully:', soWalletTransactions.length);\n      res.json(soWalletTransactions);\n    } catch (error: any) {\n      console.error('❌ Error fetching SO wallet transactions:', error);\n      res.status(500).json({ message: 'Failed to fetch SO wallet transactions' });\n    }\n  });\n\n  // API endpoint for All Payments - Agent Wallet Histories\n  app.get(\"/api/admin/payments/agent-wallet-histories\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      console.log('🎯 Fetching Agent wallet transaction histories...');\n\n      // For now, return product orders as agent transactions since commission_transactions might not exist yet\n      const agentWalletTransactions = await db\n        .select({\n          id: schema.productOrders.id,\n          amount: schema.productOrders.commissionAmount,\n          type: sqlQuery`'commission'`,\n          description: sqlQuery`CONCAT('Commission from product order: ', ${schema.productOrders.receiptNumber})`,\n          createdAt: schema.productOrders.createdAt,\n          soCenterName: schema.soCenters.name,\n          soCenterId: schema.productOrders.soCenterId,\n          walletTotalEarned: sqlQuery`'0'`,\n          walletAvailableBalance: sqlQuery`'0'`,\n          walletTotalWithdrawn: sqlQuery`'0'`,\n          stateName: schema.states.name,\n          districtName: schema.districts.name,\n          mandalName: schema.mandals.name,\n          villageName: schema.villages.name,\n        })\n        .from(schema.productOrders)\n        .leftJoin(schema.soCenters, eq(schema.productOrders.soCenterId, schema.soCenters.id))\n        .leftJoin(schema.villages, eq(schema.soCenters.villageId, schema.villages.id))\n        .leftJoin(schema.mandals, eq(schema.villages.mandalId, schema.mandals.id))\n        .leftJoin(schema.districts, eq(schema.mandals.districtId, schema.districts.id))\n        .leftJoin(schema.states, eq(schema.districts.stateId, schema.states.id))\n        .orderBy(desc(schema.productOrders.createdAt));\n\n      console.log('✅ Agent wallet transactions fetched successfully:', agentWalletTransactions.length);\n      res.json(agentWalletTransactions);\n    } catch (error: any) {\n      console.error('❌ Error fetching agent wallet transactions:', error);\n      res.status(500).json({ message: 'Failed to fetch agent wallet transactions' });\n    }\n  });\n\n  // API endpoint to fetch student details and payment history\n  app.get(\"/api/admin/students/:studentId/details\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const studentId = req.params.studentId;\n      console.log(`📊 Fetching student details for ID: ${studentId}`);\n\n      // Get student basic details with SO center and location info\n      const studentDetails = await db\n        .select({\n          id: schema.students.id,\n          studentId: schema.students.studentId,\n          name: schema.students.name,\n          email: schema.students.email,\n          phone: schema.students.phone,\n          dateOfBirth: schema.students.dateOfBirth,\n          enrollmentDate: schema.students.enrollmentDate,\n          className: schema.classes.name,\n          soCenterName: schema.soCenters.name,\n          stateName: sql`COALESCE(${schema.states.name}, 'N/A')`.as('stateName'),\n          districtName: sql`COALESCE(${schema.districts.name}, 'N/A')`.as('districtName'),\n          mandalName: sql`COALESCE(${schema.mandals.name}, 'N/A')`.as('mandalName'),\n          villageName: sql`COALESCE(${schema.villages.name}, 'N/A')`.as('villageName'),\n          pendingAmount: schema.students.pendingAmount,\n          paidAmount: schema.students.paidAmount,\n        })\n        .from(schema.students)\n        .leftJoin(schema.classes, eq(schema.students.classId, schema.classes.id))\n        .leftJoin(schema.soCenters, eq(schema.students.soCenterId, schema.soCenters.id))\n        .leftJoin(schema.villages, eq(schema.soCenters.villageId, schema.villages.id))\n        .leftJoin(schema.mandals, eq(schema.villages.mandalId, schema.mandals.id))\n        .leftJoin(schema.districts, eq(schema.mandals.districtId, schema.districts.id))\n        .leftJoin(schema.states, eq(schema.districts.stateId, schema.states.id))\n        .where(eq(schema.students.id, studentId))\n        .limit(1);\n\n      if (!studentDetails.length) {\n        return res.status(404).json({ message: 'Student not found' });\n      }\n\n      // Get payment history for this student\n      const paymentHistory = await db\n        .select({\n          id: schema.payments.id,\n          amount: schema.payments.amount,\n          paymentMethod: schema.payments.paymentMethod,\n          description: schema.payments.description,\n          month: schema.payments.month,\n          year: schema.payments.year,\n          receiptNumber: schema.payments.receiptNumber,\n          transactionId: schema.payments.transactionId,\n          createdAt: schema.payments.createdAt,\n          recordedByName: sql`COALESCE(${schema.users.fullName}, 'N/A')`.as('recordedByName'),\n        })\n        .from(schema.payments)\n        .leftJoin(schema.users, eq(schema.payments.recordedBy, schema.users.id))\n        .where(eq(schema.payments.studentId, studentId))\n        .orderBy(desc(schema.payments.createdAt));\n\n      res.json({\n        student: studentDetails[0],\n        payments: paymentHistory\n      });\n\n    } catch (error: any) {\n      console.error('❌ Error fetching student details:', error);\n      res.status(500).json({ message: 'Failed to fetch student details' });\n    }\n  });\n\n  // API endpoints for location filtering data\n  app.get(\"/api/admin/locations/states\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const states = await db.select().from(schema.states).orderBy(schema.states.name);\n      res.json(states);\n    } catch (error: any) {\n      console.error('❌ Error fetching states:', error);\n      res.status(500).json({ message: 'Failed to fetch states' });\n    }\n  });\n\n  app.get(\"/api/admin/locations/districts/:stateId\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const districts = await db\n        .select()\n        .from(schema.districts)\n        .where(eq(schema.districts.stateId, req.params.stateId))\n        .orderBy(schema.districts.name);\n      res.json(districts);\n    } catch (error: any) {\n      console.error('❌ Error fetching districts:', error);\n      res.status(500).json({ message: 'Failed to fetch districts' });\n    }\n  });\n\n  app.get(\"/api/admin/locations/mandals/:districtId\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const mandals = await db\n        .select()\n        .from(schema.mandals)\n        .where(eq(schema.mandals.districtId, req.params.districtId))\n        .orderBy(schema.mandals.name);\n      res.json(mandals);\n    } catch (error: any) {\n      console.error('❌ Error fetching mandals:', error);\n      res.status(500).json({ message: 'Failed to fetch mandals' });\n    }\n  });\n\n  app.get(\"/api/admin/locations/villages/:mandalId\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const villages = await db\n        .select()\n        .from(schema.villages)\n        .where(eq(schema.villages.mandalId, req.params.mandalId))\n        .orderBy(schema.villages.name);\n      res.json(villages);\n    } catch (error: any) {\n      console.error('❌ Error fetching villages:', error);\n      res.status(500).json({ message: 'Failed to fetch villages' });\n    }\n  });\n\n  // New hierarchical location endpoints for attendance filters\n  app.get(\"/api/locations/states\", authenticateToken, async (req, res) => {\n    try {\n      const states = await db.select().from(schema.states).orderBy(schema.states.name);\n      res.json(states);\n    } catch (error: any) {\n      console.error('❌ Error fetching states:', error);\n      res.status(500).json({ message: 'Failed to fetch states' });\n    }\n  });\n\n  app.get(\"/api/locations/districts\", authenticateToken, async (req, res) => {\n    try {\n      const { stateId } = req.query;\n      \n      let query = db.select().from(schema.districts);\n      \n      if (stateId) {\n        query = query.where(eq(schema.districts.stateId, stateId as string));\n      }\n      \n      const districts = await query.orderBy(schema.districts.name);\n      res.json(districts);\n    } catch (error: any) {\n      console.error('❌ Error fetching districts:', error);\n      res.status(500).json({ message: 'Failed to fetch districts' });\n    }\n  });\n\n  app.get(\"/api/locations/mandals\", authenticateToken, async (req, res) => {\n    try {\n      const { districtId } = req.query;\n      \n      let query = db.select().from(schema.mandals);\n      \n      if (districtId) {\n        query = query.where(eq(schema.mandals.districtId, districtId as string));\n      }\n      \n      const mandals = await query.orderBy(schema.mandals.name);\n      res.json(mandals);\n    } catch (error: any) {\n      console.error('❌ Error fetching mandals:', error);\n      res.status(500).json({ message: 'Failed to fetch mandals' });\n    }\n  });\n\n  app.get(\"/api/locations/villages\", authenticateToken, async (req, res) => {\n    try {\n      const { mandalId } = req.query;\n      \n      let query = db.select().from(schema.villages);\n      \n      if (mandalId) {\n        query = query.where(eq(schema.villages.mandalId, mandalId as string));\n      }\n      \n      const villages = await query.orderBy(schema.villages.name);\n      res.json(villages);\n    } catch (error: any) {\n      console.error('❌ Error fetching villages:', error);\n      res.status(500).json({ message: 'Failed to fetch villages' });\n    }\n  });\n\n  app.get(\"/api/locations/so-centers\", authenticateToken, async (req, res) => {\n    try {\n      const { villageId } = req.query;\n      \n      let query = db.select().from(schema.soCenters);\n      \n      if (villageId) {\n        query = query.where(eq(schema.soCenters.villageId, villageId as string));\n      }\n      \n      const centers = await query.orderBy(schema.soCenters.name);\n      res.json(centers);\n    } catch (error: any) {\n      console.error('❌ Error fetching SO centers:', error);\n      res.status(500).json({ message: 'Failed to fetch SO centers' });\n    }\n  });\n\n  app.get(\"/api/classes/by-center\", authenticateToken, async (req, res) => {\n    try {\n      const { centerId } = req.query;\n      \n      if (centerId) {\n        // Get classes that have students in the specified SO center\n        const classesWithStudents = await sql`\n          SELECT DISTINCT c.id, c.name \n          FROM classes c\n          INNER JOIN students s ON c.id = s.class_id\n          WHERE s.so_center_id = ${centerId} AND s.is_active = true\n          ORDER BY c.name\n        `;\n        \n        res.json(classesWithStudents);\n      } else {\n        // Get all classes\n        const classes = await db.select().from(schema.classes).orderBy(schema.classes.name);\n        res.json(classes);\n      }\n    } catch (error: any) {\n      console.error('❌ Error fetching classes:', error);\n      res.status(500).json({ message: 'Failed to fetch classes' });\n    }\n  });\n\n  app.get(\"/api/students/by-filter\", authenticateToken, async (req, res) => {\n    try {\n      const { classId, centerId } = req.query;\n      \n      let query = sql`\n        SELECT s.id, s.name, s.student_id, s.class_id, c.name as class_name\n        FROM students s\n        LEFT JOIN classes c ON s.class_id = c.id\n        WHERE s.is_active = true\n      `;\n\n      if (classId && centerId) {\n        query = sql`\n          SELECT s.id, s.name, s.student_id, s.class_id, c.name as class_name\n          FROM students s\n          LEFT JOIN classes c ON s.class_id = c.id\n          WHERE s.is_active = true AND s.class_id = ${classId} AND s.so_center_id = ${centerId}\n          ORDER BY s.name\n        `;\n      } else if (classId) {\n        query = sql`\n          SELECT s.id, s.name, s.student_id, s.class_id, c.name as class_name\n          FROM students s\n          LEFT JOIN classes c ON s.class_id = c.id\n          WHERE s.is_active = true AND s.class_id = ${classId}\n          ORDER BY s.name\n        `;\n      } else if (centerId) {\n        query = sql`\n          SELECT s.id, s.name, s.student_id, s.class_id, c.name as class_name\n          FROM students s\n          LEFT JOIN classes c ON s.class_id = c.id\n          WHERE s.is_active = true AND s.so_center_id = ${centerId}\n          ORDER BY s.name\n        `;\n      } else {\n        query = sql`\n          SELECT s.id, s.name, s.student_id, s.class_id, c.name as class_name\n          FROM students s\n          LEFT JOIN classes c ON s.class_id = c.id\n          WHERE s.is_active = true\n          ORDER BY s.name\n        `;\n      }\n\n      const students = await query;\n      res.json(students);\n    } catch (error: any) {\n      console.error('❌ Error fetching students:', error);\n      res.status(500).json({ message: 'Failed to fetch students' });\n    }\n  });\n\n  // Students CRUD for admin\n  app.get(\"/api/admin/students\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n      const students = await storage.getAllStudents();\n      res.json(students);\n    } catch (error) {\n      console.error('Error fetching students:', error);\n      res.status(500).json({ message: 'Failed to fetch students' });\n    }\n  });\n\n  // Get single student details by ID for admin\n  app.get(\"/api/students/:studentId\", authenticateToken, async (req, res) => {\n    try {\n      const studentId = req.params.studentId;\n      \n      // Get basic student info with related data\n      const studentQuery = `\n        SELECT \n          s.id, s.student_id as student_code, s.name, s.email, s.phone, s.parent_phone,\n          s.date_of_birth, s.enrollment_date, s.pending_amount, s.paid_amount,\n          c.name as class_name, c.id as class_id,\n          sc.name as so_center_name, sc.center_id as so_center_code,\n          st.name as state_name, d.name as district_name, \n          m.name as mandal_name, v.name as village_name\n        FROM students s\n        LEFT JOIN classes c ON s.class_id = c.id\n        LEFT JOIN so_centers sc ON s.so_center_id = sc.id\n        LEFT JOIN villages v ON sc.village_id = v.id\n        LEFT JOIN mandals m ON v.mandal_id = m.id\n        LEFT JOIN districts d ON m.district_id = d.id\n        LEFT JOIN states st ON d.state_id = st.id\n        WHERE s.id = $1 AND s.is_active = true\n      `;\n\n      const studentResults = await executeRawQuery(studentQuery, [studentId]);\n      \n      if (!studentResults.length) {\n        return res.status(404).json({ message: 'Student not found' });\n      }\n\n      const student = studentResults[0];\n      \n      // Transform the result\n      const studentData = {\n        id: student.id,\n        studentCode: student.student_code,\n        name: student.name,\n        email: student.email,\n        phone: student.phone,\n        parentPhone: student.parent_phone,\n        dateOfBirth: student.date_of_birth,\n        enrollmentDate: student.enrollment_date,\n        pendingAmount: parseFloat(student.pending_amount) || 0,\n        paidAmount: parseFloat(student.paid_amount) || 0,\n        className: student.class_name,\n        classId: student.class_id,\n        soCenterName: student.so_center_name,\n        soCenterCode: student.so_center_code,\n        location: {\n          state: student.state_name || 'N/A',\n          district: student.district_name || 'N/A',\n          mandal: student.mandal_name || 'N/A',\n          village: student.village_name || 'N/A'\n        }\n      };\n\n      res.json(studentData);\n    } catch (error) {\n      console.error('Error fetching student details:', error);\n      res.status(500).json({ message: 'Failed to fetch student details' });\n    }\n  });\n\n  // Get student progress tracking data for detailed view\n  app.get(\"/api/progress-tracking/student/:studentId\", authenticateToken, async (req, res) => {\n    try {\n      const studentId = req.params.studentId;\n      \n      // Get homework activities progress\n      const homeworkQuery = `\n        SELECT \n          ha.id, ha.homework_date, ha.subject, ha.chapter, ha.topic, ha.status,\n          ha.score, ha.total_score, ha.remarks, ha.created_at\n        FROM homework_activities ha\n        WHERE ha.student_id = $1\n        ORDER BY ha.homework_date DESC, ha.created_at DESC\n      `;\n\n      // Get tuition progress\n      const tuitionQuery = `\n        SELECT \n          tp.id, tp.status, tp.completion_date, tp.created_at,\n          t.name as topic_name, c.name as chapter_name, s.name as subject_name\n        FROM tuition_progress tp\n        JOIN topics t ON tp.topic_id = t.id\n        JOIN chapters c ON t.chapter_id = c.id\n        JOIN subjects s ON c.subject_id = s.id\n        WHERE tp.student_id = $1\n        ORDER BY s.name, c.name, t.name\n      `;\n\n      const [homeworkResults, tuitionResults] = await Promise.all([\n        executeRawQuery(homeworkQuery, [studentId]),\n        executeRawQuery(tuitionQuery, [studentId])\n      ]);\n\n      // Calculate subject-wise statistics\n      const subjectStats: any = {};\n      \n      // Process homework data\n      homeworkResults.forEach((hw: any) => {\n        const subject = hw.subject || 'General';\n        if (!subjectStats[subject]) {\n          subjectStats[subject] = {\n            homeworkTotal: 0,\n            homeworkCompleted: 0,\n            totalScore: 0,\n            maxScore: 0,\n            tuitionTopics: 0,\n            completedTuitionTopics: 0\n          };\n        }\n        \n        subjectStats[subject].homeworkTotal++;\n        if (hw.status === 'completed') {\n          subjectStats[subject].homeworkCompleted++;\n        }\n        if (hw.score) {\n          subjectStats[subject].totalScore += parseFloat(hw.score);\n          subjectStats[subject].maxScore += parseFloat(hw.total_score || hw.score);\n        }\n      });\n\n      // Process tuition data\n      tuitionResults.forEach((tp: any) => {\n        const subject = tp.subject_name || 'General';\n        if (!subjectStats[subject]) {\n          subjectStats[subject] = {\n            homeworkTotal: 0,\n            homeworkCompleted: 0,\n            totalScore: 0,\n            maxScore: 0,\n            tuitionTopics: 0,\n            completedTuitionTopics: 0\n          };\n        }\n        \n        subjectStats[subject].tuitionTopics++;\n        if (tp.status === 'learned' || tp.status === 'completed') {\n          subjectStats[subject].completedTuitionTopics++;\n        }\n      });\n\n      // Calculate percentages and format for charts\n      const subjectData = Object.keys(subjectStats).map(subject => {\n        const stats = subjectStats[subject];\n        return {\n          subject,\n          homeworkPercentage: stats.homeworkTotal > 0 ? Math.round((stats.homeworkCompleted / stats.homeworkTotal) * 100) : 0,\n          tuitionPercentage: stats.tuitionTopics > 0 ? Math.round((stats.completedTuitionTopics / stats.tuitionTopics) * 100) : 0,\n          averageScore: stats.maxScore > 0 ? Math.round((stats.totalScore / stats.maxScore) * 100) : 0,\n          homeworkCount: stats.homeworkCompleted,\n          tuitionCount: stats.completedTuitionTopics\n        };\n      });\n\n      const response = {\n        subjectData,\n        recentHomework: homeworkResults.slice(0, 10).map((hw: any) => ({\n          id: hw.id,\n          date: hw.homework_date,\n          subject: hw.subject,\n          topic: hw.topic,\n          status: hw.status,\n          score: hw.score ? `${hw.score}/${hw.total_score || hw.score}` : null\n        })),\n        recentTuition: tuitionResults.slice(0, 10).map((tp: any) => ({\n          id: tp.id,\n          subject: tp.subject_name,\n          chapter: tp.chapter_name,\n          topic: tp.topic_name,\n          status: tp.status,\n          completionDate: tp.completion_date\n        }))\n      };\n\n      res.json(response);\n    } catch (error) {\n      console.error('Error fetching student progress data:', error);\n      res.status(500).json({ message: 'Failed to fetch progress data' });\n    }\n  });\n\n  // Get student attendance statistics  \n  app.get(\"/api/attendance/student/:studentId\", authenticateToken, async (req, res) => {\n    try {\n      const studentId = req.params.studentId;\n      \n      // Get attendance records with stats\n      const attendanceQuery = `\n        SELECT \n          a.id, a.date, a.status, a.remarks, a.created_at,\n          COUNT(*) OVER() as total_records,\n          COUNT(CASE WHEN a.status = 'present' THEN 1 END) OVER() as total_present,\n          COUNT(CASE WHEN a.status = 'absent' THEN 1 END) OVER() as total_absent\n        FROM attendance a\n        WHERE a.student_id = $1\n        ORDER BY a.date DESC\n      `;\n\n      const attendanceResults = await executeRawQuery(attendanceQuery, [studentId]);\n\n      let attendancePercentage = 0;\n      let monthlyData: any[] = [];\n      \n      if (attendanceResults.length > 0) {\n        const totalPresent = parseInt(attendanceResults[0].total_present) || 0;\n        const totalRecords = parseInt(attendanceResults[0].total_records) || 0;\n        attendancePercentage = totalRecords > 0 ? Math.round((totalPresent / totalRecords) * 100) : 0;\n\n        // Group by month for trend analysis\n        const monthlyStats: any = {};\n        attendanceResults.forEach((record: any) => {\n          const date = new Date(record.date);\n          const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n          \n          if (!monthlyStats[monthKey]) {\n            monthlyStats[monthKey] = { total: 0, present: 0 };\n          }\n          \n          monthlyStats[monthKey].total++;\n          if (record.status === 'present') {\n            monthlyStats[monthKey].present++;\n          }\n        });\n\n        monthlyData = Object.keys(monthlyStats)\n          .sort()\n          .slice(-6) // Last 6 months\n          .map(month => ({\n            month,\n            percentage: Math.round((monthlyStats[month].present / monthlyStats[month].total) * 100),\n            present: monthlyStats[month].present,\n            total: monthlyStats[month].total\n          }));\n      }\n\n      const response = {\n        attendancePercentage,\n        totalDays: attendanceResults.length,\n        presentDays: attendanceResults.filter((r: any) => r.status === 'present').length,\n        absentDays: attendanceResults.filter((r: any) => r.status === 'absent').length,\n        monthlyTrend: monthlyData,\n        recentAttendance: attendanceResults.slice(0, 20).map((record: any) => ({\n          id: record.id,\n          date: record.date,\n          status: record.status,\n          remarks: record.remarks\n        }))\n      };\n\n      res.json(response);\n    } catch (error) {\n      console.error('Error fetching student attendance data:', error);\n      res.status(500).json({ message: 'Failed to fetch attendance data' });\n    }\n  });\n\n  app.put(\"/api/admin/students/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || (req.user.role !== 'admin' && req.user.role !== 'so_center')) {\n        return res.status(403).json({ message: 'Admin or SO Center access required' });\n      }\n      const updates = req.body;\n      const updatedStudent = await storage.updateStudent(req.params.id, updates);\n      res.json(updatedStudent);\n    } catch (error) {\n      console.error('Error updating student:', error);\n      res.status(500).json({ message: 'Failed to update student' });\n    }\n  });\n\n  app.delete(\"/api/admin/students/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || (req.user.role !== 'admin' && req.user.role !== 'so_center')) {\n        return res.status(403).json({ message: 'Admin or SO Center access required' });\n      }\n      await storage.deleteStudent(req.params.id);\n      res.json({ message: 'Student deleted successfully' });\n    } catch (error) {\n      console.error('Error deleting student:', error);\n      res.status(500).json({ message: 'Failed to delete student' });\n    }\n  });\n\n  // Payments CRUD for admin\n  app.get(\"/api/admin/payments\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n      const payments = await storage.getAllPayments();\n      res.json(payments);\n    } catch (error) {\n      console.error('Error fetching payments:', error);\n      res.status(500).json({ message: 'Failed to fetch payments' });\n    }\n  });\n\n  app.put(\"/api/admin/payments/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || (req.user.role !== 'admin' && req.user.role !== 'so_center')) {\n        return res.status(403).json({ message: 'Admin or SO Center access required' });\n      }\n      const updates = req.body;\n      const updatedPayment = await storage.updatePayment(req.params.id, updates);\n      res.json(updatedPayment);\n    } catch (error) {\n      console.error('Error updating payment:', error);\n      res.status(500).json({ message: 'Failed to update payment' });\n    }\n  });\n\n  app.delete(\"/api/admin/payments/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || (req.user.role !== 'admin' && req.user.role !== 'so_center')) {\n        return res.status(403).json({ message: 'Admin or SO Center access required' });\n      }\n      await storage.deletePayment(req.params.id);\n      res.json({ message: 'Payment deleted successfully' });\n    } catch (error) {\n      console.error('Error deleting payment:', error);\n      res.status(500).json({ message: 'Failed to delete payment' });\n    }\n  });\n\n  // Database seeding endpoint for Supabase\n  app.post(\"/api/admin/seed-database\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      // Check if states already exist\n      const existingStates = await storage.getAllStates();\n      if (existingStates.length > 0) {\n        return res.json({ message: 'Database already seeded', existingStates: existingStates.length });\n      }\n\n      // Seed initial states for India\n      const initialStates = [\n        { name: 'Andhra Pradesh', code: 'AP' },\n        { name: 'Telangana', code: 'TS' },\n        { name: 'Karnataka', code: 'KA' },\n        { name: 'Tamil Nadu', code: 'TN' },\n        { name: 'Kerala', code: 'KL' }\n      ];\n\n      const createdStates = [];\n      for (const stateData of initialStates) {\n        const state = await storage.createState(stateData);\n        createdStates.push(state);\n      }\n\n      // Seed initial classes\n      const initialClasses = [\n        { name: '1st Class', description: 'First standard' },\n        { name: '2nd Class', description: 'Second standard' },\n        { name: '3rd Class', description: 'Third standard' },\n        { name: '4th Class', description: 'Fourth standard' },\n        { name: '5th Class', description: 'Fifth standard' },\n        { name: '6th Class', description: 'Sixth standard' },\n        { name: '7th Class', description: 'Seventh standard' },\n        { name: '8th Class', description: 'Eighth standard' },\n        { name: '9th Class', description: 'Ninth standard' },\n        { name: '10th Class', description: 'Tenth standard' }\n      ];\n\n      const createdClasses = [];\n      for (const classData of initialClasses) {\n        const classItem = await storage.createClass(classData);\n        createdClasses.push(classItem);\n      }\n\n      res.json({ \n        message: 'Database seeded successfully',\n        seeded: {\n          states: createdStates.length,\n          classes: createdClasses.length\n        }\n      });\n    } catch (error) {\n      console.error('Error seeding database:', error);\n      res.status(500).json({ message: 'Failed to seed database' });\n    }\n  });\n\n  // Process student payment endpoint\n  app.post(\"/api/payments/process\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const { studentId, amount, feeType, receiptNumber, expectedFeeAmount } = req.body;\n\n      // Validate required fields\n      if (!studentId || !amount || !feeType || !receiptNumber) {\n        return res.status(400).json({ \n          message: \"Missing required fields: studentId, amount, feeType, receiptNumber\" \n        });\n      }\n\n      // Get student details for response\n      const student = await storage.getStudent(studentId);\n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n\n      // Validate user exists in database before processing payment\n      let recordedByUserId = req.user.userId;\n      try {\n        const userExists = await storage.getUser(req.user.userId);\n        if (!userExists) {\n          console.warn(`⚠️ User ${req.user.userId} not found in users table, using null for recordedBy`);\n          recordedByUserId = null;\n        }\n      } catch (error) {\n        console.warn(`⚠️ Error validating user ${req.user.userId}, using null for recordedBy:`, error);\n        recordedByUserId = null;\n      }\n\n      // Process the payment with validated user ID\n      const result = await storage.processStudentPayment({\n        studentId,\n        amount: parseFloat(amount),\n        feeType,\n        receiptNumber,\n        expectedFeeAmount: parseFloat(expectedFeeAmount || '0'),\n        recordedBy: recordedByUserId\n      });\n\n      // Use the complete data from storage result which includes all invoice details\n      res.json({\n        studentName: result.studentName,\n        studentId: result.studentId,\n        className: result.className,\n        amount: result.amount,\n        feeType: result.feeType,\n        receiptNumber: result.receiptNumber,\n        transactionId: result.transactionId,\n        paymentId: result.payment.id,\n        fatherMobile: result.fatherMobile,\n        parentPhone: result.parentPhone,\n        newPaidAmount: result.newPaidAmount,\n        newPendingAmount: result.newPendingAmount,\n        totalFeeAmount: result.totalFeeAmount\n      });\n    } catch (error) {\n      console.error(\"Payment processing error:\", error);\n      res.status(500).json({ \n        message: error instanceof Error ? error.message : \"Failed to process payment\" \n      });\n    }\n  });\n\n  // Get payment history for a student\n  app.get(\"/api/students/:studentId/payments\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      const { studentId } = req.params;\n      const payments = await storage.getPaymentsByStudent(studentId);\n\n      res.json(payments);\n    } catch (error) {\n      console.error(\"Payment history error:\", error);\n      res.status(500).json({ message: \"Failed to fetch payment history\" });\n    }\n  });\n\n  // Progress Tracking Routes\n\n  // Homework Activity Routes\n  app.post(\"/api/homework-activity\", authenticateToken, async (req, res) => {\n    try {\n      const { activities } = req.body;\n\n      if (!activities || !Array.isArray(activities)) {\n        return res.status(400).json({ message: \"Activities array is required\" });\n      }\n\n      // Validate each activity\n      const validatedActivities = activities.map(activity => {\n        const validation = insertHomeworkActivitySchema.safeParse(activity);\n\n        if (!validation.success) {\n          throw new Error(`Invalid activity data: ${validation.error.message}`);\n        }\n\n        return validation.data;\n      });\n\n      const result = await storage.createHomeworkActivity(validatedActivities);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error creating homework activity:\", error);\n      res.status(500).json({ message: \"Failed to record homework activity\" });\n    }\n  });\n\n  app.get(\"/api/homework-activity\", authenticateToken, async (req, res) => {\n    try {\n      const { classId, date, soCenterId } = req.query;\n\n      const activities = await storage.getHomeworkActivities({\n        classId: classId as string,\n        date: date as string,\n        soCenterId: soCenterId as string\n      });\n\n      res.json(activities);\n    } catch (error) {\n      console.error(\"Error fetching homework activities:\", error);\n      res.status(500).json({ message: \"Failed to fetch homework activities\" });\n    }\n  });\n\n  // Tuition Progress Routes\n  app.post(\"/api/tuition-progress\", authenticateToken, async (req, res) => {\n    try {\n      const validation = insertTuitionProgressSchema.safeParse({\n        ...req.body,\n        updatedBy: req.user?.userId\n      });\n\n      if (!validation.success) {\n        return res.status(400).json({ \n          message: \"Invalid progress data\", \n          errors: validation.error.errors \n        });\n      }\n\n      const result = await storage.createTuitionProgress(validation.data);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error creating tuition progress:\", error);\n      res.status(500).json({ message: \"Failed to record tuition progress\" });\n    }\n  });\n\n  app.get(\"/api/tuition-progress\", authenticateToken, async (req, res) => {\n    try {\n      const { classId, topicId, studentId, soCenterId } = req.query;\n\n      const progress = await storage.getTuitionProgress({\n        classId: classId as string,\n        topicId: topicId as string,\n        studentId: studentId as string,\n        soCenterId: soCenterId as string\n      });\n\n      res.json(progress);\n    } catch (error) {\n      console.error(\"Error fetching tuition progress:\", error);\n      res.status(500).json({ message: \"Failed to fetch tuition progress\" });\n    }\n  });\n\n  app.put(\"/api/tuition-progress/:id\", authenticateToken, async (req, res) => {\n    try {\n      const { id } = req.params;\n\n      const validation = insertTuitionProgressSchema.partial().safeParse({\n        ...req.body,\n        updatedBy: req.user?.userId\n      });\n\n      if (!validation.success) {\n        return res.status(400).json({ \n          message: \"Invalid progress data\", \n          errors: validation.error.errors \n        });\n      }\n\n      const result = await storage.updateTuitionProgress(id, validation.data);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error updating tuition progress:\", error);\n      res.status(500).json({ message: \"Failed to update tuition progress\" });\n    }\n  });\n\n  // Admin comprehensive progress tracking endpoint\n  // Attendance endpoints\n  app.get(\"/api/attendance\", authenticateToken, async (req, res) => {\n    try {\n      const { studentId, classId, centerId, date } = req.query;\n      \n      let query = sql`\n        SELECT \n          a.id,\n          a.student_id,\n          a.date,\n          a.status,\n          a.remarks,\n          s.name as student_name,\n          s.student_id as student_code,\n          c.name as class_name,\n          sc.name as center_name,\n          sc.center_id as center_code\n        FROM attendance a\n        LEFT JOIN students s ON a.student_id = s.id\n        LEFT JOIN classes c ON s.class_id = c.id\n        LEFT JOIN so_centers sc ON s.so_center_id = sc.id\n        WHERE 1=1\n      `;\n\n      // Build dynamic query based on filters\n      if (studentId && classId && centerId && date) {\n        query = sql`\n          SELECT \n            a.id, a.student_id, a.date, a.status, a.remarks,\n            s.name as student_name, s.student_id as student_code,\n            c.name as class_name, sc.name as center_name, sc.center_id as center_code\n          FROM attendance a\n          LEFT JOIN students s ON a.student_id = s.id\n          LEFT JOIN classes c ON s.class_id = c.id\n          LEFT JOIN so_centers sc ON s.so_center_id = sc.id\n          WHERE a.student_id = ${studentId} AND s.class_id = ${classId} AND s.so_center_id = ${centerId} AND a.date = ${date}\n          ORDER BY a.date DESC, s.name\n        `;\n      } else if (studentId) {\n        query = sql`\n          SELECT \n            a.id, a.student_id, a.date, a.status, a.remarks,\n            s.name as student_name, s.student_id as student_code,\n            c.name as class_name, sc.name as center_name, sc.center_id as center_code\n          FROM attendance a\n          LEFT JOIN students s ON a.student_id = s.id\n          LEFT JOIN classes c ON s.class_id = c.id\n          LEFT JOIN so_centers sc ON s.so_center_id = sc.id\n          WHERE a.student_id = ${studentId}\n          ORDER BY a.date DESC, s.name\n        `;\n      } else if (classId && centerId) {\n        query = sql`\n          SELECT \n            a.id, a.student_id, a.date, a.status, a.remarks,\n            s.name as student_name, s.student_id as student_code,\n            c.name as class_name, sc.name as center_name, sc.center_id as center_code\n          FROM attendance a\n          LEFT JOIN students s ON a.student_id = s.id\n          LEFT JOIN classes c ON s.class_id = c.id\n          LEFT JOIN so_centers sc ON s.so_center_id = sc.id\n          WHERE s.class_id = ${classId} AND s.so_center_id = ${centerId}\n          ORDER BY a.date DESC, s.name\n        `;\n      } else if (centerId) {\n        query = sql`\n          SELECT \n            a.id, a.student_id, a.date, a.status, a.remarks,\n            s.name as student_name, s.student_id as student_code,\n            c.name as class_name, sc.name as center_name, sc.center_id as center_code\n          FROM attendance a\n          LEFT JOIN students s ON a.student_id = s.id\n          LEFT JOIN classes c ON s.class_id = c.id\n          LEFT JOIN so_centers sc ON s.so_center_id = sc.id\n          WHERE s.so_center_id = ${centerId}\n          ORDER BY a.date DESC, s.name\n        `;\n      } else {\n        // Return empty array if no meaningful filters provided\n        return res.json([]);\n      }\n\n      const attendanceRecords = await query;\n      res.json(attendanceRecords);\n    } catch (error: any) {\n      console.error('❌ Error fetching attendance:', error);\n      res.status(500).json({ message: 'Failed to fetch attendance' });\n    }\n  });\n\n  app.get(\"/api/admin/progress-tracking\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'so_center') {\n        return res.status(403).json({ message: 'SO Center access required' });\n      }\n\n      const { classId, soCenterId, fromDate, toDate } = req.query;\n\n      console.log('📊 SO Center requesting comprehensive progress tracking with filters:', {\n        classId: classId || 'All',\n        soCenterId: soCenterId || 'All',\n        fromDate: fromDate || 'No date filter',\n        toDate: toDate || 'No date filter'\n      });\n\n      // Build query for comprehensive progress data\n      let query = `\n        SELECT DISTINCT\n          s.id as student_id,\n          s.name as student_name,\n          s.student_id as student_code,\n          s.class_id,\n          cls.name as class_name,\n          s.so_center_id,\n          sc.name as center_name,\n          sc.center_id as center_code,\n          \n          -- Homework completion stats\n          COALESCE(\n            ROUND(\n              (COUNT(CASE WHEN ha.status = 'completed' THEN 1 END) * 100.0) / \n              NULLIF(COUNT(ha.id), 0), \n              1\n            ), \n            0\n          ) as homework_completion_percentage,\n          \n          -- Tuition progress stats  \n          COALESCE(\n            ROUND(\n              (COUNT(CASE WHEN tp.status = 'learned' THEN 1 END) * 100.0) / \n              NULLIF(COUNT(tp.id), 0), \n              1\n            ), \n            0\n          ) as tuition_completion_percentage,\n          \n          COUNT(DISTINCT ha.id) as total_homework_activities,\n          COUNT(CASE WHEN ha.status = 'completed' THEN 1 END) as completed_homework,\n          COUNT(DISTINCT tp.id) as total_tuition_topics,\n          COUNT(CASE WHEN tp.status = 'learned' THEN 1 END) as completed_tuition_topics\n          \n        FROM students s\n        LEFT JOIN classes cls ON s.class_id = cls.id\n        LEFT JOIN so_centers sc ON s.so_center_id = sc.id\n        LEFT JOIN homework_activities ha ON s.id = ha.student_id\n        LEFT JOIN tuition_progress tp ON s.id = tp.student_id\n        WHERE s.is_active = true\n      `;\n\n      const params: any[] = [];\n      let paramIndex = 1;\n\n      // Add filters\n      if (classId && classId !== 'all' && classId !== '') {\n        query += ` AND s.class_id = $${paramIndex}`;\n        params.push(classId);\n        paramIndex++;\n      }\n\n      if (soCenterId && soCenterId !== 'all' && soCenterId !== '') {\n        query += ` AND s.so_center_id = $${paramIndex}`;\n        params.push(soCenterId);\n        paramIndex++;\n      }\n\n      if (fromDate) {\n        query += ` AND (ha.homework_date >= $${paramIndex} OR tp.created_at >= $${paramIndex})`;\n        params.push(fromDate);\n        paramIndex++;\n      }\n\n      if (toDate) {\n        query += ` AND (ha.homework_date <= $${paramIndex} OR tp.created_at <= $${paramIndex})`;\n        params.push(toDate);\n        paramIndex++;\n      }\n\n      query += `\n        GROUP BY \n          s.id, s.name, s.student_id, s.class_id, cls.name, \n          s.so_center_id, sc.name, sc.center_id\n        ORDER BY \n          sc.name ASC, cls.name ASC, s.name ASC\n      `;\n\n      console.log('🔍 Executing admin progress query...');\n      const results = await executeRawQuery(query, params);\n\n      console.log(`✅ Retrieved ${results.length} student progress records for admin`);\n\n      // Transform the results\n      const progressData = results.map((row: any) => ({\n        studentId: row.student_id,\n        studentName: row.student_name,\n        studentCode: row.student_code,\n        classId: row.class_id,\n        className: row.class_name,\n        soCenterId: row.so_center_id,\n        centerName: row.center_name,\n        centerCode: row.center_code,\n        homeworkCompletionPercentage: parseFloat(row.homework_completion_percentage) || 0,\n        tuitionCompletionPercentage: parseFloat(row.tuition_completion_percentage) || 0,\n        totalHomeworkActivities: parseInt(row.total_homework_activities) || 0,\n        completedHomework: parseInt(row.completed_homework) || 0,\n        totalTuitionTopics: parseInt(row.total_tuition_topics) || 0,\n        completedTuitionTopics: parseInt(row.completed_tuition_topics) || 0\n      }));\n\n      res.json(progressData);\n    } catch (error: any) {\n      console.error('❌ Error fetching admin progress tracking data:', error);\n      res.status(500).json({ message: 'Failed to fetch progress tracking data' });\n    }\n  });\n\n  // Enhanced Progress Tracking Routes for SO Centers\n  \n  // Homework activities route\n  app.post(\"/api/progress-tracking/homework\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'so_center') {\n        return res.status(403).json({ message: 'SO Center access required' });\n      }\n\n      const { activities } = req.body;\n      \n      if (!activities || !Array.isArray(activities)) {\n        return res.status(400).json({ message: 'Activities array is required' });\n      }\n\n      const results = [];\n      \n      for (const activity of activities) {\n        // Get student details to determine classId\n        const student = await storage.getStudent(activity.studentId);\n        if (!student) {\n          return res.status(400).json({ message: `Student not found: ${activity.studentId}` });\n        }\n\n        const homeworkData = {\n          studentId: activity.studentId,\n          classId: student.classId,\n          homeworkDate: activity.date,\n          status: activity.status,\n          completionType: activity.completionType,\n          reason: activity.reason,\n        };\n\n        // Insert or update homework activity\n        const result = await db.insert(schema.homeworkActivities).values(homeworkData)\n          .onConflictDoUpdate({\n            target: [schema.homeworkActivities.studentId, schema.homeworkActivities.homeworkDate],\n            set: {\n              status: homeworkData.status,\n              completionType: homeworkData.completionType,\n              reason: homeworkData.reason,\n              updatedAt: new Date(),\n            }\n          })\n          .returning();\n          \n        results.push(result[0]);\n      }\n\n      res.json({ message: 'Homework activities saved successfully', count: results.length });\n    } catch (error: any) {\n      console.error('❌ Error saving homework activities:', error);\n      res.status(500).json({ message: 'Failed to save homework activities' });\n    }\n  });\n\n  // Topic completion route\n  app.post(\"/api/progress-tracking/topics/complete\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'so_center') {\n        return res.status(403).json({ message: 'SO Center access required' });\n      }\n\n      const { studentId, topicId, chapterId } = req.body;\n      \n      if (!studentId || !topicId) {\n        return res.status(400).json({ message: 'Student ID and Topic ID are required' });\n      }\n\n      // Check if topic is already completed for this student\n      const existingProgress = await db.select()\n        .from(schema.tuitionProgress)\n        .where(\n          sql`${schema.tuitionProgress.studentId} = ${studentId} AND ${schema.tuitionProgress.topicId} = ${topicId} AND ${schema.tuitionProgress.status} = 'learned'`\n        )\n        .limit(1);\n\n      if (existingProgress.length > 0) {\n        return res.status(400).json({ \n          message: 'Topic already completed',\n          alreadyCompleted: true,\n          completedDate: existingProgress[0].completedDate\n        });\n      }\n\n      const progressData = {\n        studentId: studentId,\n        topicId: topicId,\n        status: 'learned' as const,\n        completedDate: new Date(), // Use Date object instead of string\n        updatedBy: req.user.userId\n      };\n\n      // Insert or update tuition progress\n      const result = await db.insert(schema.tuitionProgress).values(progressData)\n        .onConflictDoUpdate({\n          target: [schema.tuitionProgress.studentId, schema.tuitionProgress.topicId],\n          set: {\n            status: progressData.status,\n            completedDate: progressData.completedDate,\n            updatedBy: progressData.updatedBy\n          }\n        })\n        .returning();\n\n      res.json({ message: 'Topic marked as completed', progress: result[0] });\n    } catch (error: any) {\n      console.error('❌ Error marking topic complete:', error);\n      res.status(500).json({ message: 'Failed to mark topic as completed' });\n    }\n  });\n\n  // Get topic completion status for a student\n  app.get(\"/api/progress-tracking/topics/status\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'so_center') {\n        return res.status(403).json({ message: 'SO Center access required' });\n      }\n\n      const { studentId, chapterId } = req.query;\n      \n      if (!studentId) {\n        return res.status(400).json({ message: 'Student ID is required' });\n      }\n\n      let query = `\n        SELECT \n          t.id as topic_id,\n          t.name as topic_name,\n          tp.status,\n          tp.completed_date\n        FROM topics t\n        LEFT JOIN tuition_progress tp ON t.id = tp.topic_id AND tp.student_id = $1\n      `;\n\n      const params = [studentId];\n\n      if (chapterId) {\n        query += ` WHERE t.chapter_id = $2`;\n        params.push(chapterId as string);\n      }\n\n      query += ` ORDER BY t.order_index`;\n\n      const result = await executeRawQuery(query, params);\n      \n      const completed = result.filter(row => row.status === 'learned').map(row => row.topic_id);\n      const remaining = result.filter(row => row.status !== 'learned').map(row => row.topic_id);\n\n      res.json({\n        completed,\n        remaining,\n        total: result.length,\n        details: result\n      });\n    } catch (error: any) {\n      console.error('❌ Error fetching topic status:', error);\n      res.status(500).json({ message: 'Failed to fetch topic status' });\n    }\n  });\n\n  // Teacher Management Routes\n\n  // Get all teachers\n  app.get(\"/api/admin/teachers\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const teachers = await storage.getUsersByRole('teacher');\n      res.json(teachers);\n    } catch (error) {\n      console.error('Error fetching teachers:', error);\n      res.status(500).json({ message: 'Failed to fetch teachers' });\n    }\n  });\n\n  // Get teacher by ID\n  app.get(\"/api/admin/teachers/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const teacher = await storage.getUser(req.params.id);\n      if (!teacher || teacher.role !== 'teacher') {\n        return res.status(404).json({ message: 'Teacher not found' });\n      }\n\n      res.json(teacher);\n    } catch (error) {\n      console.error('Error fetching teacher:', error);\n      res.status(500).json({ message: 'Failed to fetch teacher' });\n    }\n  });\n\n  // Create teacher - Note: Teachers are now created through User Management\n  app.post(\"/api/admin/teachers\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      // Teachers should be created through the User Management system with role \"teacher\"\n      res.status(400).json({ \n        message: \"Teachers should be created through User Management with role 'teacher'\" \n      });\n    } catch (error) {\n      console.error('Error in teacher creation endpoint:', error);\n      res.status(500).json({ message: 'Failed to process request' });\n    }\n  });\n\n  // Update teacher - Note: Teacher details are now updated through User Management\n  app.put(\"/api/admin/teachers/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      // Check if user exists and has teacher role\n      const teacher = await storage.getUser(req.params.id);\n      if (!teacher || teacher.role !== 'teacher') {\n        return res.status(404).json({ message: 'Teacher not found' });\n      }\n\n      // Teachers should be updated through the User Management system\n      res.status(400).json({ \n        message: \"Teacher details should be updated through User Management\" \n      });\n    } catch (error) {\n      console.error('Error updating teacher:', error);\n      res.status(500).json({ message: 'Failed to update teacher' });\n    }\n  });\n\n  // Delete teacher (deactivate user)\n  app.delete(\"/api/admin/teachers/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      // Check if user exists and has teacher role\n      const teacher = await storage.getUser(req.params.id);\n      if (!teacher || teacher.role !== 'teacher') {\n        return res.status(404).json({ message: 'Teacher not found' });\n      }\n\n      await storage.deleteUser(req.params.id);\n      res.json({ message: 'Teacher deleted successfully' });\n    } catch (error) {\n      console.error('Error deleting teacher:', error);\n      res.status(500).json({ message: 'Failed to delete teacher' });\n    }\n  });\n\n  // Get teacher's subjects\n  app.get(\"/api/admin/teachers/:id/subjects\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      // Check if user exists and has teacher role\n      const teacher = await storage.getUser(req.params.id);\n      if (!teacher || teacher.role !== 'teacher') {\n        return res.status(404).json({ message: 'Teacher not found' });\n      }\n\n      // Get teacher subjects from teacher_subjects table\n      const query = sqlQuery`\n        SELECT s.id, s.name, s.description \n        FROM subjects s \n        JOIN teacher_subjects ts ON s.id = ts.subject_id \n        WHERE ts.user_id = ${req.params.id} AND s.is_active = true\n        ORDER BY s.name\n      `;\n      const subjects = await db.execute(query);\n      res.json(subjects);\n    } catch (error) {\n      console.error('Error fetching teacher subjects:', error);\n      res.status(500).json({ message: 'Failed to fetch teacher subjects' });\n    }\n  });\n\n  // Get teacher's classes\n  app.get(\"/api/admin/teachers/:id/classes\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      // Check if user exists and has teacher role\n      const teacher = await storage.getUser(req.params.id);\n      if (!teacher || teacher.role !== 'teacher') {\n        return res.status(404).json({ message: 'Teacher not found' });\n      }\n\n      // Get teacher classes from teacher_classes table\n      const query = sqlQuery`\n        SELECT c.id, c.name, c.description \n        FROM classes c \n        JOIN teacher_classes tc ON c.id = tc.class_id \n        WHERE tc.user_id = ${req.params.id} AND c.is_active = true\n        ORDER BY c.name\n      `;\n      const classes = await db.execute(query);\n      res.json(classes);\n    } catch (error) {\n      console.error('Error fetching teacher classes:', error);\n      res.status(500).json({ message: 'Failed to fetch teacher classes' });\n    }\n  });\n\n  // Get teacher's daily records\n  app.get(\"/api/admin/teachers/:id/records\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      // Check if user exists and has teacher role\n      const teacher = await storage.getUser(req.params.id);\n      if (!teacher || teacher.role !== 'teacher') {\n        return res.status(404).json({ message: 'Teacher not found' });\n      }\n\n      // Get teacher records from teacher_daily_records table\n      const query = sqlQuery`\n        SELECT tr.*, c.name as class_name, s.name as subject_name, ch.name as chapter_title, t.name as topic_title\n        FROM teacher_daily_records tr\n        LEFT JOIN classes c ON tr.class_id = c.id\n        LEFT JOIN subjects s ON tr.subject_id = s.id\n        LEFT JOIN chapters ch ON tr.chapter_id = ch.id\n        LEFT JOIN topics t ON tr.topic_id = t.id\n        WHERE tr.teacher_id = ${req.params.id}\n        ORDER BY tr.record_date DESC, tr.created_at DESC\n      `;\n      const records = await db.execute(query);\n      res.json(records);\n    } catch (error) {\n      console.error('Error fetching teacher records:', error);\n      res.status(500).json({ message: 'Failed to fetch teacher records' });\n    }\n  });\n\n  // Add daily teaching record\n  app.post(\"/api/admin/teacher-records\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      console.log('Teaching record request body:', req.body);\n\n      const { teacherId, classId, subjectId, chapterId, teachingDuration, notes, recordDate } = req.body;\n\n      if (!teacherId || !classId || !subjectId || !teachingDuration) {\n        console.log('Missing required fields:', { teacherId, classId, subjectId, teachingDuration });\n        return res.status(400).json({ \n          message: \"Required fields missing\",\n          missing: {\n            teacherId: !teacherId,\n            classId: !classId, \n            subjectId: !subjectId,\n            teachingDuration: !teachingDuration\n          }\n        });\n      }\n\n      const recordData = {\n        teacherId: teacherId,\n        recordDate: recordDate || new Date().toISOString().split('T')[0],\n        classId: classId,\n        subjectId: subjectId,\n        chapterId: chapterId || null,\n        teachingDuration: parseInt(teachingDuration),\n        notes: notes || null\n      };\n\n      console.log('Creating teaching record with data:', recordData);\n\n      const [newRecord] = await db.insert(schema.teacherDailyRecords)\n        .values(recordData)\n        .returning();\n\n      console.log('Teaching record created successfully:', newRecord);\n      res.status(201).json({ message: 'Teaching record added successfully', record: newRecord });\n    } catch (error: any) {\n      console.error('Error adding teaching record:', error);\n      res.status(500).json({ message: 'Failed to add teaching record', error: error.message });\n    }\n  });\n\n  // Get teacher records with date filtering\n  app.get(\"/api/admin/teachers/:teacherId/records\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const { teacherId } = req.params;\n      const { fromDate, toDate } = req.query;\n\n      console.log('Fetching records for teacher:', teacherId, 'with dates:', { fromDate, toDate });\n\n      // Build the query with proper parameter substitution\n      let queryString = `\n        SELECT \n          tr.id,\n          tr.teacher_id,\n          tr.record_date,\n          tr.class_id,\n          tr.subject_id,\n          tr.chapter_id,\n          tr.teaching_duration,\n          tr.notes,\n          tr.created_at,\n          c.name as className,\n          s.name as subjectName,\n          ch.name as chapterTitle\n        FROM teacher_daily_records tr\n        LEFT JOIN classes c ON tr.class_id = c.id\n        LEFT JOIN subjects s ON tr.subject_id = s.id\n        LEFT JOIN chapters ch ON tr.chapter_id = ch.id\n        WHERE tr.teacher_id = $1\n      `;\n\n      const params = [teacherId];\n\n      if (fromDate) {\n        queryString += ` AND tr.record_date >= $${params.length + 1}`;\n        params.push(fromDate as string);\n      }\n\n      if (toDate) {\n        queryString += ` AND tr.record_date <= $${params.length + 1}`;\n        params.push(toDate as string);\n      }\n\n      queryString += ` ORDER BY tr.record_date DESC, tr.created_at DESC`;\n\n      console.log('Executing query:', queryString);\n      console.log('With params:', params);\n\n      const result = await executeRawQuery(queryString, params);\n      console.log('Query result:', result);\n\n      // Transform result to match expected format\n      const records = result.map((row: any) => ({\n        id: row.id,\n        teacherId: row.teacher_id,\n        recordDate: row.record_date,\n        classId: row.class_id,\n        subjectId: row.subject_id,\n        chapterId: row.chapter_id,\n        teachingDuration: row.teaching_duration,\n        notes: row.notes,\n        createdAt: row.created_at,\n        className: row.classname,\n        subjectName: row.subjectname,\n        chapterTitle: row.chaptertitle\n      }));\n\n      res.json(records);\n    } catch (error: any) {\n      console.error('Error fetching teacher records:', error);\n      res.status(500).json({ message: 'Failed to fetch teacher records', error: error.message });\n    }\n  });\n\n  \n\n  // Update teacher class assignments\n  app.put(\"/api/admin/teachers/:id/classes\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      // Check if user exists and has teacher role\n      const teacher = await storage.getUser(req.params.id);\n      if (!teacher || teacher.role !== 'teacher') {\n        return res.status(404).json({ message: 'Teacher not found' });\n      }\n\n      const { classIds } = req.body;\n\n      if (!Array.isArray(classIds)) {\n        return res.status(400).json({ message: 'classIds must be an array' });\n      }\n\n      // Delete existing assignments\n      await db.execute(sqlQuery`DELETE FROM teacher_classes WHERE user_id = ${req.params.id}`);\n\n      // Insert new assignments\n      if (classIds.length > 0) {\n        for (const classId of classIds) {\n          await db.execute(sqlQuery`\n            INSERT INTO teacher_classes (user_id, class_id) \n            VALUES (${req.params.id}, ${classId})\n          `);\n        }\n      }\n\n      res.json({ message: 'Teacher classes updated successfully' });\n    } catch (error) {\n      console.error('Error updating teacher classes:', error);\n      res.status(500).json({ message: 'Failed to update teacher classes' });\n    }\n  });\n\n  // Update teacher class assignments\n  app.put(\"/api/admin/teachers/:id/classes\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const { classIds } = req.body;\n\n      if (!Array.isArray(classIds)) {\n        return res.status(400).json({ message: 'classIds must be an array' });\n      }\n\n      // This functionality is now handled by the new class assignments endpoint above\n      res.json({ message: 'Teacher classes updated successfully' });\n    } catch (error) {\n      console.error('Error updating teacher classes:', error);\n      res.status(500).json({ message: 'Failed to update teacher classes' });\n    }\n  });\n\n  // =================== PRODUCTS MANAGEMENT ===================\n\n  // Get all products (Admin only)\n  app.get(\"/api/admin/products\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const products = await storage.getAllProducts();\n      res.json(products);\n    } catch (error) {\n      console.error('Error fetching products:', error);\n      res.status(500).json({ message: 'Failed to fetch products' });\n    }\n  });\n\n  // Create product (Admin only)\n  app.post(\"/api/admin/products\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const productData = req.body;\n      const product = await storage.createProduct(productData);\n      res.status(201).json(product);\n    } catch (error) {\n      console.error('Error creating product:', error);\n      res.status(500).json({ message: 'Failed to create product' });\n    }\n  });\n\n  // Update product (Admin only)\n  app.put(\"/api/admin/products/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const productData = req.body;\n      const product = await storage.updateProduct(req.params.id, productData);\n      res.json(product);\n    } catch (error) {\n      console.error('Error updating product:', error);\n      res.status(500).json({ message: 'Failed to update product' });\n    }\n  });\n\n  // Delete product (Admin only)\n  app.delete(\"/api/admin/products/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      await storage.deleteProduct(req.params.id);\n      res.json({ message: 'Product deleted successfully' });\n    } catch (error) {\n      console.error('Error deleting product:', error);\n      res.status(500).json({ message: 'Failed to delete product' });\n    }\n  });\n\n  // Get products for SO centers (filtered by availability)\n  app.get(\"/api/products\", authenticateToken, async (req, res) => {\n    try {\n      const products = await storage.getAllProducts();\n      // Filter only active products for SO centers\n      const activeProducts = products.filter(product => product.isActive);\n      res.json(activeProducts);\n    } catch (error) {\n      console.error('Error fetching products:', error);\n      res.status(500).json({ message: 'Failed to fetch products' });\n    }\n  });\n\n  // Create product order (SO centers)\n  app.post(\"/api/product-orders\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || !['so_center', 'admin'].includes(req.user.role)) {\n        return res.status(403).json({ message: 'SO Center or Admin access required' });\n      }\n\n      const orderData = {\n        ...req.body,\n        soCenterId: req.user.role === 'so_center' ? req.user.userId : req.body.soCenterId\n      };\n\n      const order = await storage.createProductOrder(orderData);\n      res.status(201).json(order);\n    } catch (error) {\n      console.error('Error creating product order:', error);\n      res.status(500).json({ \n        message: error.message || 'Failed to create product order'\n      });\n    }\n  });\n\n  // Get product orders for SO center\n  app.get(\"/api/product-orders\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || !['so_center', 'admin'].includes(req.user.role)) {\n        return res.status(403).json({ message: 'SO Center or Admin access required' });\n      }\n\n      const soCenterId = req.user.role === 'so_center' ? req.user.userId : req.query.soCenterId as string;\n\n      if (!soCenterId) {\n        return res.status(400).json({ message: 'SO Center ID required' });\n      }\n\n      const orders = await storage.getProductOrdersBySoCenter(soCenterId);\n      res.json(orders);\n    } catch (error) {\n      console.error('Error fetching product orders:', error);\n      res.status(500).json({ message: 'Failed to fetch product orders' });\n    }\n  });\n\n  // Get commission wallet for SO center\n  app.get(\"/api/commission-wallet\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || !['so_center', 'admin'].includes(req.user.role)) {\n        return res.status(403).json({ message: 'SO Center or Admin access required' });\n      }\n\n      const soCenterId = req.user.role === 'so_center' ? req.user.userId : req.query.soCenterId as string;\n\n      if (!soCenterId) {\n        return res.status(400).json({ message: 'SO Center ID required' });\n      }\n\n      const wallet = await storage.getCommissionWalletBySoCenter(soCenterId);\n\n      if (!wallet) {\n        // Create wallet if doesn't exist\n        const newWallet = await storage.getOrCreateCommissionWallet(soCenterId);\n        res.json(newWallet);\n      } else {\n        res.json(wallet);\n      }\n    } catch (error) {\n      console.error('Error fetching commission wallet:', error);\n      res.status(500).json({ message: 'Failed to fetch commission wallet' });\n    }\n  });\n\n  // Create withdrawal request\n  app.post(\"/api/withdrawal-requests\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || !['so_center', 'admin'].includes(req.user.role)) {\n        return res.status(403).json({ message: 'SO Center or Admin access required' });\n      }\n\n      const requestData = {\n        ...req.body,\n        soCenterId: req.user.role === 'so_center' ? req.user.userId : req.body.soCenterId\n      };\n\n      const request = await storage.createWithdrawalRequest(requestData);\n      res.status(201).json(request);\n    } catch (error) {\n      console.error('Error creating withdrawal request:', error);\n      res.status(500).json({ \n        message: error.message || 'Failed to create withdrawal request'\n      });\n    }\n  });\n\n  // Get withdrawal requests for SO center\n  app.get(\"/api/withdrawal-requests\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      let requests;\n      if (req.user.role === 'admin') {\n        // Admin can see all requests\n        requests = await storage.getDropoutRequests();\n      } else if (req.user.role === 'so_center') {\n        // SO Center can only see their own requests\n        const soCenter = await storage.getSoCenterByEmail(req.user.email);\n        if (!soCenter) {\n          return res.status(404).json({ message: \"SO Center not found\" });\n        }\n        requests = await storage.getDropoutRequests(soCenter.id);\n      } else {\n        return res.status(403).json({ message: \"Unauthorized access\" });\n      }\n\n      res.json(requests);\n    } catch (error) {\n      console.error('Error fetching dropout requests:', error);\n      res.status(500).json({ message: \"Failed to fetch dropout requests\" });\n    }\n  });\n\n  // Process withdrawal request (Admin only)\n  app.put(\"/api/admin/withdrawal-requests/:id/process\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const { id } = req.params;\n      const { status, notes } = req.body;\n\n      if (!['approved', 'rejected'].includes(status)) {\n        return res.status(400).json({ message: 'Invalid status. Must be approved or rejected' });\n      }\n\n      const request = await storage.processWithdrawalRequest(\n        id, \n        status, \n        req.user.userId, \n        notes\n      );\n\n      res.json(request);\n    } catch (error) {\n      console.error('Error processing withdrawal request:', error);\n      res.status(500).json({ \n        message: error.message || 'Failed to process withdrawal request'\n      });\n    }\n  });\n\n  // System Settings Management (Admin only)\n  app.get(\"/api/admin/system-settings/:key\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const setting = await storage.getSystemSetting(req.params.key);\n      res.json(setting);\n    } catch (error) {\n      console.error('Error fetching system setting:', error);\n      res.status(500).json({ message: 'Failed to fetch system setting' });\n    }\n  });\n\n  app.put(\"/api/admin/system-settings/:key\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'admin') {\n        return res.status(403).json({ message: 'Admin access required' });\n      }\n\n      const { value, description } = req.body;\n      const setting = await storage.setSystemSetting(\n        req.params.key, \n        value, \n        description, \n        req.user.userId\n      );\n\n      res.json(setting);\n    } catch (error) {\n      console.error('Error updating system setting:', error);\n      res.status(500).json({ message: 'Failed to update system setting' });\n    }\n  });\n\n  // SO Center Expenses Management Routes\n\n  // Get SO Center profile with autofill data\n  app.get(\"/api/so-center/profile\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user?.role !== 'so_center') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      // Debug: Check what email we're looking for\n      console.log('🔍 Looking for SO Center with email:', req.user.email);\n\n      // Look up SO Center by email since SO Centers use email authentication\n      const soCenter = await db.select()\n        .from(schema.soCenters)\n        .where(eq(schema.soCenters.email, req.user.email))\n        .limit(1);\n\n      // Debug: If not found by email, try to find any centers and see their emails\n      if (!soCenter.length) {\n        console.log('❌ No SO Center found with exact email match');\n        const allCenters = await db.select({ id: schema.soCenters.id, email: schema.soCenters.email, centerId: schema.soCenters.centerId })\n          .from(schema.soCenters)\n          .limit(5);\n        console.log('📋 Available SO Centers:', allCenters);\n\n        // Try to find by similar email pattern\n        const emailMatch = await db.select()\n          .from(schema.soCenters)\n          .where(sqlQuery`email ILIKE ${`%${req.user.email.split('@')[0]}%`}`)\n          .limit(1);\n\n        if (emailMatch.length) {\n          console.log('✅ Found SO Center by email pattern match:', emailMatch[0].centerId);\n          return res.json(emailMatch[0]);\n        }\n\n        console.log('SO Center not found for email:', req.user.email);\n        return res.status(404).json({ message: \"SO Center not found\" });\n      }\n\n      console.log('✅ SO Center profile retrieved:', soCenter[0].centerId);\n      res.json(soCenter[0]);\n    } catch (error) {\n      console.error(\"Error fetching SO Center profile:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get expense requests for SO Center\n  app.get(\"/api/so-center/expenses\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user?.role !== 'so_center') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const expenses = await db.select()\n        .from(schema.soCenterExpenses)\n        .where(sqlQuery`so_center_id = ${req.user.userId}`)\n        .orderBy(sqlQuery`requested_at DESC`);\n\n      res.json(expenses);\n    } catch (error) {\n      console.error(\"Error fetching expenses:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Create expense request\n  app.post(\"/api/so-center/expenses\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user?.role !== 'so_center') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const validatedData = insertSoCenterExpenseSchema.parse({\n        ...req.body,\n        soCenterId: req.user.userId,\n        status: 'pending'\n      });\n\n      const [expense] = await db.insert(schema.soCenterExpenses)\n        .values(validatedData)\n        .returning();\n\n      res.json(expense);\n    } catch (error) {\n      console.error(\"Error creating expense request:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get expense wallet for SO Center\n  app.get(\"/api/so-center/expense-wallet\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user?.role !== 'so_center') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      // Get or create expense wallet\n      let [wallet] = await db.select()\n        .from(schema.soCenterExpenseWallet)\n        .where(sqlQuery`so_center_id = ${req.user.userId}`)\n        .limit(1);\n\n      if (!wallet) {\n        // Create wallet if not exists\n        [wallet] = await db.insert(schema.soCenterExpenseWallet)\n          .values({\n            soCenterId: req.user.userId,\n            totalExpenses: '0',\n            remainingBalance: '0'\n          })\n          .returning();\n      }\n\n      // Calculate current values from expenses and collections\n      const totalExpenses = await db.select({\n        sum: sqlQuery`COALESCE(SUM(CAST(amount AS DECIMAL)), 0)`\n      })\n      .from(schema.soCenterExpenses)\n      .where(sqlQuery`so_center_id = ${req.user.userId} AND status = 'paid'`);\n\n      // Get total collections from wallet\n      const [soCenter] = await db.select({ walletBalance: schema.soCenters.walletBalance })\n        .from(schema.soCenters)\n        .where(sqlQuery`id = ${req.user.userId}`)\n        .limit(1);\n\n      const totalCollections = parseFloat(soCenter?.walletBalance || '0');\n      const expenseAmount = parseFloat(totalExpenses[0]?.sum || '0');\n      const remainingBalance = totalCollections - expenseAmount;\n\n      // Update wallet with current values\n      await db.update(schema.soCenterExpenseWallet)\n        .set({\n          totalExpenses: expenseAmount.toString(),\n          remainingBalance: remainingBalance.toString(),\n          lastUpdated: new Date()\n        })\n        .where(sqlQuery`so_center_id = ${req.user.userId}`);\n\n      res.json({\n        totalExpenses: expenseAmount.toString(),\n        remainingBalance: remainingBalance.toString(),\n        lastUpdated: new Date().toISOString()\n      });\n    } catch (error) {\n      console.error(\"Error fetching expense wallet:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Mark expense as paid (for SO Centers)\n  app.post(\"/api/so-center/expenses/:expenseId/pay\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user?.role !== 'so_center') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const { expenseId } = req.params;\n      const { paymentMethod, paymentReference } = req.body;\n\n      // Verify expense belongs to this SO Center and is approved\n      const [expense] = await db.select()\n        .from(schema.soCenterExpenses)\n        .where(sqlQuery`id = ${expenseId} AND so_center_id = ${req.user.userId} AND status = 'approved'`)\n        .limit(1);\n\n      if (!expense) {\n        return res.status(404).json({ message: \"Expense not found or not approved\" });\n      }\n\n      // Generate transaction ID\n      const transactionId = `TXN-${Date.now()}-EXP-${expenseId.slice(0, 8)}`;\n\n      // Update expense as paid\n      const [updatedExpense] = await db.update(schema.soCenterExpenses)\n        .set({\n          status: 'paid',\n          paymentMethod,\n          paymentReference,\n          transactionId,\n          paidAt: new Date(),\n          paidBy: req.user.userId\n        })\n        .where(sqlQuery`id = ${expenseId}`)\n        .returning();\n\n      res.json({ \n        expense: updatedExpense,\n        transactionId \n      });\n    } catch (error) {\n      console.error(\"Error marking expense as paid:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Admin Expense Approval Routes\n\n  // Get all expense requests for admin approval\n  app.get(\"/api/admin/expenses\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const { status, search, soCenterId } = req.query;\n\n      // Build base query with joins\n      let whereClause = sqlQuery`1=1`;\n\n      if (status && status !== 'all') {\n        whereClause = sqlQuery`${whereClause} AND ${schema.soCenterExpenses.status} = ${status}`;\n      }\n      if (soCenterId) {\n        whereClause = sqlQuery`${whereClause} AND ${schema.soCenterExpenses.soCenterId} = ${soCenterId}`;\n      }\n      if (search) {\n        whereClause = sqlQuery`${whereClause} AND (${schema.soCenters.name} ILIKE ${`%${search}%`} OR ${schema.soCenters.centerId} ILIKE ${`%${search}%`})`;\n      }\n\n      const expenses = await db.select({\n        id: schema.soCenterExpenses.id,\n        expenseType: schema.soCenterExpenses.expenseType,\n        amount: schema.soCenterExpenses.amount,\n        description: schema.soCenterExpenses.description,\n        status: schema.soCenterExpenses.status,\n        requestedAt: schema.soCenterExpenses.requestedAt,\n        approvedAt: schema.soCenterExpenses.approvedAt,\n        paidAt: schema.soCenterExpenses.paidAt,\n        soCenterId: schema.soCenterExpenses.soCenterId,\n        soCenterName: schema.soCenters.name,\n        centerCode: schema.soCenters.centerId,\n        electricBillNumber: schema.soCenterExpenses.electricBillNumber,\n        internetBillNumber: schema.soCenterExpenses.internetBillNumber,\n        internetServiceProvider: schema.soCenterExpenses.internetServiceProvider,\n        serviceName: schema.soCenterExpenses.serviceName,\n        servicePhone: schema.soCenterExpenses.servicePhone,\n        adminNotes: schema.soCenterExpenses.adminNotes,\n        transactionId: schema.soCenterExpenses.transactionId,\n        paymentMethod: schema.soCenterExpenses.paymentMethod,\n        paymentReference: schema.soCenterExpenses.paymentReference\n      })\n      .from(schema.soCenterExpenses)\n      .leftJoin(schema.soCenters, sqlQuery`${schema.soCenterExpenses.soCenterId} = ${schema.soCenters.id}`)\n      .where(whereClause)\n      .orderBy(sqlQuery`${schema.soCenterExpenses.requestedAt} DESC`);\n\n      res.json(expenses);\n    } catch (error) {\n      console.error(\"Error fetching admin expenses:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Approve/Reject expense request\n  app.post(\"/api/admin/expenses/:expenseId/approval\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const { expenseId } = req.params;\n      const { action, adminNotes } = req.body; // action: 'approve' or 'reject'\n\n      if (!['approve', 'reject'].includes(action)) {\n        return res.status(400).json({ message: \"Invalid action\" });\n      }\n\n      const [updatedExpense] = await db.update(schema.soCenterExpenses)\n        .set({\n          status: action === 'approve' ? 'approved' : 'rejected',\n          adminNotes,\n          approvedAt: new Date(),\n          approvedBy: req.user.userId\n        })\n        .where(sqlQuery`${schema.soCenterExpenses.id} = ${expenseId}`)\n        .returning();\n\n      if (!updatedExpense) {\n        return res.status(404).json({ message: \"Expense not found\" });\n      }\n\n      res.json({ \n        expense: updatedExpense,\n        message: `Expense ${action}d successfully`\n      });\n    } catch (error) {\n      console.error(\"Error processing expense approval:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get approval history\n  app.get(\"/api/admin/expenses/history\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const history = await db.select({\n        id: schema.soCenterExpenses.id,\n        expenseType: schema.soCenterExpenses.expenseType,\n        amount: schema.soCenterExpenses.amount,\n        status: schema.soCenterExpenses.status,\n        requestedAt: schema.soCenterExpenses.requestedAt,\n        approvedAt: schema.soCenterExpenses.approvedAt,\n        paidAt: schema.soCenterExpenses.paidAt,\n        soCenterName: schema.soCenters.name,\n        centerCode: schema.soCenters.centerId,\n        adminNotes: schema.soCenterExpenses.adminNotes,\n        approverName: schema.users.name\n      })\n      .from(schema.soCenterExpenses)\n      .leftJoin(schema.soCenters, sqlQuery`${schema.soCenterExpenses.soCenterId} = ${schema.soCenters.id}`)\n      .leftJoin(schema.users, sqlQuery`${schema.soCenterExpenses.approvedBy} = ${schema.users.id}`)\n      .where(sqlQuery`${schema.soCenterExpenses.status} IN ('approved', 'rejected', 'paid')`)\n      .orderBy(sqlQuery`${schema.soCenterExpenses.approvedAt} DESC`);\n\n      res.json(history);\n    } catch (error) {\n      console.error(\"Error fetching approval history:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get admin expense statistics\n  app.get(\"/api/admin/expense-stats\", authenticateToken, async (req, res) => {\n    try {\n      if (req.user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Unauthorized\" });\n      }\n\n      const [statsResult] = await db.execute(sqlQuery`\n        SELECT \n          COUNT(CASE WHEN status = 'pending' THEN 1 END) as total_pending,\n          COUNT(CASE WHEN status = 'approved' THEN 1 END) as total_approved,\n          COUNT(CASE WHEN status = 'paid' THEN 1 END) as total_paid,\n          COALESCE(SUM(CASE WHEN status = 'paid' THEN amount ELSE 0 END), 0) as total_amount\n        FROM so_center_expenses\n      `);\n\n      const stats = {\n        totalPending: Number(statsResult.total_pending || 0),\n        totalApproved: Number(statsResult.total_approved || 0), \n        totalPaid: Number(statsResult.total_paid || 0),\n        totalAmount: (statsResult.total_amount || 0).toString()\n      };\n\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching admin expense stats:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // EXAM MANAGEMENT ENDPOINTS\n\n  // Get all exams with related data\n  app.get('/api/admin/exams', authenticateToken, async (req, res) => {\n    try {\n      console.log('📋 Fetching all exams for admin...');\n\n      // Simple query first to check if exams exist\n      const examsList = await db.select().from(schema.exams);\n\n      console.log('✅ Exams fetched successfully:', examsList.length);\n      console.log('📊 Exams data:', examsList);\n      res.json(examsList);\n    } catch (error: any) {\n      console.error('❌ Error fetching exams:', error);\n      console.error('❌ Full error details:', error.message, error.stack);\n      res.status(500).json({ message: 'Failed to fetch exams' });\n    }\n  });\n\n  // Create new exam\n  app.post('/api/admin/exams', authenticateToken, async (req, res) => {\n    try {\n      console.log('🆕 Creating new exam...');\n\n      const examData = insertExamSchema.parse(req.body);\n      const userId = req.user?.userId;\n\n      const [newExam] = await db\n        .insert(schema.exams)\n        .values({\n          ...examData,\n          createdBy: userId,\n        })\n        .returning();\n\n      console.log('✅ Exam created successfully:', newExam.id);\n      res.json(newExam);\n    } catch (error: any) {\n      console.error('❌ Error creating exam:', error);\n      res.status(500).json({ message: 'Failed to create exam' });\n    }\n  });\n\n  // Update exam\n  app.put('/api/admin/exams/:id', authenticateToken, async (req, res) => {\n    try {\n      const examId = req.params.id;\n      console.log('📝 Updating exam:', examId);\n\n      const examData = insertExamSchema.parse(req.body);\n\n      const [updatedExam] = await db\n        .update(schema.exams)\n        .set({\n          ...examData,\n          updatedAt: new Date(),\n        })\n        .where(eq(schema.exams.id, examId))\n        .returning();\n\n      if (!updatedExam) {\n        return res.status(404).json({ message: 'Exam not found' });\n      }\n\n      console.log('✅ Exam updated successfully');\n      res.json(updatedExam);\n    } catch (error: any) {\n      console.error('❌ Error updating exam:', error);\n      res.status(500).json({ message: 'Failed to update exam' });\n    }\n  });\n\n  // Delete exam\n  app.delete('/api/admin/exams/:id', authenticateToken, async (req, res) => {\n    try {\n      const examId = req.params.id;\n      console.log('🗑️ Deleting exam:', examId);\n\n      await db.delete(schema.exams).where(eq(schema.exams.id, examId));\n\n      console.log('✅ Exam deleted successfully');\n      res.json({ message: 'Exam deleted successfully' });\n    } catch (error: any) {\n      console.error('❌ Error deleting exam:', error);\n      res.status(500).json({ message: 'Failed to delete exam' });\n    }\n  });\n\n  // SO CENTER EXAM MANAGEMENT ENDPOINTS\n\n  // Get exams for logged-in SO Center user (Optimized for performance)\n  app.get('/api/so-center/exams', authenticateToken, async (req, res) => {\n    try {\n      const userId = req.user?.userId;\n      console.log('📋 Fetching exams for SO Center user:', userId);\n\n      // Use the existing working getSoCenterByEmail method\n      let soCenter = null;\n      if (req.user?.email) {\n        try {\n          soCenter = await storage.getSoCenterByEmail(req.user.email);\n          if (soCenter) {\n            console.log('✅ Found SO Center by email:', soCenter.centerId);\n          }\n        } catch (error) {\n          console.log('⚠️ Email lookup failed, trying fallback');\n        }\n      }\n\n      // Fallback lookup by managerId if email lookup fails\n      if (!soCenter && userId) {\n        try {\n          const soCenterByManager = await db.select()\n            .from(schema.soCenters)\n            .where(eq(schema.soCenters.managerId, userId))\n            .limit(1);\n\n          if (soCenterByManager.length > 0) {\n            soCenter = soCenterByManager[0];\n            console.log('✅ Fallback - Found SO Center by managerId:', soCenter.centerId);\n          }\n        } catch (error) {\n          console.log('⚠️ Manager lookup also failed');\n        }\n      }\n\n      if (!soCenter) {\n        console.log('❌ No SO Center found for user');\n        return res.status(404).json({ message: 'SO Center not found for this user' });\n      }\n\n      const soCenterId = soCenter.id;\n\n      // Simplified exam query to avoid performance issues\n      const allExams = await db.select()\n        .from(schema.exams)\n        .leftJoin(schema.classes, eq(schema.exams.classId, schema.classes.id))\n        .leftJoin(schema.subjects, eq(schema.exams.subjectId, schema.subjects.id))\n        .orderBy(desc(schema.exams.examDate));\n\n      // Filter exams for this SO Center in JavaScript to avoid complex SQL\n      const exams = allExams\n        .filter(examRow => {\n          const soCenterIds = examRow.exams.soCenterIds;\n          return Array.isArray(soCenterIds) && soCenterIds.includes(soCenterId);\n        })\n        .map(examRow => ({\n          ...examRow.exams,\n          className: examRow.classes?.name || 'N/A',\n          subjectName: examRow.subjects?.name || 'N/A'\n        }));\n\n      console.log('✅ Found', exams.length, 'exams for SO Center');\n      res.json(exams);\n    } catch (error: any) {\n      console.error('❌ Error fetching SO Center exams:', error);\n      // Fallback to JavaScript filtering if SQL array query fails\n      try {\n        const allExams = await db.select()\n          .from(schema.exams)\n          .leftJoin(schema.classes, eq(schema.exams.classId, schema.classes.id))\n          .leftJoin(schema.subjects, eq(schema.exams.subjectId, schema.subjects.id))\n          .orderBy(desc(schema.exams.examDate));\n\n        const filteredExams = allExams.filter(exam => \n          exam.exams.soCenterIds && exam.exams.soCenterIds.includes(req.user?.userId || '')\n        );\n\n        res.json(filteredExams.map(item => ({\n          ...item.exams,\n          className: item.classes?.name,\n          subjectName: item.subjects?.name\n        })));\n      } catch (fallbackError) {\n        res.status(500).json({ message: 'Failed to fetch exams' });\n      }\n    }\n  });\n\n  // Get students for logged-in SO Center user\n  app.get('/api/so-center/students', authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'so_center') {\n        return res.status(403).json({ message: 'SO Center access required' });\n      }\n\n      console.log('🔐 CRITICAL PRIVACY: SO Center students endpoint - enforcing strict filtering');\n      console.log('👥 SO Center user requesting students:', req.user.userId, req.user.email);\n\n      // Get SO Center associated with this user's email\n      const soCenter = await storage.getSoCenterByEmail(req.user.email);\n      if (!soCenter) {\n        console.log('❌ PRIVACY VIOLATION PREVENTED: No SO Center found for user email:', req.user.email);\n        return res.status(403).json({ message: \"SO Center not found for authenticated user\" });\n      }\n\n      console.log('✅ SO Center identified:', soCenter.centerId, '- Fetching ONLY their students');\n\n      // Get ONLY students registered by THIS specific SO Center\n      const students = await storage.getStudentsBySoCenter(soCenter.id);\n\n      console.log(`🔒 PRIVACY ENFORCED: Retrieved ${students.length} students exclusively for SO Center ${soCenter.centerId}`);\n\n      if (!students || students.length === 0) {\n        console.log('📭 No students found for this SO Center');\n        return res.json([]);\n      }\n\n      res.json(students);\n    } catch (error: any) {\n      console.error('❌ Error fetching SO Center students:', error);\n      res.status(500).json({ message: 'Failed to fetch students' });\n    }\n  });\n\n  // Mark exam as completed by SO Center\n  app.post('/api/so-center/exams/:examId/complete', authenticateToken, async (req, res) => {\n    try {\n      const { examId } = req.params;\n      console.log('✅ Marking exam as completed:', examId);\n\n      const [updatedExam] = await db\n        .update(schema.exams)\n        .set({\n          status: 'completed',\n          updatedAt: new Date(),\n        })\n        .where(eq(schema.exams.id, examId))\n        .returning();\n\n      if (!updatedExam) {\n        return res.status(404).json({ message: 'Exam not found' });\n      }\n\n      console.log('✅ Exam marked as completed');\n      res.json({ message: 'Exam marked as completed', exam: updatedExam });\n    } catch (error: any) {\n      console.error('❌ Error marking exam as completed:', error);\n      res.status(500).json({ message: 'Failed to mark exam as completed' });\n    }\n  });\n\n  // Get exam questions for individual marks entry\n  app.get(\"/api/exams/:examId/questions\", authenticateToken, async (req, res) => {\n    try {\n      const examId = req.params.examId;\n      console.log('📋 Fetching questions for exam:', examId);\n\n      // Get exam with questions\n      const exam = await sql`\n        SELECT questions, title, total_questions, total_marks\n        FROM exams \n        WHERE id = ${examId}\n      `;\n\n      if (!exam || exam.length === 0) {\n        console.log('❌ Exam not found:', examId);\n        return res.status(404).json({ message: \"Exam not found\" });\n      }\n\n      const examData = exam[0];\n      console.log('📊 Exam data found:', { \n        title: examData.title, \n        hasQuestions: !!examData.questions \n      });\n\n      // Parse questions if they exist\n      let questions = [];\n      if (examData.questions) {\n        try {\n          questions = JSON.parse(examData.questions);\n          console.log('✅ Questions parsed successfully:', questions.length);\n        } catch (parseError) {\n          console.error('❌ Error parsing questions JSON:', parseError);\n          questions = [];\n        }\n      }\n\n      // Format questions for response\n      const formattedQuestions = questions.map((q: any, index: number) => ({\n        questionNumber: q.questionNumber || index + 1,\n        marks: q.marks || 0,\n        questionText: q.questionText || q.question || `Question ${index + 1}`,\n        questionType: q.questionType || q.type || 'descriptive'\n      }));\n\n      console.log('📋 Returning formatted questions:', formattedQuestions.length);\n\n      res.json(formattedQuestions);\n    } catch (error: any) {\n      console.error('❌ Error fetching exam questions:', error);\n      res.status(500).json({ message: \"Failed to fetch exam questions\" });\n    }\n  });\n\n  // Get all exam results for a specific exam (SO Center filtered)\n  app.get('/api/exams/:examId/results', authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'so_center') {\n        return res.status(403).json({ message: 'SO Center access required' });\n      }\n\n      const { examId } = req.params;\n      console.log('📊 Fetching all results for exam:', examId);\n\n      // Get SO Center for this user\n      const soCenter = await storage.getSoCenterByEmail(req.user.email);\n      if (!soCenter) {\n        return res.status(403).json({ message: \"SO Center not found for user\" });\n      }\n\n      // Get all results for this exam for students from this SO Center\n      const results = await db\n        .select({\n          id: schema.examResults.id,\n          studentId: schema.examResults.studentId,\n          examId: schema.examResults.examId,\n          marksObtained: schema.examResults.marksObtained,\n          answeredQuestions: schema.examResults.answeredQuestions,\n          detailedResults: schema.examResults.detailedResults,\n          createdAt: schema.examResults.createdAt,\n          updatedAt: schema.examResults.updatedAt,\n          // Include student info for verification\n          studentName: schema.students.name,\n          studentNumber: schema.students.studentId\n        })\n        .from(schema.examResults)\n        .leftJoin(schema.students, eq(schema.examResults.studentId, schema.students.id))\n        .where(\n          and(\n            eq(schema.examResults.examId, examId),\n            eq(schema.students.soCenterId, soCenter.id)\n          )\n        )\n        .orderBy(schema.examResults.createdAt);\n\n      console.log(`📊 Found ${results.length} results for exam ${examId} in SO Center ${soCenter.centerId}`);\n      \n      // Calculate percentage for each result that doesn't have it\n      const exam = await db.select()\n        .from(schema.exams)\n        .where(eq(schema.exams.id, examId))\n        .limit(1);\n        \n      const examTotalMarks = exam.length > 0 ? Number(exam[0].totalMarks) : 0;\n      \n      const resultsWithPercentage = results.map(result => ({\n        ...result,\n        percentage: examTotalMarks > 0 ? Math.round((result.marksObtained / examTotalMarks) * 100) : 0\n      }));\n\n      res.json(resultsWithPercentage);\n    } catch (error: any) {\n      console.error('❌ Error fetching exam results:', error);\n      res.status(500).json({ message: 'Failed to fetch exam results' });\n    }\n  });\n\n  // Get individual student results for an exam\n  app.get('/api/exams/:examId/student-results/:studentId', authenticateToken, async (req, res) => {\n    try {\n      const { examId, studentId } = req.params;\n      console.log('📊 Fetching individual student results:', { examId, studentId });\n\n      // Get existing detailed results if any\n      const existingResult = await db.select()\n        .from(schema.examResults)\n        .where(\n          sqlQuery`exam_id = ${examId} AND student_id = ${studentId}`\n        );\n\n      if (existingResult.length > 0 && existingResult[0].detailedResults) {\n        const detailedResults = JSON.parse(existingResult[0].detailedResults);\n        res.json({\n          totalMarks: existingResult[0].marksObtained,\n          status: existingResult[0].answeredQuestions,\n          questions: detailedResults.questions || []\n        });\n      } else {\n        // Return empty results structure\n        res.json({\n          totalMarks: 0,\n          status: 'not_answered',\n          questions: []\n        });\n      }\n    } catch (error: any) {\n      console.error('❌ Error fetching student results:', error);\n      res.status(500).json({ message: 'Failed to fetch student results' });\n    }\n  });\n\n  // Save individual student results with question-level details\n  app.post('/api/exams/:examId/student-results', authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'so_center') {\n        return res.status(403).json({ message: 'SO Center access required' });\n      }\n\n      const { examId } = req.params;\n      const { studentId, answers, totalMarks, percentage, answeredQuestions, detailedResults } = req.body;\n\n      console.log('💾 Saving detailed student results:', {\n        examId,\n        studentId,\n        totalMarks,\n        hasAnswers: !!answers\n      });\n\n      if (!studentId || !examId) {\n        return res.status(400).json({ message: 'Student ID and Exam ID are required' });\n      }\n\n      // Validate that totalMarks is provided and is a valid number\n      const numericTotalMarks = Number(totalMarks);\n      if (totalMarks === undefined || totalMarks === null || isNaN(numericTotalMarks) || numericTotalMarks < 0) {\n        return res.status(400).json({ message: 'Valid total marks (non-negative number) are required' });\n      }\n\n      // Get exam details to validate\n      const exam = await db.select()\n        .from(schema.exams)\n        .where(eq(schema.exams.id, examId))\n        .limit(1);\n\n      if (!exam.length) {\n        return res.status(404).json({ message: 'Exam not found' });\n      }\n\n      const examData = exam[0];\n      const examTotalMarks = Number(examData.totalMarks);\n\n      // Validate total marks doesn't exceed exam total\n      if (numericTotalMarks > examTotalMarks) {\n        return res.status(400).json({ \n          message: `Total marks (${numericTotalMarks}) cannot exceed exam total marks (${examTotalMarks})` \n        });\n      }\n\n      // Calculate percentage\n      const calculatedPercentage = examTotalMarks > 0 ? Math.round((numericTotalMarks / examTotalMarks) * 100) : 0;\n\n      // Check if result already exists  \n      const existingResult = await db.select()\n        .from(schema.examResults)\n        .where(\n          sqlQuery`exam_id = ${examId} AND student_id = ${studentId}`\n        );\n\n      // Prevent modification of already completed results (business rule)\n      if (existingResult.length > 0 && existingResult[0].marksObtained !== null && existingResult[0].marksObtained >= 0) {\n        console.log('❌ Attempt to modify completed result for student:', studentId);\n        return res.status(400).json({ \n          message: 'This student has already completed the exam. Results cannot be modified.' \n        });\n      }\n\n      let result;\n      // Base result data without percentage - will add it conditionally\n      const baseResultData = {\n        examId,\n        studentId,\n        marksObtained: numericTotalMarks,\n        answeredQuestions: answeredQuestions || (numericTotalMarks > 0 ? 'fully_answered' : 'not_answered'),\n        detailedResults: detailedResults ? JSON.stringify(detailedResults) : null,\n        submittedBy: req.user.userId,\n        submittedAt: new Date()\n      };\n\n      console.log('💾 Saving individual exam result with minimal schema (production optimized)');\n      \n      // Minimal result data matching actual database structure\n      const minimalResultData = {\n        examId,\n        studentId,\n        marksObtained: numericTotalMarks,\n        answeredQuestions: answeredQuestions || (numericTotalMarks > 0 ? 'fully_answered' : 'not_answered'),\n        detailedResults: detailedResults ? JSON.stringify(detailedResults) : null\n      };\n      \n      if (existingResult.length > 0) {\n        // Update existing result\n        [result] = await db.update(schema.examResults)\n          .set({\n            ...minimalResultData,\n            updatedAt: new Date()\n          })\n          .where(eq(schema.examResults.id, existingResult[0].id))\n          .returning();\n      } else {\n        // Create new result\n        [result] = await db.insert(schema.examResults)\n          .values(minimalResultData)\n          .returning();\n      }\n      \n      // Add calculated percentage to result object for API response\n      result.percentage = calculatedPercentage;\n\n      console.log('✅ Student exam result saved successfully:', result.id);\n\n      res.json({\n        message: 'Exam result saved successfully',\n        result: {\n          id: result.id,\n          examId: result.examId,\n          studentId: result.studentId,\n          totalMarks: result.marksObtained,\n          marksObtained: result.marksObtained,\n          percentage: result.percentage\n        }\n      });\n\n    } catch (error: any) {\n      console.error('❌ Error saving exam result:', error);\n      res.status(500).json({ \n        message: 'Failed to save exam result',\n        error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error'\n      });\n    }\n  });\n\n  // Bulk update exam results - New API endpoint for modal-based marks entry\n  app.post('/api/exams/:examId/results/update', authenticateToken, async (req, res) => {\n    try {\n      const examId = req.params.examId;\n      const { results } = req.body;\n\n      console.log('🔄 Bulk updating exam results for exam:', examId);\n      console.log('📊 Students data:', results);\n\n      if (!results || !Array.isArray(results)) {\n        return res.status(400).json({ message: 'Invalid students data' });\n      }\n\n      // Check if exam exists and user has access\n      const exam = await db.select().from(schema.exams).where(eq(schema.exams.id, examId)).limit(1);\n      if (!exam.length) {\n        return res.status(404).json({ message: 'Exam not found' });\n      }\n\n      // Verify SO Center access for this exam\n      if (req.user?.role === 'so_center') {\n        const soCenter = await storage.getSoCenterByEmail(req.user.email);\n        if (!soCenter) {\n          return res.status(404).json({ message: 'SO Center not found' });\n        }\n\n        const soCenterIds = Array.isArray(exam[0].soCenterIds) ? exam[0].soCenterIds : [];\n        if (!soCenterIds.includes(soCenter.id)) {\n          return res.status(403).json({ message: 'Access denied to this exam' });\n        }\n      }\n\n      // Process each student's results\n      const savedResults = [];\n      for (const studentData of results) {\n        const { studentId, marks, totalScore, performance } = studentData;\n\n        if (!studentId) {\n          console.warn('⚠️ Skipping student with missing ID');\n          continue;\n        }\n\n        // Calculate percentage\n        const examTotalMarks = Number(exam[0]?.totalMarks || 100); // Default to 100 if not found\n        const calculatedPercentage = Math.round((totalScore / examTotalMarks) * 100);\n\n        // Prepare detailed results\n        const detailedResults = JSON.stringify({\n          questions: marks || [],\n          performance: performance || [],\n          totalScore,\n          percentage: calculatedPercentage\n        });\n\n        // Upsert exam result using the schema\n        try {\n          // Base data without percentage\n          const baseData = {\n            examId,\n            studentId,\n            marksObtained: totalScore || 0,\n            answeredQuestions: totalScore > 0 ? 'fully_answered' : 'not_answered',\n            detailedResults,\n            submittedBy: req.user?.userId,\n            submittedAt: new Date()\n          };\n\n          const updateData = {\n            marksObtained: totalScore || 0,\n            detailedResults,\n            submittedBy: req.user?.userId,\n            updatedAt: new Date()\n          };\n\n          // Production-optimized minimal database operations\n          console.log('💾 Saving bulk exam results with minimal schema (production optimized)');\n          \n          // Minimal data matching actual database structure\n          const minimalData = {\n            examId,\n            studentId,\n            marksObtained: totalScore || 0,\n            answeredQuestions: totalScore > 0 ? 'fully_answered' : 'not_answered',\n            detailedResults\n          };\n\n          const minimalUpdateData = {\n            marksObtained: totalScore || 0,\n            detailedResults,\n            updatedAt: new Date()\n          };\n\n          let result;\n          [result] = await db.insert(schema.examResults)\n            .values(minimalData)\n            .onConflictDoUpdate({\n              target: [schema.examResults.examId, schema.examResults.studentId],\n              set: minimalUpdateData\n            })\n            .returning();\n          \n          // Add calculated percentage to result object for API response\n          result.percentage = calculatedPercentage;\n\n          savedResults.push({\n            studentId,\n            totalScore: totalScore || 0,\n            percentage: calculatedPercentage,\n            status: totalScore > 0 ? 'completed' : 'pending'\n          });\n\n          console.log('✅ Result saved for student:', studentId, 'Marks:', totalScore);\n        } catch (dbError) {\n          console.error('❌ Database error for student:', studentId, dbError);\n          // Continue with other students even if one fails\n        }\n      }\n\n      res.json({\n        message: 'Exam results updated successfully',\n        results: savedResults\n      });\n    } catch (error: any) {\n      console.error('❌ Error bulk updating exam results:', error);\n      res.status(500).json({ message: 'Failed to update exam results' });\n    }\n  });\n\n  // Submit exam results (for SO Centers)\n  app.post('/api/so-center/exams/:examId/results', authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'so_center') {\n        return res.status(403).json({ message: \"SO Center access required\" });\n      }\n\n      const soCenter = await storage.getSoCenterByEmail(req.user.email);\n      if (!soCenter) {\n        return res.status(404).json({ message: \"SO Center not found\" });\n      }\n\n      const { examId } = req.params;\n      const { results } = req.body;\n\n      if (!examId || !results || !Array.isArray(results)) {\n        return res.status(400).json({ message: \"examId and results array are required\" });\n      }\n\n      console.log('📝 Saving exam results for exam:', examId, 'from SO Center:', soCenter.centerId);\n\n      // Save exam results in bulk\n      const savedResults = [];\n      for (const result of results) {\n        const { studentId, questionResults, totalMarks, percentage, remarks } = result;\n\n        // Basic validation\n        if (!studentId || totalMarks === undefined || percentage === undefined) {\n          console.warn('⚠️ Skipping invalid result data:', result);\n          continue;\n        }\n\n        // Create or update exam result\n        const examResult = await sql`\n          INSERT INTO exam_results (\n            exam_id, \n            student_id, \n            total_marks, \n            percentage, \n            remarks,\n            question_results,\n            submitted_by,\n            submitted_at,\n            so_center_id \n          ) VALUES (\n            ${examId},\n            ${studentId},\n            ${totalMarks},\n            ${percentage},\n            ${remarks || null},\n            ${JSON.stringify(questionResults)},\n            ${req.user.userId},\n            NOW(),\n            ${soCenter.id}\n          )\n          ON CONFLICT (exam_id, student_id) \n          DO UPDATE SET \n            total_marks = EXCLUDED.total_marks,\n            percentage = EXCLUDED.percentage,\n            remarks = EXCLUDED.remarks,\n            question_results = EXCLUDED.question_results,\n            submitted_by = EXCLUDED.submitted_by,\n            submitted_at = EXCLUDED.submitted_at,\n            updated_at = NOW()\n          RETURNING *\n        `;\n        savedResults.push(examResult[0]);\n      }\n\n      console.log('✅ Saved', savedResults.length, 'exam results');\n      res.json({ \n        message: 'Exam results saved successfully',\n        savedCount: savedResults.length\n      });\n    } catch (error: any) {\n      console.error('❌ Error saving exam results:', error);\n      res.status(500).json({ message: \"Failed to save exam results\" });\n    }\n  });\n\n  // Delete exam endpoint  \n  app.delete(\"/api/admin/exams/:id\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Unauthorized: Admin access required\" });\n      }\n\n      const examId = req.params.id;\n      await storage.deleteExam(examId);\n\n      res.json({ message: \"Exam deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting exam:\", error);\n      res.status(500).json({ message: \"Failed to delete exam\" });\n    }\n  });\n\n  // ======================== ALL 7 NEW FEATURES API ROUTES ========================\n\n  // Feature 1: Topics Management with Moderate/Important flags\n  app.get(\"/api/topics-management\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || (req.user.role !== 'admin' && req.user.role !== 'academic_admin')) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const topics = await storage.getAllTopicsWithChapters();\n      res.json(topics);\n    } catch (error) {\n      console.error('Error fetching topics for management:', error);\n      res.status(500).json({ message: \"Failed to fetch topics\" });\n    }\n  });\n\n  app.patch(\"/api/topics/:topicId/flags\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || (req.user.role !== 'admin' && req.user.role !== 'academic_admin')) {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { topicId } = req.params;\n      const { isModerate, isImportant } = req.body;\n\n      const updates: any = {};\n      if (typeof isModerate === 'boolean') updates.isModerate = isModerate;\n      if (typeof isImportant === 'boolean') updates.isImportant = isImportant;\n\n      if (Object.keys(updates).length === 0) {\n        return res.status(400).json({ message: \"No valid updates provided\" });\n      }\n\n      const updatedTopic = await storage.updateTopicFlags(topicId, updates);\n      res.json(updatedTopic);\n    } catch (error) {\n      console.error('Error updating topic flags:', error);\n      res.status(500).json({ message: \"Failed to update topic flags\" });\n    }\n  });\n\n  // Feature 6: Exam Time Management\n  app.patch(\"/api/exams/:examId/time-settings\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'academic_admin') {\n        return res.status(403).json({ message: \"Academic admin access required\" });\n      }\n\n      const { examId } = req.params;\n      const { startTime, endTime } = req.body;\n\n      if (!startTime || !endTime) {\n        return res.status(400).json({ message: \"Both startTime and endTime are required\" });\n      }\n\n      const updatedExam = await storage.updateExamTimeSettings(examId, startTime, endTime);\n      res.json(updatedExam);\n    } catch (error) {\n      console.error('Error updating exam time settings:', error);\n      res.status(500).json({ message: \"Failed to update exam time settings\" });\n    }\n  });\n\n  app.get(\"/api/exams/:examId/access-check\", authenticateToken, async (req, res) => {\n    try {\n      const { examId } = req.params;\n      const accessCheck = await storage.checkExamTimeAccess(examId);\n      res.json(accessCheck);\n    } catch (error) {\n      console.error('Error checking exam access:', error);\n      res.status(500).json({ message: \"Failed to check exam access\" });\n    }\n  });\n\n  // Feature 7: Student Dropout Management\n  app.post(\"/api/dropout-requests\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      if (req.user.role !== 'so_center') {\n        return res.status(403).json({ message: \"SO Center access required\" });\n      }\n\n      const soCenter = await storage.getSoCenterByEmail(req.user.email);\n      if (!soCenter) {\n        return res.status(404).json({ message: \"SO Center not found\" });\n      }\n\n      // CRITICAL: Check if student has zero pending balance before allowing dropout request\n      const { studentId } = req.body;\n      if (!studentId) {\n        return res.status(400).json({ message: \"Student ID is required\" });\n      }\n\n      const student = await storage.getStudent(studentId);\n      if (!student) {\n        return res.status(404).json({ message: \"Student not found\" });\n      }\n\n      // Verify student belongs to this SO Center\n      if (student.soCenterId !== soCenter.id) {\n        return res.status(403).json({ message: \"Student does not belong to your SO Center\" });\n      }\n\n      // Check if student has pending balance\n      const pendingAmount = parseFloat(student.totalAmount || '0') - parseFloat(student.paidAmount || '0');\n      if (pendingAmount > 0) {\n        return res.status(400).json({ \n          message: `Cannot create dropout request. Student has pending balance of ₹${pendingAmount.toFixed(2)}. Please clear all dues before submitting dropout request.`,\n          pendingBalance: pendingAmount\n        });\n      }\n\n      const dropoutData = {\n        ...req.body,\n        soCenterId: soCenter.id,\n        requestedBy: req.user.userId,\n        status: 'pending'\n      };\n\n      const request = await storage.createDropoutRequest(dropoutData);\n      res.status(201).json(request);\n    } catch (error) {\n      console.error('Error creating dropout request:', error);\n      res.status(500).json({ message: error.message || \"Failed to create dropout request\" });\n    }\n  });\n\n  // SO Center Exam Results Management\n  app.get(\"/api/so-center/exams/:examId/students\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'so_center') {\n        return res.status(403).json({ message: \"SO Center access required\" });\n      }\n\n      const soCenter = await storage.getSoCenterByEmail(req.user.email);\n      if (!soCenter) {\n        return res.status(404).json({ message: \"SO Center not found\" });\n      }\n\n      const examId = req.params.examId;\n\n      // Get students for this exam who belong to this SO Center\n      const students = await sql`\n        SELECT DISTINCT \n          s.id,\n          s.name,\n          s.student_id,\n          s.father_name,\n          s.parent_phone\n        FROM students s\n        INNER JOIN exams e ON e.id = ${examId}\n        WHERE s.so_center_id = ${soCenter.id}\n        AND s.is_active = true\n        ORDER BY s.name ASC\n      `;\n\n      res.json(students.map(s => ({\n        id: s.id,\n        name: s.name,\n        studentId: s.student_id,\n        fatherName: s.father_name,\n        parentPhone: s.parent_phone\n      })));\n    } catch (error: any) {\n      console.error('Error fetching exam students:', error);\n      res.status(500).json({ message: \"Failed to fetch exam students\" });\n    }\n  });\n\n  app.get(\"/api/so-center/exams/:examId/questions\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'so_center') {\n        return res.status(403).json({ message: \"SO Center access required\" });\n      }\n\n      const examId = req.params.examId;\n      console.log('📋 Fetching questions for exam:', examId);\n\n      // Get the exam with questions\n      const [exam] = await db.select({\n        id: schema.exams.id,\n        title: schema.exams.title,\n        questions: schema.exams.questions,\n        totalQuestions: schema.exams.totalQuestions,\n        totalMarks: schema.exams.totalMarks\n      }).from(schema.exams)\n        .where(eq(schema.exams.id, examId));\n\n      if (!exam) {\n        return res.status(404).json({ message: \"Exam not found\" });\n      }\n\n      // Parse questions from JSON string\n      let questions = [];\n      if (exam.questions) {\n        try {\n          questions = JSON.parse(exam.questions);\n        } catch (e) {\n          console.error('Error parsing exam questions JSON:', e);\n          questions = [];\n        }\n      }\n\n      // Format questions for the exam results component\n      const formattedQuestions = questions.map((q: any, index: number) => ({\n        questionNumber: q.questionNumber || index + 1,\n        marks: q.marks || 2, // Default to 2 marks per question\n        questionText: q.questionText || q.question || '',\n        questionType: q.questionType || q.type || 'descriptive'\n      }));\n\n      res.json({\n        examInfo: {\n          id: exam.id,\n          title: exam.title,\n          totalQuestions: exam.totalQuestions,\n          totalMarks: exam.totalMarks\n        },\n        questions: formattedQuestions\n      });\n    } catch (error: any) {\n      console.error('Error fetching exam questions:', error);\n      res.status(500).json({ message: \"Failed to fetch exam questions\" });\n    }\n  });\n\n  app.post(\"/api/so-center/exam-results\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'so_center') {\n        return res.status(403).json({ message: \"SO Center access required\" });\n      }\n\n      const soCenter = await storage.getSoCenterByEmail(req.user.email);\n      if (!soCenter) {\n        return res.status(404).json({ message: \"SO Center not found\" });\n      }\n\n      const { examId, results } = req.body;\n\n      if (!examId || !results || !Array.isArray(results)) {\n        return res.status(400).json({ message: \"examId and results array are required\" });\n      }\n\n      console.log('📝 Saving exam results for exam:', examId, 'from SO Center:', soCenter.centerId);\n\n      // Save exam results in bulk\n      const savedResults = [];\n      for (const result of results) {\n        const { studentId, questionResults, totalMarks, percentage, remarks } = result;\n\n        // Basic validation\n        if (!studentId || totalMarks === undefined || percentage === undefined) {\n          console.warn('⚠️ Skipping invalid result data:', result);\n          continue;\n        }\n\n        // Create or update exam result\n        const examResult = await sql`\n          INSERT INTO exam_results (\n            exam_id, \n            student_id, \n            total_marks, \n            percentage, \n            remarks,\n            question_results,\n            submitted_by,\n            submitted_at,\n            so_center_id \n          ) VALUES (\n            ${examId},\n            ${studentId},\n            ${totalMarks},\n            ${percentage},\n            ${remarks || null},\n            ${JSON.stringify(questionResults)},\n            ${req.user.userId},\n            NOW(),\n            ${soCenter.id}\n          )\n          ON CONFLICT (exam_id, student_id) \n          DO UPDATE SET \n            total_marks = EXCLUDED.total_marks,\n            percentage = EXCLUDED.percentage,\n            remarks = EXCLUDED.remarks,\n            question_results = EXCLUDED.question_results,\n            submitted_by = EXCLUDED.submitted_by,\n            submitted_at = EXCLUDED.submitted_at,\n            updated_at = NOW()\n          RETURNING *\n        `;\n        savedResults.push(examResult[0]);\n      }\n\n      console.log('✅ Saved', savedResults.length, 'exam results');\n      res.json({ \n        message: 'Exam results saved successfully',\n        savedCount: savedResults.length\n      });\n    } catch (error: any) {\n      console.error('❌ Error saving exam results:', error);\n      res.status(500).json({ message: \"Failed to save exam results\" });\n    }\n  });\n\n  app.get(\"/api/dropout-requests\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      let requests;\n      if (req.user.role === 'admin') {\n        // Admin can see all requests\n        requests = await storage.getDropoutRequests();\n      } else if (req.user.role === 'so_center') {\n        // SO Center can only see their own requests\n        const soCenter = await storage.getSoCenterByEmail(req.user.email);\n        if (!soCenter) {\n          return res.status(404).json({ message: \"SO Center not found\" });\n        }\n        requests = await storage.getDropoutRequests(soCenter.id);\n      } else {\n        return res.status(403).json({ message: \"Unauthorized access\" });\n      }\n\n      res.json(requests);\n    } catch (error) {\n      console.error('Error fetching dropout requests:', error);\n      res.status(500).json({ message: \"Failed to fetch dropout requests\" });\n    }\n  });\n\n  app.patch(\"/api/dropout-requests/:requestId\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n\n      if (req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { requestId } = req.params;\n      const { status, adminNotes } = req.body;\n\n      if (!['approved', 'rejected'].includes(status)) {\n        return res.status(400).json({ message: \"Status must be 'approved' or 'rejected'\" });\n      }\n\n      const updatedRequest = await storage.processDropoutRequest(\n        requestId, \n        status, \n        req.user.userId, \n        adminNotes\n      );\n\n      res.json(updatedRequest);\n    } catch (error) {\n      console.error('Error processing dropout request:', error);\n      res.status(500).json({ message: error.message || \"Failed to process dropout request\" });\n    }\n  });\n\n  // Features 2-5: Enhanced Dashboard Statistics (Fixed)\n  app.get(\"/api/so-center/detailed-students\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'so_center') {\n        return res.status(403).json({ message: \"SO Center access required\" });\n      }\n\n      const soCenter = await storage.getSoCenterByEmail(req.user.email);\n      if (!soCenter) {\n        return res.status(404).json({ message: \"SO Center not found\" });\n      }\n\n      const students = await storage.getStudentsBySOCenterDetailed(soCenter.id);\n      res.json(students);\n    } catch (error) {\n      console.error('Error fetching detailed students:', error);\n      res.status(500).json({ message: \"Failed to fetch detailed students\" });\n    }\n  });\n\n  // SO Center API for exams list\n  app.get(\"/api/so-center/exams\", authenticateToken, async (req, res) => {\n    try {\n      if (!req.user || req.user.role !== 'so_center') {\n        return res.status(403).json({ message: \"SO Center access required\" });\n      }\n\n      const soCenter = await storage.getSoCenterByEmail(req.user.email);\n      if (!soCenter) {\n        return res.status(404).json({ message: \"SO Center not found\" });\n      }\n\n      console.log('🔍 Looking for SO Center ID:', soCenter.id);\n\n      // Get exams for this SO Center\n      const exams = await db.select().from(schema.exams);\n\n      // Filter exams that include this SO Center\n      const availableExams = exams.filter(exam => {\n        const soCenterIds = Array.isArray(exam.soCenterIds) ? exam.soCenterIds : [];\n        return soCenterIds.includes(soCenter.id);\n      }).map(exam => ({\n        id: exam.id,\n        name: exam.title,\n        title: exam.title,\n        className: '', // Would need to join with classes table\n        date: exam.examDate,\n        totalQuestions: exam.totalQuestions,\n        totalMarks: exam.totalMarks,\n        status: exam.status || 'scheduled',\n        description: exam.description\n      }));\n\n      console.log('✅ Found', availableExams.length, 'exams for SO Center');\n      res.json(availableExams);\n    } catch (error: any) {\n      console.error('Error fetching SO Center exams:', error);\n      res.status(500).json({ message: \"Failed to fetch exams\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":258686},"server/seed.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport * as schema from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL environment variable is required\");\n}\n\nconst sql = neon(process.env.DATABASE_URL);\nconst db = drizzle(sql, { schema });\n\nasync function seed() {\n  try {\n    console.log(\"Seeding database...\");\n\n    // Create admin user\n    const hashedPassword = await bcrypt.hash(\"admin123\", 10);\n    \n    const [adminUser] = await db.insert(schema.users).values({\n      email: \"admin@navanidhi.com\",\n      password: hashedPassword,\n      name: \"Admin User\",\n      role: \"admin\",\n      phone: \"+91 98765 43210\"\n    }).returning();\n\n    console.log(\"Created admin user:\", adminUser.email);\n\n    // Create SO Center\n    const [soCenter] = await db.insert(schema.soCenters).values({\n      name: \"Main SO Center\",\n      address: \"123 Education Street, Hyderabad\",\n      phone: \"+91 87654 32109\",\n      managerId: adminUser.id\n    }).returning();\n\n    console.log(\"Created SO Center:\", soCenter.name);\n\n    // Create SO Center manager user\n    const soCenterPassword = await bcrypt.hash(\"so123\", 10);\n    const [soCenterUser] = await db.insert(schema.users).values({\n      email: \"so@navanidhi.com\",\n      password: soCenterPassword,\n      name: \"SO Center Manager\",\n      role: \"so_center\",\n      phone: \"+91 76543 21098\"\n    }).returning();\n\n    console.log(\"Created SO Center user:\", soCenterUser.email);\n\n    // Create classes\n    const classes = await db.insert(schema.classes).values([\n      { name: \"Class 10\", description: \"Secondary School Class 10\" },\n      { name: \"Class 12\", description: \"Higher Secondary Class 12\" },\n      { name: \"Navodaya\", description: \"Navodaya Entrance Preparation\" },\n      { name: \"POLYCET\", description: \"Polytechnic Common Entrance Test\" }\n    ]).returning();\n\n    console.log(\"Created classes:\", classes.map(c => c.name));\n\n    // Create subjects for Class 10\n    const subjects = await db.insert(schema.subjects).values([\n      { name: \"Mathematics\", classId: classes[0].id, description: \"Mathematics for Class 10\" },\n      { name: \"Physics\", classId: classes[0].id, description: \"Physics for Class 10\" },\n      { name: \"Chemistry\", classId: classes[0].id, description: \"Chemistry for Class 10\" }\n    ]).returning();\n\n    console.log(\"Created subjects:\", subjects.map(s => s.name));\n\n    // Create chapters for Mathematics\n    const chapters = await db.insert(schema.chapters).values([\n      { name: \"Quadratic Equations\", subjectId: subjects[0].id, description: \"Introduction to quadratic equations\", orderIndex: 1 },\n      { name: \"Arithmetic Progressions\", subjectId: subjects[0].id, description: \"Arithmetic progressions and series\", orderIndex: 2 }\n    ]).returning();\n\n    console.log(\"Created chapters:\", chapters.map(c => c.name));\n\n    // Create topics for Quadratic Equations\n    const topics = await db.insert(schema.topics).values([\n      { name: \"Introduction to Quadratic Equations\", chapterId: chapters[0].id, description: \"Understanding the standard form ax² + bx + c = 0\", orderIndex: 1 },\n      { name: \"Methods of Solving Quadratic Equations\", chapterId: chapters[0].id, description: \"Factorization, completing the square, and quadratic formula\", orderIndex: 2 },\n      { name: \"Nature of Roots\", chapterId: chapters[0].id, description: \"Discriminant and nature of roots\", orderIndex: 3 }\n    ]).returning();\n\n    console.log(\"Created topics:\", topics.map(t => t.name));\n\n    // Create sample students\n    const students = await db.insert(schema.students).values([\n      {\n        name: \"Arjun Reddy\",\n        classId: classes[0].id,\n        parentPhone: \"+91 98765 43210\",\n        parentName: \"Rajesh Reddy\",\n        soCenterId: soCenter.id,\n        courseType: \"monthly_tuition\"\n      },\n      {\n        name: \"Sneha Patel\",\n        classId: classes[2].id, // Navodaya\n        parentPhone: \"+91 87654 32109\",\n        parentName: \"Suresh Patel\",\n        soCenterId: soCenter.id,\n        courseType: \"fixed_fee\"\n      }\n    ]).returning();\n\n    console.log(\"Created students:\", students.map(s => s.name));\n\n    console.log(\"Database seeded successfully!\");\n    console.log(\"\\nLogin credentials:\");\n    console.log(\"Admin: admin@navanidhi.com / admin123\");\n    console.log(\"SO Center: so@navanidhi.com / so123\");\n\n  } catch (error) {\n    console.error(\"Error seeding database:\", error);\n  }\n}\n\nseed();","size_bytes":4479},"server/storage.ts":{"content":"import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport { eq, and, or, desc, asc, sql as sqlQuery, sql, inArray, gte, lte, like, notInArray, isNotNull } from \"drizzle-orm\";\nimport * as schema from \"@shared/schema\";\nimport type {\n  User,\n  InsertUser,\n  Student,\n  InsertStudent,\n  StudentSibling,\n  InsertStudentSibling,\n  ClassFee,\n  InsertClassFee,\n  StudentCounter,\n  InsertStudentCounter,\n  SoCenter,\n  InsertSoCenter,\n  Class,\n  InsertClass,\n  Subject,\n  InsertSubject,\n  Chapter,\n  InsertChapter,\n  Topic,\n  InsertTopic,\n  TopicProgress,\n  InsertTopicProgress,\n  Payment,\n  InsertPayment,\n  WalletTransaction,\n  InsertWalletTransaction,\n  Attendance,\n  InsertAttendance,\n  Product,\n  InsertProduct,\n  ProductOrder,\n  InsertProductOrder,\n  CommissionWallet,\n  InsertCommissionWallet,\n  CommissionTransaction,\n  InsertCommissionTransaction,\n  WithdrawalRequest,\n  InsertWithdrawalRequest,\n  SystemSetting,\n  InsertSystemSetting,\n  HomeworkActivity,\n  InsertHomeworkActivity,\n  TuitionProgress,\n  InsertTuitionProgress,\n} from \"@shared/schema\";\n\n// MANDATORY SUPABASE DATABASE CONNECTION - NEON COMPLETELY DISABLED  \nif (!process.env.SUPABASE_DATABASE_URL) {\n  throw new Error(\"SUPABASE_DATABASE_URL environment variable is required - Neon database disabled\");\n}\n\nconsole.log('🔗 STORAGE: Using SUPABASE_DATABASE_URL exclusively');\nconst sql = postgres(process.env.SUPABASE_DATABASE_URL!, { \n  max: 5,\n  idle_timeout: 20,\n  connect_timeout: 30,\n  statement_timeout: 30000, // 30 seconds\n  query_timeout: 30000, // 30 seconds  \n  connection: {\n    options: '--statement_timeout=30s'\n  }\n});\nexport const db = drizzle(sql, { schema });\n\n// Add method to get users by role\nasync function getUsersByRole(role: string) {\n  try {\n    const users = await db.select().from(schema.users).where(eq(schema.users.role, role as any));\n    return users;\n  } catch (error) {\n    console.error('Error fetching users by role:', error);\n    throw error;\n  }\n}\n\n// Temporarily disabled raw query function - use Drizzle ORM instead\nasync function executeRawQuery(query: string, params: any[] = []) {\n  console.warn('executeRawQuery is deprecated - using empty response');\n  return [];\n}\n\n// Initialize database with default data\nasync function initializeDatabase() {\n  try {\n    // Check if states exist\n    const existingStates = await db.select().from(schema.states);\n\n    if (existingStates.length === 0) {\n      console.log('Initializing database with default states...');\n\n      // Add default states\n      const defaultStates = [\n        { name: 'Andhra Pradesh', code: 'AP' },\n        { name: 'Telangana', code: 'TS' },\n        { name: 'Karnataka', code: 'KA' },\n        { name: 'Tamil Nadu', code: 'TN' },\n        { name: 'Kerala', code: 'KL' }\n      ];\n\n      for (const state of defaultStates) {\n        await db.insert(schema.states).values(state);\n      }\n\n      console.log('Database initialized with default states');\n    }\n\n    // Check if classes exist\n    const existingClasses = await db.select().from(schema.classes);\n\n    if (existingClasses.length === 0) {\n      console.log('Initializing database with default classes...');\n\n      // Add default classes\n      const defaultClasses = [\n        { name: '1st Class', description: 'First standard' },\n        { name: '2nd Class', description: 'Second standard' },\n        { name: '3rd Class', description: 'Third standard' },\n        { name: '4th Class', description: 'Fourth standard' },\n        { name: '5th Class', description: 'Fifth standard' },\n        { name: '6th Class', description: 'Sixth standard' },\n        { name: '7th Class', description: 'Seventh standard' },\n        { name: '8th Class', description: 'Eighth standard' },\n        { name: '9th Class', description: 'Ninth standard' },\n        { name: '10th Class', description: 'Tenth standard' }\n      ];\n\n      for (const classData of defaultClasses) {\n        await db.insert(schema.classes).values(classData);\n      }\n\n      console.log('Database initialized with default classes');\n    }\n  } catch (error) {\n    console.error('Error initializing database:', error);\n  }\n}\n\n// Initialize database on startup - DISABLED temporarily to fix login timeout\n// initializeDatabase();\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<InsertUser>): Promise<User>;\n\n  // SO Center methods\n  getSoCenter(id: string): Promise<SoCenter | undefined>;\n  getAllSoCenters(): Promise<SoCenter[]>;\n  createSoCenter(center: InsertSoCenter): Promise<SoCenter>;\n  updateSoCenterWallet(id: string, amount: number): Promise<SoCenter>;\n\n  // Academic structure methods\n  getAllClasses(): Promise<Class[]>;\n  createClass(classData: InsertClass): Promise<Class>;\n  getSubjectsByClass(classId: string): Promise<Subject[]>;\n  createSubject(subject: InsertSubject): Promise<Subject>;\n  getChaptersBySubject(subjectId: string): Promise<Chapter[]>;\n  getChaptersBySubjectAndClass(subjectId: string, classId: string): Promise<Chapter[]>;\n  createChapter(chapter: InsertChapter): Promise<Chapter>;\n  getTopicsByChapter(chapterId: string): Promise<Topic[]>;\n  createTopic(topic: InsertTopic): Promise<Topic>;\n\n  // Student methods\n  getStudent(id: string): Promise<Student | undefined>;\n  getStudentByQr(qrCode: string): Promise<Student | undefined>;\n  getStudentsBySoCenter(soCenterId: string): Promise<Student[]>;\n  createStudent(student: InsertStudent): Promise<Student>;\n  updateStudent(id: string, updates: Partial<InsertStudent>): Promise<Student>;\n\n  // Progress methods\n  getStudentProgress(studentId: string): Promise<TopicProgress[]>;\n  updateTopicProgress(progress: InsertTopicProgress): Promise<TopicProgress>;\n  getProgressByTopic(topicId: string, studentId: string): Promise<TopicProgress | undefined>;\n\n  // Payment methods\n  getStudentPayments(studentId: string): Promise<Payment[]>;\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  getPaymentsBySoCenter(soCenterId: string): Promise<Payment[]>;\n  getPaymentsByDateRange(soCenterId: string, startDate: Date, endDate: Date): Promise<Payment[]>;\n\n  // Payment processing and history\n  getPaymentsByStudent(studentId: string): Promise<Payment[]>;\n  processStudentPayment(paymentData: {\n    studentId: string;\n    amount: number;\n    feeType: 'monthly' | 'yearly';\n    receiptNumber: string;\n    expectedFeeAmount: number;\n    recordedBy: string; // Added parameter\n  }): Promise<{\n    payment: Payment;\n    transactionId: string;\n    walletUpdated: boolean;\n    studentName: string;\n    studentId: string;\n    className: string;\n    amount: number;\n    receiptNumber: string;\n    feeType: string;\n    parentPhone: string;\n    fatherMobile: string;\n    newPaidAmount: number;\n    newPendingAmount: number;\n    totalFeeAmount: number;\n  }>;\n\n  // Attendance methods\n  submitAttendance(attendanceData: {\n    date: string;\n    classId: string;\n    soCenterId: string;\n    markedBy: string;\n    records: Array<{\n      studentId: string;\n      status: 'present' | 'absent' | 'holiday';\n    }>;\n  }): Promise<{ presentCount: number; absentCount: number; holidayCount: number }>;\n\n  getMonthlyAttendanceReport(params: {\n    soCenterId: string;\n    month: string;\n    classId: string;\n  }): Promise<{\n    students: Array<{\n      id: string;\n      name: string;\n      studentId: string;\n      attendanceRecords: Array<{\n        date: string;\n        status: 'present' | 'absent' | 'holiday';\n      }>;\n    }>;\n  }>;\n\n  getAttendanceStats(params: {\n    soCenterId: string;\n    month: string;\n    classId?: string;\n  }): Promise<{\n    totalPresent: number;\n    totalAbsent: number;\n    totalHolidays: number;\n    classWiseStats: Array<{\n      className: string;\n      present: number;\n      absent: number;\n      total: number;\n      percentage: number;\n    }>;\n  }>;\n\n  getStudentAttendanceReport(studentId: string, month: string): Promise<{\n    studentId: string;\n    studentName: string;\n    attendanceRecords: Array<{\n      date: string;\n      status: 'present' | 'absent' | 'holiday';\n    }>;\n    attendancePercentage: number;\n    totalPresent: number;\n    totalAbsent: number;\n    totalDays: number;\n  }>;\n\n  // Wallet methods\n  createWalletTransaction(transaction: InsertWalletTransaction): Promise<WalletTransaction>;\n  getWalletTransactions(soCenterId: string): Promise<WalletTransaction[]>;\n\n  // Address hierarchy methods\n  getAllStates(): Promise<any[]>;\n  getAllDistricts(): Promise<any[]>;\n  getAllMandals(): Promise<any[]>;\n  getAllVillages(): Promise<any[]>;\n  getDistrictsByState(stateId: string): Promise<any[]>;\n  getMandalsByDistrict(districtId: string): Promise<any[]>;\n  getVillagesByMandal(mandalId: string): Promise<any[]>;\n  createState(data: any): Promise<any>;\n  createDistrict(data: any): Promise<any>;\n  createMandal(data: any): Promise<any>;\n  createVillage(data: any): Promise<any>;\n  deleteState(id: string): Promise<void>;\n  deleteDistrict(id: string): Promise<void>;\n  deleteMandal(id: string): Promise<void>;\n  deleteVillage(id: string): Promise<void>;\n  getStudentsByVillage(villageId: string): Promise<Student[]>;\n  getSoCentersByVillage(villageId: string): Promise<SoCenter[]>;\n\n  // Products methods (for commission calculation)\n  getAllProducts(): Promise<any[]>;\n  createProduct(data: any): Promise<any>;\n\n  // Enhanced SO Center methods\n  getNextSoCenterId(): Promise<string>;\n  getSoCenterByCenterId(centerId: string): Promise<SoCenter | undefined>;\n  getAvailableManagers(): Promise<User[]>;\n  getUnassignedManagers(): Promise<User[]>;\n  updateSoCenter(id: string, updates: Partial<InsertSoCenter>): Promise<SoCenter>;\n  deleteSoCenter(id: string): Promise<void>;\n\n  // Enhanced User methods\n  getAllUsers(): Promise<User[]>;\n  updateUser(id: string, updates: Partial<InsertUser>): Promise<User>;\n  deleteUser(id: string): Promise<void>;\n\n  // Enhanced Academic structure methods\n  updateClass(id: string, updates: Partial<InsertClass>): Promise<Class>;\n  deleteClass(id: string): Promise<void>;\n  updateSubject(id: string, updates: Partial<InsertSubject>): Promise<Subject>;\n  deleteSubject(id: string): Promise<void>;\n  updateChapter(id: string, updates: Partial<InsertChapter>): Promise<Chapter>;\n  deleteChapter(id: string): Promise<void>;\n  updateTopic(id: string, updates: Partial<InsertTopic>): Promise<Topic>;\n  deleteTopic(id: string): Promise<void>;\n  getAllSubjects(): Promise<Subject[]>;\n  getAllChapters(): Promise<Chapter[]>;\n  getAllTopics(): Promise<Topic[]>;\n\n  // Fee Structure methods\n  getAllFeeStructures(): Promise<any[]>;\n  createFeeStructure(fee: any): Promise<any>;\n  updateFeeStructure(id: string, updates: any): Promise<any>;\n  deleteFeeStructure(id: string): Promise<void>;\n\n  // Enhanced Student methods\n  getAllStudents(): Promise<Student[]>;\n  deleteStudent(id: string): Promise<void>;\n  generateStudentId(): Promise<string>;\n  createStudentWithSiblings(studentData: InsertStudent, siblings?: InsertStudentSibling[]): Promise<Student>;\n  validateAadharNumber(aadharNumber: string): Promise<boolean>;\n  getStudentSiblings(studentId: string): Promise<StudentSibling[]>;\n\n  // Homework Activity methods\n  createHomeworkActivity(activities: InsertHomeworkActivity[]): Promise<HomeworkActivity[]>;\n  getHomeworkActivities(params: {\n    classId?: string;\n    subjectId?: string;\n    date?: string;\n    soCenterId?: string;\n  }): Promise<HomeworkActivity[]>;\n\n  // Tuition Progress methods\n  createTuitionProgress(progress: InsertTuitionProgress): Promise<TuitionProgress>;\n  getTuitionProgress(params: {\n    classId?: string;\n    topicId?: string;\n    studentId?: string;\n    soCenterId?: string;\n  }): Promise<TuitionProgress[]>;\n  updateTuitionProgress(id: string, updates: Partial<InsertTuitionProgress>): Promise<TuitionProgress>;\n\n  // Class Fees methods\n  getClassFees(classId: string, courseType: string): Promise<ClassFee | undefined>;\n  getAllClassFees(): Promise<ClassFee[]>;\n  createClassFee(classFee: InsertClassFee): Promise<ClassFee>;\n  updateClassFee(id: string, updates: Partial<InsertClassFee>): Promise<ClassFee>;\n  deleteClassFee(id: string): Promise<void>;\n\n  // Enhanced Payment methods\n  getAllPayments(): Promise<Payment[]>;\n  updatePayment(id: string, updates: Partial<InsertPayment>): Promise<Payment>;\n  deletePayment(id: string): Promise<void>;\n}\n\nexport class DrizzleStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(schema.users).where(eq(schema.users.id, id));\n    return result[0];\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    console.log(`🔍 Storage: Starting getUserByEmail lookup for: ${email}`);\n    try {\n      // Add timeout to prevent hanging\n      const queryPromise = db.select().from(schema.users).where(eq(schema.users.email, email));\n      const timeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error('getUserByEmail query timeout')), 5000);\n      });\n\n      const result = await Promise.race([queryPromise, timeoutPromise]);\n      console.log(`🔍 Storage: Database query completed, found ${result.length} user(s)`);\n      return result[0];\n    } catch (error) {\n      console.error(`❌ Storage: Error in getUserByEmail:`, error);\n\n      // Try a simpler query as fallback\n      try {\n        console.log(`🔄 Storage: Attempting fallback query...`);\n        const fallbackResult = await sql`SELECT * FROM users WHERE email = ${email} LIMIT 1`;\n        console.log(`✅ Storage: Fallback query completed, found ${fallbackResult.length} user(s)`);\n        return fallbackResult[0] as User;\n      } catch (fallbackError) {\n        console.error(`❌ Storage: Fallback query also failed:`, fallbackError);\n        throw error;\n      }\n    }\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const result = await db.insert(schema.users).values(user).returning();\n    return result[0];\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User> {\n    const result = await db.update(schema.users).set(updates).where(eq(schema.users.id, id)).returning();\n    return result[0];\n  }\n\n  async getSoCenter(id: string): Promise<SoCenter | undefined> {\n    const result = await db.select().from(schema.soCenters).where(eq(schema.soCenters.id, id));\n    return result[0];\n  }\n\n  async getAllSoCenters(): Promise<any[]> {\n    // Get SO Centers with manager info and student counts\n    const centers = await db\n      .select({\n        id: schema.soCenters.id,\n        name: schema.soCenters.name,\n        email: schema.soCenters.email,\n        centerId: schema.soCenters.centerId,\n        address: schema.soCenters.address,\n        phone: schema.soCenters.phone,\n        managerId: schema.soCenters.managerId,\n        ownerName: schema.soCenters.ownerName,\n        ownerLastName: schema.soCenters.ownerLastName,\n        ownerFatherName: schema.soCenters.ownerFatherName,\n        ownerMotherName: schema.soCenters.ownerMotherName,\n        ownerPhone: schema.soCenters.ownerPhone,\n        landmarks: schema.soCenters.landmarks,\n        roomSize: schema.soCenters.roomSize,\n        rentAmount: schema.soCenters.rentAmount,\n        rentalAdvance: schema.soCenters.rentalAdvance,\n        dateOfHouseTaken: schema.soCenters.dateOfHouseTaken,\n        monthlyRentDate: schema.soCenters.monthlyRentDate,\n        electricBillAccountNumber: schema.soCenters.electricBillAccountNumber,\n        internetBillAccountNumber: schema.soCenters.internetBillAccountNumber,\n        capacity: schema.soCenters.capacity,\n        facilities: schema.soCenters.facilities,\n        walletBalance: schema.soCenters.walletBalance,\n        isActive: schema.soCenters.isActive,\n        createdAt: schema.soCenters.createdAt,\n        villageId: schema.soCenters.villageId,\n        // Manager information\n        managerName: schema.users.name,\n        managerEmail: schema.users.email,\n        // Village information  \n        villageName: schema.villages.name,\n        mandalName: schema.mandals.name,\n        districtName: schema.districts.name,\n        stateName: schema.states.name,\n      })\n      .from(schema.soCenters)\n      .leftJoin(schema.users, eq(schema.soCenters.managerId, schema.users.id))\n      .leftJoin(schema.villages, eq(schema.soCenters.villageId, schema.villages.id))\n      .leftJoin(schema.mandals, eq(schema.villages.mandalId, schema.mandals.id))\n      .leftJoin(schema.districts, eq(schema.mandals.districtId, schema.districts.id))\n      .leftJoin(schema.states, eq(schema.districts.stateId, schema.states.id))\n      .where(eq(schema.soCenters.isActive, true))\n      .orderBy(desc(schema.soCenters.createdAt));\n\n    // Get student counts for each center\n    const centerIds = centers.map(c => c.id);\n    const studentCounts = centerIds.length > 0 ? await db\n      .select({\n        centerId: schema.students.soCenterId,\n        count: sqlQuery<number>`count(*)::int`\n      })\n      .from(schema.students)\n      .where(and(\n        inArray(schema.students.soCenterId, centerIds),\n        eq(schema.students.isActive, true)\n      ))\n      .groupBy(schema.students.soCenterId) : [];\n\n    // Combine center data with student counts\n    return centers.map(center => ({\n      ...center,\n      studentCount: studentCounts.find(sc => sc.centerId === center.id)?.count || 0\n    }));\n  }\n\n  async createSoCenterEquipment(soCenterId: string, equipment: any[]): Promise<void> {\n    if (equipment && equipment.length > 0) {\n      const equipmentData = equipment.map(item => ({\n        soCenterId,\n        itemName: item.itemName,\n        serialNumber: item.serialNumber,\n        warrantyYears: parseInt(item.warrantyYears),\n        purchaseDate: item.purchaseDate,\n        warrantyEndDate: this.calculateWarrantyEndDate(item.purchaseDate, parseInt(item.warrantyYears)),\n        brandName: item.brandName,\n      }));\n\n      await db.insert(schema.soCenterEquipment).values(equipmentData);\n    }\n  }\n\n  async getSoCenterEquipment(soCenterId: string) {\n    return await db.select()\n      .from(schema.soCenterEquipment)\n      .where(and(\n        eq(schema.soCenterEquipment.soCenterId, soCenterId),\n        eq(schema.soCenterEquipment.isActive, true)\n      ))\n      .orderBy(asc(schema.soCenterEquipment.createdAt));\n  }\n\n  async updateSoCenterEquipment(equipmentId: string, data: any) {\n    if (data.purchaseDate && data.warrantyYears) {\n      data.warrantyEndDate = this.calculateWarrantyEndDate(data.purchaseDate, parseInt(data.warrantyYears));\n    }\n\n    return await db.update(schema.soCenterEquipment)\n      .set(data)\n      .where(eq(schema.soCenterEquipment.id, equipmentId))\n      .returning();\n  }\n\n  async deleteSoCenterEquipment(equipmentId: string): Promise<void> {\n    await db.update(schema.soCenterEquipment)\n      .set({ isActive: false })\n      .where(eq(schema.soCenterEquipment.id, equipmentId));\n  }\n\n  private calculateWarrantyEndDate(purchaseDate: string, warrantyYears: number): string {\n    const purchase = new Date(purchaseDate);\n    const warrantyEnd = new Date(purchase);\n    warrantyEnd.setFullYear(warrantyEnd.getFullYear() + warrantyYears);\n\n    // Format as DD/MM/YYYY as required\n    const day = warrantyEnd.getDate().toString().padStart(2, '0');\n    const month = (warrantyEnd.getMonth() + 1).toString().padStart(2, '0');\n    const year = warrantyEnd.getFullYear();\n\n    return `${day}/${month}/${year}`;\n  }\n\n  async createSoCenter(center: InsertSoCenter, nearbySchools?: any[], nearbyTuitions?: any[], equipment?: any[]): Promise<SoCenter> {\n    console.log('🏢 Creating SO Center with data:', {\n      name: center.name,\n      email: center.email,\n      centerId: center.centerId\n    });\n\n    return await db.transaction(async (tx) => {\n      // Create the SO Center record\n      console.log('📝 Inserting SO Center record...');\n      const [newCenter] = await tx.insert(schema.soCenters).values(center).returning();\n      console.log('✅ SO Center created with ID:', newCenter.id);\n\n      // Create nearby schools if provided\n      if (nearbySchools && nearbySchools.length > 0) {\n        const schoolsData = nearbySchools.map(school => ({\n          soCenterId: newCenter.id,\n          schoolName: school.schoolName,\n          studentStrength: parseInt(school.studentStrength) || 0,\n          schoolType: school.schoolType\n        }));\n        await tx.insert(schema.nearbySchools).values(schoolsData);\n        console.log('✅ Nearby schools created');\n      }\n\n      // Create nearby tuitions if provided\n      if (nearbyTuitions && nearbyTuitions.length > 0) {\n        const tuitionsData = nearbyTuitions.map(tuition => ({\n          soCenterId: newCenter.id,\n          tuitionName: tuition.tuitionName,\n          studentStrength: parseInt(tuition.studentStrength) || 0\n        }));\n        await tx.insert(schema.nearbyTuitions).values(tuitionsData);\n        console.log('✅ Nearby tuitions created');\n      }\n\n      // Create equipment if provided\n      if (equipment && equipment.length > 0) {\n        const equipmentData = equipment.map(item => ({\n          soCenterId: newCenter.id,\n          itemName: item.itemName,\n          serialNumber: item.serialNumber,\n          warrantyYears: parseInt(item.warrantyYears),\n          purchaseDate: item.purchaseDate,\n          warrantyEndDate: this.calculateWarrantyEndDate(item.purchaseDate, parseInt(item.warrantyYears)),\n          brandName: item.brandName,\n        }));\n        await tx.insert(schema.soCenterEquipment).values(equipmentData);\n        console.log('✅ Equipment inventory created');\n      }\n\n      // Check if user with this email already exists\n      const existingUser = await tx.select()\n        .from(schema.users)\n        .where(eq(schema.users.email, center.email!))\n        .limit(1);\n\n      if (existingUser.length > 0) {\n        console.log('⚠️  User with email already exists, updating user role to so_center');\n        // Update existing user to have so_center role and link to this center\n        await tx.update(schema.users)\n          .set({ \n            role: 'so_center' as const,\n            name: center.name,\n            phone: center.phone,\n            villageId: center.villageId,\n            isActive: true\n          })\n          .where(eq(schema.users.email, center.email!));\n        console.log('✅ Existing user updated with SO Center role');\n      } else {\n        console.log('👤 Creating new user authentication record...');\n        // Create corresponding user authentication record\n        const userData: schema.InsertUser = {\n          email: center.email || `${center.centerId}@navanidhi.com`,\n          name: center.name,\n          role: 'so_center' as const,\n          password: center.password || '12345678',\n          phone: center.phone,\n          villageId: center.villageId,\n          isActive: true\n        };\n\n        await tx.insert(schema.users).values(userData);\n        console.log('✅ New user authentication created');\n      }\n\n      console.log('🎉 SO Center creation completed successfully');\n      return newCenter;\n    });\n  }\n\n  async updateSoCenterWallet(id: string, amount: number): Promise<SoCenter> {\n    // Add the amount to existing wallet balance, don't replace it\n    const numericAmount = Number(amount);\n    console.log('💰 Wallet update - ID:', id, 'Amount:', amount, 'Parsed:', numericAmount);\n\n    if (isNaN(numericAmount) || numericAmount <= 0) {\n      throw new Error(`Invalid amount for wallet update: ${amount} (parsed: ${numericAmount})`);\n    }\n\n    // Use direct SQL update with proper numeric conversion\n    const [updatedCenter] = await db.update(schema.soCenters)\n      .set({ \n        walletBalance: sqlQuery`CAST(${schema.soCenters.walletBalance} AS NUMERIC) + CAST(${numericAmount} AS NUMERIC)`\n      })\n      .where(eq(schema.soCenters.id, id))\n      .returning();\n    console.log('✅ Wallet updated successfully to:', updatedCenter?.walletBalance);\n    return updatedCenter;\n  }\n\n  async getAllClasses(): Promise<Class[]> {\n    return await db.select().from(schema.classes).where(eq(schema.classes.isActive, true));\n  }\n\n  async createClass(classData: InsertClass): Promise<Class> {\n    const result = await db.insert(schema.classes).values(classData).returning();\n    return result[0];\n  }\n\n  async getSubjectsByClass(classId: string): Promise<Subject[]> {\n    return await db.select().from(schema.subjects)\n      .where(and(eq(schema.subjects.classId, classId), eq(schema.subjects.isActive, true)));\n  }\n\n  async getChaptersBySubjectAndClass(subjectId: string, classId: string): Promise<Chapter[]> {\n    return await db.select().from(schema.chapters)\n      .innerJoin(schema.subjects, eq(schema.chapters.subjectId, schema.subjects.id))\n      .where(and(\n        eq(schema.chapters.subjectId, subjectId),\n        eq(schema.subjects.classId, classId),\n        eq(schema.chapters.isActive, true)\n      ))\n      .then(results => results.map(result => result.chapters));\n  }\n\n  async createSubject(subject: InsertSubject): Promise<Subject> {\n    const result = await db.insert(schema.subjects).values(subject).returning();\n    return result[0];\n  }\n\n  async getChaptersBySubject(subjectId: string): Promise<Chapter[]> {\n    return await db.select().from(schema.chapters)\n      .where(and(eq(schema.chapters.subjectId, subjectId), eq(schema.chapters.isActive, true)))\n      .orderBy(asc(schema.chapters.orderIndex));\n  }\n\n  async createChapter(chapter: InsertChapter): Promise<Chapter> {\n    const result = await db.insert(schema.chapters).values(chapter).returning();\n    return result[0];\n  }\n\n  async getTopicsByChapter(chapterId: string): Promise<Topic[]> {\n    return await db.select().from(schema.topics)\n      .where(and(eq(schema.topics.chapterId, chapterId), eq(schema.topics.isActive, true)))\n      .orderBy(asc(schema.topics.orderIndex));\n  }\n\n  async createTopic(topic: InsertTopic): Promise<Topic> {\n    const result = await db.insert(schema.topics).values(topic).returning();\n    return result[0];\n  }\n\n  async getStudent(id: string): Promise<Student | undefined> {\n    const result = await db.select().from(schema.students).where(eq(schema.students.id, id));\n    return result[0];\n  }\n\n  async getStudentByQr(qrCode: string): Promise<Student | undefined> {\n    const result = await db.select().from(schema.students).where(eq(schema.students.qrCode, qrCode));\n    return result[0];\n  }\n\n  async getStudentsBySoCenter(soCenterId: string): Promise<any[]> {\n    try {\n      console.log('🔍 Storage: Fetching students for SO Center:', soCenterId);\n\n      // Use a simpler approach with raw SQL to avoid Drizzle ordering issues\n      const students = await sql`\n        SELECT \n          s.id,\n          s.name,\n          s.student_id as \"studentId\",\n          s.parent_phone as \"parentPhone\",\n          s.date_of_birth as \"dateOfBirth\",\n          s.father_name as \"fatherName\",\n          s.mother_name as \"motherName\",\n          s.father_mobile as \"fatherMobile\",\n          s.mother_mobile as \"motherMobile\",\n          s.address,\n          s.enrollment_date as \"enrollmentDate\",\n          s.course_type as \"courseType\",\n          s.class_id as \"classId\",\n          c.name as \"className\",\n          s.so_center_id as \"soCenterId\",\n          s.village_id as \"villageId\",\n          s.is_active as \"isActive\",\n          s.total_fee_amount as \"totalFeeAmount\",\n          s.paid_amount as \"paidAmount\",\n          s.pending_amount as \"pendingAmount\",\n          s.qr_code as \"qrCode\",\n          s.created_at as \"createdAt\"\n        FROM students s\n        LEFT JOIN classes c ON s.class_id = c.id\n        WHERE s.so_center_id = ${soCenterId}\n          AND s.is_active = true\n        ORDER BY s.created_at DESC\n      `;\n\n      console.log('✅ Storage: Found', students.length, 'students for SO Center');\n\n      // Ensure we always return an array\n      return Array.isArray(students) ? students : [];\n    } catch (error) {\n      console.error('❌ Storage: Error fetching students by SO Center:', error);\n      // Return empty array on error instead of throwing\n      return [];\n    }\n  }\n\n  async createStudent(student: InsertStudent): Promise<Student> {\n    const qrCode = `student_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    const result = await db.insert(schema.students)\n      .values({ ...student, qrCode } as any)\n      .returning();\n    return result[0];\n  }\n\n  async getAllStudents(): Promise<any[]> {\n    const results = await db.select({\n      id: schema.students.id,\n      name: schema.students.name,\n      parentPhone: schema.students.parentPhone,\n      fatherMobile: schema.students.fatherMobile,\n      classId: schema.students.classId,\n      className: schema.classes.name,\n      soCenterId: schema.students.soCenterId,\n      createdAt: schema.students.createdAt,\n      qrCode: schema.students.qrCode,\n      studentId: schema.students.studentId,\n      aadharNumber: schema.students.aadharNumber,\n      fatherName: schema.students.fatherName,\n      motherName: schema.students.motherName,\n      courseType: schema.students.courseType,\n      villageId: schema.students.villageId,\n      dateOfBirth: schema.students.dateOfBirth,\n      gender: schema.students.gender,\n      isActive: schema.students.isActive,\n      paymentStatus: schema.students.paymentStatus,\n      totalFeeAmount: schema.students.totalFeeAmount,\n      paidAmount: schema.students.paidAmount,\n      pendingAmount: schema.students.pendingAmount\n    })\n    .from(schema.students)\n    .leftJoin(schema.classes, eq(schema.students.classId, schema.classes.id))\n    .where(eq(schema.students.isActive, true))\n    .orderBy(desc(schema.students.createdAt));\n\n    return results;\n  }\n\n  async getAllStudentsWithDetails(): Promise<any[]> {\n    try {\n      console.log('🔍 Storage: Fetching all students with comprehensive details...');\n\n      // Main students query with joins for comprehensive data\n      const students = await db\n        .select({\n          // Student basic info\n          id: schema.students.id,\n          studentId: schema.students.studentId,\n          name: schema.students.name,\n          dateOfBirth: schema.students.dateOfBirth,\n          gender: schema.students.gender,\n          aadharNumber: schema.students.aadharNumber,\n          enrollmentDate: schema.students.enrollmentDate,\n          courseType: schema.students.courseType,\n          address: schema.students.address,\n          isActive: schema.students.isActive,\n          createdAt: schema.students.createdAt,\n\n          // Parent information\n          fatherName: schema.students.fatherName,\n          fatherMobile: schema.students.fatherMobile,\n          fatherOccupation: schema.students.fatherOccupation,\n          motherName: schema.students.motherName,\n          motherMobile: schema.students.motherMobile,\n          motherOccupation: schema.students.motherOccupation,\n\n          // Fee information\n          totalFeeAmount: schema.students.totalFeeAmount,\n          paidAmount: schema.students.paidAmount,\n          pendingAmount: schema.students.pendingAmount,\n\n          // Foreign keys\n          classId: schema.students.classId,\n          soCenterId: schema.students.soCenterId,\n          villageId: schema.students.villageId,\n\n          // Joined data\n          className: schema.classes.name,\n          soCenterName: schema.soCenters.name,\n          soCenterCenterId: schema.soCenters.centerId,\n          villageName: schema.villages.name,\n          mandalName: schema.mandals.name,\n          districtName: schema.districts.name,\n          stateName: schema.states.name,\n        })\n        .from(schema.students)\n        .leftJoin(schema.classes, eq(schema.students.classId, schema.classes.id))\n        .leftJoin(schema.soCenters, eq(schema.students.soCenterId, schema.soCenters.id))\n        .leftJoin(schema.villages, eq(schema.students.villageId, schema.villages.id))\n        .leftJoin(schema.mandals, eq(schema.villages.mandalId, schema.mandals.id))\n        .leftJoin(schema.districts, eq(schema.mandals.districtId, schema.districts.id))\n        .leftJoin(schema.states, eq(schema.districts.stateId, schema.states.id))\n        .where(eq(schema.students.isActive, true))\n        .orderBy(desc(schema.students.createdAt));\n\n      // Get siblings for each student\n      const studentIds = students.map(s => s.id);\n      const siblings = studentIds.length > 0 ? await db\n        .select()\n        .from(schema.studentSiblings)\n        .where(inArray(schema.studentSiblings.studentId, studentIds)) : [];\n\n      // Combine student data with siblings\n      const studentsWithDetails = students.map(student => {\n        const studentSiblings = siblings.filter(s => s.studentId === student.id);\n\n        return {\n          ...student,\n          paymentStatus: parseFloat(student.pendingAmount || '0') <= 0 ? 'paid' : 'pending',\n          progress: 0, // Initial progress\n          siblings: studentSiblings,\n        };\n      });\n\n      console.log('✅ Storage: Retrieved', studentsWithDetails.length, 'students with comprehensive details');\n      return studentsWithDetails;\n    } catch (error) {\n      console.error('❌ Storage: Failed to fetch students with details:', error);\n      throw error;\n    }\n  }\n\n  async updateStudent(id: string, updates: Partial<InsertStudent>): Promise<Student> {\n    const result = await db.update(schema.students)\n      .set(updates)\n      .where(eq(schema.students.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteStudent(id: string): Promise<void> {\n    await db.update(schema.students)\n      .set({ isActive: false })\n      .where(eq(schema.students.id, id));\n  }\n\n  async getStudentProgress(studentId: string): Promise<TopicProgress[]> {\n    return await db.select().from(schema.topicProgress)\n      .where(eq(schema.topicProgress.studentId, studentId))\n      .orderBy(desc(schema.topicProgress.updatedAt));\n  }\n\n  async updateTopicProgress(progress: InsertTopicProgress): Promise<TopicProgress> {\n    const existing = await this.getProgressByTopic(progress.topicId!, progress.studentId!);\n\n    if (existing) {\n      const result = await db.update(schema.topicProgress)\n        .set({ ...progress, updatedAt: new Date() })\n        .where(and(\n          eq(schema.topicProgress.studentId, progress.studentId!),\n          eq(schema.topicProgress.topicId, progress.topicId!)\n        ))\n        .returning();\n      return result[0];\n    } else {\n      const result = await db.insert(schema.topicProgress).values(progress).returning();\n      return result[0];\n    }\n  }\n\n  async getProgressByTopic(topicId: string, studentId: string): Promise<TopicProgress | undefined> {\n    const result = await db.select().from(schema.topicProgress)\n      .where(and(\n        eq(schema.topicProgress.topicId, topicId),\n        eq(schema.topicProgress.studentId, studentId)\n      ));\n    return result[0];\n  }\n\n  async getStudentPayments(studentId: string): Promise<Payment[]> {\n    return await db.select().from(schema.payments)\n      .where(eq(schema.payments.studentId, studentId))\n      .orderBy(desc(schema.payments.createdAt));\n  }\n\n  async createPayment(payment: InsertPayment): Promise<Payment> {\n    const result = await db.insert(schema.payments).values(payment).returning();\n    return result[0];\n  }\n\n  async getPaymentsBySoCenter(soCenterId: string): Promise<Payment[]> {\n    const results = await db.select()\n    .from(schema.payments)\n    .innerJoin(schema.students, eq(schema.payments.studentId, schema.students.id))\n    .where(eq(schema.students.soCenterId, soCenterId))\n    .orderBy(desc(schema.payments.createdAt));\n\n    return results.map(result => result.payments);\n  }\n\n  async getPaymentsByDateRange(soCenterId: string, startDate: Date, endDate: Date): Promise<Payment[]> {\n    const results = await db.select()\n    .from(schema.payments)\n    .innerJoin(schema.students, eq(schema.payments.studentId, schema.students.id))\n    .where(\n      and(\n        eq(schema.students.soCenterId, soCenterId),\n        gte(schema.payments.createdAt, startDate),\n        lte(schema.payments.createdAt, endDate)\n      )\n    )\n    .orderBy(desc(schema.payments.createdAt));\n\n    return results.map(result => result.payments);\n  }\n\n  async createWalletTransaction(transaction: InsertWalletTransaction): Promise<WalletTransaction> {\n    // Use the postgres client directly since the schema doesn't match the actual database\n    const transactionId = `TXN-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n    try {\n      // Use the underlying postgres client for raw SQL\n      const result = await sql`\n        INSERT INTO wallet_transactions (user_id, transaction_id, type, amount, description, status, created_at)\n        VALUES (${transaction.soCenterId}, ${transactionId}, ${transaction.type}, ${transaction.amount}, ${transaction.description}, 'completed', NOW())\n        RETURNING *\n      `;\n\n      return result[0] as WalletTransaction;\n    } catch (error) {\n      console.error('Error creating wallet transaction:', error);\n      throw new Error('Failed to create wallet transaction');\n    }\n  }\n\n  async getWalletTransactions(soCenterId: string): Promise<WalletTransaction[]> {\n    // Use raw SQL since the schema doesn't match the actual database structure\n    try {\n      const result = await sql`\n        SELECT * FROM wallet_transactions \n        WHERE user_id = ${soCenterId}\n        ORDER BY created_at DESC\n      `;\n\n      return result as WalletTransaction[];\n    } catch (error) {\n      console.error('Error fetching wallet transactions:', error);\n      return [];\n    }\n  }\n\n  // Get payments by student for payment history\n  async getPaymentsByStudent(studentId: string): Promise<Payment[]> {\n    return await db.select()\n      .from(schema.payments)\n      .where(eq(schema.payments.studentId, studentId))\n      .orderBy(desc(schema.payments.createdAt));\n  }\n\n  // Process student payment with wallet update and transaction recording\n  async processStudentPayment(paymentData: {\n    studentId: string;\n    amount: number;\n    feeType: 'monthly' | 'yearly';\n    receiptNumber: string;\n    expectedFeeAmount: number;\n    recordedBy: string; // Added parameter\n  }): Promise<{\n    payment: Payment;\n    transactionId: string;\n    walletUpdated: boolean;\n    studentName: string;\n    studentId: string;\n    className: string;\n    amount: number;\n    receiptNumber: string;\n    feeType: string;\n    parentPhone: string;\n    fatherMobile: string;\n    newPaidAmount: number;\n    newPendingAmount: number;\n    totalFeeAmount: number;\n  }> {\n    const { studentId, amount, feeType, receiptNumber, expectedFeeAmount, recordedBy } = paymentData;\n    const transactionId = `TXN-${Date.now()}-${studentId.slice(0, 8)}`;\n\n    return await db.transaction(async (tx) => {\n      // Get student to find SO Center\n      const [student] = await tx.select()\n        .from(schema.students)\n        .where(eq(schema.students.id, studentId));\n\n      if (!student) {\n        throw new Error('Student not found');\n      }\n\n      // Create payment record with proper invoice data\n      const currentDate = new Date();\n      const paymentRecord = await this.createPayment({\n        studentId,\n        amount: amount.toString(),\n        paymentMethod: 'cash',\n        description: `${feeType} fee payment - Receipt: ${receiptNumber}`,\n        receiptNumber,\n        recordedBy: recordedBy, // Use the authenticated user ID\n        month: currentDate.toLocaleString('default', { month: 'long' }),\n        year: currentDate.getFullYear(),\n        transactionId: transactionId\n      });\n\n      // Update student payment tracking\n      const numericAmount = Number(amount);\n      const currentPaidAmount = Number(student.paidAmount || 0);\n      let totalFeeAmount = Number(student.totalFeeAmount || 0);\n\n      // Set total fee amount if not set\n      if (totalFeeAmount === 0) {\n        totalFeeAmount = expectedFeeAmount;\n      }\n\n      const newPaidAmount = currentPaidAmount + numericAmount;\n      const newPendingAmount = Math.max(0, totalFeeAmount - newPaidAmount);\n\n      await tx.update(schema.students)\n        .set({\n          paidAmount: newPaidAmount.toString(),\n          pendingAmount: newPendingAmount.toString(),\n          totalFeeAmount: totalFeeAmount.toString(),\n          paymentStatus: newPendingAmount === 0 ? 'paid' : 'pending'\n        })\n        .where(eq(schema.students.id, studentId));\n\n      // Update SO Center wallet - using proper numeric addition\n\n      // Get current wallet balance first\n      const [currentBalance] = await tx.select({ balance: schema.soCenters.walletBalance })\n        .from(schema.soCenters)\n        .where(eq(schema.soCenters.id, student.soCenterId));\n\n      const newBalance = Number(currentBalance.balance) + numericAmount;\n\n      await tx.update(schema.soCenters)\n        .set({ \n          walletBalance: newBalance.toString()\n        })\n        .where(eq(schema.soCenters.id, student.soCenterId));\n\n      // Create wallet transaction record using correct column name\n      await this.createWalletTransaction({\n        soCenterId: student.soCenterId,\n        amount: amount.toString(),\n        type: 'credit',\n        description: `${feeType} fee payment from ${student.name} - Receipt: ${receiptNumber}`\n      });\n\n      // Get updated student details for invoice\n      const [updatedStudent] = await tx.select()\n        .from(schema.students)\n        .leftJoin(schema.classes, eq(schema.students.classId, schema.classes.id))\n        .where(eq(schema.students.id, studentId));\n\n      return {\n        payment: paymentRecord,\n        transactionId,\n        walletUpdated: true,\n        studentName: updatedStudent.students.name,\n        studentId: updatedStudent.students.studentId,\n        className: updatedStudent.classes?.name || 'Unknown Class',\n        amount: amount,\n        receiptNumber,\n        feeType,\n        parentPhone: updatedStudent.students.parentPhone,\n        fatherMobile: updatedStudent.students.fatherMobile,\n        newPaidAmount,\n        newPendingAmount,\n        totalFeeAmount\n      };\n    });\n  }\n  // Address hierarchy methods\n  async getAllStates(): Promise<any[]> {\n    return await db.select().from(schema.states).where(eq(schema.states.isActive, true)).orderBy(asc(schema.states.name));\n  }\n\n  async getAllDistricts(): Promise<any[]> {\n    return await db.select().from(schema.districts).where(eq(schema.districts.isActive, true)).orderBy(asc(schema.districts.name));\n  }\n\n  async getAllMandals(): Promise<any[]> {\n    return await db.select().from(schema.mandals).where(eq(schema.mandals.isActive, true)).orderBy(asc(schema.mandals.name));\n  }\n\n  async getAllVillages(): Promise<any[]> {\n    return await db.select().from(schema.villages).where(eq(schema.villages.isActive, true)).orderBy(asc(schema.villages.name));\n  }\n\n  async getDistrictsByState(stateId: string): Promise<any[]> {\n    return await db.select().from(schema.districts).where(\n      and(eq(schema.districts.stateId, stateId), eq(schema.districts.isActive, true))\n    ).orderBy(asc(schema.districts.name));\n  }\n\n  async getMandalsByDistrict(districtId: string): Promise<any[]> {\n    return await db.select().from(schema.mandals).where(\n      and(eq(schema.mandals.districtId, districtId), eq(schema.mandals.isActive, true))\n    ).orderBy(asc(schema.mandals.name));\n  }\n\n  async getVillagesByMandal(mandalId: string): Promise<any[]> {\n    return await db.select().from(schema.villages).where(\n      and(eq(schema.villages.mandalId, mandalId), eq(schema.villages.isActive, true))\n    ).orderBy(asc(schema.villages.name));\n  }\n\n  async createState(data: any): Promise<any> {\n    const result = await db.insert(schema.states).values(data).returning();\n    return result[0];\n  }\n\n  async createDistrict(data: any): Promise<any> {\n    const result = await db.insert(schema.districts).values(data).returning();\n    return result[0];\n  }\n\n  async createMandal(data: any): Promise<any> {\n    const result = await db.insert(schema.mandals).values(data).returning();\n    return result[0];\n  }\n\n  async createVillage(data: any): Promise<any> {\n    const result = await db.insert(schema.villages).values(data).returning();\n    return result[0];\n  }\n\n  async deleteState(id: string): Promise<void> {\n    await db.delete(schema.states).where(eq(schema.states.id, id));\n  }\n\n  async deleteDistrict(id: string): Promise<void> {\n    await db.delete(schema.districts).where(eq(schema.districts.id, id));\n  }\n\n  async deleteMandal(id: string): Promise<void> {\n    await db.delete(schema.mandals).where(eq(schema.mandals.id, id));\n  }\n\n  async deleteVillage(id: string): Promise<void> {\n    await db.delete(schema.villages).where(eq(schema.villages.id, id));\n  }\n\n  async getStudentsByVillage(villageId: string): Promise<Student[]> {\n    const result = await db.select().from(schema.students).where(eq(schema.students.villageId, villageId));\n    return result;\n  }\n\n  async getSoCentersByVillage(villageId: string): Promise<SoCenter[]> {\n    const result = await db.select().from(schema.soCenters).where(eq(schema.soCenters.villageId, villageId));\n    return result;\n  }\n\n  // Products methods (for commission calculation)\n  /* async getAllProducts(): Promise<any[]> {\n    return await db.select().from(schema.products).where(eq(schema.products.isActive, true)).orderBy(asc(schema.products.name));\n  } \n    */\n\n /* async createProduct(data: any): Promise<any> {\n    const result = await db.insert(schema.products).values(data).returning();\n    return result[0];\n  }\n    */\n\n  // Enhanced SO Center methods with atomic number generation\n  async getNextAvailableSoCenterNumber(): Promise<{ centerId: string; email: string }> {\n    console.log('🔧 Generating next available SO Center ID with atomic transaction...');\n\n    return await db.transaction(async (tx) => {\n      // Use a pessimistic approach - get all existing numbers in a transaction\n      const centers = await tx.select({ centerId: schema.soCenters.centerId }).from(schema.soCenters);\n      const users = await tx.select({ email: schema.users.email }).from(schema.users).where(eq(schema.users.role, 'so_center'));\n\n      console.log('Existing center IDs:', centers.map(c => c.centerId));\n      console.log('Existing SO Center emails:', users.map(u => u.email));\n\n      // Extract numeric parts from both center IDs and emails\n      const existingNumbers = new Set<number>();\n\n      // From center IDs\n      centers.forEach(center => {\n        if (center.centerId) {\n          const match = center.centerId.match(/NNASOC(\\d+)/);\n          if (match) {\n            existingNumbers.add(parseInt(match[1], 10));\n          }\n        }\n      });\n\n      // From emails\n      users.forEach(user => {\n        if (user.email) {\n          const match = user.email.match(/nnasoc(\\d+)@navanidhi\\.org/);\n          if (match) {\n            existingNumbers.add(parseInt(match[1], 10));\n          }\n        }\n      });\n\n      console.log('Existing SO Center numbers:', Array.from(existingNumbers).sort((a, b) => a - b));\n\n      // Find the next sequential number (gap-filling approach)\n      let nextNumber = 1;\n      while (existingNumbers.has(nextNumber)) {\n        nextNumber++;\n      }\n\n      const centerId = `NNASOC${String(nextNumber).padStart(5, '0')}`;\n      const email = `nnasoc${String(nextNumber).padStart(5, '0')}@navanidhi.org`;\n\n      console.log(`Next available SO Center number: ${nextNumber}`);\n      console.log(`Generated center ID: ${centerId}`);\n      console.log(`Generated email: ${email}`);\n\n      return { centerId, email };\n    });\n  }\n\n  async getNextSoCenterId(): Promise<string> {\n    const result = await this.getNextAvailableSoCenterNumber();\n    return result.centerId;\n  }\n\n  async getSoCenterByCenterId(centerId: string): Promise<SoCenter | undefined> {\n    const result = await db.select().from(schema.soCenters).where(eq(schema.soCenters.centerId, centerId));\n    return result[0];\n  }\n\n  async getAvailableManagers(): Promise<User[]> {\n    return await db.select().from(schema.users).where(\n      and(\n        eq(schema.users.isActive, true),\n        eq(schema.users.role, 'so_center')\n      )\n    ).orderBy(asc(schema.users.name));\n  }\n\n  async getSoCenterByEmail(email: string): Promise<SoCenter | undefined> {\n    try {\n      console.log('🔍 Storage: Starting getSoCenterByEmail lookup for:', email);\n\n      // Extract center ID from email (e.g., nnasoc00018@navanidhi.org -> NNASOC00018)\n      const centerId = email.split('@')[0].toUpperCase();\n\n      // Use Drizzle ORM query to find SO Center by email or center ID\n      const result = await db.select()\n        .from(schema.soCenters)\n        .where(\n          or(\n            eq(schema.soCenters.email, email),\n            eq(schema.soCenters.centerId, centerId)\n          )\n        )\n        .limit(1);\n\n      if (result.length > 0) {\n        console.log('✅ Found SO Center:', result[0].centerId, '-', result[0].name);\n        return result[0];\n      }\n\n      console.log('❌ No SO Center found for email:', email);\n      return undefined;\n    } catch (error) {\n      console.error('❌ Error in getSoCenterByEmail:', error);\n      return undefined;\n    }\n  }\n\n  async getSoCenterDashboardStats(soCenterId: string): Promise<any> {\n    try {\n      console.log('📊 Calculating SO Center dashboard stats for:', soCenterId);\n\n      const now = new Date();\n      const thisMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n\n      // Use raw SQL to avoid potential Drizzle ORM circular reference issues\n      const [newStudentsResult] = await sql`\n        SELECT COUNT(*) as count\n        FROM students \n        WHERE so_center_id = ${soCenterId} \n        AND created_at >= ${thisMonth.toISOString()}\n      `;\n\n      const newStudentsThisMonth = parseInt(newStudentsResult?.count || '0');\n\n      // Get payments with raw SQL to avoid stack overflow\n      const paymentsResult = await sql`\n        SELECT p.amount, p.created_at\n        FROM payments p\n        INNER JOIN students s ON p.student_id = s.id\n        WHERE s.so_center_id = ${soCenterId}\n        AND p.created_at >= ${thisMonth.toISOString()}\n      `;\n\n      let thisMonthCollection = 0;\n      let todayCollection = 0;\n\n      for (const payment of paymentsResult) {\n        const amount = parseFloat(payment.amount || '0');\n        thisMonthCollection += amount;\n\n        const paymentDate = new Date(payment.created_at);\n        if (paymentDate.toDateString() === today.toDateString()) {\n          todayCollection += amount;\n        }\n      }\n\n      // Get today's attendance with raw SQL\n      const [attendanceResult] = await sql`\n        SELECT \n          COUNT(CASE WHEN a.status = 'present' THEN 1 END) as present,\n          COUNT(*) as total\n        FROM attendance a\n        INNER JOIN students s ON a.student_id = s.id\n        WHERE s.so_center_id = ${soCenterId}\n        AND a.date = ${today.toISOString().split('T')[0]}\n      `;\n\n      const todayAttendance = attendanceResult?.total > 0 \n        ? Math.round((parseInt(attendanceResult.present) / parseInt(attendanceResult.total)) * 100)\n        : 0;\n\n      // Get real product sales data from orders/transactions\n      const productSalesResult = await sql`\n        SELECT COALESCE(SUM(po.amount::numeric), 0) as total_sales\n        FROM product_orders po\n        WHERE po.so_center_id = ${soCenterId}\n        AND po.created_at >= ${thisMonth.toISOString()}\n      `;\n\n      const thisMonthProductSales = parseFloat(productSalesResult[0]?.total_sales || '0');\n\n      // Get real last 7 days collection data\n      const collectionChart = [];\n      for (let i = 6; i >= 0; i--) {\n        const date = new Date();\n        date.setDate(date.getDate() - i);\n        const startOfDay = new Date(date.getFullYear(), date.getMonth(), date.getDate()).toISOString();\n        const endOfDay = new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1).toISOString();\n\n        const [dayCollection] = await sql`\n          SELECT COALESCE(SUM(p.amount::numeric), 0) as daily_collection\n          FROM payments p\n          INNER JOIN students s ON p.student_id = s.id\n          WHERE s.so_center_id = ${soCenterId}\n          AND p.created_at >= ${startOfDay}\n          AND p.created_at < ${endOfDay}\n        `;\n\n        collectionChart.push({\n          day: date.getDate(),\n          collection: parseFloat(dayCollection?.daily_collection || '0')\n        });\n      }\n\n      // Get real last 7 days attendance data\n      const attendanceChart = [];\n      for (let i = 6; i >= 0; i--) {\n        const date = new Date();\n        date.setDate(date.getDate() - i);\n        const dateStr = date.toISOString().split('T')[0];\n\n        const [dayAttendance] = await sql`\n          SELECT \n            COUNT(CASE WHEN a.status = 'present' THEN 1 END) as present,\n            COUNT(*) as total\n          FROM attendance a\n          INNER JOIN students s ON a.student_id = s.id\n          WHERE s.so_center_id = ${soCenterId}\n          AND a.date = ${dateStr}\n        `;\n\n        const attendancePercentage = parseInt(dayAttendance?.total || '0') > 0 \n          ? Math.round((parseInt(dayAttendance.present || '0') / parseInt(dayAttendance.total || '1')) * 100)\n          : 0;\n\n        attendanceChart.push({\n          day: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][date.getDay()],\n          attendance: attendancePercentage\n        });\n      }\n\n      // Get real product sales breakdown by category\n      const productSalesBreakdown = await sql`\n        SELECT \n          po.product_category,\n          COALESCE(SUM(po.amount::numeric), 0) as category_sales\n        FROM product_orders po\n        WHERE po.so_center_id = ${soCenterId}\n        AND po.created_at >= ${thisMonth.toISOString()}\n        GROUP BY po.product_category\n        ORDER BY category_sales DESC\n      `;\n\n      const productSalesChart = productSalesBreakdown.length > 0 \n        ? productSalesBreakdown.map(item => ({\n            product: item.product_category || 'Other',\n            sales: parseFloat(item.category_sales || '0')\n          }))\n        : [\n            { product: 'Books', sales: 0 },\n            { product: 'Stationery', sales: 0 },\n            { product: 'Digital Content', sales: 0 },\n            { product: 'Exam Prep', sales: 0 }\n          ];\n\n      const stats = {\n        newStudentsThisMonth,\n        thisMonthCollection,\n        todayCollection,\n        todayAttendance,\n        thisMonthProductSales,\n        collectionChart,\n        attendanceChart,\n        productSalesChart\n      };\n\n      console.log('✅ SO Center dashboard stats calculated with real data:', {\n        newStudentsThisMonth,\n        thisMonthCollection,\n        todayCollection,\n        todayAttendance,\n        thisMonthProductSales,\n        collectionChartDays: collectionChart.length,\n        attendanceChartDays: attendanceChart.length,\n        productCategories: productSalesChart.length\n      });\n\n      return stats;\n    } catch (error) {\n      console.error('❌ Error calculating SO Center stats:', error);\n      // Return fallback data if calculation fails\n      return {\n        newStudentsThisMonth: 0,\n        thisMonthCollection: 0,\n        todayCollection: 0,\n        todayAttendance: 0,\n        thisMonthProductSales: 0,\n        collectionChart: [],\n        attendanceChart: [],\n        productSalesChart: []\n      };\n    }\n  }\n\n  async getUnassignedManagers(): Promise<User[]> {\n    try {\n      // Since SO Centers don't have userId field anymore (they use separate auth),\n      // return all so_center role users who don't have corresponding SO center records\n      const users = await db.select().from(schema.users).where(\n        and(\n          eq(schema.users.isActive, true),\n          eq(schema.users.role, 'so_center')\n        )\n      ).orderBy(asc(schema.users.name));\n\n      return users;\n    } catch (error) {\n      console.error('Error in getUnassignedManagers:', error);\n      return [];\n    }\n  }\n\n  async updateSoCenter(id: string, updates: Partial<InsertSoCenter & {\n    nearbySchools?: any[];\n    nearbyTuitions?: any[];\n    equipment?: any[];\n  }>): Promise<SoCenter> {\n    try {\n      console.log('🔄 Storage: Updating SO Center with ID:', id);\n      console.log('🔄 Storage: Update data:', updates);\n\n      // Process the update data to handle type conversions and null values\n      const processedUpdateData = {\n        ...updates,\n        // Fix managerId: convert empty string to null, keep null as null\n        managerId: updates.managerId === '' || updates.managerId === null || updates.managerId === undefined ? null : updates.managerId,\n        // Convert string numbers to proper types, handle null values\n        capacity: updates.capacity !== null && updates.capacity !== undefined && updates.capacity !== '' ? parseInt(updates.capacity.toString()) : null,\n        monthlyRentDate: updates.monthlyRentDate !== null && updates.monthlyRentDate !== undefined && updates.monthlyRentDate !== '' ? parseInt(updates.monthlyRentDate.toString()) : null,\n        monthlyInternetDate: updates.monthlyInternetDate !== null && updates.monthlyInternetDate !== undefined && updates.monthlyInternetDate !== '' ? parseInt(updates.monthlyInternetDate.toString()) : null,\n        // Handle decimal fields properly\n        rentAmount: updates.rentAmount !== null && updates.rentAmount !== undefined && updates.rentAmount !== '' ? updates.rentAmount.toString() : null,\n        rentalAdvance: updates.rentalAdvance !== null && updates.rentalAdvance !== undefined && updates.rentalAdvance !== '' ? updates.rentalAdvance.toString() : null,\n        // Handle boolean conversion\n        isActive: Boolean(updates.isActive),\n        admissionFeeApplicable: Boolean(updates.admissionFeeApplicable),\n        // Ensure arrays are properly handled\n        facilities: Array.isArray(updates.facilities) ? updates.facilities : [],\n        nearbySchools: Array.isArray(updates.nearbySchools) ? updates.nearbySchools : [],\n        nearbyTuitions: Array.isArray(updates.nearbyTuitions) ? updates.nearbyTuitions : [],\n        equipment: Array.isArray(updates.equipment) ? updates.equipment : [],\n      };\n\n      // Update the main SO Center record\n      const [updatedCenter] = await db\n        .update(schema.soCenters)\n        .set({\n          ...processedUpdateData,\n          updatedAt: new Date(),\n        })\n        .where(eq(schema.soCenters.id, id))\n        .returning();\n\n      if (!updatedCenter) {\n        console.log('❌ Storage: SO Center not found for update:', id);\n        throw new Error('SO Center not found');\n      }\n\n      // Note: Additional data tables (nearbySchools, nearbyTuitions, equipment) not implemented yet\n      // For now, just update the main SO Center record without the additional related data\n\n      console.log('✅ Storage: SO Center updated successfully with all additional data:', updatedCenter.id);\n      return updatedCenter;\n    } catch (error) {\n      console.error('❌ Storage: Error updating SO Center:', error);\n      throw error;\n    }\n  }\n\n  async updateSoCenterByUserId(userId: string, updates: Partial<InsertSoCenter>): Promise<SoCenter> {\n    const result = await db.update(schema.soCenters)\n      .set(updates)\n      .where(eq(schema.soCenters.userId, userId))\n      .returning();\n    return result[0];\n  }\n\n  async deleteSoCenter(id: string): Promise<void> {\n    return await db.transaction(async (tx) => {\n      // Get SO Center details first\n      const [soCenter] = await tx.select()\n        .from(schema.soCenters)\n        .where(eq(schema.soCenters.id, id));\n\n      if (!soCenter) {\n        throw new Error('SO Center not found');\n      }\n\n      // Check if SO Center has any active students\n      const students = await tx.select()\n        .from(schema.students)\n        .where(and(\n          eq(schema.students.soCenterId, id),\n          eq(schema.students.isActive, true)\n        ));\n\n      if (students.length > 0) {\n        throw new Error(`Cannot delete SO Center with ${students.length} active students. Please transfer or deactivate students first.`);\n      }\n\n      // Delete related data first\n      await tx.delete(schema.nearbySchools).where(eq(schema.nearbySchools.soCenterId, id));\n      await tx.delete(schema.nearbyTuitions).where(eq(schema.nearbyTuitions.soCenterId, id));\n      await tx.delete(schema.soCenterEquipment).where(eq(schema.soCenterEquipment.soCenterId, id));\n\n      // Delete wallet transactions\n      await tx.delete(schema.walletTransactions).where(eq(schema.walletTransactions.soCenterId, id));\n\n      // Delete the SO Center record completely\n      await tx.delete(schema.soCenters).where(eq(schema.soCenters.id, id));\n\n      // Delete associated user account if exists\n      if (soCenter.email) {\n        await tx.delete(schema.users).where(eq(schema.users.email, soCenter.email));\n      }\n\n      console.log('✅ SO Center deleted permanently:', soCenter.centerId);\n    });\n  }\n\n  async deleteSoCenterByUserId(userId: string): Promise<void> {\n    await db.update(schema.soCenters)\n      .set({ isActive: false })\n      .where(eq(schema.soCenters.userId, userId));\n  }\n\n  // Enhanced User methods\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(schema.users)\n      .where(eq(schema.users.isActive, true))\n      .orderBy(asc(schema.users.name));\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await db.update(schema.users)\n      .set({ isActive: false })\n      .where(eq(schema.users.id, id));\n  }\n\n  async getUsersByRole(role: string): Promise<User[]> {\n    return await db.select().from(schema.users)\n      .where(and(\n        eq(schema.users.role, role as any),\n        eq(schema.users.isActive, true)\n      ))\n      .orderBy(asc(schema.users.name));\n  }\n\n  // Enhanced Academic structure methods\n  async updateClass(id: string, updates: Partial<InsertClass>): Promise<Class> {\n    const result = await db.update(schema.classes)\n      .set(updates)\n      .where(eq(schema.classes.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteClass(id: string): Promise<void> {\n    await db.update(schema.classes)\n      .set({ isActive: false })\n      .where(eq(schema.classes.id, id));\n  }\n\n  async updateSubject(id: string, updates: Partial<InsertSubject>): Promise<Subject> {\n    const result = await db.update(schema.subjects)\n      .set(updates)\n      .where(eq(schema.subjects.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteSubject(id: string): Promise<void> {\n    await db.update(schema.subjects)\n      .set({ isActive: false })\n      .where(eq(schema.subjects.id, id));\n  }\n\n  async updateChapter(id: string, updates: Partial<InsertChapter>): Promise<Chapter> {\n    const result = await db.update(schema.chapters)\n      .set(updates)\n      .where(eq(schema.chapters.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteChapter(id: string): Promise<void> {\n    await db.update(schema.chapters)\n      .set({ isActive: false })\n      .where(eq(schema.chapters.id, id));\n  }\n\n  async updateTopic(id: string, updates: Partial<InsertTopic>): Promise<Topic> {\n    const result = await db.update(schema.topics)\n      .set(updates)\n      .where(eq(schema.topics.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteTopic(id: string): Promise<void> {\n    await db.update(schema.topics)\n      .set({ isActive: false })\n      .where(eq(schema.topics.id, id));\n  }\n\n  async getAllSubjects(): Promise<Subject[]> {\n    return await db.select().from(schema.subjects)\n      .where(eq(schema.subjects.isActive, true))\n      .orderBy(asc(schema.subjects.name));\n  }\n\n  async getAllChapters(): Promise<Chapter[]> {\n    return await db.select().from(schema.chapters)\n      .where(eq(schema.chapters.isActive, true))\n      .orderBy(asc(schema.chapters.name));\n  }\n\n  async getAllTopics(): Promise<Topic[]> {\n    return await db.select().from(schema.topics)\n      .where(eq(schema.topics.isActive, true))\n      .orderBy(asc(schema.topics.name));\n  }\n\n  // Fee Structure methods (using products table for now)\n  async getAllFeeStructures(): Promise<any[]> {\n    return await db.select().from(schema.products)\n      .where(eq(schema.products.isActive, true))\n      .orderBy(asc(schema.products.name));\n  }\n\n  async createFeeStructure(fee: any): Promise<any> {\n    const result = await db.insert(schema.products).values(fee).returning();\n    return result[0];\n  }\n\n  async updateFeeStructure(id: string, updates: any): Promise<any> {\n    const result = await db.update(schema.products)\n      .set(updates)\n      .where(eq(schema.products.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteFeeStructure(id: string): Promise<void> {\n    await db.update(schema.products)\n      .set({ isActive: false })\n      .where(eq(schema.products.id, id));\n  }\n\n  // Enhanced Student methods\n\n  // Enhanced Payment methods\n  async getAllPayments(): Promise<Payment[]> {\n    return await db.select().from(schema.payments)\n      .orderBy(desc(schema.payments.createdAt));\n  }\n\n  async updatePayment(id: string, updates: Partial<InsertPayment>): Promise<Payment> {\n    const result = await db.update(schema.payments)\n      .set(updates)\n      .where(eq(schema.payments.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deletePayment(id: string): Promise<void> {\n    await db.delete(schema.payments).where(eq(schema.payments.id, id));\n  }\n\n  // Student ID Generation with NNAS25000001 format\n  async generateStudentId(): Promise<string> {\n    const currentYear = new Date().getFullYear();\n    const yearSuffix = currentYear.toString().slice(-2); // Get last 2 digits (e.g., 25 for 2025)\n\n    return await db.transaction(async (tx) => {\n      // Get or create counter for current year\n      let counter = await tx.select()\n        .from(schema.studentCounter)\n        .where(eq(schema.studentCounter.year, currentYear))\n        .limit(1);\n\n      if (counter.length === 0) {\n        // Create new counter for the year\n        const [newCounter] = await tx.insert(schema.studentCounter)\n          .values({\n            year: currentYear,\n            currentNumber: 1\n          })\n          .returning();\n\n        const paddedNumber = String(1).padStart(7, '0');\n        return `NNAS${yearSuffix}${paddedNumber}`;\n      } else {\n        // Increment existing counter\n        const nextNumber = counter[0].currentNumber + 1;\n        await tx.update(schema.studentCounter)\n          .set({ \n            currentNumber: nextNumber,\n            updatedAt: new Date()\n          })\n          .where(eq(schema.studentCounter.year, currentYear));\n\n        const paddedNumber = String(nextNumber).padStart(7, '0');\n        return `NNAS${yearSuffix}${paddedNumber}`;\n      }\n    });\n  }\n\n  // Validate Aadhar Number uniqueness\n  async validateAadharNumber(aadharNumber: string): Promise<boolean> {\n    console.log('🔍 CRITICAL: Checking Aadhar number globally across entire database:', aadharNumber);\n\n    // Check ENTIRE database for existing Aadhar number - NOT just SO Center specific\n    const existing = await db.select()\n      .from(schema.students)\n      .where(eq(schema.students.aadharNumber, aadharNumber))\n      .limit(1);\n\n    const isUnique = existing.length === 0;\n\n    if (existing.length > 0) {\n      console.log('❌ DUPLICATE AADHAR FOUND: Aadhar number', aadharNumber, 'already exists for student:', existing[0].name, 'ID:', existing[0].studentId);\n    } else {\n      console.log('✅ AADHAR UNIQUE: Aadhar number', aadharNumber, 'is available globally');\n    }\n\n    return isUnique; // Returns true if Aadhar is unique across entire database\n  }\n\n  // Create student with siblings in a transaction\n  async createStudentWithSiblings(studentData: InsertStudent, siblings?: InsertStudentSibling[]): Promise<Student> {\n    try {\n      // Generate unique student ID first (outside transaction)\n      const studentId = await this.generateStudentId();\n\n      return await db.transaction(async (tx) => {\n        console.log('Starting database transaction for student creation...');\n\n        // Create the student record\n        const [newStudent] = await tx.insert(schema.students)\n          .values({\n            ...studentData,\n            studentId,\n            qrCode: `QR_${studentId}_${Date.now()}`\n          })\n          .returning();\n\n        console.log('Student record created, ID:', newStudent.id);\n\n        // Create sibling records if provided\n        if (siblings && siblings.length > 0) {\n          const siblingsWithStudentId = siblings.map(sibling => ({\n            ...sibling,\n            studentId: newStudent.id\n          }));\n\n          await tx.insert(schema.studentSiblings)\n            .values(siblingsWithStudentId);\n\n          console.log('Sibling records created:', siblings.length);\n        }\n\n        console.log('Transaction completed successfully');\n        return newStudent;\n      });\n    } catch (error: any) {\n      console.error('Error in createStudentWithSiblings:', error);\n      throw error;\n    }\n  }\n\n  // Get student siblings\n  async getStudentSiblings(studentId: string): Promise<StudentSibling[]> {\n    return await db.select()\n      .from(schema.studentSiblings)\n      .where(eq(schema.studentSiblings.studentId, studentId))\n      .orderBy(asc(schema.studentSiblings.createdAt));\n  }\n\n  // Class Fees Management\n  async getClassFees(classId: string, courseType: string): Promise<ClassFee | undefined> {\n    // First try to get the exact match with courseType\n    let result = await db.select()\n      .from(schema.classFees)\n      .where(and(\n        eq(schema.classFees.classId, classId),\n        eq(schema.classFees.courseType, courseType as any),\n        eq(schema.classFees.isActive, true)\n      ))\n      .limit(1);\n\n    // If no exact match found, get any fee record for this class and return the appropriate fee\n    if (result.length === 0) {\n      console.log(`🔍 No exact match for classId: ${classId}, courseType: ${courseType}. Trying flexible approach...`);\n      result = await db.select()\n        .from(schema.classFees)\n        .where(and(\n          eq(schema.classFees.classId, classId),\n          eq(schema.classFees.isActive, true)\n        ))\n        .limit(1);\n\n      if (result.length > 0) {\n        console.log(`✅ Found flexible fee record for class ${classId}`);\n        const feeRecord = result[0];\n\n        // Check if the requested fee type exists in the record\n        if (courseType === 'yearly' && !feeRecord.yearlyFee) {\n          console.log(`⚠️ No yearly fee available for class ${classId}`);\n          return undefined;\n        }\n        if (courseType === 'monthly' && !feeRecord.monthlyFee) {\n          console.log(`⚠️ No monthly fee available for class ${classId}`);\n          return undefined;\n        }\n      }\n    }\n\n    return result[0];\n  }\n\n  async getAllClassFees(): Promise<ClassFee[]> {\n    return await db.select()\n      .from(schema.classFees)\n      .where(eq(schema.classFees.isActive, true))\n      .orderBy(asc(schema.classFees.createdAt));\n  }\n\n  async createClassFee(classFee: InsertClassFee): Promise<ClassFee> {\n    const [result] = await db.insert(schema.classFees)\n      .values(classFee)\n      .returning();\n    return result;\n  }\n\n  async updateClassFee(id: string, updates: Partial<InsertClassFee>): Promise<ClassFee> {\n    const [result] = await db.update(schema.classFees)\n      .set(updates)\n      .where(eq(schema.classFees.id, id))\n      .returning();\n    return result;\n  }\n\n  async deleteClassFee(id: string): Promise<void> {\n    await db.update(schema.classFees)\n      .set({ isActive: false })\n      .where(eq(schema.classFees.id, id));\n  }\n\n  async getStudentPaymentHistory(studentId: string): Promise<any[]> {\n    try {\n      const payments = await db\n        .select({\n          id: schema.payments.id,\n          amount: schema.payments.amount,\n          paymentMethod: schema.payments.paymentMethod,\n          description: schema.payments.description,\n          month: schema.payments.month,\n          year: schema.payments.year,\n          createdAt: schema.payments.createdAt\n        })\n        .from(schema.payments)\n        .where(eq(schema.payments.studentId, studentId))\n        .orderBy(desc(schema.payments.createdAt));\n\n      return payments;\n    } catch (error) {\n      console.error('Error getting student payment history:', error);\n      return [];\n    }\n  }\n\n  // Attendance methods\n  async submitAttendance(attendanceData: {\n    date: string;\n    classId: string;\n    soCenterId: string;\n    markedBy: string;\n    records: Array<{\n      studentId: string;\n      status: 'present' | 'absent' | 'holiday';\n    }>;\n  }): Promise<{ presentCount: number; absentCount: number; holidayCount: number }> {\n    // Use UPSERT for each attendance record to prevent duplicates\n    const results = [];\n    for (const record of attendanceData.records) {\n      const [result] = await db.insert(schema.attendance)\n        .values({\n          studentId: record.studentId,\n          classId: attendanceData.classId,\n          soCenterId: attendanceData.soCenterId,\n          date: attendanceData.date,\n          status: record.status,\n          markedBy: attendanceData.markedBy\n        })\n        .onConflictDoUpdate({\n          target: [schema.attendance.studentId, schema.attendance.date, schema.attendance.classId],\n          set: {\n            status: record.status,\n            markedBy: record.markedBy,\n            updatedAt: new Date(),\n          },\n        })\n        .returning();\n      results.push(result);\n    }\n\n    // Count the records\n    const presentCount = attendanceData.records.filter(r => r.status === 'present').length;\n    const absentCount = attendanceData.records.filter(r => r.status === 'absent').length;\n    const holidayCount = attendanceData.records.filter(r => r.status === 'holiday').length;\n\n    return { presentCount, absentCount, holidayCount };\n  }\n\n  // Get existing attendance status for students on a specific date\n  async getExistingAttendance(params: {\n    date: string;\n    studentIds: string[];\n  }): Promise<Map<string, { status: string; id: string }>> {\n    const results = await db.select({\n      studentId: schema.attendance.studentId,\n      status: schema.attendance.status,\n      id: schema.attendance.id\n    })\n    .from(schema.attendance)\n    .where(\n      and(\n        eq(schema.attendance.date, params.date),\n        inArray(schema.attendance.studentId, params.studentIds)\n      )\n    );\n\n    const attendanceMap = new Map();\n    results.forEach(record => {\n      attendanceMap.set(record.studentId, {\n        status: record.status,\n        id: record.id\n      });\n    });\n\n    return attendanceMap;\n  }\n\n  async getAttendanceStats(params: {\n    soCenterId: string;\n    month: string;\n    classId?: string;\n  }): Promise<{\n    totalPresent: number;\n    totalAbsent: number;\n    totalHolidays: number;\n    classWiseStats: Array<{\n      className: string;\n      present: number;\n      absent: number;\n      total: number;\n      percentage: number;\n    }>;\n  }> {\n    const startDate = `${params.month}-01`;\n    // Calculate the last day of the month to avoid invalid dates like 2025-09-31\n    const year = parseInt(params.month.split('-')[0]);\n    const month = parseInt(params.month.split('-')[1]);\n    const lastDay = new Date(year, month, 0).getDate(); // month is 1-indexed, so this gets last day of the month\n    const endDate = `${params.month}-${lastDay.toString().padStart(2, '0')}`;\n\n    // Base query conditions\n    let whereConditions = [\n      eq(schema.attendance.soCenterId, params.soCenterId),\n      gte(schema.attendance.date, startDate),\n      lte(schema.attendance.date, endDate)\n    ];\n\n    if (params.classId) {\n      whereConditions.push(eq(schema.attendance.classId, params.classId));\n    }\n\n    // Get overall stats\n    const stats = await db.select({\n      status: schema.attendance.status,\n      count: sqlQuery<number>`count(*)`.as('count')\n    })\n    .from(schema.attendance)\n    .where(and(...whereConditions))\n    .groupBy(schema.attendance.status);\n\n    let totalPresent = 0;\n    let totalAbsent = 0;\n    let totalHolidays = 0;\n\n    stats.forEach(stat => {\n      const count = Number(stat.count);\n      switch (stat.status) {\n        case 'present':\n          totalPresent = count;\n          break;\n        case 'absent':\n          totalAbsent = count;\n          break;\n        case 'holiday':\n          totalHolidays = count;\n          break;\n      }\n    });\n\n    // Get class-wise stats\n    const classStats = await db.select({\n      className: schema.classes.name,\n      status: schema.attendance.status,\n      count: sqlQuery<number>`count(*)`.as('count')\n    })\n    .from(schema.attendance)\n    .innerJoin(schema.classes, eq(schema.attendance.classId, schema.classes.id))\n    .where(and(...whereConditions))\n    .groupBy(schema.classes.name, schema.attendance.status);\n\n    // Process class-wise data\n    const classWiseMap: Record<string, { present: number; absent: number; holiday: number }> = {};\n\n    classStats.forEach(stat => {\n      if (!classWiseMap[stat.className]) {\n        classWiseMap[stat.className] = { present: 0, absent: 0, holiday: 0 };\n      }\n      const count = Number(stat.count);\n      switch (stat.status) {\n        case 'present':\n          classWiseMap[stat.className].present = count;\n          break;\n        case 'absent':\n          classWiseMap[stat.className].absent = count;\n          break;\n        case 'holiday':\n          classWiseMap[stat.className].holiday = count;\n          break;\n      }\n    });\n\n    const classWiseStats = Object.entries(classWiseMap).map(([className, data]) => {\n      const total = data.present + data.absent; // Exclude holidays from percentage calculation\n      const percentage = total > 0 ? (data.present / total) * 100 : 0;\n\n      return {\n        className,\n        present: data.present,\n        absent: data.absent,\n        total,\n        percentage\n      };\n    });\n\n    return {\n      totalPresent,\n      totalAbsent,\n      totalHolidays,\n      classWiseStats\n    };\n  }\n\n  async getStudentAttendanceReport(studentId: string, month: string): Promise<{\n    studentId: string;\n    studentName: string;\n    attendanceRecords: Array<{\n      date: string;\n      status: 'present' | 'absent' | 'holiday';\n    }>;\n    attendancePercentage: number;\n    totalPresent: number;\n    totalAbsent: number;\n    totalDays: number;\n  }> {\n    const startDate = `${month}-01`;\n    // Calculate the last day of the month to avoid invalid dates like 2025-09-31\n    const year = parseInt(month.split('-')[0]);\n    const monthNum = parseInt(month.split('-')[1]);\n    const lastDay = new Date(year, monthNum, 0).getDate(); // monthNum is 1-indexed, so this gets last day of the month\n    const endDate = `${month}-${lastDay.toString().padStart(2, '0')}`;\n\n    // Get student details\n    const student = await db.select()\n      .from(schema.students)\n      .where(eq(schema.students.id, studentId))\n      .limit(1);\n\n    if (!student[0]) {\n      throw new Error('Student not found');\n    }\n\n    // Get attendance records\n    const attendanceRecords = await db.select({\n      date: schema.attendance.date,\n      status: schema.attendance.status\n    })\n    .from(schema.attendance)\n    .where(\n      and(\n        eq(schema.attendance.studentId, studentId),\n        gte(schema.attendance.date, startDate),\n        lte(schema.attendance.date, endDate)\n      )\n    )\n    .orderBy(asc(schema.attendance.date));\n\n    // Calculate statistics\n    let totalPresent = 0;\n    let totalAbsent = 0;\n    let totalHolidays = 0;\n\n    attendanceRecords.forEach(record => {\n      switch (record.status) {\n        case 'present':\n          totalPresent++;\n          break;\n        case 'absent':\n          totalAbsent++;\n          break;\n        case 'holiday':\n          totalHolidays++;\n          break;\n      }\n    });\n\n    const totalDays = totalPresent + totalAbsent; // Exclude holidays from calculation\n    const attendancePercentage = totalDays > 0 ? (totalPresent / totalDays) * 100 : 0;\n\n    return {\n      studentId: student[0].id,\n      studentName: student[0].name,\n      attendanceRecords: attendanceRecords.map(record => ({\n        date: record.date,\n        status: record.status as 'present' | 'absent' | 'holiday'\n      })),\n      attendancePercentage,\n      totalPresent,\n      totalAbsent,\n      totalDays\n    };\n  }\n\n  async getMonthlyAttendanceReport(params: {\n    soCenterId: string;\n    month: string;\n    classId: string;\n  }): Promise<{\n    students: Array<{\n      id: string;\n      name: string;\n      studentId: string;\n      attendanceRecords: Array<{\n        date: string;\n        status: 'present' | 'absent' | 'holiday';\n      }>;\n    }>;\n  }> {\n    console.log('📊 Monthly Report Request:', params);\n\n    const startDate = `${params.month}-01`;\n    // Calculate the last day of the month to avoid invalid dates like 2025-09-31\n    const year = parseInt(params.month.split('-')[0]);\n    const month = parseInt(params.month.split('-')[1]);\n    const lastDay = new Date(year, month, 0).getDate();\n    const endDate = `${params.month}-${lastDay.toString().padStart(2, '0')}`;\n\n    console.log('📅 Date Range:', { startDate, endDate });\n\n    // Get all students in the class\n    const students = await db.select({\n      id: schema.students.id,\n      name: schema.students.name,\n      studentId: schema.students.studentId\n    })\n    .from(schema.students)\n    .where(\n      and(\n        eq(schema.students.soCenterId, params.soCenterId),\n        eq(schema.students.classId, params.classId)\n      )\n    );\n\n    console.log('👨‍🎓 Found Students:', students.length, students.map(s => ({ name: s.name, id: s.id })));\n\n    // Get all attendance records for the month and class\n    const attendanceRecords = await db.select({\n      studentId: schema.attendance.studentId,\n      date: schema.attendance.date,\n      status: schema.attendance.status\n    })\n    .from(schema.attendance)\n    .where(\n      and(\n        eq(schema.attendance.soCenterId, params.soCenterId),\n        eq(schema.attendance.classId, params.classId),\n        gte(schema.attendance.date, startDate),\n        lte(schema.attendance.date, endDate)\n      )\n    )\n    .orderBy(asc(schema.attendance.date));\n\n    console.log('📋 Found Attendance Records:', attendanceRecords.length);\n\n    // Organize attendance records by student\n    const studentsWithAttendance = students.map(student => {\n      const studentAttendanceRecords = attendanceRecords\n        .filter(record => record.studentId === student.id)\n        .map(record => ({\n          date: record.date,\n          status: record.status as 'present' | 'absent' | 'holiday'\n        }));\n\n      return {\n        id: student.id,\n        name: student.name,\n        studentId: student.studentId,\n        attendanceRecords: studentAttendanceRecords\n      };\n    });\n\n    console.log('✅ Returning Monthly Report:', { studentCount: studentsWithAttendance.length });\n\n    return {\n      students: studentsWithAttendance\n    };\n  }\n\n  // Homework Activity methods\n  async createHomeworkActivity(activities: InsertHomeworkActivity[]): Promise<HomeworkActivity[]> {\n    const results = [];\n    for (const activity of activities) {\n      const [result] = await db.insert(schema.homeworkActivities)\n        .values(activity)\n        .onConflictDoUpdate({\n          target: [schema.homeworkActivities.studentId, schema.homeworkActivities.homeworkDate],\n          set: {\n            status: activity.status,\n            completionType: activity.completionType,\n            reason: activity.reason,\n            updatedAt: new Date(),\n          },\n        })\n        .returning();\n      results.push(result);\n    }\n    return results;\n  }\n\n  async getHomeworkActivities(params: {\n    classId?: string;\n    date?: string;\n    soCenterId?: string;\n  }): Promise<HomeworkActivity[]> {\n    let query = db.select().from(schema.homeworkActivities);\n\n    const conditions = [];\n    if (params.classId) {\n      conditions.push(eq(schema.homeworkActivities.classId, params.classId));\n    }\n    if (params.date) {\n      conditions.push(eq(schema.homeworkActivities.homeworkDate, params.date));\n    }\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n\n    return await query;\n  }\n\n  // Tuition Progress methods\n  async createTuitionProgress(progress: InsertTuitionProgress): Promise<TuitionProgress> {\n    // Use proper UPSERT with onConflictDoUpdate for atomic operation\n    const [result] = await db.insert(schema.tuitionProgress)\n      .values(progress)\n      .onConflictDoUpdate({\n        target: [schema.tuitionProgress.studentId, schema.tuitionProgress.topicId],\n        set: {\n          status: progress.status,\n          updatedBy: progress.updatedBy,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return result;\n  }\n\n  async getTuitionProgress(params: {\n    classId?: string;\n    topicId?: string;\n    studentId?: string;\n    soCenterId?: string;\n  }): Promise<TuitionProgress[]> {\n    let query = db.select().from(schema.tuitionProgress);\n\n    const conditions = [];\n    if (params.topicId) {\n      conditions.push(eq(schema.tuitionProgress.topicId, params.topicId));\n    }\n    if (params.studentId) {\n      conditions.push(eq(schema.tuitionProgress.studentId, params.studentId));\n    }\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n\n    const result = await query;\n    console.log('getTuitionProgress query params:', params);\n    console.log('getTuitionProgress result:', result);\n    return result;\n  }\n\n  async updateTuitionProgress(id: string, updates: Partial<InsertTuitionProgress>): Promise<TuitionProgress> {\n    const [result] = await db.update(schema.tuitionProgress)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(schema.tuitionProgress.id, id))\n      .returning();\n    return result;\n  }\n\n  // Advanced Fee Management System\n  async calculateMonthlyFee(studentId: string, enrollmentDate: Date, classId: string): Promise<{ amount: number; reason: string }> {\n    console.log('🧮 Calculating monthly fee for student:', studentId, 'enrollment:', enrollmentDate);\n\n    // Get the class fee structure\n    const classFee = await db.select()\n      .from(schema.classFees)\n      .where(eq(schema.classFees.classId, classId))\n      .limit(1);\n\n    if (!classFee[0]) {\n      throw new Error('Class fee structure not found');\n    }\n\n    const monthlyFee = parseFloat(classFee[0].monthlyFee || '0');\n    const enrollmentDay = enrollmentDate.getDate();\n\n    let feeAmount = 0;\n    let reason = '';\n\n    if (enrollmentDay >= 1 && enrollmentDay <= 10) {\n      feeAmount = monthlyFee;\n      reason = `Full monthly fee - enrolled on ${enrollmentDay}th (1st-10th: full fee)`;\n    } else if (enrollmentDay >= 11 && enrollmentDay <= 20) {\n      feeAmount = monthlyFee / 2;\n      reason = `Half monthly fee - enrolled on ${enrollmentDay}th (11th-20th: half fee)`;\n    } else {\n      feeAmount = 0;\n      reason = `No fee for first month - enrolled on ${enrollmentDay}th (21st+: no first month fee)`;\n    }\n\n    console.log('💰 Calculated fee:', feeAmount, 'Reason:', reason);\n    return { amount: feeAmount, reason };\n  }\n\n  async createFeeCalculationHistory(studentId: string, calculationData: any): Promise<any> {\n    console.log('📊 Creating fee calculation history for student:', studentId);\n\n    const historyRecord = {\n      studentId,\n      calculationDate: new Date(),\n      monthYear: calculationData.monthYear,\n      calculationType: calculationData.calculationType,\n      feeAmount: calculationData.feeAmount,\n      enrollmentDay: calculationData.enrollmentDay,\n      reason: calculationData.reason,\n    };\n\n    const result = await db.insert(schema.feeCalculationHistory).values(historyRecord).returning();\n    console.log('✅ Fee calculation history created');\n    return result[0];\n  }\n\n  async scheduleMonthlyFees(studentId: string, enrollmentDate: Date, classId: string): Promise<void> {\n    console.log('📅 Scheduling monthly fees for student:', studentId);\n\n    const currentDate = new Date();\n    const currentYear = currentDate.getFullYear();\n    const currentMonth = currentDate.getMonth();\n\n    // Schedule fees for the next 12 months starting from enrollment month\n    for (let i = 0; i < 12; i++) {\n      const scheduleDate = new Date(currentYear, currentMonth + i, 1);\n      const monthYear = `${scheduleDate.getFullYear()}-${String(scheduleDate.getMonth() + 1).padStart(2, '0')}`;\n\n      // Calculate fee for this month\n      const isFirstMonth = i === 0;\n      let feeCalculation;\n\n      if (isFirstMonth) {\n        // Use enrollment-based calculation for first month\n        feeCalculation = await this.calculateMonthlyFee(studentId, enrollmentDate, classId);\n      } else {\n        // Full fee for subsequent months\n        const classFee = await db.select()\n          .from(schema.classFees)\n          .where(eq(schema.classFees.classId, classId))\n          .limit(1);\n\n        feeCalculation = {\n          amount: parseFloat(classFee[0]?.monthlyFee || '0'),\n          reason: 'Regular monthly fee'\n        };\n      }\n\n      // Check if schedule already exists\n      const existingSchedule = await db.select()\n        .from(schema.monthlyFeeSchedule)\n        .where(and(\n          eq(schema.monthlyFeeSchedule.studentId, studentId),\n          eq(schema.monthlyFeeSchedule.monthYear, monthYear)\n        ))\n        .limit(1);\n\n      if (!existingSchedule[0]) {\n        await db.insert(schema.monthlyFeeSchedule).values({\n          studentId,\n          monthYear,\n          scheduledDate: scheduleDate,\n          feeAmount: feeCalculation.amount,\n          isProcessed: false,\n        });\n\n        // Create fee calculation history\n        await this.createFeeCalculationHistory(studentId, {\n          monthYear,\n          calculationType: isFirstMonth ? 'enrollment_based' : 'regular_monthly',\n          feeAmount: feeCalculation.amount,\n          enrollmentDay: isFirstMonth ? enrollmentDate.getDate() : null,\n          reason: feeCalculation.reason,\n        });\n      }\n    }\n\n    console.log('✅ Monthly fees scheduled for next 12 months');\n  }\n\n  async updateStudentBalances(studentId: string): Promise<void> {\n    console.log('🔄 Updating student balances for:', studentId);\n\n    // Get all scheduled fees for this student\n    const scheduledFees = await db.select()\n      .from(schema.monthlyFeeSchedule)\n      .where(eq(schema.monthlyFeeSchedule.studentId, studentId));\n\n    // Get all payments for this student\n    const payments = await db.select()\n      .from(schema.payments)\n      .where(eq(schema.payments.studentId, studentId));\n\n    // Calculate total fees due\n    const totalScheduledAmount = scheduledFees.reduce((sum, fee) => sum + parseFloat(String(fee.feeAmount)), 0);\n\n    // Calculate total paid\n    const totalPaidAmount = payments.reduce((sum, payment) => sum + parseFloat(String(payment.amount)), 0);\n\n    // Calculate pending amount\n    const pendingAmount = Math.max(0, totalScheduledAmount - totalPaidAmount);\n\n    // Update student record\n    await db.update(schema.students)\n      .set({\n        totalFeeAmount: String(totalScheduledAmount),\n        paidAmount: String(totalPaidAmount),\n        pendingAmount: String(pendingAmount),\n        paymentStatus: pendingAmount > 0 ? 'pending' : 'paid'\n      })\n      .where(eq(schema.students.id, studentId));\n\n    console.log('✅ Student balances updated - Total:', totalScheduledAmount, 'Paid:', totalPaidAmount, 'Pending:', pendingAmount);\n  }\n\n  async getStudentFeeSchedule(studentId: string): Promise<any[]> {\n    return await db.select()\n      .from(schema.monthlyFeeSchedule)\n      .where(eq(schema.monthlyFeeSchedule.studentId, studentId))\n      .orderBy(asc(schema.monthlyFeeSchedule.scheduledDate));\n  }\n\n  async getStudentFeeHistory(studentId: string): Promise<any[]> {\n    return await db.select()\n      .from(schema.feeCalculationHistory)\n      .where(eq(schema.feeCalculationHistory.studentId, studentId))\n      .orderBy(desc(schema.feeCalculationHistory.createdAt));\n  }\n\n  async processMonthlyFeeAutomation(): Promise<void> {\n    console.log('🤖 Running monthly fee automation...');\n\n    const currentDate = new Date();\n    const isLastDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate() === currentDate.getDate();\n\n    if (!isLastDayOfMonth) {\n      console.log('⏭️ Not the last day of month, skipping automation');\n      return;\n    }\n\n    // Get all active students\n    const activeStudents = await db.select()\n      .from(schema.students)\n      .where(eq(schema.students.isActive, true));\n\n    for (const student of activeStudents) {\n      try {\n        // Update balances and schedule next month's fees if needed\n        await this.updateStudentBalances(student.id);\n\n        // Schedule next month's fee if not already scheduled\n        const nextMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1);\n        const nextMonthYear = `${nextMonth.getFullYear()}-${String(nextMonth.getMonth() + 1).padStart(2, '0')}`;\n\n        const existingSchedule = await db.select()\n          .from(schema.monthlyFeeSchedule)\n          .where(and(\n            eq(schema.monthlyFeeSchedule.studentId, student.id),\n            eq(schema.monthlyFeeSchedule.monthYear, nextMonthYear)\n          ))\n          .limit(1);\n\n        if (!existingSchedule[0]) {\n          // Get student class fee\n          const classFee = await db.select()\n            .from(schema.classFees)\n            .where(eq(schema.classFees.classId, student.classId))\n            .limit(1);\n\n          if (classFee[0]) {\n            await db.insert(schema.monthlyFeeSchedule).values({\n              studentId: student.id,\n              monthYear: nextMonthYear,\n              scheduledDate: nextMonth,\n              feeAmount: parseFloat(classFee[0].monthlyFee || '0'),\n              isProcessed: false,\n            });\n\n            await this.createFeeCalculationHistory(student.id, {\n              monthYear: nextMonthYear,\n              calculationType: 'automated_monthly',\n              feeAmount: parseFloat(classFee[0].monthlyFee || '0'),\n              enrollmentDay: null,\n              reason: 'Automated monthly fee calculation',\n            });\n          }\n        }\n      } catch (error) {\n        console.error('❌ Error processing student fees:', student.id, error);\n      }\n    }\n\n    console.log('✅ Monthly fee automation completed');\n  }\n\n  async updateStudentFeesWithTotalDue(studentId: string, updates: {\n    totalFeeAmount?: string;\n    pendingAmount?: string;\n    paymentStatus?: 'paid' | 'pending' | 'overdue';\n  }): Promise<void> {\n    console.log('💰 Updating student fees with total due:', studentId, updates);\n\n    await db.update(schema.students)\n      .set({\n        ...updates,\n      })\n      .where(eq(schema.students.id, studentId));\n\n    console.log('✅ Student fees updated successfully');\n  }\n\n  // Product Management Methods\n  async getAllProducts(): Promise<Product[]> {\n    return await db.select().from(schema.products).orderBy(desc(schema.products.createdAt));\n  }\n\n  async createProduct(productData: InsertProduct): Promise<Product> {\n    const [product] = await db.insert(schema.products).values(productData).returning();\n    return product;\n  }\n\n  async updateProduct(id: string, productData: Partial<InsertProduct>): Promise<Product> {\n    const [product] = await db.update(schema.products)\n      .set(productData)\n      .where(eq(schema.products.id, id))\n      .returning();\n    return product;\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    await db.delete(schema.products).where(eq(schema.products.id, id));\n  }\n\n  async getProductById(id: string): Promise<Product | null> {\n    const [product] = await db.select().from(schema.products).where(eq(schema.products.id, id));\n    return product || null;\n  }\n\n  // Commission Wallet Management\n  async getOrCreateCommissionWallet(soCenterId: string): Promise<CommissionWallet> {\n    // Check if wallet exists\n    const [existingWallet] = await db.select()\n      .from(schema.commissionWallets)\n      .where(eq(schema.commissionWallets.soCenterId, soCenterId));\n\n    if (existingWallet) {\n      return existingWallet;\n    }\n\n    // Create new wallet\n    const [newWallet] = await db.insert(schema.commissionWallets)\n      .values({\n        soCenterId,\n        totalEarned: \"0\",\n        availableBalance: \"0\",\n        totalWithdrawn: \"0\"\n      })\n      .returning();\n\n    return newWallet;\n  }\n\n  async getCommissionWalletBySoCenter(soCenterId: string): Promise<CommissionWallet | null> {\n    const [wallet] = await db.select()\n      .from(schema.commissionWallets)\n      .where(eq(schema.commissionWallets.soCenterId, soCenterId));\n    return wallet || null;\n  }\n\n  // Product Orders Management\n  async createProductOrder(orderData: InsertProductOrder): Promise<ProductOrder> {\n    return await db.transaction(async (tx) => {\n      // Create the product order\n      const [order] = await tx.insert(schema.productOrders).values(orderData).returning();\n\n      // Update commission wallet\n      const wallet = await this.getOrCreateCommissionWallet(orderData.soCenterId);\n      const newEarned = Number(wallet.totalEarned) + Number(orderData.commissionAmount);\n      const newAvailable = Number(wallet.availableBalance) + Number(orderData.commissionAmount);\n\n      await tx.update(schema.commissionWallets)\n        .set({\n          totalEarned: newEarned.toString(),\n          availableBalance: newAvailable.toString(),\n          updatedAt: new Date()\n        })\n        .where(eq(schema.commissionWallets.id, wallet.id));\n\n      // Create commission transaction\n      await tx.insert(schema.commissionTransactions).values({\n        commissionWalletId: wallet.id,\n        productOrderId: order.id,\n        amount: orderData.commissionAmount,\n        type: \"earned\",\n        description: `Commission earned from product order: ${orderData.receiptNumber}`\n      });\n\n      return order;\n    });\n  }\n\n  async getProductOrdersBySoCenter(soCenterId: string): Promise<any[]> {\n    return await db.select({\n      id: schema.productOrders.id,\n      productName: schema.products.name,\n      amount: schema.productOrders.amount,\n      receiptNumber: schema.productOrders.receiptNumber,\n      commissionAmount: schema.productOrders.commissionAmount,\n      orderStatus: schema.productOrders.orderStatus,\n      createdAt: schema.productOrders.createdAt\n    })\n    .from(schema.productOrders)\n    .leftJoin(schema.products, eq(schema.productOrders.productId, schema.products.id))\n    .where(eq(schema.productOrders.soCenterId, soCenterId))\n    .orderBy(desc(schema.productOrders.createdAt));\n  }\n\n  // Withdrawal Requests Management\n  async createWithdrawalRequest(requestData: InsertWithdrawalRequest): Promise<WithdrawalRequest> {\n    return await db.transaction(async (tx) => {\n      // Check if wallet has sufficient balance\n      const [wallet] = await tx.select()\n        .from(schema.commissionWallets)\n        .where(eq(schema.commissionWallets.id, requestData.commissionWalletId));\n\n      if (!wallet) {\n        throw new Error('Commission wallet not found');\n      }\n\n      const availableBalance = Number(wallet.availableBalance);\n      const requestAmount = Number(requestData.amount);\n\n      if (requestAmount > availableBalance) {\n        throw new Error('Insufficient balance for withdrawal');\n      }\n\n      // Create withdrawal request\n      const [request] = await tx.insert(schema.withdrawalRequests)\n        .values(requestData)\n        .returning();\n\n      // Update wallet available balance (reserve the amount)\n      await tx.update(schema.commissionWallets)\n        .set({\n          availableBalance: (availableBalance - requestAmount).toString(),\n          updatedAt: new Date()\n        })\n        .where(eq(schema.commissionWallets.id, wallet.id));\n\n      return request;\n    });\n  }\n\n  async getWithdrawalRequestsBySoCenter(soCenterId: string): Promise<WithdrawalRequest[]> {\n    return await db.select()\n      .from(schema.withdrawalRequests)\n      .where(eq(schema.withdrawalRequests.soCenterId, soCenterId))\n      .orderBy(desc(schema.withdrawalRequests.requestedAt));\n  }\n\n  async getAllWithdrawalRequests(): Promise<any[]> {\n    return await db.select({\n      id: schema.withdrawalRequests.id,\n      soCenterName: schema.soCenters.name,\n      amount: schema.withdrawalRequests.amount,\n      status: schema.withdrawalRequests.status,\n      requestedAt: schema.withdrawalRequests.requestedAt,\n      processedAt: schema.withdrawalRequests.processedAt,\n      notes: schema.withdrawalRequests.notes\n    })\n    .from(schema.withdrawalRequests)\n    .leftJoin(schema.soCenters, eq(schema.withdrawalRequests.soCenterId, schema.soCenters.id))\n    .orderBy(desc(schema.withdrawalRequests.requestedAt));\n  }\n\n  async processWithdrawalRequest(id: string, status: 'approved' | 'rejected', processedBy: string, notes?: string): Promise<WithdrawalRequest> {\n    return await db.transaction(async (tx) => {\n      const [request] = await tx.select()\n        .from(schema.withdrawalRequests)\n        .where(eq(schema.withdrawalRequests.id, id));\n\n      if (!request) {\n        throw new Error('Withdrawal request not found');\n      }\n\n      if (request.status !== 'pending') {\n        throw new Error('Request has already been processed');\n      }\n\n      // Update request status\n      const [updatedRequest] = await tx.update(schema.withdrawalRequests)\n        .set({\n          status,\n          processedAt: new Date(),\n          processedBy,\n          notes\n        })\n        .where(eq(schema.withdrawalRequests.id, id))\n        .returning();\n\n      const [wallet] = await tx.select()\n        .from(schema.commissionWallets)\n        .where(eq(schema.commissionWallets.id, request.commissionWalletId));\n\n      if (status === 'approved') {\n        // Update wallet totals for approved withdrawal\n        const newTotalWithdrawn = Number(wallet.totalWithdrawn) + Number(request.amount);\n\n        await tx.update(schema.commissionWallets)\n          .set({\n            totalWithdrawn: newTotalWithdrawn.toString(),\n            updatedAt: new Date()\n          })\n          .where(eq(schema.commissionWallets.id, wallet.id));\n\n        // Create withdrawal transaction\n        await tx.insert(schema.commissionTransactions).values({\n          commissionWalletId: wallet.id,\n          amount: request.amount,\n          type: \"withdrawn\",\n          description: `Withdrawal approved - Request ID: ${id}`\n        });\n      } else {\n        // For rejected requests, restore the available balance\n        const currentAvailable = Number(wallet.availableBalance);\n        const restoredBalance = currentAvailable + Number(request.amount);\n\n        await tx.update(schema.commissionWallets)\n          .set({\n            availableBalance: restoredBalance.toString(),\n            updatedAt: new Date()\n          })\n          .where(eq(schema.commissionWallets.id, wallet.id));\n      }\n\n      return updatedRequest;\n    });\n  }\n\n  // System Settings Management\n  async getSystemSetting(key: string): Promise<SystemSetting | null> {\n    const [setting] = await db.select()\n      .from(schema.systemSettings)\n      .where(eq(schema.systemSettings.key, key));\n    return setting || null;\n  }\n\n  async setSystemSetting(key: string, value: string, description?: string, updatedBy?: string): Promise<SystemSetting> {\n    const existingSetting = await this.getSystemSetting(key);\n\n    if (existingSetting) {\n      const [updated] = await db.update(schema.systemSettings)\n        .set({\n          value,\n          description: description || existingSetting.description,\n          updatedAt: new Date(),\n          updatedBy\n        })\n        .where(eq(schema.systemSettings.key, key))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db.insert(schema.systemSettings)\n        .values({\n          key,\n          value,\n          description,\n          updatedBy\n        })\n        .returning();\n      return created;\n    }\n  }\n\n  async deleteExam(examId: string): Promise<void> {\n    console.log('🗑️ Deleting exam with ID:', examId);\n    try {\n      await db\n        .delete(schema.exams)\n        .where(eq(schema.exams.id, examId));\n      console.log('✅ Deleted exam successfully');\n    } catch (error) {\n      console.error('❌ Error deleting exam:', error);\n      throw error;\n    }\n  }\n\n  // Feature 1: Topics Management with Moderate/Important flags\n  async getAllTopicsWithChapters(): Promise<any[]> {\n    const result = await db.select({\n      topicId: schema.topics.id,\n      topicName: schema.topics.name,\n      description: schema.topics.description,\n      orderIndex: schema.topics.orderIndex,\n      isModerate: schema.topics.isModerate,\n      isImportant: schema.topics.isImportant,\n      isActive: schema.topics.isActive,\n      chapterId: schema.chapters.id,\n      chapterName: schema.chapters.name,\n      subjectId: schema.subjects.id,\n      subjectName: schema.subjects.name,\n      classId: schema.classes.id,\n      className: schema.classes.name\n    })\n    .from(schema.topics)\n    .leftJoin(schema.chapters, eq(schema.topics.chapterId, schema.chapters.id))\n    .leftJoin(schema.subjects, eq(schema.chapters.subjectId, schema.subjects.id))\n    .leftJoin(schema.classes, eq(schema.subjects.classId, schema.classes.id))\n    .orderBy(asc(schema.classes.name), asc(schema.subjects.name), asc(schema.chapters.name), asc(schema.topics.orderIndex));\n\n    return result;\n  }\n\n  async updateTopicFlags(topicId: string, updates: { isModerate?: boolean; isImportant?: boolean }): Promise<Topic> {\n    const [updated] = await db.update(schema.topics)\n      .set({\n        ...updates,\n        updatedAt: new Date()\n      })\n      .where(eq(schema.topics.id, topicId))\n      .returning();\n    return updated;\n  }\n\n  // Feature 7: Student Dropout Requests Management\n  async createDropoutRequest(data: any): Promise<any> {\n    const [created] = await db.insert(schema.studentDropoutRequests)\n      .values({\n        ...data,\n        requestDate: new Date().toISOString().split('T')[0]\n      })\n      .returning();\n    return created;\n  }\n\n  async getDropoutRequests(soCenterId?: string): Promise<any[]> {\n    let query = db.select({\n      id: schema.studentDropoutRequests.id,\n      studentId: schema.studentDropoutRequests.studentId,\n      studentName: schema.students.name,\n      studentStudentId: schema.students.studentId,\n      reason: schema.studentDropoutRequests.reason,\n      status: schema.studentDropoutRequests.status,\n      requestDate: schema.studentDropoutRequests.requestDate,\n      processedDate: schema.studentDropoutRequests.processedDate,\n      adminNotes: schema.studentDropoutRequests.adminNotes,\n      soCenterName: schema.soCenters.name\n    })\n    .from(schema.studentDropoutRequests)\n    .leftJoin(schema.students, eq(schema.studentDropoutRequests.studentId, schema.students.id))\n    .leftJoin(schema.soCenters, eq(schema.studentDropoutRequests.soCenterId, schema.soCenters.id));\n\n    if (soCenterId) {\n      query = query.where(eq(schema.studentDropoutRequests.soCenterId, soCenterId));\n    }\n\n    return await query.orderBy(desc(schema.studentDropoutRequests.createdAt));\n  }\n\n  async processDropoutRequest(requestId: string, status: 'approved' | 'rejected', approvedBy: string, adminNotes?: string): Promise<any> {\n    return await db.transaction(async (tx) => {\n      const [request] = await tx.select()\n        .from(schema.studentDropoutRequests)\n        .where(eq(schema.studentDropoutRequests.id, requestId));\n\n      if (!request) {\n        throw new Error('Dropout request not found');\n      }\n\n      if (request.status !== 'pending') {\n        throw new Error('Request has already been processed');\n      }\n\n      const [updatedRequest] = await tx.update(schema.studentDropoutRequests)\n        .set({\n          status,\n          approvedBy,\n          adminNotes,\n          processedDate: new Date().toISOString().split('T')[0]\n        })\n        .where(eq(schema.studentDropoutRequests.id, requestId))\n        .returning();\n\n      if (status === 'approved') {\n        // Deactivate the student\n        await tx.update(schema.students)\n          .set({ isActive: false })\n          .where(eq(schema.students.id, request.studentId));\n      }\n\n      return updatedRequest;\n    });\n  }\n\n  // Feature 2, 3, 4, 5: Enhanced Dashboard and Academic Features\n  async getStudentsBySOCenterDetailed(soCenterId: string): Promise<any[]> {\n    return await db.select({\n      id: schema.students.id,\n      name: schema.students.name,\n      studentId: schema.students.studentId,\n      className: schema.classes.name,\n      totalFeeAmount: schema.students.totalFeeAmount,\n      paidAmount: schema.students.paidAmount,\n      pendingAmount: schema.students.pendingAmount,\n      paymentStatus: schema.students.paymentStatus,\n      enrollmentDate: schema.students.enrollmentDate,\n      isActive: schema.students.isActive\n    })\n    .from(schema.students)\n    .leftJoin(schema.classes, eq(schema.students.classId, schema.classes.id))\n    .where(and(\n      eq(schema.students.soCenterId, soCenterId),\n      eq(schema.students.isActive, true)\n    ))\n    .orderBy(desc(schema.students.createdAt));\n  }\n\n  // Feature 6: Exam Time Restrictions\n  async updateExamTimeSettings(examId: string, startTime: string, endTime: string): Promise<any> {\n    const [updated] = await db.update(schema.exams)\n      .set({\n        startTime,\n        endTime,\n        updatedAt: new Date()\n      })\n      .where(eq(schema.exams.id, examId))\n      .returning();\n    return updated;\n  }\n\n  async checkExamTimeAccess(examId: string): Promise<{ canAccess: boolean; message?: string }> {\n    const [exam] = await db.select()\n      .from(schema.exams)\n      .where(eq(schema.exams.id, examId));\n\n    if (!exam) {\n      return { canAccess: false, message: 'Exam not found' };\n    }\n\n    if (!exam.startTime || !exam.endTime) {\n      return { canAccess: true }; // No time restrictions\n    }\n\n    const now = new Date();\n    const currentTime = now.toTimeString().split(' ')[0];\n\n    if (currentTime < exam.startTime) {\n      return { canAccess: false, message: `Exam starts at ${exam.startTime}` };\n    }\n\n    if (currentTime > exam.endTime) {\n      return { canAccess: false, message: `Exam ended at ${exam.endTime}` };\n    }\n\n    return { canAccess: true };\n  }\n}\n\nexport const storage = new DrizzleStorage();\n\n// Initialize the database - DISABLED temporarily to fix login timeout\n// initializeDatabase();\n\nexport { getUsersByRole, executeRawQuery, sql };","size_bytes":110546},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, boolean, integer, timestamp, decimal, pgEnum, date, unique } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const userRoleEnum = pgEnum(\"user_role\", [\n  \"admin\",\n  \"so_center\",\n  \"teacher\", \n  \"academic_admin\",\n  \"agent\",\n  \"office_staff\",\n  \"collection_agent\",\n  \"marketing_staff\"\n]);\n\nexport const courseTypeEnum = pgEnum(\"course_type\", [\"monthly\", \"yearly\"]);\nexport const genderEnum = pgEnum(\"gender\", [\"male\", \"female\", \"other\"]);\nexport const schoolTypeEnum = pgEnum(\"school_type\", [\"government\", \"private\"]);\nexport const paymentStatusEnum = pgEnum(\"payment_status\", [\"paid\", \"pending\", \"overdue\"]);\nexport const topicStatusEnum = pgEnum(\"topic_status\", [\"pending\", \"learned\"]);\nexport const salaryTypeEnum = pgEnum(\"salary_type\", [\"fixed\", \"hourly\", \"commission\"]);\nexport const maritalStatusEnum = pgEnum(\"marital_status\", [\"single\", \"married\", \"divorced\", \"widowed\"]);\nexport const homeworkStatusEnum = pgEnum(\"homework_status\", [\"completed\", \"not_completed\", \"not_given\"]);\nexport const homeworkActivityStatusEnum = pgEnum(\"homework_activity_status\", [\"completed\", \"not_completed\", \"not_given\"]);\nexport const completionTypeEnum = pgEnum(\"completion_type\", [\"self\", \"helped_by_so\"]);\nexport const expenseTypeEnum = pgEnum(\"expense_type\", [\"rent\", \"electric_bill\", \"internet_bill\", \"so_salary\", \"others\"]);\nexport const expenseStatusEnum = pgEnum(\"expense_status\", [\"pending\", \"approved\", \"rejected\", \"paid\"]);\nexport const paymentMethodEnum = pgEnum(\"payment_method\", [\"bill\", \"voucher\", \"upi\", \"cash\", \"online\"]);\nexport const announcementTargetAudienceEnum = pgEnum(\"announcement_target_audience\", [\"students\", \"teachers\", \"so_centers\", \"admin\", \"all\"]);\nexport const announcementPriorityEnum = pgEnum(\"announcement_priority\", [\"low\", \"normal\", \"high\", \"urgent\"]);\n\n// Address hierarchy tables\nexport const states = pgTable(\"states\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  code: text(\"code\").notNull().unique(),\n  isActive: boolean(\"is_active\").default(true),\n});\n\nexport const districts = pgTable(\"districts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  code: text(\"code\").notNull(),\n  stateId: varchar(\"state_id\").references(() => states.id),\n  isActive: boolean(\"is_active\").default(true),\n});\n\nexport const mandals = pgTable(\"mandals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  code: text(\"code\").notNull(),\n  districtId: varchar(\"district_id\").references(() => districts.id),\n  isActive: boolean(\"is_active\").default(true),\n});\n\nexport const villages = pgTable(\"villages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  code: text(\"code\").notNull(),\n  mandalId: varchar(\"mandal_id\").references(() => mandals.id),\n  isActive: boolean(\"is_active\").default(true),\n});\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: userRoleEnum(\"role\").notNull(),\n  name: text(\"name\").notNull(),\n  fatherName: text(\"father_name\"),\n  phone: text(\"phone\"),\n  dateOfBirth: text(\"date_of_birth\"),\n  maritalStatus: maritalStatusEnum(\"marital_status\"),\n  salary: decimal(\"salary\", { precision: 10, scale: 2 }),\n  salaryType: salaryTypeEnum(\"salary_type\").default(\"fixed\"),\n  villageId: varchar(\"village_id\").references(() => villages.id),\n  address: text(\"address\"),\n  isActive: boolean(\"is_active\").default(true),\n  isPasswordChanged: boolean(\"is_password_changed\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// SO Centers - Cleaned up to match only form fields\nexport const soCenters = pgTable(\"so_centers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  centerId: text(\"center_id\").notNull().unique(), // NNASOC00001 format\n  name: text(\"name\").notNull(),\n  address: text(\"address\"),\n  villageId: varchar(\"village_id\").references(() => villages.id),\n  phone: text(\"phone\"),\n  password: text(\"password\").notNull().default(\"12345678\"),\n  managerId: varchar(\"manager_id\").references(() => users.id),\n  ownerName: text(\"owner_name\"),\n  ownerLastName: text(\"owner_last_name\"),\n  ownerFatherName: text(\"owner_father_name\"),\n  ownerMotherName: text(\"owner_mother_name\"),\n  ownerPhone: text(\"owner_phone\"),\n  landmarks: text(\"landmarks\"),\n  roomSize: text(\"room_size\"),\n  rentAmount: decimal(\"rent_amount\", { precision: 10, scale: 2 }),\n  rentalAdvance: decimal(\"rental_advance\", { precision: 10, scale: 2 }),\n  dateOfHouseTaken: text(\"date_of_house_taken\"),\n  monthlyRentDate: integer(\"monthly_rent_date\"), // Day of month (1-31)\n  electricBillAccountNumber: text(\"electric_bill_account_number\"),\n  internetBillAccountNumber: text(\"internet_bill_account_number\"),\n  email: text(\"email\"),\n  capacity: integer(\"capacity\"),\n  facilities: text(\"facilities\").array(),\n  walletBalance: decimal(\"wallet_balance\", { precision: 10, scale: 2 }).default(\"0\"),\n  admissionFeeApplicable: boolean(\"admission_fee_applicable\").notNull().default(true),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  isPasswordChanged: boolean(\"is_password_changed\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// SO Center Expenses\nexport const soCenterExpenses = pgTable(\"so_center_expenses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  soCenterId: varchar(\"so_center_id\").references(() => soCenters.id).notNull(),\n  expenseType: expenseTypeEnum(\"expense_type\").notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  description: text(\"description\"),\n  \n  // Electric Bill specific fields\n  electricBillNumber: text(\"electric_bill_number\"),\n  \n  // Internet Bill specific fields\n  internetBillNumber: text(\"internet_bill_number\"),\n  internetServiceProvider: text(\"internet_service_provider\"),\n  \n  // Others specific fields\n  serviceName: text(\"service_name\"),\n  serviceDescription: text(\"service_description\"),\n  servicePhone: text(\"service_phone\"),\n  \n  status: expenseStatusEnum(\"status\").default(\"pending\"),\n  adminNotes: text(\"admin_notes\"),\n  \n  // Payment details (when paid)\n  paymentMethod: paymentMethodEnum(\"payment_method\"),\n  paymentReference: text(\"payment_reference\"), // Bill number, UPI transaction ID, etc.\n  transactionId: varchar(\"transaction_id\"),\n  paidAt: timestamp(\"paid_at\"),\n  paidBy: varchar(\"paid_by\").references(() => users.id), // Admin who marked as paid\n  \n  requestedAt: timestamp(\"requested_at\").defaultNow(),\n  approvedAt: timestamp(\"approved_at\"),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n});\n\n// SO Center Expense Wallet - tracks all expense-related transactions\nexport const soCenterExpenseWallet = pgTable(\"so_center_expense_wallet\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  soCenterId: varchar(\"so_center_id\").references(() => soCenters.id).notNull(),\n  totalExpenses: decimal(\"total_expenses\", { precision: 10, scale: 2 }).default(\"0\"),\n  remainingBalance: decimal(\"remaining_balance\", { precision: 10, scale: 2 }).default(\"0\"), // totalCollections - totalExpenses\n  lastUpdated: timestamp(\"last_updated\").defaultNow(),\n});\n\n// Monthly Expense Summary for reporting\nexport const soCenterMonthlyExpenses = pgTable(\"so_center_monthly_expenses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  soCenterId: varchar(\"so_center_id\").references(() => soCenters.id).notNull(),\n  month: integer(\"month\").notNull(), // 1-12\n  year: integer(\"year\").notNull(),\n  totalExpenses: decimal(\"total_expenses\", { precision: 10, scale: 2 }).default(\"0\"),\n  totalCollections: decimal(\"total_collections\", { precision: 10, scale: 2 }).default(\"0\"),\n  remainingBalance: decimal(\"remaining_balance\", { precision: 10, scale: 2 }).default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  unique().on(table.soCenterId, table.month, table.year)\n]);\n\n// Classes\nexport const classes = pgTable(\"classes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n});\n\n// Subjects\nexport const subjects = pgTable(\"subjects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  classId: varchar(\"class_id\").references(() => classes.id),\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n});\n\n// Chapters\nexport const chapters = pgTable(\"chapters\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  subjectId: varchar(\"subject_id\").references(() => subjects.id),\n  description: text(\"description\"),\n  orderIndex: integer(\"order_index\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n});\n\n// Topics\nexport const topics = pgTable(\"topics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  chapterId: varchar(\"chapter_id\").references(() => chapters.id),\n  description: text(\"description\"),\n  orderIndex: integer(\"order_index\").default(0),\n  isModerate: boolean(\"is_moderate\").default(false),\n  isImportant: boolean(\"is_important\").default(false),\n  isActive: boolean(\"is_active\").default(true),\n});\n\n// Students\nexport const students = pgTable(\"students\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: text(\"student_id\").notNull().unique(), // NNAS25000001 format\n  name: text(\"name\").notNull(),\n  aadharNumber: text(\"aadhar_number\").notNull().unique(),\n  fatherName: text(\"father_name\").notNull(),\n  motherName: text(\"mother_name\").notNull(),\n  fatherMobile: text(\"father_mobile\").notNull(),\n  motherMobile: text(\"mother_mobile\"),\n  gender: genderEnum(\"gender\").notNull(),\n  dateOfBirth: text(\"date_of_birth\").notNull(),\n  presentSchoolName: text(\"present_school_name\").notNull(),\n  schoolType: schoolTypeEnum(\"school_type\").notNull(),\n  fatherQualification: text(\"father_qualification\"),\n  motherQualification: text(\"mother_qualification\"),\n  landmark: text(\"landmark\"),\n  villageId: varchar(\"village_id\").references(() => villages.id),\n  address: text(\"address\").notNull(),\n  classId: varchar(\"class_id\").references(() => classes.id),\n  parentPhone: text(\"parent_phone\").notNull(), // Keep for compatibility\n  parentName: text(\"parent_name\"), // Keep for compatibility\n  soCenterId: varchar(\"so_center_id\").references(() => soCenters.id),\n  courseType: courseTypeEnum(\"course_type\").notNull(),\n  qrCode: text(\"qr_code\").unique(),\n  totalFeeAmount: decimal(\"total_fee_amount\", { precision: 10, scale: 2 }).default(\"0\"),\n  paidAmount: decimal(\"paid_amount\", { precision: 10, scale: 2 }).default(\"0\"),\n  pendingAmount: decimal(\"pending_amount\", { precision: 10, scale: 2 }).default(\"0\"),\n  paymentStatus: paymentStatusEnum(\"payment_status\").default(\"pending\"),\n  isActive: boolean(\"is_active\").default(true),\n  // New fields for enrollment tracking and fee management\n  enrollmentDate: date(\"enrollment_date\").notNull(),\n  admissionFeePaid: boolean(\"admission_fee_paid\").default(false),\n  lastFeeCalculationDate: date(\"last_fee_calculation_date\"), // Track when monthly fee was last calculated\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Topic Progress\nexport const topicProgress = pgTable(\"topic_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => students.id),\n  topicId: varchar(\"topic_id\").references(() => topics.id),\n  status: topicStatusEnum(\"status\").default(\"pending\"),\n  updatedBy: varchar(\"updated_by\").references(() => users.id),\n  teacherFeedback: text(\"teacher_feedback\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Payments\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => students.id),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  paymentMethod: text(\"payment_method\").notNull(),\n  description: text(\"description\"),\n  month: text(\"month\"), // For monthly payments\n  year: integer(\"year\"), // For monthly payments\n  receiptNumber: text(\"receipt_number\"),\n  transactionId: text(\"transaction_id\"),\n  recordedBy: varchar(\"recorded_by\").references(() => users.id, { onDelete: \"set null\" }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Wallet Transactions\nexport const walletTransactions = pgTable(\"wallet_transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  soCenterId: varchar(\"so_center_id\").references(() => soCenters.id),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  type: text(\"type\").notNull(), // \"credit\" or \"debit\"\n  description: text(\"description\"),\n  collectionAgentId: varchar(\"collection_agent_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Products for commission calculation\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  requirements: text(\"requirements\"), // New requirements field\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  commissionPercentage: decimal(\"commission_percentage\", { precision: 5, scale: 2 }).default(\"0\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Product Orders (SO purchases)\nexport const productOrders = pgTable(\"product_orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  soCenterId: varchar(\"so_center_id\").references(() => soCenters.id).notNull(),\n  productId: varchar(\"product_id\").references(() => products.id).notNull(),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  receiptNumber: text(\"receipt_number\").notNull(),\n  commissionAmount: decimal(\"commission_amount\", { precision: 10, scale: 2 }).notNull(),\n  orderStatus: text(\"order_status\").default(\"completed\"), // completed, pending, cancelled\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// SO Commission Wallet\nexport const commissionWallets = pgTable(\"commission_wallets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  soCenterId: varchar(\"so_center_id\").references(() => soCenters.id).notNull().unique(),\n  totalEarned: decimal(\"total_earned\", { precision: 10, scale: 2 }).default(\"0\"),\n  availableBalance: decimal(\"available_balance\", { precision: 10, scale: 2 }).default(\"0\"),\n  totalWithdrawn: decimal(\"total_withdrawn\", { precision: 10, scale: 2 }).default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Commission Transactions\nexport const commissionTransactions = pgTable(\"commission_transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  commissionWalletId: varchar(\"commission_wallet_id\").references(() => commissionWallets.id).notNull(),\n  productOrderId: varchar(\"product_order_id\").references(() => productOrders.id),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  type: text(\"type\").notNull(), // \"earned\", \"withdrawn\"\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Withdrawal Requests - Updated for agent support\nexport const withdrawalRequests = pgTable(\"withdrawal_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(), // Support both agents and SO centers\n  soCenterId: varchar(\"so_center_id\").references(() => soCenters.id), // Optional for SO centers\n  commissionWalletId: varchar(\"commission_wallet_id\").references(() => commissionWallets.id), // Optional for legacy\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").default(\"pending\"), // pending, approved, rejected\n  withdrawalId: text(\"withdrawal_id\").unique(), // WDR123456 format\n  requestedAt: timestamp(\"requested_at\").defaultNow(),\n  processedAt: timestamp(\"processed_at\"),\n  processedBy: varchar(\"processed_by\").references(() => users.id),\n  paymentMode: text(\"payment_mode\"), // 'upi', 'voucher'\n  paymentDetails: text(\"payment_details\"), // UPI transaction ID or voucher details\n  transactionId: text(\"transaction_id\"), // Final payment transaction ID\n  notes: text(\"notes\"),\n});\n\n// System Settings for withdrawal minimums\nexport const systemSettings = pgTable(\"system_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  key: text(\"key\").notNull().unique(),\n  value: text(\"value\").notNull(),\n  description: text(\"description\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  updatedBy: varchar(\"updated_by\").references(() => users.id),\n});\n\n// Nearby Schools\nexport const nearbySchools = pgTable(\"nearby_schools\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  soCenterId: varchar(\"so_center_id\").references(() => soCenters.id),\n  schoolName: text(\"school_name\").notNull(),\n  studentStrength: integer(\"student_strength\"),\n  schoolType: text(\"school_type\"), // government, private, etc.\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Nearby Tuitions\nexport const nearbyTuitions = pgTable(\"nearby_tuitions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  soCenterId: varchar(\"so_center_id\").references(() => soCenters.id),\n  tuitionName: text(\"tuition_name\").notNull(),\n  studentStrength: integer(\"student_strength\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// SO Center Equipment\nexport const soCenterEquipment = pgTable(\"so_center_equipment\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  soCenterId: varchar(\"so_center_id\").references(() => soCenters.id).notNull(),\n  itemName: text(\"item_name\").notNull(),\n  serialNumber: text(\"serial_number\").notNull(),\n  warrantyYears: integer(\"warranty_years\").notNull(),\n  purchaseDate: date(\"purchase_date\").notNull(),\n  warrantyEndDate: date(\"warranty_end_date\").notNull(), // Auto-calculated\n  brandName: text(\"brand_name\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Student Siblings\nexport const studentSiblings = pgTable(\"student_siblings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => students.id),\n  name: text(\"name\").notNull(),\n  className: text(\"class_name\").notNull(),\n  schoolName: text(\"school_name\").notNull(),\n  schoolType: schoolTypeEnum(\"school_type\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Class Fees\nexport const classFees = pgTable(\"class_fees\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  classId: varchar(\"class_id\").references(() => classes.id),\n  courseType: courseTypeEnum(\"course_type\").notNull(),\n  admissionFee: decimal(\"admission_fee\", { precision: 10, scale: 2 }).notNull(),\n  monthlyFee: decimal(\"monthly_fee\", { precision: 10, scale: 2 }),\n  yearlyFee: decimal(\"yearly_fee\", { precision: 10, scale: 2 }),\n  description: text(\"description\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Student Counter for ID generation\nexport const studentCounter = pgTable(\"student_counter\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  year: integer(\"year\").notNull().unique(),\n  currentNumber: integer(\"current_number\").notNull().default(0),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Teachers - Extended teacher management\nexport const teachers = pgTable(\"teachers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  fatherName: text(\"father_name\").notNull(),\n  mobile: text(\"mobile\").notNull(),\n  address: text(\"address\").notNull(),\n  salary: decimal(\"salary\", { precision: 10, scale: 2 }).notNull(),\n  salaryType: salaryTypeEnum(\"salary_type\").notNull().default(\"fixed\"),\n  dateOfBirth: date(\"date_of_birth\").notNull(),\n  villageId: varchar(\"village_id\").references(() => villages.id),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Teacher Subject Assignments\nexport const teacherSubjects = pgTable(\"teacher_subjects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teacherId: varchar(\"teacher_id\").notNull().references(() => teachers.id, { onDelete: \"cascade\" }),\n  subjectId: varchar(\"subject_id\").notNull().references(() => subjects.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  uniqueTeacherSubject: unique().on(table.teacherId, table.subjectId),\n}));\n\n// Teacher Class Assignments\nexport const teacherClasses = pgTable(\"teacher_classes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teacherId: varchar(\"teacher_id\").notNull().references(() => teachers.id, { onDelete: \"cascade\" }),\n  classId: varchar(\"class_id\").notNull().references(() => classes.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  uniqueTeacherClass: unique().on(table.teacherId, table.classId),\n}));\n\n// Teacher Daily Records - Track daily teaching activities\nexport const teacherDailyRecords = pgTable(\"teacher_daily_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teacherId: varchar(\"teacher_id\").notNull().references(() => teachers.id, { onDelete: \"cascade\" }),\n  recordDate: date(\"record_date\").notNull(),\n  classId: varchar(\"class_id\").notNull().references(() => classes.id),\n  subjectId: varchar(\"subject_id\").notNull().references(() => subjects.id),\n  chapterId: varchar(\"chapter_id\").references(() => chapters.id),\n  topicId: varchar(\"topic_id\").references(() => topics.id),\n  teachingDuration: integer(\"teaching_duration\").notNull(), // in minutes\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Fee Calculation History - Track automated fee calculations\nexport const feeCalculationHistory = pgTable(\"fee_calculation_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => students.id),\n  calculationDate: date(\"calculation_date\").notNull(),\n  monthYear: text(\"month_year\").notNull(), // Format: \"2025-08\"\n  calculationType: text(\"calculation_type\").notNull(), // \"first_month\" or \"regular_month\"\n  feeAmount: decimal(\"fee_amount\", { precision: 10, scale: 2 }).notNull(),\n  enrollmentDay: integer(\"enrollment_day\"), // Day of month when student enrolled (for first month logic)\n  reason: text(\"reason\"), // Description of calculation logic applied\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Monthly Fee Schedule - Track when to calculate fees for each student\nexport const monthlyFeeSchedule = pgTable(\"monthly_fee_schedule\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => students.id),\n  monthYear: text(\"month_year\").notNull(), // Format: \"2025-08\"\n  scheduledDate: date(\"scheduled_date\").notNull(), // When fee should be calculated\n  feeAmount: decimal(\"fee_amount\", { precision: 10, scale: 2 }).notNull(),\n  isProcessed: boolean(\"is_processed\").default(false),\n  processedAt: timestamp(\"processed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  uniqueStudentMonth: unique().on(table.studentId, table.monthYear),\n}));\n\n// Homework Activity\nexport const homeworkActivities = pgTable(\"homework_activities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => students.id, { onDelete: \"cascade\" }),\n  classId: varchar(\"class_id\").notNull().references(() => classes.id, { onDelete: \"cascade\" }),\n  homeworkDate: date(\"homework_date\").notNull(),\n  status: homeworkActivityStatusEnum(\"status\").notNull(),\n  completionType: varchar(\"completion_type\", { length: 20 }), // 'self' or 'helped_by_so'\n  reason: text(\"reason\"), // reason when status is 'not_completed'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  uniqueStudentDate: unique().on(table.studentId, table.homeworkDate),\n}));\n\n// Tuition Activity Progress\nexport const tuitionProgress = pgTable(\"tuition_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => students.id),\n  topicId: varchar(\"topic_id\").references(() => topics.id),\n  status: topicStatusEnum(\"status\").default(\"pending\"),\n  completedDate: timestamp(\"completed_date\"),\n  updatedBy: varchar(\"updated_by\").references(() => users.id),\n  teacherFeedback: text(\"teacher_feedback\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  uniqueStudentTopic: unique().on(table.studentId, table.topicId),\n}));\n\n// Exams - New exam management system\nexport const exams = pgTable(\"exams\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  classId: varchar(\"class_id\").references(() => classes.id).notNull(),\n  subjectId: varchar(\"subject_id\").references(() => subjects.id).notNull(),\n  chapterIds: text(\"chapter_ids\").array().notNull(), // Array of chapter IDs\n  soCenterIds: text(\"so_center_ids\").array().notNull(), // Array of SO Center IDs for visibility\n  examDate: date(\"exam_date\").notNull(),\n  duration: integer(\"duration\").notNull(), // Duration in minutes\n  totalQuestions: integer(\"total_questions\").notNull(), // Total number of questions\n  totalMarks: integer(\"total_marks\").notNull(),\n  passingMarks: integer(\"passing_marks\").notNull(),\n  status: text(\"status\").default(\"scheduled\"), // scheduled, active, completed, cancelled\n  questions: text(\"questions\"), // JSON string containing exam questions\n  createdBy: varchar(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Exam Results - Minimal schema matching actual database structure\nexport const examResults = pgTable(\"exam_results\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  examId: varchar(\"exam_id\").references(() => exams.id).notNull(),\n  studentId: varchar(\"student_id\").references(() => students.id).notNull(),\n  marksObtained: integer(\"marks_obtained\").notNull().default(0),\n  answeredQuestions: varchar(\"answered_questions\", { \n    enum: [\"not_answered\", \"partially_answered\", \"fully_answered\"] \n  }).notNull().default(\"not_answered\"),\n  detailedResults: text(\"detailed_results\"), // JSON string for question-level results\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  uniqueExamStudent: unique().on(table.examId, table.studentId),\n}));\n\n// Feature 7: Student Dropout Requests\nexport const studentDropoutRequests = pgTable(\"student_dropout_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").references(() => students.id).notNull(),\n  soCenterId: varchar(\"so_center_id\").references(() => soCenters.id).notNull(),\n  reason: text(\"reason\").notNull(),\n  requestedBy: varchar(\"requested_by\").references(() => users.id).notNull(),\n  status: text(\"status\").default(\"pending\"), // pending, approved, rejected\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  adminNotes: text(\"admin_notes\"),\n  requestDate: date(\"request_date\").notNull(),\n  processedDate: date(\"processed_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertStateSchema = createInsertSchema(states).omit({\n  id: true,\n});\n\nexport const insertDistrictSchema = createInsertSchema(districts).omit({\n  id: true,\n});\n\nexport const insertMandalSchema = createInsertSchema(mandals).omit({\n  id: true,\n});\n\nexport const insertVillageSchema = createInsertSchema(villages).omit({\n  id: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  isPasswordChanged: true,\n}).extend({\n  // Transform salary from number to string if needed\n  salary: z.union([z.string(), z.number()]).transform((val) => String(val)).optional(),\n});\n\nexport const insertSoCenterSchema = createInsertSchema(soCenters).omit({\n  id: true,\n  createdAt: true,\n  walletBalance: true,\n  isPasswordChanged: true,\n}).extend({\n  // Transform decimal fields from number to string if needed\n  rentAmount: z.union([z.string(), z.number()]).transform((val) => String(val)).optional(),\n  rentalAdvance: z.union([z.string(), z.number()]).transform((val) => String(val)).optional(),\n  electricityAmount: z.union([z.string(), z.number()]).transform((val) => String(val)).optional(),\n  internetAmount: z.union([z.string(), z.number()]).transform((val) => String(val)).optional(),\n});\n\nexport const insertClassSchema = createInsertSchema(classes).omit({\n  id: true,\n}).extend({\n  description: z.string().optional(),\n});\n\nexport const insertSubjectSchema = createInsertSchema(subjects).omit({\n  id: true,\n});\n\nexport const insertChapterSchema = createInsertSchema(chapters).omit({\n  id: true,\n});\n\nexport const insertTopicSchema = createInsertSchema(topics).omit({\n  id: true,\n});\n\nexport const insertStudentSchema = createInsertSchema(students).omit({\n  id: true,\n  createdAt: true,\n  qrCode: true,\n  studentId: true,\n}).extend({\n  enrollmentDate: z.string().optional(), // Allow string date input\n  previousBalance: z.union([z.string(), z.number()]).transform((val) => String(val)).optional(),\n  previousBalanceDetails: z.string().optional(),\n});\n\nexport const insertFeeCalculationHistorySchema = createInsertSchema(feeCalculationHistory).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMonthlyFeeScheduleSchema = createInsertSchema(monthlyFeeSchedule).omit({\n  id: true,\n  createdAt: true,\n  processedAt: true,\n});\n\nexport const insertStudentSiblingSchema = createInsertSchema(studentSiblings).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertClassFeeSchema = createInsertSchema(classFees).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertStudentCounterSchema = createInsertSchema(studentCounter).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertTopicProgressSchema = createInsertSchema(topicProgress).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertHomeworkActivitySchema = createInsertSchema(homeworkActivities).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTuitionProgressSchema = createInsertSchema(tuitionProgress).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertExamSchema = createInsertSchema(exams).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  questions: z.union([\n    z.string(), // Allow JSON string\n    z.array(z.any()).transform((arr) => JSON.stringify(arr)) // Transform array to JSON string\n  ]).optional(),\n});\n\nexport const insertExamResultSchema = createInsertSchema(examResults).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  submittedAt: true,\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  amount: z.union([z.string(), z.number()]).transform((val) => String(val)),\n});\n\nexport const insertWalletTransactionSchema = createInsertSchema(walletTransactions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSoCenterEquipmentSchema = createInsertSchema(soCenterEquipment).omit({\n  id: true,\n  createdAt: true,\n  warrantyEndDate: true, // Auto-calculated\n}).extend({\n  purchaseDate: z.string(), // Allow string date input\n});\n\nexport const insertTeacherSchema = createInsertSchema(teachers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  salary: z.union([z.string(), z.number()]).transform((val) => String(val)),\n  dateOfBirth: z.string(), // Allow string date input\n});\n\nexport const insertTeacherDailyRecordSchema = createInsertSchema(teacherDailyRecords).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  recordDate: z.string(), // Allow string date input\n});\n\n// Attendance table with unique constraint\nexport const attendance = pgTable(\"attendance\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  studentId: varchar(\"student_id\").notNull().references(() => students.id),\n  soCenterId: varchar(\"so_center_id\").notNull().references(() => soCenters.id),\n  classId: varchar(\"class_id\").notNull().references(() => classes.id),\n  date: date(\"date\").notNull(),\n  status: varchar(\"status\", { enum: [\"present\", \"absent\", \"holiday\"] }).notNull(),\n  markedBy: varchar(\"marked_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  uniqueStudentDate: unique().on(table.studentId, table.date),\n}));\n\nexport const insertAttendanceSchema = createInsertSchema(attendance).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type State = typeof states.$inferSelect;\nexport type InsertState = z.infer<typeof insertStateSchema>;\nexport type District = typeof districts.$inferSelect;\nexport type InsertDistrict = z.infer<typeof insertDistrictSchema>;\nexport type Mandal = typeof mandals.$inferSelect;\nexport type InsertMandal = z.infer<typeof insertMandalSchema>;\nexport type Village = typeof villages.$inferSelect;\nexport type InsertVillage = z.infer<typeof insertVillageSchema>;\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type SoCenter = typeof soCenters.$inferSelect;\nexport type InsertSoCenter = z.infer<typeof insertSoCenterSchema>;\nexport type Class = typeof classes.$inferSelect;\nexport type InsertClass = z.infer<typeof insertClassSchema>;\nexport type Subject = typeof subjects.$inferSelect;\nexport type InsertSubject = z.infer<typeof insertSubjectSchema>;\nexport type Chapter = typeof chapters.$inferSelect;\nexport type InsertChapter = z.infer<typeof insertChapterSchema>;\nexport type Topic = typeof topics.$inferSelect;\nexport type InsertTopic = z.infer<typeof insertTopicSchema>;\nexport type Student = typeof students.$inferSelect;\nexport type InsertStudent = z.infer<typeof insertStudentSchema>;\nexport type StudentSibling = typeof studentSiblings.$inferSelect;\nexport type InsertStudentSibling = z.infer<typeof insertStudentSiblingSchema>;\nexport type ClassFee = typeof classFees.$inferSelect;\nexport type InsertClassFee = z.infer<typeof insertClassFeeSchema>;\nexport type StudentCounter = typeof studentCounter.$inferSelect;\nexport type InsertStudentCounter = z.infer<typeof insertStudentCounterSchema>;\nexport type TopicProgress = typeof topicProgress.$inferSelect;\nexport type InsertTopicProgress = z.infer<typeof insertTopicProgressSchema>;\nexport type Payment = typeof payments.$inferSelect;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\nexport type WalletTransaction = typeof walletTransactions.$inferSelect;\nexport type InsertWalletTransaction = z.infer<typeof insertWalletTransactionSchema>;\nexport type SoCenterEquipment = typeof soCenterEquipment.$inferSelect;\nexport type InsertSoCenterEquipment = z.infer<typeof insertSoCenterEquipmentSchema>;\nexport type Attendance = typeof attendance.$inferSelect;\nexport type InsertAttendance = z.infer<typeof insertAttendanceSchema>;\nexport type HomeworkActivity = typeof homeworkActivities.$inferSelect;\nexport type InsertHomeworkActivity = z.infer<typeof insertHomeworkActivitySchema>;\nexport type TuitionProgress = typeof tuitionProgress.$inferSelect;\nexport type InsertTuitionProgress = z.infer<typeof insertTuitionProgressSchema>;\n\nexport type Exam = typeof exams.$inferSelect;\nexport type InsertExam = z.infer<typeof insertExamSchema>;\nexport type ExamResult = typeof examResults.$inferSelect;\nexport type InsertExamResult = z.infer<typeof insertExamResultSchema>;\n\nexport type FeeCalculationHistory = typeof feeCalculationHistory.$inferSelect;\nexport type InsertFeeCalculationHistory = z.infer<typeof insertFeeCalculationHistorySchema>;\n\nexport type MonthlyFeeSchedule = typeof monthlyFeeSchedule.$inferSelect;\nexport type InsertMonthlyFeeSchedule = z.infer<typeof insertMonthlyFeeScheduleSchema>;\n\nexport type Teacher = typeof teachers.$inferSelect;\nexport type InsertTeacher = z.infer<typeof insertTeacherSchema>;\nexport type TeacherSubject = typeof teacherSubjects.$inferSelect;\nexport type TeacherClass = typeof teacherClasses.$inferSelect;\nexport type TeacherDailyRecord = typeof teacherDailyRecords.$inferSelect;\nexport type InsertTeacherDailyRecord = z.infer<typeof insertTeacherDailyRecordSchema>;\n\n// SO Center Expense schemas\nexport const insertSoCenterExpenseSchema = createInsertSchema(soCenterExpenses).omit({\n  id: true,\n  requestedAt: true,\n  transactionId: true,\n});\n\nexport type InsertSoCenterExpense = z.infer<typeof insertSoCenterExpenseSchema>;\nexport type SoCenterExpense = typeof soCenterExpenses.$inferSelect;\n\n// Student Dropout Request schemas\nexport const insertStudentDropoutRequestSchema = createInsertSchema(studentDropoutRequests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertStudentDropoutRequest = z.infer<typeof insertStudentDropoutRequestSchema>;\nexport type StudentDropoutRequest = typeof studentDropoutRequests.$inferSelect;\n\n\n\n// SO Center Expense Wallet schemas  \nexport const insertSoCenterExpenseWalletSchema = createInsertSchema(soCenterExpenseWallet).omit({\n  id: true,\n  lastUpdated: true,\n});\n\nexport type InsertSoCenterExpenseWallet = z.infer<typeof insertSoCenterExpenseWalletSchema>;\nexport type SoCenterExpenseWallet = typeof soCenterExpenseWallet.$inferSelect;\n\n// SO Center Monthly Expenses schemas\nexport const insertSoCenterMonthlyExpensesSchema = createInsertSchema(soCenterMonthlyExpenses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertSoCenterMonthlyExpenses = z.infer<typeof insertSoCenterMonthlyExpensesSchema>;\nexport type SoCenterMonthlyExpenses = typeof soCenterMonthlyExpenses.$inferSelect;\n\n// Announcements table\nexport const announcements = pgTable(\"announcements\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  content: text(\"content\"), // Rich text content\n  targetAudience: text(\"target_audience\").array().notNull(), // Multi-select support\n  priority: announcementPriorityEnum(\"priority\").default(\"normal\"),\n  imageUrl: text(\"image_url\"), // Optional banner/image\n  fromDate: date(\"from_date\").notNull(), // When to start showing\n  toDate: date(\"to_date\").notNull(), // When to stop showing\n  isActive: boolean(\"is_active\").default(true),\n  showOnQrCode: boolean(\"show_on_qr_code\").default(false), // Show when students scan QR\n  createdBy: varchar(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Announcement schemas\nexport const insertAnnouncementSchema = createInsertSchema(announcements).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type Announcement = typeof announcements.$inferSelect;\nexport type InsertAnnouncement = z.infer<typeof insertAnnouncementSchema>;\n\n// Withdrawal Request schemas\nexport const insertWithdrawalRequestSchema = createInsertSchema(withdrawalRequests).omit({\n  id: true,\n  requestedAt: true,\n  processedAt: true,\n});\n\nexport type InsertWithdrawalRequest = z.infer<typeof insertWithdrawalRequestSchema>;\nexport type WithdrawalRequest = typeof withdrawalRequests.$inferSelect;\n\n// Admin Notification schemas (using announcements as base)\nexport const insertAdminNotificationSchema = createInsertSchema(announcements).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertAdminNotification = z.infer<typeof insertAdminNotificationSchema>;\nexport type AdminNotification = typeof announcements.$inferSelect;\n","size_bytes":40984},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme/ThemeProvider\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { LoginForm } from \"@/components/auth/LoginForm\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Students from \"@/pages/Students\";\nimport Progress from \"@/pages/Progress\";\n\nimport { FeePayments } from \"@/pages/FeePayments\";\nimport Attendance from \"@/pages/Attendance\";\nimport AttendanceReports from \"@/pages/AttendanceReports\";\nimport Settings from \"@/pages/Settings\";\nimport Wallet from \"@/pages/Wallet\";\nimport Expenses from \"@/pages/Expenses\";\nimport PublicProgress from \"@/pages/PublicProgress\";\nimport NotFound from \"@/pages/not-found\";\nimport StudentsAdmin from \"@/pages/StudentsAdmin\";\n\n// Admin Pages\nimport AdminUsers from \"@/pages/admin/Users\";\nimport AdminRoles from \"@/pages/admin/Roles\";\nimport AdminAddresses from \"@/pages/admin/Addresses\";\nimport TopicsManagement from '@/pages/admin/TopicsManagement';\nimport AdminCenters from '@/pages/admin/Centers';\nimport AdminAllStudents from \"@/pages/admin/AllStudents\";\nimport AdminAllPayments from \"@/pages/admin/AllPayments\";\nimport StudentBalanceDues from '@/pages/admin/StudentBalanceDues';\nimport AdminFees from \"@/pages/admin/Fees\";\nimport AdminExpenses from \"@/pages/admin/Expenses\";\nimport AdminAcademics from \"@/pages/admin/Academics\";\nimport AdminTeachers from \"@/pages/admin/Teachers\";\nimport AdminAttendance from \"@/pages/admin/Attendance\";\nimport AdminAnnouncements from \"@/pages/admin/Announcements\";\nimport AdminApprovals from \"@/pages/admin/Approvals\";\nimport AdminProducts from \"@/pages/admin/Products\";\nimport AdminStudents from \"@/pages/admin/Students\";\nimport AcademicDashboard from \"@/pages/admin/AcademicDashboard\";\nimport ExamManagement from \"@/pages/admin/ExamManagement\";\nimport SoCenterExamManagement from \"@/pages/so-center/ExamManagement\";\nimport SoCenterExams from \"@/pages/so-center/SoCenterExams\";\nimport ExamResults from \"@/pages/so-center/ExamResults\";\nimport PostExamResult from \"@/pages/so-center/PostExamResult\";\n\nimport CoursePurchases from \"@/pages/admin/CoursePurchases\";\nimport StudentDropoutRequests from \"@/pages/so-center/StudentDropoutRequests\";\nimport DropoutRequestsManagement from \"@/pages/admin/DropoutRequestsManagement\";\nimport ClassSubjectManagement from '@/pages/admin/ClassSubjectManagement';\nimport AdminProgressTracking from '@/pages/admin/ProgressTracking';\nimport AdminWalletBalances from \"@/pages/admin/WalletBalances\";\n\nfunction ProtectedRoute({ children }: { children: React.ReactNode }) {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <LoginForm />;\n  }\n\n  return <>{children}</>;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Public route for QR code progress */}\n      <Route path=\"/progress/:qrCode\" component={PublicProgress} />\n\n      {/* Protected routes */}\n      <Route path=\"/login\" component={LoginForm} />\n      <Route path=\"/\">\n        <ProtectedRoute>\n          <Dashboard />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/dashboard\">\n        <ProtectedRoute>\n          <Dashboard />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/students\">\n        <ProtectedRoute>\n          <Students />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/students\">\n        <ProtectedRoute>\n          <StudentsAdmin />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/progress\">\n        <ProtectedRoute>\n          <Progress />\n        </ProtectedRoute>\n      </Route>\n\n      <Route path=\"/fee-payments\">\n        <ProtectedRoute>\n          <FeePayments />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/wallet\">\n        <ProtectedRoute>\n          <Wallet />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/attendance\">\n        <ProtectedRoute>\n          <Attendance />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/attendance-reports\">\n        <ProtectedRoute>\n          <AttendanceReports />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/expenses\">\n        <ProtectedRoute>\n          <Expenses />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/products\">\n        <ProtectedRoute>\n          <AdminProducts />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/so-center/dashboard\">\n        <ProtectedRoute>\n          <SoCenterExamManagement />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/so-center/exam-management\">\n        <ProtectedRoute>\n          <SoCenterExamManagement />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/exam-management\">\n        <ProtectedRoute>\n          <SoCenterExamManagement />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/so-center/exams\">\n        <ProtectedRoute>\n          <SoCenterExams />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/so-center/exam-results\">\n        <ProtectedRoute>\n          <ExamResults />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/post-exam-result/:examId\">\n        <ProtectedRoute>\n          <PostExamResult />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/settings\">\n        <ProtectedRoute>\n          <Settings />\n        </ProtectedRoute>\n      </Route>\n\n      {/* Admin routes */}\n      <Route path=\"/admin/users\">\n        <ProtectedRoute>\n          <AdminUsers />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/structure\">\n        <ProtectedRoute>\n          <TopicsManagement />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/class-subject-management\">\n        <ProtectedRoute>\n          <ClassSubjectManagement />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/centers\">\n        <ProtectedRoute>\n          <AdminCenters />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/so-centers\">\n        <ProtectedRoute>\n          <AdminCenters />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/students\">\n        <ProtectedRoute>\n          <AdminStudents />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/payments\">\n        <ProtectedRoute>\n          <AdminAllPayments />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/academic-dashboard\" component={() => <AcademicDashboard />} />\n          <Route path=\"/admin/attendance\" component={() => <Attendance />} />\n          <Route path=\"/admin/course-purchases\" component={() => <CoursePurchases />} />\n          <Route path=\"/admin/topics-management\" component={() => <TopicsManagement />} />\n          <Route path=\"/admin/progress-tracking\" component={() => <AdminProgressTracking />} />\n          <Route path=\"/admin/dropout-requests\" component={() => <DropoutRequestsManagement />} />\n      <Route path=\"/admin/exam-management\">\n        <ProtectedRoute>\n          <ExamManagement />\n        </ProtectedRoute>\n      </Route>\n\n      <Route path=\"/admin/all-payments\">\n        <ProtectedRoute>\n          <AdminAllPayments />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/student-balance-dues\">\n        <ProtectedRoute>\n          <StudentBalanceDues />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/roles\">\n        <ProtectedRoute>\n          <AdminRoles />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/addresses\">\n        <ProtectedRoute>\n          <AdminAddresses />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/fees\">\n        <ProtectedRoute>\n          <AdminFees />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/expenses\">\n        <ProtectedRoute>\n          <AdminExpenses />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/academics\">\n        <ProtectedRoute>\n          <AdminAcademics />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/teachers\">\n        <ProtectedRoute>\n          <AdminTeachers />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/products\">\n        <ProtectedRoute>\n          <AdminProducts />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/attendance\">\n        <ProtectedRoute>\n          <AdminAttendance />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/announcements\">\n        <ProtectedRoute>\n          <AdminAnnouncements />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/course-purchases\">\n        <ProtectedRoute>\n          <CoursePurchases />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/approvals\">\n        <ProtectedRoute>\n          <AdminApprovals />\n        </ProtectedRoute>\n      </Route>\n\n\n      {/* New Features: Topics Management & Dropout Requests */}\n      <Route path=\"/admin/topics-management\">\n        <ProtectedRoute>\n          <TopicsManagement />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/dropout-requests\">\n        <ProtectedRoute>\n          <DropoutRequestsManagement />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/so-center/dropout-requests\">\n        <ProtectedRoute>\n          <StudentDropoutRequests />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin/wallet-balances\">\n        <ProtectedRoute>\n          <AdminWalletBalances />\n        </ProtectedRoute>\n      </Route>\n\n\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":10250},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(142.1 76.2% 36.3%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(142.1 30% 96%);\n  --secondary-foreground: hsl(142.1 76.2% 36.3%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(35.6 91.7% 55.9%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(142.1 76.2% 36.3%);\n  --chart-1: hsl(142.1 76.2% 36.3%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(35.6 91.7% 55.9%);\n  --chart-4: hsl(122.4 39.4% 49.0%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(142.1 30% 96%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(142.1 76.2% 36.3%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(142.1 15% 92%);\n  --sidebar-accent-foreground: hsl(142.1 76.2% 36.3%);\n  --sidebar-border: hsl(142.1 25% 90%);\n  --sidebar-ring: hsl(142.1 76.2% 36.3%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(214.8 88.9% 41.4% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(214.8 88.9% 41.4% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(214.8 88.9% 41.4% / 0.00), 0px 1px 2px -1px hsl(214.8 88.9% 41.4% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(214.8 88.9% 41.4% / 0.00), 0px 1px 2px -1px hsl(214.8 88.9% 41.4% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(214.8 88.9% 41.4% / 0.00), 0px 2px 4px -1px hsl(214.8 88.9% 41.4% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(214.8 88.9% 41.4% / 0.00), 0px 4px 6px -1px hsl(214.8 88.9% 41.4% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(214.8 88.9% 41.4% / 0.00), 0px 8px 10px -1px hsl(214.8 88.9% 41.4% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(214.8 88.9% 41.4% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  --success: hsl(122.4 39.4% 49.0%);\n  --warning: hsl(35.6 91.7% 55.9%);\n  --error: hsl(356.3033 90.5579% 54.3137%);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(214.8 88.9% 41.4%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(122.4 39.4% 49.0%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(35.6 91.7% 55.9%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(214.8 88.9% 41.4%);\n  --chart-1: hsl(214.8 88.9% 41.4%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(35.6 91.7% 55.9%);\n  --chart-4: hsl(122.4 39.4% 49.0%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(214.8 88.9% 41.4%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(214.8 88.9% 41.4%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(214.8 88.9% 41.4%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(214.8 88.9% 41.4% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(214.8 88.9% 41.4% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(214.8 88.9% 41.4% / 0.00), 0px 1px 2px -1px hsl(214.8 88.9% 41.4% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(214.8 88.9% 41.4% / 0.00), 0px 1px 2px -1px hsl(214.8 88.9% 41.4% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(214.8 88.9% 41.4% / 0.00), 0px 2px 4px -1px hsl(214.8 88.9% 41.4% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(214.8 88.9% 41.4% / 0.00), 0px 4px 6px -1px hsl(214.8 88.9% 41.4% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(214.8 88.9% 41.4% / 0.00), 0px 8px 10px -1px hsl(214.8 88.9% 41.4% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(214.8 88.9% 41.4% / 0.00);\n  --success: hsl(122.4 39.4% 49.0%);\n  --warning: hsl(35.6 91.7% 55.9%);\n  --error: hsl(356.3033 90.5579% 54.3137%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom utilities */\n.text-success {\n  color: var(--success);\n}\n\n.text-warning {\n  color: var(--warning);\n}\n\n.text-error {\n  color: var(--error);\n}\n\n.bg-success {\n  background-color: var(--success);\n}\n\n.bg-warning {\n  background-color: var(--warning);\n}\n\n.bg-error {\n  background-color: var(--error);\n}\n\n/* Mobile optimizations */\n@media (max-width: 768px) {\n  /* Larger touch targets for mobile */\n  .touch-target {\n    min-height: 44px;\n    min-width: 44px;\n  }\n  \n  /* Better button spacing on mobile */\n  button, .btn {\n    min-height: 44px;\n    padding: 12px 16px;\n  }\n  \n  /* Improved form inputs for mobile */\n  input, textarea, select {\n    min-height: 48px;\n    font-size: 16px; /* Prevents zoom on iOS */\n  }\n  \n  /* Better card spacing on mobile */\n  .card-mobile {\n    margin: 8px;\n    border-radius: 12px;\n  }\n  \n  /* Improved table responsiveness */\n  .table-mobile {\n    display: block;\n    overflow-x: auto;\n    white-space: nowrap;\n  }\n  \n  /* Better modal sizing on mobile */\n  .modal-mobile {\n    margin: 16px;\n    max-height: calc(100vh - 32px);\n    overflow-y: auto;\n  }\n}\n\n/* Touch-friendly hover states */\n@media (hover: hover) and (pointer: fine) {\n  /* Only apply hover effects on devices that support hover */\n  .hover-effect:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  }\n}\n\n/* Improve scroll behavior */\n* {\n  -webkit-overflow-scrolling: touch;\n}\n\n/* Better focus states for accessibility */\nbutton:focus-visible,\ninput:focus-visible,\ntextarea:focus-visible,\nselect:focus-visible {\n  outline: 2px solid var(--ring);\n  outline-offset: 2px;\n}\n\n/* Prevent text selection on interactive elements */\nbutton, .btn, [role=\"button\"] {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n}\n\n/* Smooth scrolling */\nhtml {\n  scroll-behavior: smooth;\n}\n\n/* Improve performance on mobile */\n.gpu-accelerate {\n  transform: translateZ(0);\n  will-change: transform;\n}\n\n/* Green Theme Animations and Enhancements */\n@layer utilities {\n  .animate-fade-in {\n    animation: fadeIn 0.5s ease-in-out;\n  }\n  \n  .animate-slide-up {\n    animation: slideUp 0.3s ease-out;\n  }\n  \n  .animate-scale-in {\n    animation: scaleIn 0.2s ease-out;\n  }\n  \n  .animate-bounce-in {\n    animation: bounceIn 0.4s ease-out;\n  }\n  \n  .hover-lift {\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n  }\n  \n  .hover-lift:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 10px 25px rgba(34, 197, 94, 0.15);\n  }\n  \n  .card-hover {\n    transition: all 0.3s ease;\n  }\n  \n  .card-hover:hover {\n    transform: translateY(-4px) scale(1.02);\n    box-shadow: 0 20px 40px rgba(34, 197, 94, 0.15);\n  }\n  \n  .green-gradient {\n    background: linear-gradient(135deg, hsl(142.1 76.2% 36.3%) 0%, hsl(159.7826 100% 36.0784%) 100%);\n  }\n  \n  .green-glow {\n    box-shadow: 0 0 20px rgba(34, 197, 94, 0.3);\n  }\n  \n  .green-pulse {\n    animation: greenPulse 2s infinite;\n  }\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n@keyframes slideUp {\n  from {\n    transform: translateY(20px);\n    opacity: 0;\n  }\n  to {\n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n@keyframes scaleIn {\n  from {\n    transform: scale(0.95);\n    opacity: 0;\n  }\n  to {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n@keyframes bounceIn {\n  0% {\n    transform: scale(0.3);\n    opacity: 0;\n  }\n  50% {\n    transform: scale(1.05);\n  }\n  70% {\n    transform: scale(0.9);\n  }\n  100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n}\n\n@keyframes greenPulse {\n  0%, 100% {\n    box-shadow: 0 0 5px rgba(34, 197, 94, 0.5);\n  }\n  50% {\n    box-shadow: 0 0 20px rgba(34, 197, 94, 0.8);\n  }\n}\n\n/* Premium Dashboard Animations */\n@keyframes float-slow {\n  0%, 100% {\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-20px);\n  }\n}\n\n@keyframes float-slower {\n  0%, 100% {\n    transform: translateY(0px) translateX(0px);\n  }\n  33% {\n    transform: translateY(-15px) translateX(10px);\n  }\n  66% {\n    transform: translateY(10px) translateX(-5px);\n  }\n}\n\n@keyframes gradient-text {\n  0%, 100% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n}\n\n@keyframes slide-in-from-left {\n  0% {\n    transform: scaleX(0);\n    transform-origin: left;\n  }\n  100% {\n    transform: scaleX(1);\n    transform-origin: left;\n  }\n}\n\n@keyframes fade-in-up {\n  0% {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes fade-in-up-delay {\n  0% {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes fade-in-up-delay-2 {\n  0% {\n    opacity: 0;\n    transform: translateY(15px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slide-up-stagger {\n  0% {\n    opacity: 0;\n    transform: translateY(50px) scale(0.9);\n  }\n  100% {\n    opacity: 1;\n    transform: translateY(0) scale(1);\n  }\n}\n\n@keyframes slide-in-right {\n  0% {\n    opacity: 0;\n    transform: translateX(30px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes slide-in-left {\n  0% {\n    opacity: 0;\n    transform: translateX(-30px);\n  }\n  100% {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes pulse-premium {\n  0%, 100% {\n    opacity: 0.6;\n    transform: scale(1);\n  }\n  50% {\n    opacity: 1;\n    transform: scale(1.05);\n  }\n}\n\n@keyframes shimmer {\n  0% {\n    background-position: -200% 0;\n  }\n  100% {\n    background-position: 200% 0;\n  }\n}\n\n/* Premium Animation Classes */\n.animate-float-slow {\n  animation: float-slow 6s ease-in-out infinite;\n}\n\n.animate-float-slower {\n  animation: float-slower 8s ease-in-out infinite;\n}\n\n.animate-gradient-text {\n  background-size: 200% 200%;\n  animation: gradient-text 4s ease infinite;\n}\n\n.animate-slide-in-from-left {\n  animation: slide-in-from-left 0.8s ease-out;\n}\n\n.animate-fade-in-up {\n  animation: fade-in-up 0.8s ease-out;\n}\n\n.animate-fade-in-up-delay {\n  animation: fade-in-up-delay 1s ease-out 0.3s both;\n}\n\n.animate-fade-in-up-delay-2 {\n  animation: fade-in-up-delay-2 1s ease-out 0.6s both;\n}\n\n.animate-slide-up-stagger {\n  animation: slide-up-stagger 0.6s ease-out both;\n}\n\n.animate-slide-in-right {\n  animation: slide-in-right 0.5s ease-out both;\n}\n\n.animate-slide-in-left {\n  animation: slide-in-left 0.5s ease-out both;\n}\n\n.animate-pulse-premium {\n  animation: pulse-premium 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n.animate-shimmer {\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);\n  background-size: 200% 100%;\n  animation: shimmer 1.5s infinite;\n}\n","size_bytes":11557},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"\nimport * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\nconst TABLET_BREAKPOINT = 1024\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n\nexport function useIsTablet() {\n  const [isTablet, setIsTablet] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${TABLET_BREAKPOINT - 1}px) and (min-width: ${MOBILE_BREAKPOINT}px)`)\n    const onChange = () => {\n      setIsTablet(window.innerWidth >= MOBILE_BREAKPOINT && window.innerWidth < TABLET_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsTablet(window.innerWidth >= MOBILE_BREAKPOINT && window.innerWidth < TABLET_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isTablet\n}\n\nexport function useScreenSize() {\n  const isMobile = useIsMobile()\n  const isTablet = useIsTablet()\n  \n  return {\n    isMobile,\n    isTablet,\n    isDesktop: !isMobile && !isTablet,\n    breakpoint: isMobile ? 'mobile' : isTablet ? 'tablet' : 'desktop'\n  }\n}\n","size_bytes":1482},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  role: string;\n}\n\ninterface LoginResponse {\n  token: string;\n  user: User;\n  redirectTo?: string;\n}\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: ['auth', 'user'],\n    queryFn: async (): Promise<User | null> => {\n      try {\n        const token = localStorage.getItem('token');\n        if (!token) {\n          return null;\n        }\n        \n        const response = await apiRequest('GET', '/api/auth/me');\n        return response.json();\n      } catch (error) {\n        // If authentication fails, clear the token\n        localStorage.removeItem('token');\n        return null;\n      }\n    },\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async ({ email, password }: { email: string; password: string }): Promise<LoginResponse> => {\n      // Clear any existing tokens first\n      localStorage.removeItem('token');\n      localStorage.removeItem('auth_token');\n      \n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include', // Important for session cookies\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Login failed');\n      }\n\n      const data = await response.json();\n      \n      // Store the token in localStorage with both keys for compatibility\n      if (data.token) {\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('auth_token', data.token);\n      }\n      \n      return data;\n    },\n    onSuccess: (data) => {\n      // Update the user cache and invalidate to force refresh\n      queryClient.setQueryData(['auth', 'user'], data.user);\n      queryClient.invalidateQueries({ queryKey: ['auth', 'user'] });\n    },\n    onError: () => {\n      // Clear any existing tokens on login error\n      localStorage.removeItem('token');\n      localStorage.removeItem('auth_token');\n    }\n  });\n\n  const login = async (email: string, password: string): Promise<LoginResponse> => {\n    return loginMutation.mutateAsync({ email, password });\n  };\n\n  const logout = () => {\n    // Clear all possible tokens\n    localStorage.removeItem('token');\n    localStorage.removeItem('auth_token');\n    \n    // Clear user data\n    queryClient.setQueryData(['auth', 'user'], null);\n    queryClient.invalidateQueries({ queryKey: ['auth'] });\n    \n    // Navigate to login if needed\n    window.location.href = '/login';\n  };\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    error,\n    login,\n    logout,\n    isLoginLoading: loginMutation.isPending,\n    loginError: loginMutation.error as Error | null\n  };\n}","size_bytes":3062},"client/src/lib/auth.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  role: string;\n}\n\nexport interface AuthResponse {\n  token: string;\n  user: User;\n  redirectTo?: string;\n}\n\nclass AuthService {\n  private token: string | null = null;\n  private user: User | null = null;\n\n  constructor() {\n    this.token = localStorage.getItem('auth_token');\n    const userData = localStorage.getItem('auth_user');\n    if (userData) {\n      try {\n        this.user = JSON.parse(userData);\n      } catch (e) {\n        this.clearAuth();\n      }\n    }\n  }\n\n  async login(email: string, password: string): Promise<AuthResponse> {\n    try {\n      console.log('Frontend login attempt:', { email });\n      \n      // Use fetch directly to avoid automatic error throwing\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email,\n          password,\n        }),\n      });\n\n      console.log('Response status:', response.status);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error('Login failed:', errorData);\n        throw new Error(errorData.message || 'Login failed');\n      }\n\n      const data: AuthResponse = await response.json();\n      console.log('Login successful:', data);\n      \n      this.token = data.token;\n      this.user = data.user;\n      \n      localStorage.setItem('auth_token', data.token);\n      localStorage.setItem('auth_user', JSON.stringify(data.user));\n      \n      return data;\n    } catch (error) {\n      console.error('Auth service login error:', error);\n      throw error;\n    }\n  }\n\n  async register(userData: {\n    email: string;\n    password: string;\n    name: string;\n    role: string;\n    phone?: string;\n  }): Promise<User> {\n    const response = await apiRequest('POST', '/api/auth/register', userData);\n    return await response.json();\n  }\n\n  async getCurrentUser(): Promise<User | null> {\n    if (!this.token) return null;\n\n    try {\n      const response = await fetch('/api/auth/me', {\n        headers: {\n          'Authorization': `Bearer ${this.token}`,\n        },\n      });\n\n      if (!response.ok) {\n        this.clearAuth();\n        return null;\n      }\n\n      const user = await response.json();\n      this.user = user;\n      localStorage.setItem('auth_user', JSON.stringify(user));\n      return user;\n    } catch (error) {\n      this.clearAuth();\n      return null;\n    }\n  }\n\n  logout(): void {\n    this.clearAuth();\n  }\n\n  getToken(): string | null {\n    return this.token;\n  }\n\n  getUser(): User | null {\n    return this.user;\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.token && !!this.user;\n  }\n\n  private clearAuth(): void {\n    this.token = null;\n    this.user = null;\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('auth_user');\n  }\n}\n\nexport const authService = new AuthService();\n","size_bytes":2986},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nfunction getAuthHeaders(): Record<string, string> {\n  const headers: Record<string, string> = {};\n  \n  // Use JWT token from localStorage (our custom JWT, not Supabase token)\n  const token = localStorage.getItem('token') || localStorage.getItem('auth_token');\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n    console.log('🔑 Using JWT token for API request');\n  } else {\n    console.warn('⚠️ No JWT token found in localStorage');\n  }\n  \n  return headers;\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const headers = {\n    ...getAuthHeaders(),\n    ...(data ? { \"Content-Type\": \"application/json\" } : {}),\n  };\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const headers = getAuthHeaders();\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1981},"client/src/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js';\n\n// Environment variables are swapped, so we need to swap them back\nconst supabaseUrl = import.meta.env.VITE_NEXT_PUBLIC_SUPABASE_ANON_KEY || ''; // This is actually the URL\nconst supabaseAnonKey = import.meta.env.VITE_NEXT_PUBLIC_SUPABASE_URL || ''; // This is actually the anon key\n\nif (!supabaseUrl) {\n  console.error('VITE_NEXT_PUBLIC_SUPABASE_ANON_KEY (URL) not configured');\n}\n\nif (!supabaseAnonKey) {\n  console.error('VITE_NEXT_PUBLIC_SUPABASE_URL (anon key) not configured');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);","size_bytes":608},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Dashboard.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useAuth } from '@/hooks/useAuth';\nimport { AnnouncementsPopup } from '@/components/announcements/AnnouncementsPopup';\nimport { Link } from 'wouter';\nimport { \n  Users, \n  IndianRupee, \n  CheckCircle, \n  Wallet,\n  TrendingUp,\n  Building,\n  Calendar,\n  BarChart3,\n  Package,\n  UserPlus,\n  ShoppingCart,\n  UserCheck,\n  BookOpen,\n  DollarSign,\n  GraduationCap,\n  FileText\n} from 'lucide-react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar } from 'recharts';\n\n// Helper function to format currency\nconst formatCurrency = (amount: number) => {\n  return new Intl.NumberFormat('en-IN', {\n    style: 'currency',\n    currency: 'INR',\n  }).format(amount);\n};\n\n// SO Center Dashboard Component with Key Metrics\nfunction SOCenterDashboard() {\n  const { user } = useAuth();\n\n  // Fetch SO Center specific metrics with auto-refresh\n  const { data: soCenterStats } = useQuery({\n    queryKey: ['/api/so-center/dashboard-stats', user?.email],\n    queryFn: async () => {\n      console.log('🔄 Fetching SO Center dashboard stats');\n      const token = localStorage.getItem('auth_token');\n      const response = await fetch('/api/so-center/dashboard-stats', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch SO center stats');\n      }\n      const data = await response.json();\n      console.log('🏢 SO Center stats received:', data);\n      return data;\n    },\n    enabled: !!user && user.role === 'so_center',\n    refetchInterval: 30000, // Refresh every 30 seconds\n    staleTime: 0, // Always consider data stale to ensure fresh updates\n  });\n\n  const stats = soCenterStats || {\n    newStudentsThisMonth: 0,\n    thisMonthCollection: 0,\n    todayCollection: 0,\n    todayAttendance: 0,\n    thisMonthProductSales: 0,\n    collectionChart: [],\n    attendanceChart: [],\n    productSalesChart: []\n  };\n\n  const SOStatCard = ({ \n    title, \n    value, \n    icon: Icon, \n    trend, \n    color = \"primary\" \n  }: {\n    title: string;\n    value: string | number;\n    icon: any;\n    trend?: string;\n    color?: string;\n  }) => (\n    <Card className=\"hover-lift card-hover animate-fade-in border-green-100 hover:border-green-200\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm font-medium text-gray-600\">{title}</p>\n            <p className=\"text-2xl font-bold text-gray-900 mt-2\">\n              {typeof value === 'number' && title.includes('₹') \n                ? `₹${value.toLocaleString()}` \n                : value}\n            </p>\n            {trend && (\n              <p className=\"text-xs text-green-600 mt-1 font-medium\">{trend}</p>\n            )}\n          </div>\n          <div className=\"w-12 h-12 bg-green-50 rounded-xl flex items-center justify-center green-pulse\">\n            <Icon className=\"text-green-600\" size={24} />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Key Metrics Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 animate-slide-up\">\n        <SOStatCard\n          title=\"New Students This Month\"\n          value={stats.newStudentsThisMonth}\n          icon={UserPlus}\n          trend=\"+12% from last month\"\n          color=\"primary\"\n        />\n\n        <SOStatCard\n          title=\"This Month Collection\"\n          value={`₹${stats.thisMonthCollection.toLocaleString()}`}\n          icon={IndianRupee}\n          trend=\"+8% from last month\"\n          color=\"green\"\n        />\n\n        <SOStatCard\n          title=\"Today Collection\"\n          value={`₹${stats.todayCollection.toLocaleString()}`}\n          icon={Wallet}\n          trend=\"Last 24 hours\"\n          color=\"blue\"\n        />\n\n        <SOStatCard\n          title=\"Today Attendance\"\n          value={`${stats.todayAttendance}%`}\n          icon={UserCheck}\n          trend=\"Current day\"\n          color=\"purple\"\n        />\n      </div>\n\n      {/* Charts Section */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Collection Chart */}\n        <Card className=\"animate-scale-in hover-lift border-green-100\">\n          <CardHeader className=\"bg-gradient-to-r from-green-50 to-emerald-50\">\n            <CardTitle className=\"flex items-center gap-2 text-green-800\">\n              <TrendingUp size={20} className=\"text-green-600\" />\n              Monthly Collection Trend\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={stats.collectionChart}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"day\" />\n                  <YAxis />\n                  <Tooltip formatter={(value) => [`₹${value}`, 'Collection']} />\n                  <Line \n                    type=\"monotone\" \n                    dataKey=\"collection\" \n                    stroke=\"#22c55e\" \n                    strokeWidth={3}\n                    dot={{ fill: '#22c55e', strokeWidth: 2, r: 4 }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Attendance Chart */}\n        <Card className=\"animate-scale-in hover-lift border-green-100\">\n          <CardHeader className=\"bg-gradient-to-r from-green-50 to-emerald-50\">\n            <CardTitle className=\"flex items-center gap-2 text-green-800\">\n              <UserCheck size={20} className=\"text-green-600\" />\n              Weekly Attendance\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-64\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={stats.attendanceChart}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"day\" />\n                  <YAxis />\n                  <Tooltip formatter={(value) => [`${value}%`, 'Attendance']} />\n                  <Bar dataKey=\"attendance\" fill=\"#10b981\" radius={[4, 4, 0, 0]} />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Product Sales and Quick Actions */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Product Sales */}\n        <Card className=\"lg:col-span-2 animate-bounce-in hover-lift border-green-100\">\n          <CardHeader className=\"bg-gradient-to-r from-green-50 to-emerald-50\">\n            <CardTitle className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2 text-green-800\">\n                <Package size={20} className=\"text-green-600\" />\n                This Month Product Sales\n              </div>\n              <span className=\"text-2xl font-bold text-green-600 green-pulse\">\n                ₹{stats.thisMonthProductSales.toLocaleString()}\n              </span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"h-48\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={stats.productSalesChart}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"product\" />\n                  <YAxis />\n                  <Tooltip formatter={(value) => [`₹${value}`, 'Sales']} />\n                  <Bar dataKey=\"sales\" fill=\"#22c55e\" radius={[4, 4, 0, 0]} />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Quick Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <Link href=\"/students\">\n                <button className=\"w-full p-3 text-left border border-gray-200 rounded-lg hover:bg-gray-50 transition\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Users size={20} className=\"text-blue-600\" />\n                    <div>\n                      <p className=\"font-medium\">Manage Students</p>\n                      <p className=\"text-sm text-gray-600\">Add or view students</p>\n                    </div>\n                  </div>\n                </button>\n              </Link>\n\n              <Link href=\"/products\">\n                <button className=\"w-full p-3 text-left border border-gray-200 rounded-lg hover:bg-gray-50 transition\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Package size={20} className=\"text-green-600\" />\n                    <div>\n                      <p className=\"font-medium\">View Products</p>\n                      <p className=\"text-sm text-gray-600\">Browse available products</p>\n                    </div>\n                  </div>\n                </button>\n              </Link>\n\n              <Link href=\"/fee-payments\">\n                <button className=\"w-full p-3 text-left border border-gray-200 rounded-lg hover:bg-gray-50 transition\">\n                  <div className=\"flex items-center space-x-3\">\n                    <IndianRupee size={20} className=\"text-purple-600\" />\n                    <div>\n                      <p className=\"font-medium\">Record Payment</p>\n                      <p className=\"text-sm text-gray-600\">Process fee payment</p>\n                    </div>\n                  </div>\n                </button>\n              </Link>\n\n              <Link href=\"/attendance\">\n                <button className=\"w-full p-3 text-left border border-gray-200 rounded-lg hover:bg-gray-50 transition\">\n                  <div className=\"flex items-center space-x-3\">\n                    <CheckCircle size={20} className=\"text-orange-600\" />\n                    <div>\n                      <p className=\"font-medium\">Take Attendance</p>\n                      <p className=\"text-sm text-gray-600\">Mark student attendance</p>\n                    </div>\n                  </div>\n                </button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n\n  // Fetch real dashboard stats with auto-refresh\n  const { data: stats, isLoading } = useQuery({\n    queryKey: ['/api/dashboard/stats', user?.role],\n    queryFn: async () => {\n      console.log('🔄 Fetching dashboard stats for user:', user?.role);\n      const token = localStorage.getItem('auth_token');\n      const response = await fetch('/api/dashboard/stats', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch dashboard stats');\n      }\n      const data = await response.json();\n      console.log('📊 Dashboard stats received:', data);\n      return data;\n    },\n    enabled: !!user,\n    refetchInterval: 30000, // Refresh every 30 seconds\n    staleTime: 0, // Always consider data stale to ensure fresh updates\n  });\n\n  // No fallback data - only use real Supabase data\n  const displayStats = stats || {\n    totalStudents: 0,\n    paymentsThisMonth: 0,\n    topicsCompleted: 0,\n    walletBalance: 0,\n    newStudentsThisMonth: 0,\n    yearlyRevenue: 0,\n    totalTopics: 0,\n    totalSoCenters: 0,\n    totalWalletBalance: 0,\n    totalTeachers: 0,\n    totalClasses: 0,\n    totalSubjects: 0,\n    attendanceRate: 0,\n    studentsWithAttendance: 0,\n    totalExams: 0,\n    averageExamScore: 0,\n    totalProducts: 0,\n    homeworkCompleted: 0,\n    totalSales: 0,\n    monthlyRevenue: 0,\n    totalCommission: 0,\n  };\n\n  const StatCard = ({ \n    title, \n    value, \n    icon: Icon, \n    trend, \n    color = \"primary\",\n    delay = 0\n  }: {\n    title: string;\n    value: string | number;\n    icon: any;\n    trend?: string;\n    color?: string;\n    delay?: number;\n  }) => (\n    <Card className={`group relative overflow-hidden bg-gradient-to-br from-white to-gray-50/30 border-0 shadow-lg hover:shadow-2xl transition-all duration-500 hover:-translate-y-2 animate-slide-up-stagger cursor-pointer transform hover:scale-105`} \n          style={{ animationDelay: `${delay}ms` }}>\n      <div className=\"absolute inset-0 bg-gradient-to-r from-blue-400/10 via-purple-400/10 to-pink-400/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n      <div className=\"absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 transform scale-x-0 group-hover:scale-x-100 transition-transform duration-500 origin-left\"></div>\n      \n      <CardContent className=\"p-6 relative z-10\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"space-y-3\">\n            <p className=\"text-sm font-semibold text-gray-600 uppercase tracking-wider group-hover:text-gray-800 transition-colors duration-300\">{title}</p>\n            <div className=\"relative\">\n              <p className=\"text-3xl font-black text-gray-900 mt-2 group-hover:text-transparent group-hover:bg-clip-text group-hover:bg-gradient-to-r group-hover:from-blue-600 group-hover:to-purple-600 transition-all duration-500 transform group-hover:scale-110\">\n                {typeof value === 'number' && title.includes('₹') \n                  ? `₹${value.toLocaleString()}` \n                  : value}\n              </p>\n              <div className=\"absolute inset-0 bg-gradient-to-r from-blue-400/20 to-purple-400/20 blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n            </div>\n          </div>\n          <div className=\"relative\">\n            <div className={`w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center transform group-hover:rotate-12 group-hover:scale-110 transition-all duration-500 shadow-lg group-hover:shadow-2xl`}>\n              <Icon className=\"text-white text-xl drop-shadow-lg\" size={28} />\n            </div>\n            <div className=\"absolute inset-0 bg-gradient-to-br from-blue-400 to-purple-500 rounded-2xl blur-xl opacity-0 group-hover:opacity-30 transition-opacity duration-500 animate-pulse\"></div>\n          </div>\n        </div>\n        {trend && (\n          <div className=\"mt-4 opacity-0 group-hover:opacity-100 transition-all duration-500 transform translate-y-2 group-hover:translate-y-0\">\n            <span className=\"text-sm text-green-600 font-semibold bg-green-50 px-3 py-1 rounded-full\">{trend}</span>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <DashboardLayout title=\"Dashboard\">\n      <AnnouncementsPopup />\n\n      <div className=\"p-6 space-y-8 relative overflow-hidden\">\n        {/* Floating background elements */}\n        <div className=\"absolute top-0 left-0 w-72 h-72 bg-gradient-to-br from-blue-400/10 to-purple-400/10 rounded-full blur-3xl animate-float-slow\"></div>\n        <div className=\"absolute top-20 right-0 w-96 h-96 bg-gradient-to-br from-purple-400/10 to-pink-400/10 rounded-full blur-3xl animate-float-slower\"></div>\n        \n        <div className=\"relative z-10\">\n          <div className=\"text-center space-y-4 animate-fade-in-up\">\n            <div className=\"inline-block\">\n              <h1 className=\"text-5xl font-black bg-gradient-to-r from-gray-900 via-blue-800 to-purple-800 bg-clip-text text-transparent animate-gradient-text\">\n                Welcome back, {user?.name || 'User'}!\n              </h1>\n              <div className=\"h-1 w-full bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500 rounded-full mt-2 animate-slide-in-from-left\"></div>\n            </div>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto leading-relaxed animate-fade-in-up-delay\">\n              Your academy command center - Real-time insights, powerful analytics, and complete control at your fingertips.\n            </p>\n            <div className=\"flex justify-center space-x-2 animate-fade-in-up-delay-2\">\n              <div className=\"w-2 h-2 bg-blue-500 rounded-full animate-pulse\"></div>\n              <div className=\"w-2 h-2 bg-purple-500 rounded-full animate-pulse\" style={{ animationDelay: '0.2s' }}></div>\n              <div className=\"w-2 h-2 bg-pink-500 rounded-full animate-pulse\" style={{ animationDelay: '0.4s' }}></div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"px-6 space-y-8\">{/* Moved the padding here */}\n\n        {/* Loading skeleton with premium animations */}\n        {isLoading && (\n          <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n            {Array.from({ length: 8 }).map((_, i) => (\n              <Card key={i} className=\"animate-pulse-premium bg-gradient-to-br from-gray-100 to-gray-200\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-3\">\n                      <div className=\"h-4 bg-gray-300 rounded-full w-24 animate-shimmer\"></div>\n                      <div className=\"h-8 bg-gray-300 rounded-full w-16 animate-shimmer\"></div>\n                    </div>\n                    <div className=\"w-16 h-16 bg-gray-300 rounded-2xl animate-shimmer\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* General Stats for all users except SO Center */}\n        {!isLoading && user?.role !== 'so_center' && (\n          <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n            {user?.role === 'admin' ? (\n              <>\n                {/* Admin Dashboard Cards with premium animations */}\n                <StatCard\n                  title=\"Total Students\"\n                  value={displayStats.totalStudents}\n                  icon={Users}\n                  trend={`${displayStats.newStudentsThisMonth || 0} new this month`}\n                  delay={0}\n                />\n                <StatCard\n                  title=\"Monthly Revenue\"\n                  value={formatCurrency(displayStats.paymentsThisMonth)}\n                  icon={DollarSign}\n                  trend={`Yearly: ${formatCurrency(displayStats.yearlyRevenue || 0)}`}\n                  delay={100}\n                />\n                <StatCard\n                  title=\"Academic Progress\"\n                  value={displayStats.topicsCompleted}\n                  icon={BookOpen}\n                  trend={`of ${displayStats.totalTopics || 0} total topics`}\n                  delay={200}\n                />\n                <StatCard\n                  title=\"SO Centers\"\n                  value={displayStats.totalSoCenters}\n                  icon={Building}\n                  trend={`${formatCurrency(displayStats.totalWalletBalance || 0)} total balance`}\n                  delay={300}\n                />\n\n                {/* Additional Admin Metrics Row with premium effects */}\n                <StatCard\n                  title=\"Teachers\"\n                  value={displayStats.totalTeachers}\n                  icon={GraduationCap}\n                  trend={`${displayStats.totalClasses || 0} classes, ${displayStats.totalSubjects || 0} subjects`}\n                  delay={400}\n                />\n                <StatCard\n                  title=\"Attendance Rate\"\n                  value={`${displayStats.attendanceRate || 0}%`}\n                  icon={Calendar}\n                  trend={`${displayStats.studentsWithAttendance || 0} students this month`}\n                  delay={500}\n                />\n                <StatCard\n                  title=\"Exams\"\n                  value={displayStats.totalExams}\n                  icon={FileText}\n                  trend={`Avg Score: ${displayStats.averageExamScore || 0}%`}\n                  delay={600}\n                />\n                <StatCard\n                  title=\"Products\"\n                  value={displayStats.totalProducts}\n                  icon={Package}\n                  trend={`${displayStats.homeworkCompleted || 0} homework completed`}\n                  delay={700}\n                />\n              </>\n            ) : user?.role === 'agent' ? (\n              <>\n                {/* Agent Dashboard Cards with premium animations */}\n                <StatCard\n                  title=\"Product Sales\"\n                  value={displayStats.totalSales || 0}\n                  icon={ShoppingCart}\n                  trend=\"This month\"\n                  delay={0}\n                />\n                <StatCard\n                  title=\"Monthly Revenue\"\n                  value={formatCurrency(displayStats.monthlyRevenue || 0)}\n                  icon={DollarSign}\n                  trend=\"Course sales revenue\"\n                  delay={100}\n                />\n                <StatCard\n                  title=\"Commission Earned\"\n                  value={formatCurrency(displayStats.totalCommission || 0)}\n                  icon={TrendingUp}\n                  trend=\"Total commission earned\"\n                  delay={200}\n                />\n                <StatCard\n                  title=\"Available Balance\"\n                  value={formatCurrency(displayStats.walletBalance || 0)}\n                  icon={Wallet}\n                  trend=\"Ready for withdrawal\"\n                  delay={300}\n                />\n              </>\n            ) : (\n              <>\n                {/* Default Cards for other roles with premium animations */}\n                <StatCard\n                  title=\"Total Students\"\n                  value={displayStats.totalStudents}\n                  icon={Users}\n                  trend=\"Active students\"\n                  delay={0}\n                />\n                <StatCard\n                  title=\"Monthly Payments\"\n                  value={formatCurrency(displayStats.paymentsThisMonth)}\n                  icon={DollarSign}\n                  trend=\"This month\"\n                  delay={100}\n                />\n                <StatCard\n                  title=\"Topics Completed\"\n                  value={displayStats.topicsCompleted}\n                  icon={BookOpen}\n                  trend=\"Learning progress\"\n                  delay={200}\n                />\n                <StatCard\n                  title=\"System Balance\"\n                  value={formatCurrency(displayStats.walletBalance || 0)}\n                  icon={Wallet}\n                  trend=\"Total system funds\"\n                  delay={300}\n                />\n              </>\n            )}\n          </div>\n        )}\n\n        {/* SO Center specific dashboard */}\n        {user?.role === 'so_center' && (\n          <SOCenterDashboard />\n        )}\n\n        {/* Admin specific content with premium animations */}\n        {!isLoading && user?.role === 'admin' && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 animate-fade-in-up\">\n            {/* Recent Activity with premium effects */}\n            <Card className=\"group relative overflow-hidden bg-gradient-to-br from-white to-blue-50/30 border-0 shadow-lg hover:shadow-2xl transition-all duration-500 hover:-translate-y-1\">\n              <div className=\"absolute inset-0 bg-gradient-to-r from-blue-400/5 via-purple-400/5 to-green-400/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n              <CardHeader className=\"relative z-10\">\n                <CardTitle className=\"flex items-center space-x-2 text-xl font-bold bg-gradient-to-r from-gray-900 to-blue-700 bg-clip-text text-transparent\">\n                  <div className=\"w-3 h-3 bg-gradient-to-r from-green-400 to-blue-500 rounded-full animate-pulse\"></div>\n                  <span>Recent Activity</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"relative z-10\">\n                <div className=\"space-y-4\">\n                  {[\n                    { color: 'green', title: 'New SO Center registered', time: '2 hours ago', delay: '0ms' },\n                    { color: 'blue', title: 'System backup completed', time: '4 hours ago', delay: '100ms' },\n                    { color: 'yellow', title: 'Monthly report generated', time: '1 day ago', delay: '200ms' }\n                  ].map((item, index) => (\n                    <div key={index} className=\"flex items-center space-x-3 p-3 rounded-lg hover:bg-white/50 transition-all duration-300 animate-slide-in-right\" style={{ animationDelay: item.delay }}>\n                      <div className={`w-3 h-3 bg-${item.color}-500 rounded-full animate-pulse shadow-lg`}></div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-semibold text-gray-800\">{item.title}</p>\n                        <p className=\"text-xs text-gray-500\">{item.time}</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions with premium effects */}\n            <Card className=\"group relative overflow-hidden bg-gradient-to-br from-white to-purple-50/30 border-0 shadow-lg hover:shadow-2xl transition-all duration-500 hover:-translate-y-1\">\n              <div className=\"absolute inset-0 bg-gradient-to-r from-purple-400/5 via-pink-400/5 to-blue-400/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500\"></div>\n              <CardHeader className=\"relative z-10\">\n                <CardTitle className=\"flex items-center space-x-2 text-xl font-bold bg-gradient-to-r from-gray-900 to-purple-700 bg-clip-text text-transparent\">\n                  <div className=\"w-3 h-3 bg-gradient-to-r from-purple-400 to-pink-500 rounded-full animate-pulse\"></div>\n                  <span>Admin Actions</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"relative z-10\">\n                <div className=\"space-y-3\">\n                  {[\n                    { href: '/admin/users', icon: Users, title: 'Manage Users', subtitle: 'Add or edit user accounts', color: 'blue', delay: '0ms' },\n                    { href: '/admin/so-centers', icon: Building, title: 'SO Centers', subtitle: 'Manage satellite offices', color: 'green', delay: '100ms' },\n                    { href: '/admin/academic-dashboard', icon: BarChart3, title: 'Academic Dashboard', subtitle: 'View academic progress', color: 'purple', delay: '200ms' }\n                  ].map((action, index) => (\n                    <Link key={index} href={action.href}>\n                      <button className=\"w-full p-4 text-left border-0 rounded-xl bg-gradient-to-r from-white to-gray-50 hover:from-gray-50 hover:to-white shadow-md hover:shadow-xl transition-all duration-300 transform hover:scale-105 hover:-translate-y-1 animate-slide-in-left group\" style={{ animationDelay: action.delay }}>\n                        <div className=\"flex items-center space-x-4\">\n                          <div className={`w-12 h-12 bg-gradient-to-br from-${action.color}-400 to-${action.color}-600 rounded-xl flex items-center justify-center transform group-hover:rotate-6 transition-transform duration-300 shadow-lg`}>\n                            <action.icon size={24} className=\"text-white\" />\n                          </div>\n                          <div className=\"flex-1\">\n                            <p className=\"font-bold text-gray-900 group-hover:text-transparent group-hover:bg-clip-text group-hover:bg-gradient-to-r group-hover:from-blue-600 group-hover:to-purple-600 transition-all duration-300\">{action.title}</p>\n                            <p className=\"text-sm text-gray-600 group-hover:text-gray-700 transition-colors duration-300\">{action.subtitle}</p>\n                          </div>\n                          <div className=\"opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                            <div className=\"w-6 h-6 bg-gradient-to-r from-blue-400 to-purple-500 rounded-full flex items-center justify-center\">\n                              <div className=\"w-2 h-2 bg-white rounded-full\"></div>\n                            </div>\n                          </div>\n                        </div>\n                      </button>\n                    </Link>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":28749},"client/src/pages/Login.tsx":{"content":"import { LoginForm } from '@/components/auth/LoginForm';\n\nexport default function Login() {\n  return <LoginForm />;\n}\n","size_bytes":118},"client/src/pages/Payments.tsx":{"content":"import { DashboardLayout } from '@/components/layout/DashboardLayout';\nimport { PaymentForm } from '@/components/payments/PaymentForm';\n\nexport default function Payments() {\n  return (\n    <DashboardLayout\n      title=\"Payment Management\"\n      subtitle=\"Record and track student fee payments\"\n    >\n      <PaymentForm />\n    </DashboardLayout>\n  );\n}\n","size_bytes":352},"client/src/pages/Progress.tsx":{"content":"import { useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport { EnhancedProgressTracker } from '@/components/progress/EnhancedProgressTracker';\nimport { useAuth } from '@/hooks/useAuth';\n\nexport default function Progress() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    // Only allow SO Center users to access progress tracking\n    if (user && user.role !== 'so_center') {\n      setLocation('/dashboard');\n      return;\n    }\n  }, [user, setLocation]);\n\n  // If user is not SO Center, don't render the component\n  if (user && user.role !== 'so_center') {\n    return null;\n  }\n\n  return (\n    <DashboardLayout>\n      <EnhancedProgressTracker />\n    </DashboardLayout>\n  );\n}","size_bytes":809},"client/src/pages/PublicProgress.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { useRoute } from 'wouter';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { GraduationCap, CheckCircle, Clock, MessageSquare, Shield, Calendar, Award, Target, BookOpen, Users, TrendingUp } from 'lucide-react';\nimport React, { useState, useEffect } from 'react';\n\nexport default function PublicProgress() {\n  const [, params] = useRoute('/progress/:qrCode');\n  const qrCode = params?.qrCode;\n\n  const { data, isLoading, error } = useQuery({\n    queryKey: ['/api/public/progress', qrCode],\n    queryFn: async () => {\n      const response = await fetch(`/api/public/progress/${qrCode}`);\n      if (!response.ok) {\n        throw new Error('Student not found');\n      }\n      return response.json();\n    },\n    enabled: !!qrCode,\n  });\n\n  // State for dropdown selections\n  const [selectedSubject, setSelectedSubject] = useState('');\n  const [selectedExam, setSelectedExam] = useState('');\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading student progress...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !data) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center\">\n        <Card className=\"w-full max-w-md mx-4\">\n          <CardContent className=\"pt-6 text-center\">\n            <div className=\"text-red-500 mb-4\">\n              <CheckCircle size={48} className=\"mx-auto\" />\n            </div>\n            <h1 className=\"text-xl font-bold text-gray-900 mb-2\">Progress Not Found</h1>\n            <p className=\"text-gray-600\">\n              The QR code you scanned is invalid or the student record doesn't exist.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const { student, progressStats, subjectProgress = [], attendance, examResults = [] } = data;\n  const getInitials = (name: string) => name.split(' ').map(n => n[0]).join('').toUpperCase();\n\n  // Use the calculated stats from the backend\n  const { totalTopics, completedTopics, pendingTopics, overallProgress } = progressStats || {\n    totalTopics: 0,\n    completedTopics: 0,\n    pendingTopics: 0,\n    overallProgress: 0\n  };\n\n  // Helper to get pending topics for a selected subject\n  const getPendingTopicsForSubject = () => {\n    if (!selectedSubject) return [];\n    const subject = subjectProgress.find(subj => subj.name === selectedSubject);\n    return subject?.pendingTopics || [];\n  };\n\n  // Helper to get details of the selected exam\n  const getSelectedExamResult = () => {\n    return examResults.find(exam => exam.examTitle === selectedExam);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-emerald-100 p-4\">\n      <div className=\"max-w-6xl mx-auto space-y-6\">\n        {/* Student Header */}\n        <Card className=\"overflow-hidden shadow-xl border-0\">\n          <div className=\"bg-gradient-to-r from-green-600 to-emerald-600 text-white p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-16 h-16 bg-white/20 rounded-full flex items-center justify-center text-2xl font-bold\">\n                  {getInitials(student.name)}\n                </div>\n                <div>\n                  <h1 className=\"text-3xl font-bold\">{student.name}</h1>\n                  <p className=\"text-green-100\">\n                    Student ID: {student.studentId} • Class: {student.className}\n                  </p>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <Shield className=\"w-8 h-8 mb-2\" />\n                <p className=\"text-sm text-green-100\">Navanidhi Academy</p>\n              </div>\n            </div>\n          </div>\n        </Card>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Left Column */}\n          <div className=\"space-y-6\">\n            {/* Attendance Section */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-5 w-5 text-green-600\" />\n                  Attendance Record\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Last Month Attendance */}\n                <div className=\"p-4 bg-blue-50 rounded-lg\">\n                  <h3 className=\"font-semibold text-blue-800 mb-2\">Last Month ({attendance?.previousMonth?.monthName})</h3>\n                  <div className=\"flex justify-between items-center\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-blue-600\">{attendance?.previousMonth?.present || 0}</div>\n                      <div className=\"text-sm text-blue-600\">Present Days</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-red-600\">{attendance?.previousMonth?.absent || 0}</div>\n                      <div className=\"text-sm text-red-600\">Absent Days</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-gray-600\">{attendance?.previousMonth?.total || 0}</div>\n                      <div className=\"text-sm text-gray-600\">Total Days</div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Current Month Attendance */}\n                <div className=\"p-4 bg-green-50 rounded-lg\">\n                  <h3 className=\"font-semibold text-green-800 mb-2\">This Month ({attendance?.currentMonth?.monthName})</h3>\n                  <div className=\"flex justify-between items-center\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-600\">{attendance?.currentMonth?.present || 0}</div>\n                      <div className=\"text-sm text-green-600\">Present Days</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-red-600\">{attendance?.currentMonth?.absent || 0}</div>\n                      <div className=\"text-sm text-red-600\">Absent Days</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-gray-600\">{attendance?.currentMonth?.total || 0}</div>\n                      <div className=\"text-sm text-gray-600\">Total Days</div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Topics Progress Section */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <BookOpen className=\"h-5 w-5 text-green-600\" />\n                  Topics Progress\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Overall Stats */}\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div className=\"text-center p-3 bg-green-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-green-600\">{totalTopics}</div>\n                    <div className=\"text-sm text-green-600\">Total Topics</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-blue-600\">{completedTopics}</div>\n                    <div className=\"text-sm text-blue-600\">Completed</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-orange-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-orange-600\">{pendingTopics}</div>\n                    <div className=\"text-sm text-orange-600\">Pending</div>\n                  </div>\n                </div>\n\n                {/* Pending Topics Dropdown */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    View Pending Topics by Subject:\n                  </label>\n                  <select \n                    value={selectedSubject}\n                    onChange={(e) => setSelectedSubject(e.target.value)}\n                    className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                  >\n                    <option value=\"\">Select Subject</option>\n                    {subjectProgress.map((subject) => (\n                      <option key={subject.id} value={subject.name}>\n                        {subject.name} ({subject.pendingTopics?.length || 0} pending)\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                {/* Show Pending Topics */}\n                {selectedSubject && (\n                  <div className=\"mt-4\">\n                    <h4 className=\"font-medium text-gray-800 mb-2\">Pending Topics in {selectedSubject}:</h4>\n                    <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                      {getPendingTopicsForSubject().map((topic, index) => (\n                        <div key={index} className=\"p-3 bg-orange-50 rounded-md border-l-4 border-orange-400\">\n                          <div className=\"font-medium text-orange-800\">{topic.name}</div>\n                          <div className=\"text-sm text-orange-600\">Chapter: {topic.chapterName}</div>\n                          {topic.isImportant && (\n                            <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800 mt-1\">\n                              Important\n                            </span>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Column */}\n          <div className=\"space-y-6\">\n            {/* Exam Results Section */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Award className=\"h-5 w-5 text-green-600\" />\n                  Exam Results\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Exam Selection Dropdown */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Select Exam:\n                  </label>\n                  <select \n                    value={selectedExam}\n                    onChange={(e) => setSelectedExam(e.target.value)}\n                    className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-green-500 focus:border-green-500\"\n                  >\n                    <option value=\"\">Select Exam</option>\n                    {examResults.map((exam, index) => (\n                      <option key={index} value={exam.examTitle}>\n                        {exam.examTitle} - {exam.percentage}%\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                {/* Show Selected Exam Details */}\n                {selectedExam && getSelectedExamResult() && (\n                  <div className=\"p-4 bg-blue-50 rounded-lg\">\n                    <h4 className=\"font-semibold text-blue-800 mb-3\">{getSelectedExamResult().examTitle}</h4>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"text-center p-3 bg-white rounded-md\">\n                        <div className=\"text-2xl font-bold text-blue-600\">\n                          {getSelectedExamResult().marksObtained}\n                        </div>\n                        <div className=\"text-sm text-blue-600\">Marks Obtained</div>\n                      </div>\n                      <div className=\"text-center p-3 bg-white rounded-md\">\n                        <div className=\"text-2xl font-bold text-gray-600\">\n                          {getSelectedExamResult().totalMarks}\n                        </div>\n                        <div className=\"text-sm text-gray-600\">Total Marks</div>\n                      </div>\n                    </div>\n                    <div className=\"mt-3 p-3 bg-white rounded-md text-center\">\n                      <div className=\"text-3xl font-bold text-green-600\">\n                        {getSelectedExamResult().percentage}%\n                      </div>\n                      <div className=\"text-sm text-green-600\">Percentage</div>\n                    </div>\n                    {getSelectedExamResult().examDate && (\n                      <div className=\"mt-2 text-sm text-gray-600\">\n                        Exam Date: {new Date(getSelectedExamResult().examDate).toLocaleDateString()}\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {/* All Exam Results List */}\n                <div>\n                  <h4 className=\"font-medium text-gray-800 mb-2\">All Exam Results:</h4>\n                  <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                    {examResults.length === 0 ? (\n                      <div className=\"text-center py-4 text-gray-500\">\n                        No exam results available\n                      </div>\n                    ) : (\n                      examResults.map((exam, index) => (\n                        <div key={index} className=\"p-3 bg-gray-50 rounded-md border\">\n                          <div className=\"flex justify-between items-center\">\n                            <div>\n                              <div className=\"font-medium text-gray-800\">{exam.examTitle}</div>\n                              <div className=\"text-sm text-gray-600\">\n                                {exam.marksObtained}/{exam.totalMarks} marks\n                              </div>\n                              {exam.examDate && (\n                                <div className=\"text-xs text-gray-500\">\n                                  {new Date(exam.examDate).toLocaleDateString()}\n                                </div>\n                              )}\n                            </div>\n                            <div className=\"text-right\">\n                              <div className={`text-lg font-bold ${\n                                exam.percentage >= 80 ? 'text-green-600' :\n                                exam.percentage >= 60 ? 'text-blue-600' :\n                                exam.percentage >= 35 ? 'text-orange-600' : 'text-red-600'\n                              }`}>\n                                {exam.percentage}%\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      ))\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Footer */}\n        <Card className=\"text-center p-6 bg-gradient-to-r from-green-50 to-emerald-50 border-green-200\">\n          <div className=\"flex items-center justify-center space-x-2 mb-2\">\n            <Shield className=\"w-5 h-5 text-green-600\" />\n            <span className=\"font-semibold text-green-800\">Navanidhi Academy</span>\n          </div>\n          <p className=\"text-sm text-green-700\">\n            Empowering students through quality education and continuous progress tracking\n          </p>\n          <div className=\"mt-4 flex items-center justify-center space-x-4 text-xs text-green-600\">\n            <span>📊 Real-time Progress</span>\n            <span>🏆 Performance Tracking</span>\n            <span>📱 Mobile Friendly</span>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":16304},"client/src/pages/Students.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport { StudentTable } from '@/components/students/StudentTable';\nimport { useAuth } from '@/hooks/useAuth';\n\nexport default function Students() {\n  const { user } = useAuth();\n\n  const { data: students = [], isLoading } = useQuery({\n    queryKey: ['/api/students', user?.id],\n    queryFn: async () => {\n      console.log('🔍 Fetching students for user:', user?.id, 'email:', user?.email, 'role:', user?.role);\n      const response = await fetch('/api/students', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n      console.log('📊 Response status:', response.status);\n      if (!response.ok) {\n        throw new Error('Failed to fetch students');\n      }\n      const data = await response.json();\n      console.log('📋 Students found for this SO Center:', data.length);\n      console.log('📋 Raw API response:', data);\n      return Array.isArray(data) ? data : [];\n    },\n    enabled: !!user,\n    refetchOnWindowFocus: false,\n  });\n\n  return (\n    <DashboardLayout\n      title=\"Students\"\n      subtitle=\"Manage student registrations and information\"\n    >\n      <StudentTable students={students} isLoading={isLoading} />\n    </DashboardLayout>\n  );\n}\n","size_bytes":1348},"client/src/pages/Wallet.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Wallet as WalletIcon, DollarSign, TrendingUp, ArrowUpRight, ArrowDownLeft, CreditCard, Receipt } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\n\ninterface WalletData {\n  id: string;\n  user_id: string;\n  course_wallet_balance: string;\n  commission_wallet_balance: string;\n  total_earnings: string;\n  total_withdrawals: string;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface Transaction {\n  id: string;\n  transaction_id: string;\n  type: 'course_purchase' | 'commission_earned' | 'withdrawal_request';\n  amount: string;\n  description: string;\n  created_at: string;\n  status: string;\n}\n\nconst withdrawalFormSchema = z.object({\n  amount: z.number().min(1000, \"Minimum withdrawal amount is ₹1000\"),\n});\n\ntype WithdrawalFormData = z.infer<typeof withdrawalFormSchema>;\n\nfunction Wallet() {\n  const [showWithdrawalForm, setShowWithdrawalForm] = useState(false);\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  const form = useForm<WithdrawalFormData>({\n    resolver: zodResolver(withdrawalFormSchema),\n    defaultValues: {\n      amount: 1000,\n    },\n  });\n\n  // Fetch wallet balance\n  const { data: wallet, isLoading: isWalletLoading } = useQuery<WalletData>({\n    queryKey: ['/api/wallet/balance'],\n  });\n\n  // Fetch transaction history\n  const { data: transactions = [], isLoading: isTransactionsLoading } = useQuery<Transaction[]>({\n    queryKey: ['/api/wallet/transactions'],\n  });\n\n  // Withdrawal request mutation\n  const withdrawalMutation = useMutation({\n    mutationFn: async (data: WithdrawalFormData) => {\n      const response = await apiRequest('POST', '/api/wallet/withdraw', data);\n      return response;\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Withdrawal Request Submitted\",\n        description: \"Your withdrawal request has been submitted for admin approval.\",\n      });\n      form.reset();\n      setShowWithdrawalForm(false);\n      queryClient.invalidateQueries({ queryKey: ['/api/wallet/balance'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/wallet/transactions'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Withdrawal Failed\",\n        description: error.message || \"Failed to submit withdrawal request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleWithdrawal = (data: WithdrawalFormData) => {\n    withdrawalMutation.mutate(data);\n  };\n\n  const formatCurrency = (amount: string | number) => {\n    const num = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return `₹${num.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getTransactionIcon = (type: string) => {\n    switch (type) {\n      case 'course_purchase':\n        return <ArrowUpRight className=\"h-4 w-4 text-blue-600\" />;\n      case 'commission_earned':\n        return <TrendingUp className=\"h-4 w-4 text-green-600\" />;\n      case 'withdrawal_request':\n        return <ArrowDownLeft className=\"h-4 w-4 text-orange-600\" />;\n      default:\n        return <CreditCard className=\"h-4 w-4 text-gray-600\" />;\n    }\n  };\n\n  const getTransactionColor = (type: string) => {\n    switch (type) {\n      case 'course_purchase':\n        return 'bg-blue-50 border-blue-200';\n      case 'commission_earned':\n        return 'bg-green-50 border-green-200';\n      case 'withdrawal_request':\n        return 'bg-orange-50 border-orange-200';\n      default:\n        return 'bg-gray-50 border-gray-200';\n    }\n  };\n\n  if (isWalletLoading) {\n    return (\n      <DashboardLayout title=\"Wallet\" subtitle=\"Manage your earnings and withdrawals\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          {Array.from({ length: 3 }).map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardHeader>\n                <div className=\"h-6 bg-gray-200 rounded\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-8 bg-gray-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout title=\"Wallet\" subtitle=\"Manage your earnings and withdrawals\">\n      <div className=\"space-y-6\">\n        {/* Wallet Balance Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card className=\"border-l-4 border-l-blue-500\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Course Wallet</CardTitle>\n              <WalletIcon className=\"h-4 w-4 text-blue-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-700\">\n                {wallet ? formatCurrency(wallet.course_wallet_balance) : '₹0.00'}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Total course sales amount</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-l-4 border-l-green-500\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Commission Wallet</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-green-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-700\">\n                {wallet ? formatCurrency(wallet.commission_wallet_balance) : '₹0.00'}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Available for withdrawal</p>\n              <Button \n                className=\"mt-2 w-full bg-green-600 hover:bg-green-700\"\n                onClick={() => setShowWithdrawalForm(true)}\n                disabled={!wallet || parseFloat(wallet.commission_wallet_balance) < 1000}\n              >\n                Request Withdrawal\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-l-4 border-l-purple-500\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Earnings</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-purple-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-700\">\n                {wallet ? formatCurrency(wallet.total_earnings) : '₹0.00'}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                Lifetime earnings • Withdrawn: {wallet ? formatCurrency(wallet.total_withdrawals) : '₹0.00'}\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Transaction History */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Receipt className=\"h-5 w-5\" />\n              Transaction History\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isTransactionsLoading ? (\n              <div className=\"space-y-3\">\n                {Array.from({ length: 5 }).map((_, i) => (\n                  <div key={i} className=\"flex items-center gap-3 p-3 border rounded-lg animate-pulse\">\n                    <div className=\"w-8 h-8 bg-gray-200 rounded-full\"></div>\n                    <div className=\"flex-1\">\n                      <div className=\"h-4 bg-gray-200 rounded w-1/3 mb-1\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                    </div>\n                    <div className=\"h-6 bg-gray-200 rounded w-20\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : transactions.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Receipt className=\"h-12 w-12 text-gray-300 mx-auto mb-3\" />\n                <p className=\"text-gray-600\">No transactions yet</p>\n                <p className=\"text-sm text-gray-500\">Your transaction history will appear here</p>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {transactions.map((transaction) => (\n                  <div \n                    key={transaction.id} \n                    className={`flex items-center gap-3 p-3 border rounded-lg ${getTransactionColor(transaction.type)}`}\n                  >\n                    <div className=\"flex items-center justify-center w-8 h-8 rounded-full bg-white\">\n                      {getTransactionIcon(transaction.type)}\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-sm\">{transaction.description}</div>\n                      <div className=\"text-xs text-gray-600\">\n                        {formatDate(transaction.created_at)} • ID: {transaction.transaction_id}\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-bold\">\n                        {formatCurrency(transaction.amount)}\n                      </div>\n                      <Badge variant={transaction.status === 'completed' ? 'default' : 'secondary'} className=\"text-xs\">\n                        {transaction.status}\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Withdrawal Form Dialog */}\n      <Dialog open={showWithdrawalForm} onOpenChange={setShowWithdrawalForm}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Request Withdrawal</DialogTitle>\n          </DialogHeader>\n          \n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleWithdrawal)} className=\"space-y-4\">\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4\">\n                <div className=\"text-sm text-blue-800\">\n                  <div className=\"font-medium\">Available Balance</div>\n                  <div className=\"text-lg font-bold text-blue-900\">\n                    {wallet ? formatCurrency(wallet.commission_wallet_balance) : '₹0.00'}\n                  </div>\n                </div>\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"amount\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Withdrawal Amount</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        placeholder=\"Enter amount (min ₹1000)\" \n                        {...field}\n                        onChange={(e) => field.onChange(parseFloat(e.target.value))}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"text-xs text-gray-600 bg-yellow-50 border border-yellow-200 rounded p-2\">\n                Note: Withdrawal requests require admin approval and will be processed within 2-3 business days.\n              </div>\n\n              <div className=\"flex gap-3 pt-4\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setShowWithdrawalForm(false)}\n                  className=\"flex-1\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\"\n                  disabled={withdrawalMutation.isPending}\n                  className=\"flex-1 bg-green-600 hover:bg-green-700\"\n                >\n                  {withdrawalMutation.isPending ? 'Processing...' : 'Submit Request'}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </DashboardLayout>\n  );\n}\n\nexport default Wallet;","size_bytes":13110},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/admin/AddChapterModal.tsx":{"content":"import { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { z } from 'zod';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n\nconst addChapterSchema = z.object({\n  name: z.string().min(1, 'Chapter name is required'),\n  classId: z.string().min(1, 'Class selection is required'),\n  subjectId: z.string().min(1, 'Subject selection is required'),\n});\n\ntype AddChapterFormData = z.infer<typeof addChapterSchema>;\n\ninterface AddChapterModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function AddChapterModal({ isOpen, onClose }: AddChapterModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch real classes and subjects data from API\n  const { data: classes = [] } = useQuery({\n    queryKey: ['/api/classes'],\n  });\n\n  const { data: allSubjects = [] } = useQuery({\n    queryKey: ['/api/admin/subjects'],\n  });\n\n  const form = useForm<AddChapterFormData>({\n    resolver: zodResolver(addChapterSchema),\n    defaultValues: {\n      name: '',\n      classId: '',\n      subjectId: '',\n    },\n  });\n\n  const selectedClassId = form.watch('classId');\n  \n  // Filter subjects based on selected class\n  const filteredSubjects = (allSubjects as any[]).filter((subject: any) => \n    selectedClassId ? subject.classId === selectedClassId : false\n  );\n\n  const handleClassChange = (value: string) => {\n    form.setValue('classId', value);\n    form.setValue('subjectId', ''); // Reset subject when class changes\n  };\n\n  const createChapterMutation = useMutation({\n    mutationFn: async (data: AddChapterFormData) => {\n      return apiRequest('POST', '/api/admin/chapters', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Chapter Created',\n        description: 'Chapter has been successfully created.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/chapters'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/chapters'] });\n      form.reset();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to create chapter. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: AddChapterFormData) => {\n    createChapterMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle>Add New Chapter</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Chapter Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"e.g. Quadratic Equations, Light - Reflection and Refraction\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"classId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Class</FormLabel>\n                  <FormControl>\n                    <Select onValueChange={handleClassChange} value={field.value}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select class\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {classes.map((cls: any) => (\n                          <SelectItem key={cls.id} value={cls.id}>\n                            {cls.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"subjectId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Subject</FormLabel>\n                  <FormControl>\n                    <Select onValueChange={field.onChange} value={field.value} disabled={!selectedClassId}>\n                      <SelectTrigger>\n                        <SelectValue placeholder={selectedClassId ? \"Select subject\" : \"Select class first\"} />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {filteredSubjects.map((subject) => (\n                          <SelectItem key={subject.id} value={subject.id}>\n                            {subject.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createChapterMutation.isPending}\n                className=\"bg-primary text-white hover:bg-blue-700\"\n              >\n                {createChapterMutation.isPending ? 'Creating...' : 'Create Chapter'}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6181},"client/src/components/admin/AddClassModal.tsx":{"content":"import { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { z } from 'zod';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nconst addClassSchema = z.object({\n  name: z.string().min(1, 'Class name is required'),\n});\n\ntype AddClassFormData = z.infer<typeof addClassSchema>;\n\ninterface AddClassModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function AddClassModal({ isOpen, onClose }: AddClassModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<AddClassFormData>({\n    resolver: zodResolver(addClassSchema),\n    defaultValues: {\n      name: '',\n    },\n  });\n\n  const createClassMutation = useMutation({\n    mutationFn: async (data: AddClassFormData) => {\n      return apiRequest('POST', '/api/admin/classes', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Class Created',\n        description: 'Class has been successfully created.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/classes'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/classes'] });\n      form.reset();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to create class. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: AddClassFormData) => {\n    createClassMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle>Add New Class</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Class Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"e.g. Class 10, Navodaya, POLYCET\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createClassMutation.isPending}\n                className=\"bg-primary text-white hover:bg-blue-700\"\n              >\n                {createClassMutation.isPending ? 'Creating...' : 'Create Class'}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":3251},"client/src/components/admin/AddSoCenterModal.tsx":{"content":"import { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { z } from 'zod';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\n// Removed Checkbox import - now using dynamic inputs instead of checkboxes\nimport { Label } from '@/components/ui/label';\nimport { CreditCard } from 'lucide-react';\nimport React, { useState, useEffect, useCallback } from 'react';\n\nconst addSoCenterSchema = z.object({\n  name: z.string().min(1, 'Center name is required'),\n  email: z.string().email('Valid email address is required'),\n  address: z.string().min(1, 'Complete address is required'),\n  villageId: z.string().min(1, 'Village selection is required'),\n  phone: z.string().min(10, 'Valid phone number required'),\n  managerId: z.string().optional().transform(val => val === 'none' ? undefined : val),\n  ownerName: z.string().min(1, 'Owner name is required'),\n  ownerLastName: z.string().min(1, 'Owner last name is required'),\n  ownerPhone: z.string().min(10, 'Owner phone number is required'),\n  landmarks: z.string().optional(),\n  roomSize: z.string().min(1, 'Room size is required'),\n  electricBillAccountNumber: z.string().min(1, 'Electric bill account number is required'),\n  internetServiceProvider: z.string().min(1, 'Internet service provider is required'),\n  internetBillAccountNumber: z.string().min(1, 'Internet bill account number is required'),\n  rentAmount: z.string().min(1, 'Rent amount is required'),\n  rentalAdvance: z.string().min(1, 'Rental advance is required'),\n  dateOfHouseTaken: z.string().min(1, 'Date of house taken is required'),\n  monthlyRentDate: z.string().min(1, 'Monthly rent date is required'),\n\n  monthlyInternetDate: z.string().min(1, 'Monthly internet date is required'),\n  capacity: z.string().min(1, 'Center capacity is required'),\n  facilities: z.array(z.string()).min(1, 'At least one facility must be added'),\n  admissionFeeApplicable: z.string().min(1, 'Admission fee applicability must be selected'),\n});\n\ntype AddSoCenterFormData = z.infer<typeof addSoCenterSchema>;\n\ninterface AddSoCenterModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function AddSoCenterModal({ isOpen, onClose }: AddSoCenterModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedState, setSelectedState] = useState('');\n  const [selectedDistrict, setSelectedDistrict] = useState('');\n  const [selectedMandal, setSelectedMandal] = useState('');\n  // Remove selectedFacilities state - now using dynamic facilities array\n  const [generatedCenterId, setGeneratedCenterId] = useState('');\n  const [nearbySchools, setNearbySchools] = useState<{schoolName: string; studentStrength: string; schoolType: string}[]>([]);\n  const [nearbyTuitions, setNearbyTuitions] = useState<{tuitionName: string; studentStrength: string}[]>([]);\n  const [facilities, setFacilities] = useState([{facilityName: ''}]);\n  const [equipment, setEquipment] = useState([{itemName: '', serialNumber: '', warrantyYears: '', purchaseDate: '', brandName: ''}]);\n\n  // Generate next Center ID when modal opens - PRODUCTION READY\n  const { data: nextCenterIdResponse, isLoading: centerIdLoading } = useQuery({\n     queryKey: ['/api/admin/so-centers/next-id'],\n        queryFn: async () => {\n      const response = await apiRequest('GET', '/api/admin/so-centers/next-id');\n      console.log('🔧 Center ID API Response:', response);\n      const data = await response.json(); // <--- This is the fix\n    return data;\n    } ,\n    enabled: isOpen,\n });\n\n  // Debug the response structure\n  console.log('🔧 nextCenterIdResponse:', nextCenterIdResponse);\n  \n  const nextCenterId = nextCenterIdResponse?.centerId || nextCenterIdResponse?.centerCode || nextCenterIdResponse?.id || '';\n\n\n\n  // Fetch unassigned managers only\n  const { data: availableManagers = [], isLoading: managersLoading } = useQuery<any[]>({\n    queryKey: ['/api/admin/users/unassigned-managers'],\n    enabled: isOpen,\n  });\n\n  // Fetch address hierarchy data from database\n  const { data: states = [], isLoading: statesLoading } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/states'],\n    enabled: isOpen,\n  });\n\n  const { data: districts = [], isLoading: districtsLoading } = useQuery<any[]>({\n  queryKey: ['/api/admin/addresses/districts', selectedState],\n  queryFn: async () => {\n    if (!selectedState) return [];\n    const response = await apiRequest('GET', `/api/admin/addresses/districts/${selectedState}`);\n    const data = await response.json(); // <-- The missing step\n    return data;\n  },\n  enabled: !!selectedState && isOpen,\n});\n\n  const { data: mandals = [], isLoading: mandalsLoading } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/mandals', selectedDistrict],\n    queryFn: async () => {\n      if (!selectedDistrict) return [];\n      const response = await apiRequest('GET', `/api/admin/addresses/mandals/${selectedDistrict}`);\n      const data = await response.json(); // <-- The fix is here\n      return data;\n    },\n    enabled: !!selectedDistrict && isOpen,\n  });\n\n  const { data: villages = [], isLoading: villagesLoading } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/villages', selectedMandal],\n    queryFn: async () => {\n      if (!selectedMandal) return [];\n      const response = await apiRequest('GET', `/api/admin/addresses/villages/${selectedMandal}`);\n      const data = await response.json(); // <-- The fix is here\n      return data;\n    },\n    enabled: !!selectedMandal && isOpen,\n  });\n\n  const form = useForm<AddSoCenterFormData>({\n    resolver: zodResolver(addSoCenterSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n      address: '',\n      villageId: '',\n      phone: '',\n      managerId: 'none',\n      ownerName: '',\n      ownerLastName: '',\n      ownerPhone: '',\n      landmarks: '',\n      roomSize: '',\n      electricBillAccountNumber: '',\n      internetServiceProvider: '',\n      internetBillAccountNumber: '',\n      rentAmount: '',\n      rentalAdvance: '',\n      dateOfHouseTaken: '',\n      monthlyRentDate: '',\n      monthlyInternetDate: '',\n      capacity: '',\n      facilities: [],\n      admissionFeeApplicable: 'applicable',\n    },\n  });\n\n  // Auto-fill email when center ID is generated - stabilized with useCallback\n  useEffect(() => {\n    if (nextCenterId) {\n      const autoEmail = `${nextCenterId.toLowerCase()}@navanidhi.org`;\n      form.setValue('email', autoEmail);\n    }\n  }, [nextCenterId]); // Removed 'form' from dependencies to prevent infinite loop\n\n  // Remove the static facilities array - now using dynamic input\n\n  // Handle address cascade changes - wrapped in useCallback for stability\n  const handleStateChange = useCallback((stateId: string) => {\n    setSelectedState(stateId);\n    setSelectedDistrict('');\n    setSelectedMandal('');\n    form.setValue('villageId', '');\n  }, [form]);\n\n  const handleDistrictChange = useCallback((districtId: string) => {\n    setSelectedDistrict(districtId);\n    setSelectedMandal('');\n    form.setValue('villageId', '');\n  }, [form]);\n\n  const handleMandalChange = useCallback((mandalId: string) => {\n    setSelectedMandal(mandalId);\n    form.setValue('villageId', '');\n  }, [form]);\n\n  // Remove old facility toggle function - now using dynamic input\n\n  const createSoCenterMutation = useMutation({\n  mutationFn: useCallback(async (data: AddSoCenterFormData) => {\n    const processedData = {\n      ...data,\n      centerId: nextCenterId,\n      password: '12345678', // Default password as requested\n      rentAmount: parseFloat(data.rentAmount),\n      rentalAdvance: parseFloat(data.rentalAdvance),\n      monthlyRentDate: parseInt(data.monthlyRentDate),\n      electricBillAccountNumber: data.electricBillAccountNumber,\n      monthlyInternetDate: parseInt(data.monthlyInternetDate),\n      internetServiceProvider: data.internetServiceProvider,\n      roomSize: data.roomSize,\n      capacity: parseInt(data.capacity),\n      facilities: facilities.map(f => f.facilityName).filter(name => name && name.trim() !== ''),\n      nearbySchools: nearbySchools,\n      nearbyTuitions: nearbyTuitions,\n      equipment: equipment.filter(e => e.itemName.trim() !== '' && e.serialNumber.trim() !== ''),\n      admissionFeeApplicable: data.admissionFeeApplicable === 'applicable',\n      \n      // THIS IS THE FIX: Force the date into YYYY-MM-DD format\n      dateOfHouseTaken: new Date(data.dateOfHouseTaken).toISOString().split('T')[0],\n    };\n    return apiRequest('POST', '/api/admin/so-centers', processedData);\n  }, [nextCenterId, facilities, nearbySchools, nearbyTuitions, equipment]),\n  onSuccess: useCallback(() => {\n    toast({\n      title: 'SO Center Created',\n      description: 'SO Center has been successfully created.',\n    });\n    queryClient.invalidateQueries({ queryKey: ['/api/so-centers'] });\n    queryClient.invalidateQueries({ queryKey: ['/api/admin/so-centers'] });\n    form.reset();\n    onClose();\n  }, [toast, queryClient, form, onClose]),\n  onError: useCallback((error: any) => {\n    toast({\n      title: 'Error',\n      description: error.message || 'Failed to create SO Center. Please try again.',\n      variant: 'destructive',\n    });\n  }, [toast]),\n});\n\n  const onSubmit = (data: AddSoCenterFormData) => {\n    createSoCenterMutation.mutate(data);\n  };\n\n  // Check if essential data is still loading\n  const isLoading = centerIdLoading || statesLoading || managersLoading;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[900px] max-h-[90vh] overflow-y-auto bg-gradient-to-br from-green-50 to-emerald-50 border-green-200\">\n        <DialogHeader className=\"border-b border-green-200 pb-4\">\n          <DialogTitle className=\"text-xl font-bold text-green-800 flex items-center gap-2\">\n            <div className=\"p-2 bg-green-100 rounded-lg\">\n              <CreditCard className=\"h-5 w-5 text-green-600\" />\n            </div>\n            Add New SO Center - Complete Registration\n          </DialogTitle>\n        </DialogHeader>\n\n        {isLoading ? (\n          <div className=\"flex items-center justify-center py-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-green-600 mr-4\"></div>\n            <span className=\"text-green-700\">Loading form data...</span>\n          </div>\n        ) : (\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Center ID Display - Compact */}\n            <div className=\"bg-gradient-to-r from-green-100 to-emerald-100 p-4 rounded-xl border border-green-200\">\n              <div className=\"text-center\">\n                <h3 className=\"text-sm font-medium text-green-700 mb-1\">Generated Center ID</h3>\n                <p className=\"text-xl font-bold text-green-800\">{nextCenterId || 'Loading...'}</p>\n                <p className=\"text-xs text-green-600 mt-1\">Login Password: 12345678</p>\n              </div>\n            </div>\n\n            {/* ADMISSION FEE POLICY - Compact */}\n            <div className=\"bg-gradient-to-r from-emerald-50 to-green-50 border border-green-200 p-4 rounded-xl\">\n              <FormField\n                control={form.control}\n                name=\"admissionFeeApplicable\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm font-semibold text-green-800 flex items-center gap-2\">\n                      <CreditCard className=\"h-4 w-4\" />\n                      Admission Fee Policy\n                    </FormLabel>\n                    <FormControl>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <SelectTrigger className=\"h-10 border-green-300 bg-white\">\n                          <SelectValue placeholder=\"Select policy\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"applicable\">\n                            <div className=\"flex items-center gap-2\">\n                              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                              <span>Applicable</span>\n                            </div>\n                          </SelectItem>\n                          <SelectItem value=\"not_applicable\">\n                            <div className=\"flex items-center gap-2\">\n                              <div className=\"w-2 h-2 bg-red-500 rounded-full\"></div>\n                              <span>Not Applicable</span>\n                            </div>\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Basic Center Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-sm font-semibold text-green-800 border-b border-green-200 pb-2\">Basic Information</h3>\n\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm text-green-700\">Center Name</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Enter center name (e.g., Navanidhi SO Center - Kukatpally)\" \n                        className=\"border-green-200 focus:border-green-400\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm text-green-700\">Center Phone</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"+91 87654 32109\" \n                          className=\"border-green-200 focus:border-green-400\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"capacity\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm text-green-700\">Student Capacity</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          placeholder=\"50\" \n                          className=\"border-green-200 focus:border-green-400\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"roomSize\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm text-green-700\">Room Size</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"e.g., 20x15 feet\" \n                        className=\"border-green-200 focus:border-green-400\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Address Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-sm font-semibold text-green-800 border-b border-green-200 pb-2\">Location Details</h3>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"state\" className=\"text-sm text-green-700\">State</Label>\n                  <Select onValueChange={handleStateChange} value={selectedState}>\n                    <SelectTrigger className=\"border-green-200 focus:border-green-400\">\n                      <SelectValue placeholder=\"Select state\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {states.map((state: any) => (\n                        <SelectItem key={state.id} value={state.id}>\n                          {state.name} ({state.code})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"district\">District</Label>\n                  <Select onValueChange={handleDistrictChange} value={selectedDistrict} disabled={!selectedState}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select district\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {districts.map((district: any) => (\n                        <SelectItem key={district.id} value={district.id}>\n                          {district.name} ({district.code})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"mandal\">Mandal</Label>\n                  <Select onValueChange={handleMandalChange} value={selectedMandal} disabled={!selectedDistrict}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select mandal\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {mandals.map((mandal: any) => (\n                        <SelectItem key={mandal.id} value={mandal.id}>\n                          {mandal.name} ({mandal.code})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"villageId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Village</FormLabel>\n                      <FormControl>\n                        <Select onValueChange={field.onChange} value={field.value} disabled={!selectedMandal}>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select village\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {villages.map((village: any) => (\n                              <SelectItem key={village.id} value={village.id}>\n                                {village.name} ({village.code})\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Complete Address</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Enter complete address with street, landmarks, building details\"\n                        className=\"resize-none\"\n                        rows={3}\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"landmarks\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Landmarks</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Nearby reference points\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Property Owner Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Property Details</h3>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"ownerName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Full Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter owner first name\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"ownerLastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Last Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter owner last name\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n\n              <FormField\n                control={form.control}\n                name=\"ownerPhone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>House Owner Phone</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter owner phone number\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"rentAmount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Monthly Rent (₹)</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" placeholder=\"25000\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"rentalAdvance\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Rental Advance (₹)</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" placeholder=\"50000\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"dateOfHouseTaken\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Date of House Taken for Rent</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"monthlyRentDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Monthly Rent Date (Day of Month)</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" min=\"1\" max=\"31\" placeholder=\"5\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"electricBillAccountNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Electric Bill Account Number</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter account number\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"internetBillAccountNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Internet Bill Account Number</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter account number\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"monthlyInternetDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Monthly Internet Bill Date (Day of Month)</FormLabel>\n                      <FormControl>\n                        <Input type=\"number\" min=\"1\" max=\"31\" placeholder=\"15\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"internetServiceProvider\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Internet Service Provider</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g., Airtel, Jio, BSNL\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n            </div>\n\n            {/* Center Management */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Center Management</h3>\n\n              <FormField\n                control={form.control}\n                name=\"managerId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>SO Study Organizer</FormLabel>\n                    <FormControl>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select SO Study Organizer or assign later\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"none\">Assign Later</SelectItem>\n                          {availableManagers.map((manager: any) => (\n                            <SelectItem key={manager.id} value={manager.id}>\n                              {manager.name} ({manager.email})\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                    <p className=\"text-sm text-gray-600\">SO Study Organizer can be reassigned later if needed</p>\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Facilities */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-medium text-gray-900\">Available Facilities</h3>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setFacilities([...facilities, {facilityName: ''}])}\n                >\n                  Add Facility\n                </Button>\n              </div>\n\n              {facilities.map((facility, index) => (\n                <div key={index} className=\"flex items-center gap-4 p-4 border rounded-lg\">\n                  <div className=\"flex-1\">\n                    <Label>Facility Name</Label>\n                    <Input \n                      placeholder=\"Enter facility name (e.g., Wi-Fi, AC, Parking)\"\n                      value={facility.facilityName}\n                      onChange={(e) => {\n                        const updated = [...facilities];\n                        updated[index].facilityName = e.target.value;\n                        setFacilities(updated);\n                        // Update form value for validation - ensure no empty strings\n                        const facilityNames = updated.map(f => f.facilityName).filter(name => name && name.trim() !== '');\n                        form.setValue('facilities', facilityNames);\n                      }}\n                    />\n                  </div>\n                  {facilities.length > 1 && (\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        const updated = facilities.filter((_, i) => i !== index);\n                        setFacilities(updated);\n                        // Update form value for validation - ensure no empty strings\n                        const facilityNames = updated.map(f => f.facilityName).filter(name => name && name.trim() !== '');\n                        form.setValue('facilities', facilityNames);\n                      }}\n                    >\n                      Remove\n                    </Button>\n                  )}\n                </div>\n              ))}\n\n              {facilities.length === 0 && (\n                <div className=\"text-center py-4 text-gray-500\">\n                  Click \"Add Facility\" to add facilities available at this center\n                </div>\n              )}\n\n              {form.formState.errors.facilities && (\n                <p className=\"text-sm text-red-600 mt-2\">\n                  {form.formState.errors.facilities.message}\n                </p>\n              )}\n            </div>\n\n            {/* Equipment Management */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-medium text-gray-900\">Equipment Inventory</h3>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setEquipment([...equipment, {itemName: '', serialNumber: '', warrantyYears: '', purchaseDate: '', brandName: ''}])}\n                >\n                  Add Equipment\n                </Button>\n              </div>\n\n              {equipment.map((item, index) => (\n                <div key={index} className=\"p-4 border rounded-lg space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <h4 className=\"font-medium text-gray-700\">Equipment #{index + 1}</h4>\n                    {equipment.length > 1 && (\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => {\n                          const updated = equipment.filter((_, i) => i !== index);\n                          setEquipment(updated);\n                        }}\n                      >\n                        Remove\n                      </Button>\n                    )}\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label>Item Name</Label>\n                      <Input \n                        placeholder=\"e.g., Computer, Projector, AC\"\n                        value={item.itemName}\n                        onChange={(e) => {\n                          const updated = [...equipment];\n                          updated[index].itemName = e.target.value;\n                          setEquipment(updated);\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <Label>Serial Number</Label>\n                      <Input \n                        placeholder=\"e.g., ABC123XYZ789\"\n                        value={item.serialNumber}\n                        onChange={(e) => {\n                          const updated = [...equipment];\n                          updated[index].serialNumber = e.target.value;\n                          setEquipment(updated);\n                        }}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div>\n                      <Label>Warranty Years</Label>\n                      <Input \n                        type=\"number\"\n                        min=\"0\"\n                        max=\"10\"\n                        placeholder=\"e.g., 2\"\n                        value={item.warrantyYears}\n                        onChange={(e) => {\n                          const updated = [...equipment];\n                          updated[index].warrantyYears = e.target.value;\n                          setEquipment(updated);\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <Label>Purchase Date</Label>\n                      <Input \n                        type=\"date\"\n                        value={item.purchaseDate}\n                        onChange={(e) => {\n                          const updated = [...equipment];\n                          updated[index].purchaseDate = e.target.value;\n                          setEquipment(updated);\n                        }}\n                      />\n                    </div>\n                    <div>\n                      <Label>Brand Name</Label>\n                      <Input \n                        placeholder=\"e.g., Dell, Samsung, LG\"\n                        value={item.brandName}\n                        onChange={(e) => {\n                          const updated = [...equipment];\n                          updated[index].brandName = e.target.value;\n                          setEquipment(updated);\n                        }}\n                      />\n                    </div>\n                  </div>\n\n                  {item.purchaseDate && item.warrantyYears && (\n                    <div className=\"bg-blue-50 p-3 rounded-lg\">\n                      <p className=\"text-sm text-blue-700\">\n                        <strong>Warranty End Date:</strong> {\n                          (() => {\n                            try {\n                              const purchaseDate = new Date(item.purchaseDate);\n                              const warrantyEnd = new Date(purchaseDate);\n                              warrantyEnd.setFullYear(warrantyEnd.getFullYear() + parseInt(item.warrantyYears || '0'));\n                              return warrantyEnd.toLocaleDateString('en-GB', {\n                                day: '2-digit',\n                                month: '2-digit', \n                                year: 'numeric'\n                              });\n                            } catch {\n                              return 'Invalid date';\n                            }\n                          })()\n                        }\n                      </p>\n                    </div>\n                  )}\n                </div>\n              ))}\n\n              {equipment.length === 0 && (\n                <div className=\"text-center py-4 text-gray-500\">\n                  Click \"Add Equipment\" to register equipment for this center\n                </div>\n              )}\n            </div>\n\n            {/* Nearby Schools Information */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-medium text-gray-900\">Nearby School Information</h3>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setNearbySchools([...nearbySchools, {schoolName: '', studentStrength: '', schoolType: ''}])}\n                >\n                  Add School\n                </Button>\n              </div>\n\n              {nearbySchools.map((school, index) => (\n                <div key={index} className=\"grid grid-cols-3 gap-4 p-4 border rounded-lg\">\n                  <div>\n                    <Label>School Name</Label>\n                    <Input \n                      placeholder=\"Enter school name\"\n                      value={school.schoolName}\n                      onChange={(e) => {\n                        const updated = [...nearbySchools];\n                        updated[index].schoolName = e.target.value;\n                        setNearbySchools(updated);\n                      }}\n                    />\n                  </div>\n                  <div>\n                    <Label>Student Strength</Label>\n                    <Input \n                      type=\"number\"\n                      placeholder=\"e.g., 500\"\n                      value={school.studentStrength}\n                      onChange={(e) => {\n                        const updated = [...nearbySchools];\n                        updated[index].studentStrength = e.target.value;\n                        setNearbySchools(updated);\n                      }}\n                    />\n                  </div>\n                  <div>\n                    <Label>School Type</Label>\n                    <Select \n                      value={school.schoolType} \n                      onValueChange={(value) => {\n                        const updated = [...nearbySchools];\n                        updated[index].schoolType = value;\n                        setNearbySchools(updated);\n                      }}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select school type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"government\">Government</SelectItem>\n                        <SelectItem value=\"private\">Private</SelectItem>\n                        <SelectItem value=\"aided\">Aided</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Nearby Tuitions Information */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-medium text-gray-900\">Nearby Tuition Information</h3>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setNearbyTuitions([...nearbyTuitions, {tuitionName: '', studentStrength: ''}])}\n                >\n                  Add Tuition\n                </Button>\n              </div>\n\n              {nearbyTuitions.map((tuition, index) => (\n                <div key={index} className=\"grid grid-cols-2 gap-4 p-4 border rounded-lg\">\n                  <div>\n                    <Label>Tuition Name</Label>\n                    <Input \n                      placeholder=\"Enter tuition name\"\n                      value={tuition.tuitionName}\n                      onChange={(e) => {\n                        const updated = [...nearbyTuitions];\n                        updated[index].tuitionName = e.target.value;\n                        setNearbyTuitions(updated);\n                      }}\n                    />\n                  </div>\n                  <div>\n                    <Label>Student Strength</Label>\n                    <Input \n                      type=\"number\"\n                      placeholder=\"e.g., 100\"\n                      value={tuition.studentStrength}\n                      onChange={(e) => {\n                        const updated = [...nearbyTuitions];\n                        updated[index].studentStrength = e.target.value;\n                        setNearbyTuitions(updated);\n                      }}\n                    />\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"bg-green-50 p-4 rounded-lg\">\n              <p className=\"text-sm text-green-800\">\n                <strong>Important:</strong> \n                • The center will be created with ID <strong>{nextCenterId || 'Generating...'}</strong> and default password <strong>12345678</strong><br/>\n                • The center will be required to change password on first login<br/>\n                • Manager can be assigned now or later and can be reassigned if needed<br/>\n                • All selected facilities will be displayed to students and parents\n              </p>\n            </div>\n\n            <div className=\"flex justify-end space-x-4 pt-6 border-t border-green-100\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={onClose}\n                className=\"border-green-200 text-green-700 hover:bg-green-50\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createSoCenterMutation.isPending}\n                className=\"bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white shadow-md\"\n              >\n                {createSoCenterMutation.isPending ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"animate-spin w-4 h-4 border-2 border-white/30 border-t-white rounded-full\" />\n                    Creating...\n                  </div>\n                ) : (\n                  <div className=\"flex items-center gap-2\">\n                    <span>Create SO Center</span>\n                  </div>\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":43661},"client/src/components/admin/AddSubjectModal.tsx":{"content":"import { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { z } from 'zod';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n\nconst addSubjectSchema = z.object({\n  name: z.string().min(1, 'Subject name is required'),\n  classId: z.string().min(1, 'Class selection is required'),\n});\n\ntype AddSubjectFormData = z.infer<typeof addSubjectSchema>;\n\ninterface AddSubjectModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function AddSubjectModal({ isOpen, onClose }: AddSubjectModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch real classes data from API\n  const { data: classes = [] } = useQuery({\n    queryKey: ['/api/classes'],\n  });\n\n  const form = useForm<AddSubjectFormData>({\n    resolver: zodResolver(addSubjectSchema),\n    defaultValues: {\n      name: '',\n      classId: '',\n    },\n  });\n\n  const createSubjectMutation = useMutation({\n    mutationFn: async (data: AddSubjectFormData) => {\n      return apiRequest('POST', '/api/admin/subjects', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Subject Created',\n        description: 'Subject has been successfully created.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/subjects'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/subjects'] });\n      form.reset();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to create subject. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: AddSubjectFormData) => {\n    createSubjectMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle>Add New Subject</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Subject Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"e.g. Mathematics, Physics, Chemistry\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"classId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Class</FormLabel>\n                  <FormControl>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select class\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {classes.map((cls: any) => (\n                          <SelectItem key={cls.id} value={cls.id}>\n                            {cls.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createSubjectMutation.isPending}\n                className=\"bg-primary text-white hover:bg-blue-700\"\n              >\n                {createSubjectMutation.isPending ? 'Creating...' : 'Create Subject'}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":4536},"client/src/components/admin/AddTopicModal.tsx":{"content":"import { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { z } from 'zod';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\n\nconst addTopicSchema = z.object({\n  name: z.string().min(1, 'Topic name is required'),\n  classId: z.string().min(1, 'Class selection is required'),\n  subjectId: z.string().min(1, 'Subject selection is required'),\n  chapterId: z.string().min(1, 'Chapter selection is required'),\n  orderIndex: z.string().min(1, 'Order is required'),\n  isModerate: z.boolean().default(false),\n  isImportant: z.boolean().default(false),\n}).refine(data => !(data.isModerate && data.isImportant), {\n  message: \"You can only select either Moderate or Important, not both\",\n  path: [\"isImportant\"],\n});\n\ntype AddTopicFormData = z.infer<typeof addTopicSchema>;\n\ninterface AddTopicModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function AddTopicModal({ isOpen, onClose }: AddTopicModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch real data from API\n  const { data: classes = [] } = useQuery({\n    queryKey: ['/api/classes'],\n  });\n\n  const { data: allSubjects = [] } = useQuery({\n    queryKey: ['/api/admin/subjects'],\n  });\n\n  const { data: allChapters = [] } = useQuery({\n    queryKey: ['/api/admin/chapters'],\n  });\n\n  const form = useForm<AddTopicFormData>({\n    resolver: zodResolver(addTopicSchema),\n    defaultValues: {\n      name: '',\n      classId: '',\n      subjectId: '',\n      chapterId: '',\n      orderIndex: '',\n      isModerate: false,\n      isImportant: false,\n    },\n  });\n\n  const selectedClassId = form.watch('classId');\n  const selectedSubjectId = form.watch('subjectId');\n  \n  // Filter subjects based on selected class\n  const filteredSubjects = (allSubjects as any[]).filter((subject: any) => \n    selectedClassId ? subject.classId === selectedClassId : false\n  );\n\n  // Filter chapters based on selected subject\n  const filteredChapters = (allChapters as any[]).filter((chapter: any) => \n    selectedSubjectId ? chapter.subjectId === selectedSubjectId : false\n  );\n\n  const handleClassChange = (value: string) => {\n    form.setValue('classId', value);\n    form.setValue('subjectId', '');\n    form.setValue('chapterId', '');\n  };\n\n  const handleSubjectChange = (value: string) => {\n    form.setValue('subjectId', value);\n    form.setValue('chapterId', '');\n  };\n\n  const createTopicMutation = useMutation({\n    mutationFn: async (data: AddTopicFormData) => {\n      const submitData = {\n        name: data.name,\n        chapterId: data.chapterId,\n        orderIndex: parseInt(data.orderIndex),\n        isModerate: data.isModerate,\n        isImportant: data.isImportant,\n      };\n      return apiRequest('POST', '/api/admin/topics', submitData);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Topic Created',\n        description: 'Topic has been successfully created.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/topics'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/topics'] });\n      form.reset();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to create topic. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: AddTopicFormData) => {\n    createTopicMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle>Add New Topic</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Topic Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"e.g. Introduction to Quadratic Equations\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"classId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Class</FormLabel>\n                  <FormControl>\n                    <Select onValueChange={handleClassChange} value={field.value}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select class\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {classes.map((cls: any) => (\n                          <SelectItem key={cls.id} value={cls.id}>\n                            {cls.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"subjectId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Subject</FormLabel>\n                  <FormControl>\n                    <Select onValueChange={handleSubjectChange} value={field.value} disabled={!selectedClassId}>\n                      <SelectTrigger>\n                        <SelectValue placeholder={selectedClassId ? \"Select subject\" : \"Select class first\"} />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {filteredSubjects.map((subject: any) => (\n                          <SelectItem key={subject.id} value={subject.id}>\n                            {subject.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"chapterId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Chapter</FormLabel>\n                    <FormControl>\n                      <Select onValueChange={field.onChange} value={field.value} disabled={!selectedSubjectId}>\n                        <SelectTrigger>\n                          <SelectValue placeholder={selectedSubjectId ? \"Select chapter\" : \"Select subject first\"} />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {filteredChapters.map((chapter: any) => (\n                            <SelectItem key={chapter.id} value={chapter.id}>\n                              {chapter.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"orderIndex\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Order</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        placeholder=\"1\" \n                        min=\"1\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Priority Checkboxes */}\n            <div className=\"space-y-4\">\n              <h4 className=\"text-sm font-medium\">Topic Priority (select one):</h4>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"isModerate\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                      <FormControl>\n                        <Checkbox \n                          checked={field.value}\n                          onCheckedChange={(checked) => {\n                            field.onChange(checked);\n                            if (checked) {\n                              form.setValue('isImportant', false);\n                            }\n                          }}\n                        />\n                      </FormControl>\n                      <div className=\"space-y-1 leading-none\">\n                        <FormLabel className=\"text-sm font-normal\">\n                          Moderate\n                        </FormLabel>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Shows \"Moderate\" tag\n                        </p>\n                      </div>\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"isImportant\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                      <FormControl>\n                        <Checkbox \n                          checked={field.value}\n                          onCheckedChange={(checked) => {\n                            field.onChange(checked);\n                            if (checked) {\n                              form.setValue('isModerate', false);\n                            }\n                          }}\n                        />\n                      </FormControl>\n                      <div className=\"space-y-1 leading-none\">\n                        <FormLabel className=\"text-sm font-normal\">\n                          Important\n                        </FormLabel>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Shows attractive \"IMP\" tag\n                        </p>\n                      </div>\n                    </FormItem>\n                  )}\n                />\n              </div>\n              <FormMessage />\n            </div>\n\n            <div className=\"bg-blue-50 p-4 rounded-lg\">\n              <p className=\"text-sm text-blue-800\">\n                <strong>Note:</strong> Follow the sequence: Class → Subject → Chapter → Topic. The order determines the sequence in which topics appear in the chapter.\n              </p>\n            </div>\n\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createTopicMutation.isPending}\n                className=\"bg-primary text-white hover:bg-blue-700\"\n              >\n                {createTopicMutation.isPending ? 'Creating...' : 'Create Topic'}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":11974},"client/src/components/admin/AddUserModal.tsx":{"content":"import { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQueryClient, useQuery } from '@tanstack/react-query';\nimport { z } from 'zod';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { useState } from 'react';\n\nconst addUserSchema = z.object({\n  name: z.string().min(1, 'Name is required'),\n  fatherName: z.string().min(1, 'Father name is required'),\n  email: z.string().email('Valid email is required'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n  confirmPassword: z.string().min(6, 'Confirm password is required'),\n  role: z.string().min(1, 'Role is required'),\n  phone: z.string().min(10, 'Valid phone number required'),\n  dateOfBirth: z.string().min(1, 'Date of birth is required'),\n  maritalStatus: z.string().min(1, 'Marital status is required'),\n  villageId: z.string().min(1, 'Village selection is required'),\n  address: z.string().min(1, 'Address is required'),\n  salary: z.string().optional(),\n  salaryType: z.string().optional(),\n  commissionProducts: z.array(z.string()).optional(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n}).refine((data) => {\n  if (data.role === 'agent') {\n    return data.salary && data.salaryType;\n  }\n  return true;\n}, {\n  message: \"Salary and salary type are required for agents\",\n  path: [\"salary\"],\n});\n\ntype AddUserFormData = z.infer<typeof addUserSchema>;\n\ninterface AddUserModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function AddUserModal({ isOpen, onClose }: AddUserModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedState, setSelectedState] = useState('');\n  const [selectedDistrict, setSelectedDistrict] = useState('');\n  const [selectedMandal, setSelectedMandal] = useState('');\n  const [selectedProducts, setSelectedProducts] = useState<string[]>([]);\n\n  const form = useForm<AddUserFormData>({\n    resolver: zodResolver(addUserSchema),\n    defaultValues: {\n      name: '',\n      fatherName: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      role: '',\n      phone: '',\n      dateOfBirth: '',\n      maritalStatus: '',\n      villageId: '',\n      address: '',\n      salary: '',\n      salaryType: 'fixed',\n      commissionProducts: [],\n    },\n  });\n\n  const selectedRole = form.watch('role');\n  const selectedSalaryType = form.watch('salaryType');\n\n  // Fetch address hierarchy data from database\n  const { data: states = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/states'],\n  });\n\n  const { data: districts = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/districts', selectedState],\n    queryFn: async () => {\n      if (!selectedState) return [];\n      const response = await apiRequest('GET', `/api/admin/addresses/districts/${selectedState}`);\n      return await response.json();\n    },\n    enabled: !!selectedState,\n  });\n\n  const { data: mandals = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/mandals', selectedDistrict],\n    queryFn: async () => {\n      if (!selectedDistrict) return [];\n      const response = await apiRequest('GET', `/api/admin/addresses/mandals/${selectedDistrict}`);\n      return await response.json();\n    },\n    enabled: !!selectedDistrict,\n  });\n\n  const { data: villages = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/villages', selectedMandal],\n    queryFn: async () => {\n      if (!selectedMandal) return [];\n      const response = await apiRequest('GET', `/api/admin/addresses/villages/${selectedMandal}`);\n      return await response.json();\n    },\n    enabled: !!selectedMandal,\n  });\n\n  const { data: products = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/products'],\n    enabled: selectedRole === 'agent' && selectedSalaryType === 'commission',\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (data: AddUserFormData) => {\n      const { confirmPassword, commissionProducts, ...userData } = data;\n      // Convert salary to decimal if provided\n      const processedData = {\n        ...userData,\n        salary: data.salary ? parseFloat(data.salary) : undefined,\n        commissionProducts: selectedRole === 'agent' && selectedSalaryType === 'commission' ? selectedProducts : undefined,\n      };\n      return apiRequest('POST', '/api/admin/users', processedData);\n    },\n    onSuccess: (response) => {\n      const userData = form.getValues();\n      toast({\n        title: 'User Created Successfully! 🎉',\n        description: `Login Credentials Created:\\n📧 Email: ${userData.email}\\n🔒 Password: ${userData.password}\\n👤 Role: ${userData.role}\\n\\nPlease share these credentials with the user securely.`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      form.reset();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to create user. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: AddUserFormData) => {\n    createUserMutation.mutate(data);\n  };\n\n  const userRoles = [\n    { value: 'admin', label: 'Admin' },\n    { value: 'so_center', label: 'SO Center Manager' },\n    { value: 'teacher', label: 'Teacher' },\n    { value: 'academic_admin', label: 'Academic Admin' },\n    { value: 'agent', label: 'Agent' },\n    { value: 'office_staff', label: 'Office Staff' },\n    { value: 'collection_agent', label: 'Collection Agent' },\n    { value: 'marketing_staff', label: 'Marketing Staff' },\n  ];\n\n  const maritalStatusOptions = [\n    { value: 'single', label: 'Single' },\n    { value: 'married', label: 'Married' },\n    { value: 'divorced', label: 'Divorced' },\n    { value: 'widowed', label: 'Widowed' },\n  ];\n\n  // Handle address cascade changes\n  const handleStateChange = (stateId: string) => {\n    setSelectedState(stateId);\n    setSelectedDistrict('');\n    setSelectedMandal('');\n    form.setValue('villageId', '');\n  };\n\n  const handleDistrictChange = (districtId: string) => {\n    setSelectedDistrict(districtId);\n    setSelectedMandal('');\n    form.setValue('villageId', '');\n  };\n\n  const handleMandalChange = (mandalId: string) => {\n    setSelectedMandal(mandalId);\n    form.setValue('villageId', '');\n  };\n\n  const handleProductToggle = (productId: string) => {\n    const updatedProducts = selectedProducts.includes(productId)\n      ? selectedProducts.filter(id => id !== productId)\n      : [...selectedProducts, productId];\n    setSelectedProducts(updatedProducts);\n    form.setValue('commissionProducts', updatedProducts);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[800px] max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Add New User</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            {/* Personal Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Personal Information</h3>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Full Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter full name\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"fatherName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Father's Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter father's name\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"dateOfBirth\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Date of Birth</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"maritalStatus\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Marital Status</FormLabel>\n                      <FormControl>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select marital status\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {maritalStatusOptions.map((status) => (\n                              <SelectItem key={status.value} value={status.value}>\n                                {status.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Contact Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Contact Information</h3>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email Address</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" placeholder=\"Enter email address\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone Number</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"+91 98765 43210\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Address Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Address Information</h3>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"state\">State</Label>\n                  <Select onValueChange={handleStateChange} value={selectedState}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select state\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {states.map((state: any) => (\n                        <SelectItem key={state.id} value={state.id}>\n                          {state.name} ({state.code})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"district\">District</Label>\n                  <Select onValueChange={handleDistrictChange} value={selectedDistrict} disabled={!selectedState}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select district\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {districts.map((district: any) => (\n                        <SelectItem key={district.id} value={district.id}>\n                          {district.name} ({district.code})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"mandal\">Mandal</Label>\n                  <Select onValueChange={handleMandalChange} value={selectedMandal} disabled={!selectedDistrict}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select mandal\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {mandals.map((mandal: any) => (\n                        <SelectItem key={mandal.id} value={mandal.id}>\n                          {mandal.name} ({mandal.code})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"villageId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Village</FormLabel>\n                      <FormControl>\n                        <Select onValueChange={field.onChange} value={field.value} disabled={!selectedMandal}>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select village\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {villages.map((village: any) => (\n                              <SelectItem key={village.id} value={village.id}>\n                                {village.name} ({village.code})\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Complete Address</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter complete address (street, landmark, etc.)\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Authentication Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Authentication</h3>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"password\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Password</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"Enter password\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"confirmPassword\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Confirm Password</FormLabel>\n                      <FormControl>\n                        <Input type=\"password\" placeholder=\"Confirm password\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Role and Salary Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Role & Compensation</h3>\n              \n              <FormField\n                control={form.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>User Role</FormLabel>\n                    <FormControl>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select role\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {userRoles.map((role) => (\n                            <SelectItem key={role.value} value={role.value}>\n                              {role.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {selectedRole && selectedRole !== 'admin' && (\n                <div className=\"space-y-4\">\n                  {selectedRole === 'agent' && (\n                    <FormField\n                      control={form.control}\n                      name=\"salaryType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Salary Type</FormLabel>\n                          <FormControl>\n                            <RadioGroup\n                              onValueChange={field.onChange}\n                              value={field.value}\n                              className=\"flex space-x-6\"\n                            >\n                              <div className=\"flex items-center space-x-2\">\n                                <RadioGroupItem value=\"fixed\" id=\"fixed\" />\n                                <Label htmlFor=\"fixed\">Fixed Salary</Label>\n                              </div>\n                              <div className=\"flex items-center space-x-2\">\n                                <RadioGroupItem value=\"commission\" id=\"commission\" />\n                                <Label htmlFor=\"commission\">Commission Based</Label>\n                              </div>\n                            </RadioGroup>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  )}\n\n                  <FormField\n                    control={form.control}\n                    name=\"salary\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>\n                          {selectedRole === 'agent' && selectedSalaryType === 'fixed' \n                            ? 'Fixed Salary (₹)' \n                            : selectedRole === 'agent' && selectedSalaryType === 'commission'\n                            ? 'Base Salary (₹)'\n                            : 'Salary (₹)'\n                          }\n                        </FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            placeholder={selectedRole === 'agent' && selectedSalaryType === 'commission' ? 'Enter base salary' : 'Enter salary amount'} \n                            {...field} \n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {selectedRole === 'agent' && selectedSalaryType === 'commission' && (\n                    <div>\n                      <Label className=\"text-base font-medium\">Commission Products</Label>\n                      <p className=\"text-sm text-gray-600 mb-3\">Select products for which this agent will earn commission</p>\n                      <div className=\"space-y-3\">\n                        {products.map((product: any) => (\n                          <div key={product.id} className=\"flex items-center space-x-3\">\n                            <Checkbox\n                              id={product.id}\n                              checked={selectedProducts.includes(product.id)}\n                              onCheckedChange={() => handleProductToggle(product.id)}\n                            />\n                            <div className=\"flex-1\">\n                              <Label htmlFor={product.id} className=\"font-medium text-sm cursor-pointer\">\n                                {product.name}\n                              </Label>\n                              <p className=\"text-xs text-gray-600\">{product.commissionPercentage}% commission</p>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n\n            <div className=\"bg-blue-50 p-4 rounded-lg mt-6\">\n              <p className=\"text-sm text-blue-800\">\n                <strong>📌 Important:</strong> After creating the user, you will receive their login credentials. Please share the following information with them:\n              </p>\n              <ul className=\"text-sm text-blue-800 mt-2 ml-4 list-disc\">\n                <li><strong>Login with:</strong> Email address (not name)</li>\n                <li><strong>Website:</strong> This admin portal URL</li>\n                <li><strong>Role:</strong> They must select their correct role during login</li>\n                <li><strong>Security:</strong> Ask them to change password after first login</li>\n              </ul>\n              {selectedRole === 'agent' && selectedSalaryType === 'commission' && (\n                <p className=\"text-sm text-blue-800 mt-2\">\n                  <strong>💰 Commission:</strong> Will be calculated based on selected products and their respective percentages.\n                </p>\n              )}\n            </div>\n\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createUserMutation.isPending}\n                className=\"bg-primary text-white hover:bg-blue-700\"\n              >\n                {createUserMutation.isPending ? 'Creating...' : 'Create User'}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":23967},"client/src/components/auth/LoginForm.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useToast } from '@/hooks/use-toast';\nimport { GraduationCap, Eye, EyeOff, LogIn } from 'lucide-react';\nimport { useLocation } from 'wouter';\n\nconst loginSchema = z.object({\n  email: z.string().min(1, 'Please enter email or SO Center ID'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport function LoginForm() {\n  const [showPassword, setShowPassword] = useState(false);\n  const { login, isLoginLoading, loginError } = useAuth();\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  const onSubmit = async (data: LoginFormData) => {\n    try {\n      console.log('Login form submitting...', { email: data.email });\n      \n      const result = await login(data.email, data.password);\n      console.log('Login result received:', result);\n      \n      if (result && result.user) {\n        toast({\n          title: 'Login Successful',\n          description: `Welcome ${result.user.name || result.user.email}!`,\n        });\n        \n        // Small delay to ensure token is saved\n        setTimeout(() => {\n          // Navigate to the appropriate dashboard based on role\n          if (result.redirectTo) {\n            navigate(result.redirectTo);\n          } else {\n            navigate('/dashboard');\n          }\n        }, 100);\n      } else {\n        throw new Error('Invalid login response');\n      }\n    } catch (error: any) {\n      console.error('Login error:', error);\n      toast({\n        title: 'Login Failed',\n        description: error?.message || loginError?.message || 'Invalid credentials',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary to-blue-600 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n            <GraduationCap className=\"text-white text-2xl\" size={32} />\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-gray-900\">Navanidhi Academy</CardTitle>\n          <p className=\"text-gray-600 mt-2\">Management System</p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div>\n              <Label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Email or SO Center ID\n              </Label>\n              <Input\n                id=\"email\"\n                type=\"text\"\n                placeholder=\"Enter email or SO Center ID (e.g., NAV001)\"\n                {...form.register('email')}\n                className=\"w-full\"\n              />\n              {form.formState.errors.email && (\n                <p className=\"text-sm text-destructive mt-1\">\n                  {form.formState.errors.email.message}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Password\n              </Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? 'text' : 'password'}\n                  placeholder=\"Enter your password\"\n                  {...form.register('password')}\n                  className=\"w-full pr-12\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-1 top-1 h-8 w-8 p-0\"\n                  onClick={() => setShowPassword(!showPassword)}\n                >\n                  {showPassword ? <EyeOff size={16} /> : <Eye size={16} />}\n                </Button>\n              </div>\n              {form.formState.errors.password && (\n                <p className=\"text-sm text-destructive mt-1\">\n                  {form.formState.errors.password.message}\n                </p>\n              )}\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-primary text-white hover:bg-blue-700\"\n              disabled={isLoginLoading}\n            >\n              {isLoginLoading ? (\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"animate-spin w-4 h-4 border-2 border-white/30 border-t-white rounded-full\" />\n                  Signing In...\n                </div>\n              ) : (\n                <>\n                  <LogIn className=\"mr-2\" size={16} />\n                  Sign In\n                </>\n              )}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center space-y-2\">\n            <div className=\"text-xs text-gray-500 bg-gray-50 p-3 rounded-lg\">\n              <strong>Login Instructions:</strong><br/>\n              • Use your registered email address<br/>\n              • SO Centers can use their Center ID (e.g., NAV001)<br/>\n              • System will automatically detect your role\n            </div>\n            <a href=\"#\" className=\"text-primary hover:text-blue-700 text-sm\">\n              Forgot Password?\n            </a>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5912},"client/src/components/layout/DashboardLayout.tsx":{"content":"import { ReactNode, useState } from 'react';\nimport { Sidebar } from './Sidebar';\nimport { Header } from './Header';\nimport { useScreenSize } from '@/hooks/use-mobile';\nimport { Button } from '@/components/ui/button';\nimport { Menu, X, Plus } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface DashboardLayoutProps {\n  children: ReactNode;\n  title: string;\n  subtitle?: string;\n  showAddButton?: boolean;\n  onAddClick?: () => void;\n  addButtonText?: string;\n}\n\nexport default function DashboardLayout({ \n  children, \n  title, \n  subtitle, \n  showAddButton = false, \n  onAddClick,\n  addButtonText = \"Add New\"\n}: DashboardLayoutProps) {\n  const { isMobile, isTablet } = useScreenSize();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  const isCompact = isMobile || isTablet;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex relative\">\n      {/* Mobile Sidebar Overlay */}\n      {isCompact && sidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40\"\n          onClick={() => setSidebarOpen(false)}\n        />\n      )}\n\n      {/* Sidebar */}\n      <div className={cn(\n        \"z-50 transition-transform duration-300 ease-in-out\",\n        isCompact ? \"fixed inset-y-0 left-0 w-64\" : \"fixed inset-y-0 left-0 w-64\",\n        isCompact && !sidebarOpen && \"-translate-x-full\"\n      )}>\n        <Sidebar onMobileClose={() => setSidebarOpen(false)} />\n      </div>\n\n      {/* Main Content */}\n      <div className={cn(\n        \"flex-1 flex flex-col transition-all duration-300 ease-in-out\",\n        !isCompact && \"ml-64\"\n      )}>\n        {/* Mobile Menu Button */}\n        {isCompact && (\n          <div className=\"fixed top-4 left-4 z-30\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setSidebarOpen(!sidebarOpen)}\n              className=\"bg-white shadow-md\"\n            >\n              {sidebarOpen ? <X className=\"h-4 w-4\" /> : <Menu className=\"h-4 w-4\" />}\n            </Button>\n          </div>\n        )}\n\n        <Header \n          title={title}\n          subtitle={subtitle}\n          showAddButton={showAddButton}\n          onAddClick={onAddClick}\n          isMobile={isCompact}\n        />\n\n        <main className={cn(\n          \"flex-1 p-4 overflow-x-hidden\",\n          isCompact ? \"pt-6\" : \"p-6\"\n        )}>\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":2414},"client/src/components/layout/Header.tsx":{"content":"\nimport { Button } from '@/components/ui/button';\nimport { Plus, Settings, Bell, User } from 'lucide-react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useScreenSize } from '@/hooks/use-mobile';\nimport { cn } from '@/lib/utils';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\n\ninterface HeaderProps {\n  title: string;\n  subtitle?: string;\n  showAddButton?: boolean;\n  onAddClick?: () => void;\n  isMobile?: boolean;\n}\n\nexport function Header({ title, subtitle, showAddButton, onAddClick, isMobile }: HeaderProps) {\n  const { user, logout } = useAuth();\n  const { breakpoint } = useScreenSize();\n  \n  const getInitials = (name: string) => {\n    return name?.split(' ').map(n => n[0]).join('').toUpperCase() || 'U';\n  };\n\n  return (\n    <header className={cn(\n      \"bg-white border-b border-gray-200 px-4 py-4 shadow-sm\",\n      isMobile ? \"ml-0\" : \"ml-0\"\n    )}>\n      <div className=\"flex items-center justify-between\">\n        <div className={cn(\n          \"flex-1\",\n          isMobile && \"ml-12\" // Account for mobile menu button\n        )}>\n          <h1 className={cn(\n            \"font-bold text-gray-900 truncate\",\n            breakpoint === 'mobile' ? \"text-lg\" : \"text-2xl\"\n          )}>\n            {title}\n          </h1>\n          {subtitle && (\n            <p className={cn(\n              \"text-gray-600 truncate\",\n              breakpoint === 'mobile' ? \"text-xs mt-0.5\" : \"text-sm mt-1\"\n            )}>\n              {subtitle}\n            </p>\n          )}\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          {/* Add Button */}\n          {showAddButton && onAddClick && (\n            <Button \n              onClick={onAddClick}\n              size={breakpoint === 'mobile' ? \"sm\" : \"default\"}\n              className=\"gap-2\"\n            >\n              <Plus className={cn(\n                breakpoint === 'mobile' ? \"h-3 w-3\" : \"h-4 w-4\"\n              )} />\n              {breakpoint !== 'mobile' && \"Add\"}\n            </Button>\n          )}\n          \n          {/* Notifications */}\n          <Button \n            variant=\"ghost\" \n            size={breakpoint === 'mobile' ? \"sm\" : \"default\"}\n            className=\"relative\"\n          >\n            <Bell className={cn(\n              breakpoint === 'mobile' ? \"h-4 w-4\" : \"h-5 w-5\"\n            )} />\n          </Button>\n          \n          {/* User Menu */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n                <Avatar className=\"h-8 w-8\">\n                  <AvatarFallback className=\"text-xs\">\n                    {getInitials(user?.name || user?.email || 'User')}\n                  </AvatarFallback>\n                </Avatar>\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n              <DropdownMenuItem className=\"flex-col items-start\">\n                <div className=\"font-medium truncate max-w-full\">\n                  {user?.name || 'User'}\n                </div>\n                <div className=\"text-xs text-muted-foreground truncate max-w-full\">\n                  {user?.email}\n                </div>\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => window.location.href = '/settings'}>\n                <Settings className=\"mr-2 h-4 w-4\" />\n                Settings\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={logout}>\n                <User className=\"mr-2 h-4 w-4\" />\n                Sign out\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3864},"client/src/components/layout/Sidebar.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useScreenSize } from '@/hooks/use-mobile';\nimport { Button } from '@/components/ui/button';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Separator } from '@/components/ui/separator';\nimport { cn } from '@/lib/utils';\nimport {\n  LayoutDashboard,\n  Users,\n  GraduationCap,\n  CreditCard,\n  BarChart3,\n  Settings,\n  Calendar,\n  MapPin,\n  Building,\n  BookOpen,\n  FileText,\n  TrendingUp,\n  Wallet,\n  Package,\n  ClipboardCheck,\n  ClipboardList,\n  Target,\n  UserCheck,\n  Award,\n  MessageCircle,\n  Bell,\n  UserPlus,\n  ShoppingCart,\n  DollarSign,\n  Briefcase,\n  ChevronDown,\n  ChevronRight,\n  LogOut,\n  User,\n  Home,\n  Shield,\n  School,\n  Plus,\n  X,\n  Activity,\n  Clock,\n  CheckCircle,\n  AlertTriangle // Imported AlertTriangle icon\n} from 'lucide-react';\n\n// Assuming SidebarMenuButton and Link are imported from appropriate libraries\n// For demonstration, let's assume they are like this:\n// import { Link } from 'wouter-preact';\n// import { Button as SidebarMenuButton } from '@/components/ui/button';\n// In a real scenario, these would be imported from your UI library\n\n// Placeholder for SidebarMenuButton and Link if not present in original code for context\n// import { Link } from 'react-router-dom'; // Or your routing library\n// const SidebarMenuButton = ({ asChild, children }) => children;\n\n// Dummy imports for demonstration if not available in the original context\nimport { Link } from 'wouter-preact';\nconst SidebarMenuButton = ({ asChild, children }) => {\n  if (asChild) {\n    return children;\n  }\n  return <button>{children}</button>;\n};\n\n\ninterface SidebarProps {\n  onMobileClose?: () => void;\n}\n\ninterface NavItem {\n  title: string;\n  href?: string;\n  icon: any;\n  children?: NavItem[];\n  roles?: string[];\n}\n\nconst navigation: NavItem[] = [\n  {\n    title: 'Dashboard',\n    href: '/dashboard',\n    icon: LayoutDashboard,\n  },\n  {\n    title: 'Students',\n    icon: Users,\n    roles: ['so_center'],\n    children: [\n      { title: 'All Students', href: '/students', icon: Users },\n      { title: 'Progress Tracking', href: '/progress', icon: TrendingUp },\n      { title: 'Attendance', href: '/attendance', icon: Calendar },\n      { title: 'Attendance Reports', href: '/attendance-reports', icon: FileText },\n    ],\n  },\n  {\n    title: 'Academics',\n    icon: BookOpen,\n    roles: ['so_center', 'admin', 'super_admin'],\n    children: [\n      { title: 'Exam Management', href: '/exam-management', icon: Award, roles: ['so_center'] },\n      { title: 'SO Center Exams', href: '/so-center/exams', icon: ClipboardList, roles: ['so_center'] },\n      { title: 'Exam Results', href: '/so-center/exam-results', icon: BarChart3, roles: ['so_center'] },\n      { title: 'Admin Exam Management', href: '/admin/exam-management', icon: Award, roles: ['admin', 'super_admin'] },\n      { title: 'Academic Dashboard', href: '/admin/academic-dashboard', icon: BarChart3, roles: ['admin', 'super_admin'] },\n    ],\n  },\n  {\n    title: 'Finance',\n    icon: DollarSign,\n    children: [\n      { title: 'Expenses', href: '/expenses', icon: FileText, roles: ['so_center'] },\n      { title: 'Admin Expenses', href: '/admin/expenses', icon: FileText, roles: ['admin', 'super_admin'] },\n      { title: 'All Payments', href: '/admin/all-payments', icon: CreditCard, roles: ['admin', 'super_admin'] },\n      { title: 'Fee Structures', href: '/admin/fees', icon: DollarSign, roles: ['admin', 'super_admin'] },\n    ],\n  },\n  {\n    title: 'Products',\n    href: '/products',\n    icon: Package,\n    roles: ['so_center', 'agent', 'admin', 'super_admin'],\n  },\n  {\n    title: 'Teachers',\n    href: '/admin/teachers',\n    icon: UserCheck,\n    roles: ['admin', 'super_admin'],\n  },\n  {\n    title: 'Users',\n    href: '/admin/users',\n    icon: Users,\n    roles: ['admin', 'super_admin'],\n  },\n  {\n    title: 'Roles',\n    href: '/admin/roles',\n    icon: UserCheck,\n    roles: ['admin', 'super_admin'],\n  },\n  {\n    title: 'SO Centers',\n    href: '/admin/centers',\n    icon: Building,\n    roles: ['admin', 'super_admin'],\n  },\n  {\n    title: 'Topics Management',\n    href: '/admin/structure',\n    icon: School,\n    roles: ['admin', 'super_admin'],\n  },\n  {\n    title: 'Class & Subject Management',\n    href: '/admin/class-subject-management',\n    icon: Plus,\n    roles: ['admin', 'super_admin'],\n  },\n  {\n    title: 'All Students',\n    href: '/admin/students',\n    icon: GraduationCap,\n    roles: ['admin', 'super_admin'],\n  },\n  {\n    title: 'Course Purchases',\n    href: '/admin/course-purchases',\n    icon: ShoppingCart,\n    roles: ['admin', 'super_admin'],\n  },\n  {\n    title: 'Dropout Requests',\n    href: '/admin/dropout-requests',\n    icon: X,\n    roles: ['admin', 'super_admin'],\n  },\n  {\n    title: 'Addresses',\n    href: '/admin/addresses',\n    icon: Building,\n    roles: ['admin', 'super_admin'],\n  },\n  {\n    title: 'Announcements',\n    href: '/admin/announcements',\n    icon: Bell,\n    roles: ['admin', 'super_admin'],\n  },\n  {\n    title: 'Approvals',\n    href: '/admin/approvals',\n    icon: CheckCircle,\n    roles: ['admin', 'super_admin'],\n  },\n  {\n    title: 'Progress Tracking',\n    href: '/admin/progress-tracking',\n    icon: Target,\n    roles: ['admin', 'super_admin'],\n  },\n  // New entry for Wallet Balances\n  {\n    title: 'Wallet Balances',\n    href: '/admin/wallet-balances',\n    icon: Wallet,\n    roles: ['admin', 'super_admin'],\n  },\n  // Add Student Balance Dues menu item to admin sidebar\n  {\n    title: 'Student Balance & Dues',\n    href: '/admin/student-balance-dues',\n    icon: AlertTriangle, // Use AlertTriangle for dues\n    roles: ['admin', 'super_admin'],\n  },\n  {\n    title: 'Settings',\n    href: '/settings',\n    icon: Settings,\n  },\n];\n\nexport function Sidebar({ onMobileClose }: SidebarProps) {\n  const [location, setLocation] = useLocation();\n  const { user } = useAuth();\n  const { isMobile } = useScreenSize();\n  const [expandedItems, setExpandedItems] = useState<string[]>([]);\n\n  const isItemVisible = (item: NavItem) => {\n    if (!item.roles) return true;\n    return item.roles.includes(user?.role || '');\n  };\n\n  const isActive = (href: string) => {\n    return location === href || location.startsWith(href + '/');\n  };\n\n  const isParentActive = (item: NavItem) => {\n    if (item.href && isActive(item.href)) return true;\n    if (item.children) {\n      return item.children.some(child => \n        isItemVisible(child) && child.href && isActive(child.href)\n      );\n    }\n    return false;\n  };\n\n  // Auto-expand parent menu if current page is a submenu item\n  // The original code had a useState hook here which is not the correct way to handle side effects in React.\n  // It should be useEffect. If it's intended to run only once on mount, an empty dependency array is needed.\n  // For this correction, I'll assume it's meant to run on mount to set initial expanded state.\n  // If the original intent was different, this might need further adjustment.\n  useState(() => {\n    navigation.forEach(item => {\n      if (item.children && item.children.some(child => \n        isItemVisible(child) && child.href && isActive(child.href)\n      )) {\n        setExpandedItems(prev => \n          prev.includes(item.title) ? prev : [...prev, item.title]\n        );\n      }\n    });\n  });\n\n\n  const toggleExpanded = (title: string) => {\n    setExpandedItems(prev =>\n      prev.includes(title)\n        ? prev.filter(item => item !== title)\n        : [...prev, title]\n    );\n  };\n\n  const handleNavigation = (href: string) => {\n    setLocation(href);\n\n    // Keep parent menu expanded if navigating to a child item\n    navigation.forEach(item => {\n      if (item.children && item.children.some(child => child.href === href)) {\n        if (!expandedItems.includes(item.title)) {\n          setExpandedItems(prev => [...prev, item.title]);\n        }\n      }\n    });\n\n    if (isMobile && onMobileClose) {\n      onMobileClose();\n    }\n  };\n\n  const renderNavItem = (item: NavItem, level = 0) => {\n    if (!isItemVisible(item)) return null;\n\n    const hasChildren = item.children && item.children.length > 0;\n    const isExpanded = expandedItems.includes(item.title);\n    const Icon = item.icon;\n\n    if (hasChildren) {\n      return (\n        <div key={item.title} className=\"space-y-1\">\n          <Button\n            variant=\"ghost\"\n            className={cn(\n              \"w-full justify-start gap-3 h-11 px-3 text-left font-normal\",\n              level > 0 && \"pl-6\",\n              isParentActive(item) && \"bg-sidebar-accent text-sidebar-accent-foreground\",\n              \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n              \"focus:bg-sidebar-accent focus:text-sidebar-accent-foreground\"\n            )}\n            onClick={() => toggleExpanded(item.title)}\n          >\n            <Icon className=\"h-4 w-4 shrink-0\" />\n            <span className=\"flex-1 truncate\">{item.title}</span>\n            {isExpanded ? (\n              <ChevronDown className=\"h-4 w-4 shrink-0\" />\n            ) : (\n              <ChevronRight className=\"h-4 w-4 shrink-0\" />\n            )}\n          </Button>\n          {isExpanded && (\n            <div className=\"space-y-1 pl-3\">\n              {item.children?.map(child => renderNavItem(child, level + 1))}\n            </div>\n          )}\n        </div>\n      );\n    }\n\n    return (\n      <Button\n        key={item.title}\n        variant=\"ghost\"\n        className={cn(\n          \"w-full justify-start gap-3 h-11 px-3 text-left font-normal\",\n          level > 0 && \"pl-6\",\n          isActive(item.href!) && \"bg-sidebar-accent text-sidebar-accent-foreground\",\n          \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n          \"focus:bg-sidebar-accent focus:text-sidebar-accent-foreground\"\n        )}\n        onClick={() => item.href && handleNavigation(item.href)}\n      >\n        <Icon className=\"h-4 w-4 shrink-0\" />\n        <span className=\"flex-1 truncate\">{item.title}</span>\n      </Button>\n    );\n  };\n\n  return (\n    <div className=\"flex h-full w-full flex-col bg-sidebar border-r border-sidebar-border\">\n      {/* Header */}\n      <div className=\"flex h-14 items-center border-b border-sidebar-border px-4\">\n        <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n          <div className=\"flex h-8 w-8 items-center justify-center rounded-lg bg-sidebar-primary text-sidebar-primary-foreground\">\n            <GraduationCap className=\"h-4 w-4\" />\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-semibold text-sidebar-foreground truncate\">\n              Navanidhi Academy\n            </p>\n            <p className=\"text-xs text-sidebar-foreground/60 truncate\">\n              Management System\n            </p>\n          </div>\n        </div>\n        {isMobile && onMobileClose && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onMobileClose}\n            className=\"h-8 w-8 p-0\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        )}\n      </div>\n\n      {/* Navigation */}\n      <ScrollArea className=\"flex-1 px-3 py-4\">\n        <nav className=\"space-y-2\">\n          {navigation.map(item => renderNavItem(item))}\n        </nav>\n      </ScrollArea>\n\n      {/* Footer */}\n      <div className=\"border-t border-sidebar-border p-4\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"flex h-8 w-8 items-center justify-center rounded-full bg-sidebar-accent text-sidebar-accent-foreground\">\n            <span className=\"text-xs font-medium\">\n              {user?.name?.charAt(0) || user?.email?.charAt(0) || 'U'}\n            </span>\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium text-sidebar-foreground truncate\">\n              {user?.name || 'User'}\n            </p>\n            <p className=\"text-xs text-sidebar-foreground/60 truncate\">\n              {user?.role?.replace('_', ' ') || 'User'}\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12087},"client/src/components/payments/PaymentForm.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { z } from 'zod';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Plus, IndianRupee } from 'lucide-react';\n\nconst paymentSchema = z.object({\n  studentId: z.string().min(1, 'Student selection is required'),\n  amount: z.string().min(1, 'Amount is required').refine((val) => !isNaN(Number(val)) && Number(val) > 0, 'Amount must be a positive number'),\n  paymentMethod: z.string().min(1, 'Payment method is required'),\n  description: z.string().min(1, 'Payment description is required'),\n  courseType: z.enum(['monthly_tuition', 'fixed_fee']),\n  month: z.string().optional(),\n  year: z.number().optional(),\n});\n\ntype PaymentFormData = z.infer<typeof paymentSchema>;\n\nexport function PaymentForm() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<PaymentFormData>({\n    resolver: zodResolver(paymentSchema),\n    defaultValues: {\n      studentId: '',\n      amount: '',\n      paymentMethod: 'cash',\n      description: '',\n      courseType: 'monthly_tuition',\n      month: new Date().toLocaleString('default', { month: 'long' }),\n      year: new Date().getFullYear(),\n    },\n  });\n\n  // Fetch students for the SO center\n  const { data: students = [] } = useQuery({\n    queryKey: ['/api/students'],\n    queryFn: async () => {\n      const token = localStorage.getItem('auth_token');\n      const response = await fetch(`/api/students?soCenterId=${user?.id}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch students');\n      return response.json();\n    },\n    enabled: !!user && user.role === 'so_center',\n  });\n\n  // Mock recent payments for display\n  const recentPayments = [\n    {\n      id: '1',\n      studentName: 'Arjun Reddy',\n      amount: 2500,\n      description: 'December 2024 fees',\n      paymentMethod: 'Cash',\n      date: 'Dec 15, 2024'\n    },\n    {\n      id: '2',\n      studentName: 'Sneha Patel',\n      amount: 3000,\n      description: 'November 2024 fees',\n      paymentMethod: 'Online',\n      date: 'Dec 14, 2024'\n    },\n    {\n      id: '3',\n      studentName: 'Rahul Kumar',\n      amount: 2500,\n      description: 'December 2024 fees',\n      paymentMethod: 'Cash',\n      date: 'Dec 13, 2024'\n    }\n  ];\n\n  const createPaymentMutation = useMutation({\n    mutationFn: (data: PaymentFormData) => {\n      const token = localStorage.getItem('auth_token');\n      return apiRequest('POST', '/api/payments', {\n        ...data,\n        amount: Number(data.amount),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Payment Recorded',\n        description: 'Payment has been successfully recorded.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/payments'] });\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to record payment. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: PaymentFormData) => {\n    createPaymentMutation.mutate(data);\n  };\n\n  const paymentMethods = [\n    { value: 'cash', label: 'Cash' },\n    { value: 'online', label: 'Online' },\n    { value: 'cheque', label: 'Cheque' },\n    { value: 'bank_transfer', label: 'Bank Transfer' },\n  ];\n\n  const courseTypes = [\n    { value: 'monthly_tuition', label: 'Monthly Tuition' },\n    { value: 'fixed_fee', label: 'Fixed Fee Course' },\n  ];\n\n  return (\n    <div className=\"space-y-8\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Payment Management</CardTitle>\n          <p className=\"text-gray-600 mt-1\">Record and track student fee payments</p>\n        </CardHeader>\n\n        <CardContent>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Payment Form */}\n            <div>\n              <h3 className=\"font-semibold text-gray-900 mb-4\">Record New Payment</h3>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"studentId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Student</FormLabel>\n                          <FormControl>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select student...\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {students.map((student: any) => (\n                                  <SelectItem key={student.id} value={student.id}>\n                                    {student.name}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"courseType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Course Type</FormLabel>\n                          <FormControl>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <SelectTrigger>\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {courseTypes.map((type) => (\n                                  <SelectItem key={type.value} value={type.value}>\n                                    {type.label}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"amount\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Amount</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              placeholder=\"Enter amount\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"paymentMethod\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Payment Method</FormLabel>\n                          <FormControl>\n                            <Select onValueChange={field.onChange} value={field.value}>\n                              <SelectTrigger>\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {paymentMethods.map((method) => (\n                                  <SelectItem key={method.value} value={method.value}>\n                                    {method.label}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Payment For</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"e.g., December 2024 fees\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full bg-secondary text-white hover:bg-green-600\"\n                    disabled={createPaymentMutation.isPending}\n                  >\n                    {createPaymentMutation.isPending ? (\n                      'Recording...'\n                    ) : (\n                      <>\n                        <Plus className=\"mr-2\" size={16} />\n                        Record Payment\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </Form>\n            </div>\n\n            {/* Recent Payments */}\n            <div>\n              <h3 className=\"font-semibold text-gray-900 mb-4\">Recent Payments</h3>\n              <div className=\"space-y-4\">\n                {recentPayments.map((payment) => (\n                  <div\n                    key={payment.id}\n                    className=\"p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition\"\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"font-medium text-gray-900\">{payment.studentName}</span>\n                      <span className=\"font-bold text-secondary flex items-center\">\n                        <IndianRupee size={14} className=\"mr-1\" />\n                        {payment.amount.toLocaleString()}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center justify-between text-sm text-gray-600 mb-2\">\n                      <span>{payment.description}</span>\n                      <span>{payment.date}</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {payment.paymentMethod}\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11659},"client/src/components/progress/ProgressTracker.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Save } from 'lucide-react';\n\nexport function ProgressTracker() {\n  const [selectedStudent, setSelectedStudent] = useState('');\n  const [selectedSubject, setSelectedSubject] = useState('');\n  const [selectedChapter, setSelectedChapter] = useState('');\n  const [topicProgress, setTopicProgress] = useState<{[key: string]: boolean}>({});\n  \n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  // Fetch students\n  const { data: students = [] } = useQuery({\n    queryKey: ['/api/students'],\n    queryFn: async () => {\n      const token = localStorage.getItem('auth_token');\n      const response = await fetch(`/api/students?soCenterId=${user?.id}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) return [];\n      return response.json();\n    },\n    enabled: !!user,\n  });\n\n  // Fetch subjects based on selected student's class\n  const { data: subjects = [] } = useQuery({\n    queryKey: ['/api/subjects', selectedStudent],\n    queryFn: async () => {\n      if (!selectedStudent) return [];\n      const student = students.find((s: any) => s.id === selectedStudent);\n      if (!student) return [];\n      \n      const token = localStorage.getItem('auth_token');\n      const response = await fetch(`/api/subjects/${student.classId}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) return [];\n      return response.json();\n    },\n    enabled: !!selectedStudent && students.length > 0,\n  });\n\n  // Fetch chapters based on selected subject\n  const { data: chapters = [] } = useQuery({\n    queryKey: ['/api/chapters', selectedSubject],\n    queryFn: async () => {\n      if (!selectedSubject) return [];\n      const token = localStorage.getItem('auth_token');\n      const response = await fetch(`/api/chapters/${selectedSubject}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) return [];\n      return response.json();\n    },\n    enabled: !!selectedSubject,\n  });\n\n  // Fetch topics based on selected chapter\n  const { data: topics = [] } = useQuery({\n    queryKey: ['/api/topics', selectedChapter],\n    queryFn: async () => {\n      if (!selectedChapter) return [];\n      const token = localStorage.getItem('auth_token');\n      const response = await fetch(`/api/topics/${selectedChapter}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) return [];\n      return response.json();\n    },\n    enabled: !!selectedChapter,\n  });\n\n  // Fetch existing progress for selected student\n  const { data: existingProgress = [] } = useQuery({\n    queryKey: ['/api/progress', selectedStudent],\n    queryFn: async () => {\n      if (!selectedStudent) return [];\n      const token = localStorage.getItem('auth_token');\n      const response = await fetch(`/api/progress/${selectedStudent}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n      if (!response.ok) return [];\n      return response.json();\n    },\n    enabled: !!selectedStudent,\n  });\n\n  const handleTopicToggle = (topicId: string, checked: boolean) => {\n    setTopicProgress(prev => ({\n      ...prev,\n      [topicId]: checked\n    }));\n  };\n\n  // Save progress mutation\n  const saveProgressMutation = useMutation({\n    mutationFn: async () => {\n      const progressUpdates = Object.entries(topicProgress).map(([topicId, completed]) => ({\n        studentId: selectedStudent,\n        topicId,\n        completed,\n        completedDate: completed ? new Date().toISOString() : null,\n      }));\n      \n      const token = localStorage.getItem('auth_token');\n      return Promise.all(\n        progressUpdates.map(update => \n          apiRequest('POST', '/api/progress', update)\n        )\n      );\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Progress Saved',\n        description: 'Student progress has been updated successfully.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/progress', selectedStudent] });\n      setTopicProgress({});\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to save progress. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleSaveProgress = () => {\n    if (Object.keys(topicProgress).length === 0) {\n      toast({\n        title: 'No Changes',\n        description: 'No progress changes to save.',\n      });\n      return;\n    }\n    saveProgressMutation.mutate();\n  };\n\n  // Get topic completion status\n  const getTopicCompletion = (topicId: string) => {\n    if (topicId in topicProgress) {\n      return topicProgress[topicId];\n    }\n    const existing = existingProgress.find((p: any) => p.topicId === topicId);\n    return existing?.completed || false;\n  };\n\n  // Get last updated date for topic\n  const getLastUpdated = (topicId: string) => {\n    const existing = existingProgress.find((p: any) => p.topicId === topicId);\n    return existing?.completedDate ? new Date(existing.completedDate).toLocaleDateString() : '-';\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Progress Tracking</CardTitle>\n        <p className=\"text-gray-600 mt-1\">Update student topic completion status</p>\n      </CardHeader>\n\n      <CardContent>\n        {/* Student Selection */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Select Student</label>\n            <Select value={selectedStudent} onValueChange={setSelectedStudent}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Choose student...\" />\n              </SelectTrigger>\n              <SelectContent>\n                {students.map((student: any) => (\n                  <SelectItem key={student.id} value={student.id}>\n                    {student.name} - {student.classId}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Select Subject</label>\n            <Select value={selectedSubject} onValueChange={setSelectedSubject}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Choose subject...\" />\n              </SelectTrigger>\n              <SelectContent>\n                {subjects.map((subject: any) => (\n                  <SelectItem key={subject.id} value={subject.id}>\n                    {subject.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Select Chapter</label>\n            <Select value={selectedChapter} onValueChange={setSelectedChapter}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Choose chapter...\" />\n              </SelectTrigger>\n              <SelectContent>\n                {chapters.map((chapter: any) => (\n                  <SelectItem key={chapter.id} value={chapter.id}>\n                    {chapter.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {/* Topic Checklist */}\n        {selectedChapter && topics.length > 0 && (\n          <div className=\"bg-gray-50 rounded-lg p-6\">\n            <h3 className=\"font-semibold text-gray-900 mb-4\">\n              Chapter: {chapters.find((c: any) => c.id === selectedChapter)?.name || 'Selected Chapter'}\n            </h3>\n            <div className=\"space-y-3\">\n              {topics.map((topic: any) => {\n                const isCompleted = getTopicCompletion(topic.id);\n                return (\n                  <div\n                    key={topic.id}\n                    className=\"flex items-center justify-between p-4 bg-white rounded-lg border border-gray-200\"\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <Checkbox\n                        checked={isCompleted}\n                        onCheckedChange={(checked) => handleTopicToggle(topic.id, checked as boolean)}\n                      />\n                      <div>\n                        <p className=\"font-medium text-gray-900\">{topic.name}</p>\n                        <p className=\"text-sm text-gray-600\">{topic.description}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <span className={`px-2 py-1 text-xs font-medium rounded ${\n                        isCompleted \n                          ? 'bg-success bg-opacity-10 text-success' \n                          : 'bg-gray-100 text-gray-600'\n                      }`}>\n                        {isCompleted ? 'Learned' : 'Pending'}\n                      </span>\n                      <span className=\"text-xs text-gray-500\">\n                        {getLastUpdated(topic.id)}\n                      </span>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            <div className=\"mt-6 flex justify-end space-x-3\">\n              <Button variant=\"outline\">\n                Cancel\n              </Button>\n              <Button \n                onClick={handleSaveProgress} \n                disabled={saveProgressMutation.isPending}\n                className=\"bg-primary text-white hover:bg-blue-700\"\n              >\n                <Save className=\"mr-2\" size={16} />\n                {saveProgressMutation.isPending ? 'Saving...' : 'Save Progress'}\n              </Button>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":10417},"client/src/components/qr/QRModal.tsx":{"content":"import { useState, useRef } from 'react';\nimport { Dialog, DialogContent } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { Download, Share2, QrCode, X } from 'lucide-react';\nimport { QRCodeSVG } from 'qrcode.react';\nimport navanidhiLogoPath from '@assets/navanidhi_1755015761485.png';\n\ninterface QRModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  student: any;\n}\n\nexport function QRModal({ isOpen, onClose, student }: QRModalProps) {\n  const { toast } = useToast();\n  const [isDownloading, setIsDownloading] = useState(false);\n  const qrRef = useRef<any>(null);\n\n  if (!student) return null;\n\n  const progressUrl = `${window.location.origin}/progress/${student.qrCode}`;\n\n  const handleDownload = async () => {\n    setIsDownloading(true);\n    try {\n      if (qrRef.current) {\n        const svg = qrRef.current.querySelector('svg');\n        if (svg) {\n          // Convert SVG to canvas for download\n          const canvas = document.createElement('canvas');\n          const ctx = canvas.getContext('2d');\n          const img = new Image();\n          \n          const svgData = new XMLSerializer().serializeToString(svg);\n          const svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\n          const url = URL.createObjectURL(svgBlob);\n          \n          img.onload = () => {\n            canvas.width = 200;\n            canvas.height = 200;\n            ctx?.drawImage(img, 0, 0);\n            \n            const downloadUrl = canvas.toDataURL('image/png');\n            const a = document.createElement('a');\n            a.href = downloadUrl;\n            a.download = `${student.name}-QR-Code.png`;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n            \n            toast({\n              title: 'QR Code Downloaded',\n              description: 'QR code has been saved to your device.',\n            });\n          };\n          \n          img.src = url;\n        }\n      }\n    } catch (error) {\n      toast({\n        title: 'Download Failed',\n        description: 'Failed to download QR code. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsDownloading(false);\n    }\n  };\n\n  const handleShare = async () => {\n    try {\n      if (navigator.share) {\n        await navigator.share({\n          title: `${student.name} - Progress Tracker`,\n          text: `View ${student.name}'s academic progress in real-time`,\n          url: progressUrl,\n        });\n      } else {\n        // Fallback: copy to clipboard\n        await navigator.clipboard.writeText(progressUrl);\n        toast({\n          title: 'Link Copied',\n          description: 'Progress link has been copied to clipboard.',\n        });\n      }\n    } catch (error) {\n      toast({\n        title: 'Share Failed',\n        description: 'Failed to share QR code. Please try again.',\n        variant: 'destructive',\n      });\n    }\n  };\n\n  const handleClose = () => {\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-lg w-full mx-4 p-0 animate-scale-in\" onClick={(e) => e.stopPropagation()}>\n        <Card className=\"border-0 shadow-2xl green-glow\">\n          <div className=\"p-8\">\n            {/* Header with Navanidhi Branding */}\n            <div className=\"text-center mb-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center gap-3 flex-1\">\n                  <img \n                    src={navanidhiLogoPath} \n                    alt=\"Navanidhi Academy\" \n                    className=\"h-12 w-12 object-contain\"\n                  />\n                  <div className=\"text-left\">\n                    <h3 className=\"text-xl font-bold text-green-800\">Navanidhi Academy</h3>\n                    <p className=\"text-sm text-green-600\">Student Progress QR Code</p>\n                  </div>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleClose}\n                  className=\"h-8 w-8 p-0 hover:bg-green-50\"\n                >\n                  <X size={16} className=\"text-green-600\" />\n                </Button>\n              </div>\n              \n              {/* Student Info */}\n              <div className=\"bg-gradient-to-r from-green-50 to-emerald-50 p-3 rounded-lg\">\n                <p className=\"text-green-800 font-semibold text-lg\">\n                  {student.name}\n                </p>\n                <p className=\"text-green-600 text-sm\">\n                  Class ID: {student.classId}\n                </p>\n              </div>\n            </div>\n            \n            {/* QR Code Display Area with Green Theme */}\n            <div className=\"relative\">\n              <div className=\"w-64 h-64 mx-auto mb-6 bg-white rounded-xl flex items-center justify-center border-2 border-green-200 green-pulse shadow-lg\">\n                <div ref={qrRef} className=\"p-4\">\n                  <QRCodeSVG\n                    value={progressUrl}\n                    size={200}\n                    bgColor=\"#ffffff\"\n                    fgColor=\"#16a34a\"\n                    level=\"H\"\n                    includeMargin={true}\n                  />\n                </div>\n              </div>\n              \n              {/* QR Code Info Footer */}\n              <div className=\"text-center mb-4\">\n                <p className=\"text-green-700 font-medium text-sm\">Scan for Real-time Progress</p>\n                <p className=\"text-green-600 text-xs\">High Quality QR Code</p>\n              </div>\n            </div>\n\n            {/* Description */}\n            <p className=\"text-sm text-green-700 mb-6 text-center bg-green-50 p-3 rounded-lg\">\n              Parents can scan this QR code to view real-time progress updates without needing to log in\n            </p>\n\n            {/* Action Buttons with Green Theme */}\n            <div className=\"grid grid-cols-2 gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={handleDownload}\n                disabled={isDownloading}\n                className=\"flex items-center justify-center border-green-300 text-green-700 hover:bg-green-50 hover-lift\"\n              >\n                <Download className=\"mr-2\" size={16} />\n                {isDownloading ? 'Downloading...' : 'Download'}\n              </Button>\n              <Button\n                onClick={handleShare}\n                className=\"flex items-center justify-center green-gradient text-white hover:opacity-90 hover-lift\"\n              >\n                <Share2 className=\"mr-2\" size={16} />\n                Share\n              </Button>\n            </div>\n\n            {/* Additional Info with Green Theme */}\n            <div className=\"mt-6 p-3 bg-green-50 rounded-lg border border-green-200\">\n              <p className=\"text-xs text-green-700 text-center font-medium\">\n                💡 Tip: Print this QR code and give it to parents for easy access to progress updates\n              </p>\n            </div>\n          </div>\n        </Card>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7321},"client/src/components/students/AddStudentModal.tsx":{"content":"import { useForm, useFieldArray } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { z } from 'zod';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useState, useEffect, useRef } from 'react';\nimport confetti from 'canvas-confetti';\nimport Confetti from 'react-confetti';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Plus, Trash2, User, GraduationCap, MapPin, Users, CreditCard } from 'lucide-react';\nimport { SuccessScreen } from './SuccessScreen';\n\n// Sibling schema\nconst siblingSchema = z.object({\n  name: z.string().min(1, 'Sibling name is required'),\n  className: z.string().min(1, 'Class is required'),\n  schoolName: z.string().min(1, 'School name is required'),\n  schoolType: z.enum(['government', 'private']),\n});\n\n// Comprehensive student registration schema\nconst addStudentSchema = z.object({\n  // Basic Information\n  name: z.string().min(1, 'Student name is required'),\n  aadharNumber: z.string().min(12, 'Valid Aadhar number required').max(12, 'Aadhar number must be 12 digits'),\n  \n  // Family Information\n  fatherName: z.string().min(1, 'Father name is required'),\n  motherName: z.string().min(1, 'Mother name is required'),\n  fatherMobile: z.string().min(10, 'Valid father mobile number required'),\n  motherMobile: z.string().optional(),\n  fatherQualification: z.string().optional(),\n  motherQualification: z.string().optional(),\n  \n  // Personal Details\n  gender: z.enum(['male', 'female', 'other']),\n  dateOfBirth: z.string().min(1, 'Date of birth is required'),\n  \n  // School Information\n  presentSchoolName: z.string().min(1, 'Present school name is required'),\n  schoolType: z.enum(['government', 'private']),\n  \n  // Address Information\n  villageId: z.string().min(1, 'Village selection is required'),\n  address: z.string().min(1, 'Complete address is required'),\n  landmark: z.string().optional(),\n  \n  // Academic Information\n  classId: z.string().min(1, 'Class is required'),\n  courseType: z.enum(['monthly', 'yearly']),\n  \n  // System fields\n  soCenterId: z.string().min(1, 'SO Center is required'),\n  parentPhone: z.string().min(10, 'Parent phone is required'), // For compatibility\n  parentName: z.string().optional(), // For compatibility\n  \n  // Enrollment Information\n  enrollmentDate: z.string().min(1, 'Enrollment date is required'),\n  \n  // Siblings\n  siblings: z.array(siblingSchema).optional(),\n  \n  // Admission Fee\n  admissionFeePaid: z.boolean().default(false),\n  receiptNumber: z.string().optional(),\n}).refine((data) => {\n  // If admission fee is paid, receipt number is required\n  if (data.admissionFeePaid && (!data.receiptNumber || data.receiptNumber.trim() === '')) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"Receipt number is required when admission fee is paid\",\n  path: [\"receiptNumber\"],\n});\n\ntype AddStudentFormData = z.infer<typeof addStudentSchema>;\n\ninterface AddStudentModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function AddStudentModal({ isOpen, onClose }: AddStudentModalProps) {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [selectedState, setSelectedState] = useState('');\n  const [selectedDistrict, setSelectedDistrict] = useState('');\n  const [selectedMandal, setSelectedMandal] = useState('');\n  const [selectedClass, setSelectedClass] = useState('');\n  const [selectedCourseType, setSelectedCourseType] = useState('');\n  const [classFeesData, setClassFeesData] = useState<any>(null);\n  const [aadharValidation, setAadharValidation] = useState<{ isChecking: boolean; isValid: boolean | null }>({ isChecking: false, isValid: null });\n  const aadharTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const [showSuccessScreen, setShowSuccessScreen] = useState(false);\n  const [registrationResult, setRegistrationResult] = useState<any>(null);\n\n  // PhonePe success sound using the provided audio file only\n  const playSuccessSound = async () => {\n    try {\n      // Use the provided PhonePe audio file - no fallback sound\n      const audio = new Audio('/phone_pe_success.mp3');\n      audio.volume = 0.9; // Set volume to 90%\n      \n      // Wait for audio to load before playing\n      await new Promise((resolve, reject) => {\n        audio.addEventListener('canplaythrough', resolve, { once: true });\n        audio.addEventListener('error', reject, { once: true });\n        audio.load(); // Force load\n      });\n      \n      await audio.play();\n      console.log('PhonePe audio played successfully');\n    } catch (error) {\n      console.log('PhonePe audio failed to play:', error);\n      // Don't play any fallback sound - user wants only the MP3\n    }\n  };\n\n\n  \n  // Silent confetti celebration function (no audio)\n  const triggerConfetti = () => {\n    // Multiple confetti bursts for visual celebration effect only\n    const count = 200;\n    const defaults = {\n      origin: { y: 0.7 },\n      disableForReducedMotion: false // Ensure confetti shows but with no sound\n    };\n    \n    // Left side burst\n    confetti({\n      ...defaults,\n      particleCount: Math.floor(count * 0.25),\n      angle: 60,\n      spread: 55,\n      origin: { x: 0 }\n    });\n    \n    // Right side burst  \n    confetti({\n      ...defaults,\n      particleCount: Math.floor(count * 0.25),\n      angle: 120,\n      spread: 55,\n      origin: { x: 1 }\n    });\n    \n    // Center burst\n    confetti({\n      ...defaults,\n      particleCount: Math.floor(count * 0.35),\n      angle: 90,\n      spread: 100,\n      origin: { x: 0.5 }\n    });\n    \n    // Delayed second wave for extended celebration\n    setTimeout(() => {\n      confetti({\n        particleCount: 100,\n        spread: 120,\n        origin: { y: 0.6 },\n        disableForReducedMotion: false\n      });\n    }, 500);\n  };\n\n  const handleSuccessClose = () => {\n    setShowSuccessScreen(false);\n    setRegistrationResult(null);\n    // Reset form and state\n    form.reset();\n    setSelectedState('');\n    setSelectedDistrict('');\n    setSelectedMandal('');\n    setSelectedClass('');\n    setSelectedCourseType('');\n    setClassFeesData(null);\n    setAadharValidation({ isChecking: false, isValid: null });\n    // Clear any pending validation timeout\n    if (aadharTimeoutRef.current) {\n      clearTimeout(aadharTimeoutRef.current);\n    }\n    onClose();\n  };\n\n  // Fetch available classes from API\n  const { data: classesData = [] } = useQuery({\n    queryKey: ['/api/classes'],\n    enabled: isOpen,\n  });\n  \n  // Fetch address hierarchy data\n  const { data: states = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/states'],\n    enabled: isOpen,\n  });\n\n  const { data: districts = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/districts', selectedState],\n    queryFn: async () => {\n      if (!selectedState) return [];\n      const response = await apiRequest('GET', `/api/admin/addresses/districts/${selectedState}`);\n      return await response.json();\n    },\n    enabled: !!selectedState && isOpen,\n  });\n\n  const { data: mandals = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/mandals', selectedDistrict],\n    queryFn: async () => {\n      if (!selectedDistrict) return [];\n      const response = await apiRequest('GET', `/api/admin/addresses/mandals/${selectedDistrict}`);\n      return await response.json();\n    },\n    enabled: !!selectedDistrict && isOpen,\n  });\n\n  const { data: villages = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/villages', selectedMandal],\n    queryFn: async () => {\n      if (!selectedMandal) return [];\n      const response = await apiRequest('GET', `/api/admin/addresses/villages/${selectedMandal}`);\n      return await response.json();\n    },\n    enabled: !!selectedMandal && isOpen,\n  });\n\n  // Fetch current user's SO Center information\n  const { data: currentSoCenter } = useQuery({\n    queryKey: ['/api/so-centers/current'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/so-centers/current');\n      return await response.json();\n    },\n    enabled: !!user && user.role === 'so_center' && isOpen,\n  });\n\n  // Fetch class fees when class and course type are selected\n  const { data: classFees, isLoading: isLoadingFees } = useQuery({\n    queryKey: ['/api/class-fees', selectedClass, selectedCourseType],\n    queryFn: async () => {\n      if (!selectedClass || !selectedCourseType) return null;\n      const response = await apiRequest('GET', `/api/class-fees?classId=${selectedClass}&courseType=${selectedCourseType}`);\n      return await response.json();\n    },\n    enabled: !!selectedClass && !!selectedCourseType && isOpen,\n  });\n\n  // Update class fees data when it changes\n  useEffect(() => {\n    setClassFeesData(classFees);\n  }, [classFees]);\n\n  const form = useForm<AddStudentFormData>({\n    resolver: zodResolver(addStudentSchema),\n    mode: 'onChange',\n    defaultValues: {\n      name: '',\n      aadharNumber: '',\n      fatherName: '',\n      motherName: '',\n      fatherMobile: '',\n      motherMobile: '',\n      fatherQualification: '',\n      motherQualification: '',\n      gender: 'male' as const,\n      dateOfBirth: '',\n      presentSchoolName: '',\n      schoolType: 'government' as const,\n      villageId: '',\n      address: '',\n      landmark: '',\n      classId: '',\n      courseType: 'monthly' as const,\n      soCenterId: currentSoCenter?.id || '',\n      parentPhone: '',\n      parentName: '',\n      enrollmentDate: new Date().toISOString().split('T')[0], // Default to today\n      siblings: [],\n      admissionFeePaid: false,\n      receiptNumber: '',\n    },\n  });\n  \n  const { fields: siblingFields, append: appendSibling, remove: removeSibling } = useFieldArray({\n    control: form.control,\n    name: 'siblings'\n  });\n\n  // Update SO Center ID in form when currentSoCenter loads\n  useEffect(() => {\n    if (currentSoCenter?.id) {\n      console.log('🏢 Setting SO Center ID in form:', currentSoCenter.id);\n      form.setValue('soCenterId', currentSoCenter.id);\n    }\n  }, [currentSoCenter, form]);\n\n  // Aadhar validation mutation\n  const validateAadharMutation = useMutation({\n    mutationFn: async (aadharNumber: string) => {\n      const response = await apiRequest('POST', '/api/students/validate-aadhar', { aadharNumber });\n      return await response.json();\n    },\n    onSuccess: (response: any) => {\n      setAadharValidation({ isChecking: false, isValid: response.isUnique });\n      if (!response.isUnique) {\n        toast({\n          title: 'Aadhar Already Registered',\n          description: 'This Aadhar number is already registered. Contact admin if this is an error.',\n          variant: 'destructive',\n        });\n      }\n    },\n    onError: (error: any) => {\n      setAadharValidation({ isChecking: false, isValid: null });\n      toast({\n        title: 'Validation Error',\n        description: 'Unable to validate Aadhar number. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const createStudentMutation = useMutation({\n    mutationFn: async (data: AddStudentFormData) => {\n      const { siblings, admissionFeePaid, receiptNumber, ...studentData } = data;\n      console.log('Sending registration request...');\n      try {\n        const response = await apiRequest('POST', '/api/students/comprehensive', {\n          studentData,\n          siblings,\n          admissionFeePaid,\n          receiptNumber\n        });\n        console.log('Registration response:', response.status, response.statusText);\n        if (!response.ok) {\n          throw new Error(`Registration failed: ${response.status} ${response.statusText}`);\n        }\n        return response;\n      } catch (error) {\n        console.error('Registration error:', error);\n        throw error;\n      }\n    },\n    onSuccess: async (response: Response) => {\n      console.log('Processing successful response...');\n      try {\n        const result = await response.json();\n        console.log('Registration result:', result);\n        setRegistrationResult({\n          studentId: result.student?.studentId || result.student?.id,\n          name: result.student?.name || form.getValues('name'),\n          transactionId: result.transactionId,\n          admissionFeePaid: result.admissionFeePaid || form.getValues('admissionFeePaid'),\n          amount: result.amount || (classFeesData?.admissionFee ? parseFloat(classFeesData.admissionFee) : null)\n        });\n        \n        // Trigger confetti celebration (silent)\n        triggerConfetti();\n        \n        // Play ONLY PhonePe sound after a brief delay to avoid conflicts\n        setTimeout(() => {\n          playSuccessSound();\n        }, 200);\n        \n        setShowSuccessScreen(true);\n        // Invalidate and refetch students data immediately\n        queryClient.invalidateQueries({ queryKey: ['/api/students'] });\n        queryClient.refetchQueries({ queryKey: ['/api/students'] });\n      } catch (error) {\n        console.error('Error processing success response:', error);\n        toast({\n          title: 'Registration Error',\n          description: 'Registration may have succeeded but there was an error displaying the result.',\n          variant: 'destructive',\n        });\n      }\n    },\n    onError: (error: any) => {\n      console.error('Registration failed:', error);\n      toast({\n        title: 'Registration Failed',\n        description: error.message || 'Failed to register student. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: AddStudentFormData) => {\n    console.log('Form submission started with data:', data);\n    console.log('Form errors:', form.formState.errors);\n    \n    // Set parent phone for compatibility (using father's mobile)\n    data.parentPhone = data.fatherMobile;\n    data.parentName = data.fatherName;\n    \n    createStudentMutation.mutate(data);\n  };\n  \n  // Handle Aadhar number validation with 2-3 second delay\n  const handleAadharValidation = async (aadharNumber: string) => {\n    // Clear any existing timeout\n    if (aadharTimeoutRef.current) {\n      clearTimeout(aadharTimeoutRef.current);\n    }\n    \n    if (aadharNumber.length === 12) {\n      setAadharValidation({ isChecking: true, isValid: null });\n      \n      // Add 2.5 second delay before validation\n      aadharTimeoutRef.current = setTimeout(() => {\n        validateAadharMutation.mutate(aadharNumber);\n      }, 2500);\n    } else {\n      setAadharValidation({ isChecking: false, isValid: null });\n    }\n  };\n  \n  // Auto-sync parentPhone and parentName from father details\n  useEffect(() => {\n    const fatherMobile = form.watch('fatherMobile');\n    const fatherName = form.watch('fatherName');\n    \n    if (fatherMobile) {\n      form.setValue('parentPhone', fatherMobile);\n    }\n    if (fatherName) {\n      form.setValue('parentName', fatherName);\n    }\n  }, [form.watch('fatherMobile'), form.watch('fatherName'), form]);\n\n  // Cleanup timeout on component unmount\n  useEffect(() => {\n    return () => {\n      if (aadharTimeoutRef.current) {\n        clearTimeout(aadharTimeoutRef.current);\n      }\n    };\n  }, []);\n  \n  // Handle address cascade changes\n  const handleStateChange = (stateId: string) => {\n    setSelectedState(stateId);\n    setSelectedDistrict('');\n    setSelectedMandal('');\n    form.setValue('villageId', '');\n  };\n\n  const handleDistrictChange = (districtId: string) => {\n    setSelectedDistrict(districtId);\n    setSelectedMandal('');\n    form.setValue('villageId', '');\n  };\n\n  const handleMandalChange = (mandalId: string) => {\n    setSelectedMandal(mandalId);\n    form.setValue('villageId', '');\n  };\n  \n  // Handle class and course type changes for fee display\n  const handleClassChange = (classId: string) => {\n    setSelectedClass(classId);\n    form.setValue('classId', classId);\n  };\n  \n  const handleCourseTypeChange = (courseType: string) => {\n    setSelectedCourseType(courseType);\n    form.setValue('courseType', courseType as 'monthly' | 'yearly');\n  };\n  \n  // Add new sibling\n  const addSibling = () => {\n    appendSibling({\n      name: '',\n      className: '',\n      schoolName: '',\n      schoolType: 'government'\n    });\n  };\n\n  const classes = Array.isArray(classesData) && classesData.length > 0 ? classesData.map((cls: any) => ({\n    value: cls.id,\n    label: cls.name\n  })) : [];\n  \n  const qualificationOptions = [\n    'Illiterate',\n    'Primary School',\n    'Middle School', \n    '10th Class',\n    '12th Class',\n    'Diploma',\n    'Graduation',\n    'Post Graduation',\n    'PhD',\n    'Other'\n  ];\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[900px] max-h-[90vh] overflow-y-auto animate-scale-in\">\n        <DialogHeader className=\"bg-gradient-to-r from-green-50 to-emerald-50 -mx-6 -mt-6 px-6 py-4 rounded-t-lg\">\n          <DialogTitle className=\"flex items-center gap-2 text-green-800\">\n            <GraduationCap className=\"h-5 w-5 text-green-600\" />\n            Comprehensive Student Registration\n          </DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit, (errors) => {\n            console.log('Form validation failed:', errors);\n            toast({\n              title: 'Form Validation Error',\n              description: 'Please check all required fields and correct any errors.',\n              variant: 'destructive',\n            });\n          })} className=\"space-y-6\">\n            \n            {/* Student Personal Information */}\n            <Card className=\"animate-fade-in border-green-100 hover-lift\">\n              <CardHeader className=\"bg-gradient-to-r from-green-50 to-emerald-50\">\n                <CardTitle className=\"flex items-center gap-2 text-green-800\">\n                  <User className=\"h-4 w-4 text-green-600\" />\n                  Student Personal Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Student Full Name *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter student full name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"aadharNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Aadhar Number *</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Enter 12-digit Aadhar number\" \n                            maxLength={12}\n                            {...field}\n                            onChange={(e) => {\n                              field.onChange(e);\n                              handleAadharValidation(e.target.value);\n                            }}\n                          />\n                        </FormControl>\n                        {aadharValidation.isChecking && (\n                          <p className=\"text-sm text-blue-600\">🔍 Validating Aadhar number... Please wait 2-3 seconds</p>\n                        )}\n                        {aadharValidation.isValid === false && (\n                          <p className=\"text-sm text-red-600\">❌ Aadhar number already registered</p>\n                        )}\n                        {aadharValidation.isValid === true && (\n                          <p className=\"text-sm text-green-600\">✅ Aadhar number is available</p>\n                        )}\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"gender\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Gender *</FormLabel>\n                        <FormControl>\n                          <RadioGroup\n                            onValueChange={field.onChange}\n                            value={field.value}\n                            className=\"flex space-x-6\"\n                          >\n                            <div className=\"flex items-center space-x-2\">\n                              <RadioGroupItem value=\"male\" id=\"male\" />\n                              <Label htmlFor=\"male\">Male</Label>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <RadioGroupItem value=\"female\" id=\"female\" />\n                              <Label htmlFor=\"female\">Female</Label>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <RadioGroupItem value=\"other\" id=\"other\" />\n                              <Label htmlFor=\"other\">Other</Label>\n                            </div>\n                          </RadioGroup>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"dateOfBirth\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Date of Birth *</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Family Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"h-4 w-4\" />\n                  Family Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"fatherName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Father's Name *</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Enter father's full name\" \n                            {...field}\n                            onChange={(e) => {\n                              field.onChange(e);\n                              // Auto-sync with parentName for compatibility\n                              form.setValue('parentName', e.target.value);\n                            }}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"motherName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Mother's Name *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter mother's full name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"fatherMobile\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Father's Mobile Number *</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"+91 98765 43210\" \n                            {...field} \n                            onChange={(e) => {\n                              field.onChange(e);\n                              // Auto-sync with parentPhone for compatibility\n                              form.setValue('parentPhone', e.target.value);\n                            }}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"motherMobile\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Mother's Mobile Number</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"+91 98765 43210 (Optional)\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"fatherQualification\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Father's Qualification</FormLabel>\n                        <FormControl>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select qualification\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {qualificationOptions.map((qual) => (\n                                <SelectItem key={qual} value={qual}>\n                                  {qual}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"motherQualification\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Mother's Qualification</FormLabel>\n                        <FormControl>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select qualification\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {qualificationOptions.map((qual) => (\n                                <SelectItem key={qual} value={qual}>\n                                  {qual}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* School Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <GraduationCap className=\"h-4 w-4\" />\n                  School Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"presentSchoolName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Present School Name *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter current school name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"schoolType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>School Type *</FormLabel>\n                        <FormControl>\n                          <RadioGroup\n                            onValueChange={field.onChange}\n                            value={field.value}\n                            className=\"flex space-x-6\"\n                          >\n                            <div className=\"flex items-center space-x-2\">\n                              <RadioGroupItem value=\"government\" id=\"government\" />\n                              <Label htmlFor=\"government\">Government</Label>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <RadioGroupItem value=\"private\" id=\"private\" />\n                              <Label htmlFor=\"private\">Private</Label>\n                            </div>\n                          </RadioGroup>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Address Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MapPin className=\"h-4 w-4\" />\n                  Address Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"state\">State *</Label>\n                    <Select onValueChange={handleStateChange} value={selectedState}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select state\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {states.map((state: any) => (\n                          <SelectItem key={state.id} value={state.id}>\n                            {state.name} ({state.code})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"district\">District *</Label>\n                    <Select onValueChange={handleDistrictChange} value={selectedDistrict} disabled={!selectedState}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select district\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {districts.map((district: any) => (\n                          <SelectItem key={district.id} value={district.id}>\n                            {district.name} ({district.code})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"mandal\">Mandal *</Label>\n                    <Select onValueChange={handleMandalChange} value={selectedMandal} disabled={!selectedDistrict}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select mandal\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {mandals.map((mandal: any) => (\n                          <SelectItem key={mandal.id} value={mandal.id}>\n                            {mandal.name} ({mandal.code})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"villageId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Village *</FormLabel>\n                        <FormControl>\n                          <Select onValueChange={field.onChange} value={field.value} disabled={!selectedMandal}>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select village\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {villages.map((village: any) => (\n                                <SelectItem key={village.id} value={village.id}>\n                                  {village.name} ({village.code})\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"address\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Complete Address *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"House number, street, area\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"landmark\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Landmark</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Near temple, hospital, etc.\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Academic Information & Fees */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <GraduationCap className=\"h-4 w-4\" />\n                  Academic Information & Fees\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"classId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Class *</FormLabel>\n                        <FormControl>\n                          <Select onValueChange={(value) => { field.onChange(value); handleClassChange(value); }} value={field.value}>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select class\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {classes.map((cls) => (\n                                <SelectItem key={cls.value} value={cls.value}>\n                                  {cls.label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"courseType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Course Type *</FormLabel>\n                        <FormControl>\n                          <Select onValueChange={(value) => { field.onChange(value); handleCourseTypeChange(value); }} value={field.value}>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select course type\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"monthly\">Monthly Fee</SelectItem>\n                              <SelectItem value=\"yearly\">Yearly Fee</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                {/* Enrollment Date */}\n                <FormField\n                  control={form.control}\n                  name=\"enrollmentDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Enrollment Date *</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"date\" \n                          {...field}\n                          max={new Date().toISOString().split('T')[0]} // Can't enroll for future dates\n                        />\n                      </FormControl>\n                      <FormMessage />\n                      <p className=\"text-xs text-gray-500 mt-1\">\n                        Select the enrollment date for the student\n                      </p>\n                    </FormItem>\n                  )}\n                />\n                \n                {/* Fee Display */}\n                {isLoadingFees && selectedClass && selectedCourseType && (\n                  <div className=\"p-4 bg-gray-50 rounded-lg border border-gray-200\">\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500\"></div>\n                      <span className=\"text-gray-600\">Loading fee structure...</span>\n                    </div>\n                  </div>\n                )}\n                {classFeesData && !isLoadingFees && (\n                  <div className=\"p-4 bg-blue-50 rounded-lg border border-blue-200\">\n                    <h4 className=\"font-medium text-blue-900 mb-3\">📊 Fee Structure for Selected Class</h4>\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <span className=\"text-gray-600\">Admission Fee:</span>\n                        <span className=\"font-semibold text-green-600 ml-2\">₹{classFeesData.admissionFee}</span>\n                      </div>\n                      {selectedCourseType === 'monthly' && classFeesData.monthlyFee && (\n                        <div>\n                          <span className=\"text-gray-600\">Monthly Fee:</span>\n                          <span className=\"font-semibold text-blue-600 ml-2\">₹{classFeesData.monthlyFee}</span>\n                        </div>\n                      )}\n                      {selectedCourseType === 'yearly' && classFeesData.yearlyFee && (\n                        <div>\n                          <span className=\"text-gray-600\">Yearly Fee:</span>\n                          <span className=\"font-semibold text-purple-600 ml-2\">₹{classFeesData.yearlyFee}</span>\n                        </div>\n                      )}\n                    </div>\n                    \n                    {classFeesData.description && (\n                      <p className=\"text-xs text-gray-600 mt-2\">{classFeesData.description}</p>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n            \n            {/* Siblings Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"h-4 w-4\" />\n                  Siblings Information\n                  <Button type=\"button\" onClick={addSibling} size=\"sm\" variant=\"outline\">\n                    <Plus className=\"h-4 w-4 mr-1\" />\n                    Add Sibling\n                  </Button>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {siblingFields.length === 0 ? (\n                  <p className=\"text-gray-500 text-sm\">No siblings added. Click \"Add Sibling\" to add sibling information.</p>\n                ) : (\n                  siblingFields.map((field, index) => (\n                    <div key={field.id} className=\"p-4 border border-gray-200 rounded-lg bg-gray-50\">\n                      <div className=\"flex justify-between items-center mb-3\">\n                        <h5 className=\"font-medium text-gray-800\">Sibling {index + 1}</h5>\n                        <Button \n                          type=\"button\" \n                          onClick={() => removeSibling(index)}\n                          size=\"sm\" \n                          variant=\"destructive\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name={`siblings.${index}.name`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Sibling Name</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Enter sibling name\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name={`siblings.${index}.className`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Class</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"e.g., 5th Class, 8th Class\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      \n                      <div className=\"grid grid-cols-2 gap-4 mt-3\">\n                        <FormField\n                          control={form.control}\n                          name={`siblings.${index}.schoolName`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>School Name</FormLabel>\n                              <FormControl>\n                                <Input placeholder=\"Enter school name\" {...field} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        \n                        <FormField\n                          control={form.control}\n                          name={`siblings.${index}.schoolType`}\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>School Type</FormLabel>\n                              <FormControl>\n                                <RadioGroup\n                                  onValueChange={field.onChange}\n                                  value={field.value}\n                                  className=\"flex space-x-4\"\n                                >\n                                  <div className=\"flex items-center space-x-2\">\n                                    <RadioGroupItem value=\"government\" id={`gov-${index}`} />\n                                    <Label htmlFor={`gov-${index}`}>Government</Label>\n                                  </div>\n                                  <div className=\"flex items-center space-x-2\">\n                                    <RadioGroupItem value=\"private\" id={`pvt-${index}`} />\n                                    <Label htmlFor={`pvt-${index}`}>Private</Label>\n                                  </div>\n                                </RadioGroup>\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </div>\n                  ))\n                )}\n              </CardContent>\n            </Card>\n            \n            {/* Admission Fee Handling */}\n            {classFeesData && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <CreditCard className=\"h-4 w-4\" />\n                    Admission Fee Payment\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"admissionFeePaid\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                        <div className=\"space-y-1 leading-none\">\n                          <FormLabel className=\"font-medium\">\n                            Admission Fee Paid (₹{classFeesData.admissionFee})\n                          </FormLabel>\n                          <p className=\"text-sm text-gray-600\">\n                            Check this if the admission fee has been paid. The amount will be added to SO Center wallet.\n                          </p>\n                        </div>\n                      </FormItem>\n                    )}\n                  />\n                  \n                  {form.watch('admissionFeePaid') && (\n                    <FormField\n                      control={form.control}\n                      name=\"receiptNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Receipt Number *</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Enter receipt/invoice number\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  )}\n                </CardContent>\n              </Card>\n            )}\n\n\n            \n            <div className=\"flex justify-end space-x-3 pt-6\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createStudentMutation.isPending}\n                className=\"bg-primary text-white hover:bg-blue-700\"\n                onClick={() => console.log('Register button clicked')}\n              >\n                {createStudentMutation.isPending ? (\n                  'Registering Student...'\n                ) : (\n                  'Register Student'\n                )}\n              </Button>\n              \n\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n      \n      {/* Success Screen */}\n      <SuccessScreen \n        isOpen={showSuccessScreen}\n        onClose={handleSuccessClose}\n        studentData={registrationResult}\n      />\n    </Dialog>\n  );\n}\n","size_bytes":50060},"client/src/components/students/StudentTable.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { QRModal } from '@/components/qr/QRModal';\nimport { AddStudentModal } from '@/components/students/AddStudentModal';\nimport { \n  Search, \n  QrCode, \n  Edit, \n  TrendingUp, \n  IndianRupee,\n  ChevronLeft,\n  ChevronRight,\n  Eye,\n  UserPlus\n} from 'lucide-react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { useQuery } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\n\ninterface Student {\n  id: string;\n  name: string;\n  classId: string;\n  parentPhone: string;\n  qrCode: string;\n}\n\ninterface StudentTableProps {\n  students: Student[];\n  isLoading: boolean;\n}\n\nexport function StudentTable({ students, isLoading }: StudentTableProps) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [classFilter, setClassFilter] = useState('all');\n  const [selectedStudent, setSelectedStudent] = useState<Student | null>(null);\n  const [isQRModalOpen, setIsQRModalOpen] = useState(false);\n  const [paymentHistory, setPaymentHistory] = useState<any[]>([]);\n  const [isPaymentHistoryOpen, setIsPaymentHistoryOpen] = useState(false);\n  const [loadingHistory, setLoadingHistory] = useState(false);\n  const [isEnrollModalOpen, setIsEnrollModalOpen] = useState(false);\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  // Fetch all classes dynamically\n  const { data: classes = [] } = useQuery({\n    queryKey: ['/api/classes'],\n    queryFn: async () => {\n      const response = await fetch('/api/classes', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch classes');\n      }\n      const data = await response.json();\n      return Array.isArray(data) ? data : [];\n    },\n    refetchOnWindowFocus: false,\n  });\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\n  };\n\n  // Filter students based on search and class filter\n  const filteredStudents = (students || []).filter((student: any) => {\n    const matchesSearch = student.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         student.parentPhone?.includes(searchTerm);\n    \n    // Class filtering logic - use actual class IDs from database\n    const matchesClass = classFilter === 'all' || student.classId === classFilter;\n    \n    return matchesSearch && matchesClass;\n  });\n\n  console.log('Students received:', students);\n  console.log('Filtered students:', filteredStudents);\n\n  // Mock additional data for students that might not come from API\n  const displayStudents = filteredStudents.map((student: any) => ({\n    ...student,\n    paymentStatus: student.paymentStatus || 'pending', // Use real payment status\n    progress: student.progress || 0, // Initial progress is 0\n    qrCode: student.qrCode || `student_${student.id}` // Ensure QR code exists\n  }));\n\n  const handleShowQR = (student: any) => {\n    setSelectedStudent(student);\n    setIsQRModalOpen(true);\n  };\n\n  const handleShowPaymentHistory = async (student: any) => {\n    setLoadingHistory(true);\n    try {\n      const response = await fetch(`/api/students/${student.id}/payments`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch payment history');\n      }\n      \n      const history = await response.json();\n      setPaymentHistory(Array.isArray(history) ? history : []);\n      setSelectedStudent(student);\n      setIsPaymentHistoryOpen(true);\n    } catch (error) {\n      console.error('Payment history error:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch payment history\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoadingHistory(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-gray-600\">Loading students...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <>\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-xl font-semibold text-gray-900\">Recent Students</CardTitle>\n            <div className=\"flex items-center space-x-3\">\n              {/* Search */}\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 text-gray-400\" size={16} />\n                <Input\n                  placeholder=\"Search students...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 w-64\"\n                />\n              </div>\n              \n              {/* Filter */}\n              <Select value={classFilter} onValueChange={setClassFilter}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue placeholder=\"All Classes\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Classes</SelectItem>\n                  {Array.isArray(classes) && classes.map((cls: any) => (\n                    <SelectItem key={cls.id} value={cls.id}>\n                      {cls.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              {/* Enroll Student Button - Only for SO Center users */}\n              {user?.role === 'so_center' && (\n                <Button\n                  onClick={() => setIsEnrollModalOpen(true)}\n                  className=\"bg-primary hover:bg-primary/90 text-white px-4 py-2 rounded-md transition-colors\"\n                >\n                  <UserPlus className=\"mr-2\" size={16} />\n                  Enroll Student\n                </Button>\n              )}\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            {displayStudents.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-gray-500\">No students found</p>\n              </div>\n            ) : (\n              <table className=\"w-full\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                      Student\n                    </th>\n                    <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                      Class\n                    </th>\n                    <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                      Payment Status\n                    </th>\n                    <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                      Progress\n                    </th>\n                    <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                      QR Code\n                    </th>\n                    <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                      Actions\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {displayStudents.map((student) => (\n                  <tr key={student.id} className=\"hover:bg-gray-50 transition\">\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-10 h-10 bg-gradient-to-r from-blue-400 to-blue-600 rounded-full flex items-center justify-center\">\n                          <span className=\"text-white font-medium text-sm\">\n                            {getInitials(student.name)}\n                          </span>\n                        </div>\n                        <div className=\"ml-4\">\n                          <div className=\"text-sm font-medium text-gray-900\">{student.name}</div>\n                          <div className=\"text-sm text-gray-500\">{student.parentPhone}</div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Badge variant=\"outline\" className=\"text-blue-800 border-blue-200\">\n                        {student.className || student.classId}\n                      </Badge>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Badge \n                        variant={student.paymentStatus === 'paid' ? 'default' : 'secondary'}\n                        className={student.paymentStatus === 'paid' \n                          ? 'bg-success text-white' \n                          : 'bg-warning text-white'\n                        }\n                      >\n                        {student.paymentStatus === 'paid' ? 'Paid' : 'Pending'}\n                      </Badge>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-24 bg-gray-200 rounded-full h-2 mr-3\">\n                          <div \n                            className=\"bg-success h-2 rounded-full\" \n                            style={{width: `${student.progress}%`}}\n                          ></div>\n                        </div>\n                        <span className=\"text-sm font-medium text-gray-900\">{student.progress}%</span>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleShowQR(student)}\n                        className=\"text-gray-700 hover:bg-gray-100\"\n                      >\n                        <QrCode className=\"mr-2\" size={16} />\n                        View QR\n                      </Button>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                      <div className=\"flex space-x-2\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          onClick={() => handleShowPaymentHistory(student)}\n                          disabled={loadingHistory}\n                          title=\"View Payment History\"\n                        >\n                          <Eye className=\"text-blue-500\" size={16} />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <TrendingUp className=\"text-accent\" size={16} />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <IndianRupee className=\"text-secondary\" size={16} />\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                  ))}\n                </tbody>\n              </table>\n            )}\n          </div>\n\n          {/* Pagination */}\n          <div className=\"flex items-center justify-between mt-6 pt-4 border-t border-gray-200\">\n            <p className=\"text-sm text-gray-700\">\n              Showing <span className=\"font-medium\">1</span> to <span className=\"font-medium\">2</span> of{' '}\n              <span className=\"font-medium\">156</span> students\n            </p>\n            <nav className=\"flex space-x-2\">\n              <Button variant=\"outline\" size=\"sm\">\n                <ChevronLeft size={16} />\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" className=\"bg-primary text-white\">\n                1\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                2\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                3\n              </Button>\n              <Button variant=\"outline\" size=\"sm\">\n                <ChevronRight size={16} />\n              </Button>\n            </nav>\n          </div>\n        </CardContent>\n      </Card>\n\n      <QRModal\n        isOpen={isQRModalOpen}\n        onClose={() => setIsQRModalOpen(false)}\n        student={selectedStudent}\n      />\n\n      {/* Student Enrollment Modal */}\n      <AddStudentModal\n        isOpen={isEnrollModalOpen}\n        onClose={() => setIsEnrollModalOpen(false)}\n      />\n\n      {/* Payment History Modal */}\n      <Dialog open={isPaymentHistoryOpen} onOpenChange={setIsPaymentHistoryOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Payment History - {selectedStudent?.name}</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n            {paymentHistory.length === 0 ? (\n              <p className=\"text-center text-gray-500 py-8\">No payment history found</p>\n            ) : (\n              paymentHistory.map((payment: any, index: number) => (\n                <div key={payment.id || index} className=\"flex justify-between items-center p-4 border rounded-lg\">\n                  <div>\n                    <p className=\"font-semibold text-lg\">₹{parseFloat(payment.amount || '0').toLocaleString()}</p>\n                    <p className=\"text-sm text-gray-600\">{payment.description || 'Payment'}</p>\n                    <p className=\"text-xs text-gray-500\">\n                      {new Date(payment.createdAt).toLocaleDateString()} - {new Date(payment.createdAt).toLocaleTimeString()}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm capitalize font-medium\">{payment.paymentMethod || 'Cash'}</p>\n                    {payment.month && <p className=\"text-xs text-gray-500\">{payment.month} {payment.year}</p>}\n                    <Badge variant=\"outline\" className=\"mt-1\">\n                      {payment.paymentMethod === 'wallet' ? 'Wallet' : 'Cash'}\n                    </Badge>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":15101},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","size_bytes":1882},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":771},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin/Academics.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Plus, Edit, Eye, FileText, Award, TrendingUp, Users, Calendar, BookOpen, School, Building, Trash2, Clock, Target, CheckCircle } from 'lucide-react';\n\n// Question schema for individual questions\nconst questionSchema = z.object({\n  questionNumber: z.number(),\n  marks: z.number().min(1, 'Marks must be at least 1'),\n  questionText: z.string().min(1, 'Question text is required'),\n});\n\n// Updated schema with questions support\nconst examSchema = z.object({\n  title: z.string().min(1, 'Exam title is required'),\n  description: z.string().min(1, 'Description is required'),\n  classId: z.string().min(1, 'Class selection is required'),\n  subjectId: z.string().min(1, 'Subject selection is required'),\n  chapterIds: z.array(z.string()).min(1, 'At least one chapter must be selected'),\n  soCenterIds: z.array(z.string()).min(1, 'At least one SO Center must be selected'),\n  examDate: z.string().min(1, 'Exam date is required'),\n  duration: z.string().min(1, 'Duration is required'),\n  totalQuestions: z.string().min(1, 'Total questions is required'),\n  totalMarks: z.string().min(1, 'Total marks is required'),\n  passingMarks: z.string().min(1, 'Passing marks is required'),\n  status: z.string().default('scheduled'),\n  questions: z.array(questionSchema).optional().default([]),\n});\n\ntype ExamFormData = z.infer<typeof examSchema>;\n\ninterface AddExamModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  editingExam?: any;\n}\n\nfunction AddExamModal({ isOpen, onClose, editingExam }: AddExamModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [questions, setQuestions] = useState<Array<{questionNumber: number, marks: number, questionText: string}>>([]);\n\n  // Helper functions for questions management\n  const addQuestion = () => {\n    const newQuestion = {\n      questionNumber: questions.length + 1,\n      marks: 1,\n      questionText: '',\n    };\n    setQuestions([...questions, newQuestion]);\n  };\n\n  const removeQuestion = (index: number) => {\n    const updatedQuestions = questions.filter((_, i) => i !== index)\n      .map((q, i) => ({ ...q, questionNumber: i + 1 }));\n    setQuestions(updatedQuestions);\n  };\n\n  const updateQuestion = (index: number, field: keyof typeof questions[0], value: string | number) => {\n    const updatedQuestions = [...questions];\n    updatedQuestions[index] = { ...updatedQuestions[index], [field]: value };\n    setQuestions(updatedQuestions);\n  };\n\n\n\n  // Fetch real data from Supabase\n  const { data: classes = [], isLoading: classesLoading } = useQuery({\n    queryKey: ['/api/classes'],\n    enabled: isOpen,\n  });\n\n  const { data: subjects = [], isLoading: subjectsLoading } = useQuery({\n    queryKey: ['/api/subjects'],\n    enabled: isOpen,\n  });\n\n  const { data: chapters = [], isLoading: chaptersLoading } = useQuery({\n    queryKey: ['/api/chapters'],\n    enabled: isOpen,\n  });\n\n  const { data: soCenters = [], isLoading: soCentersLoading } = useQuery({\n    queryKey: ['/api/admin/so-centers'],\n    enabled: isOpen,\n  });\n\n  const form = useForm<ExamFormData>({\n    resolver: zodResolver(examSchema),\n    defaultValues: {\n      title: '',\n      description: '',\n      classId: '',\n      subjectId: '',\n      chapterIds: [],\n      soCenterIds: [],\n      examDate: '',\n      duration: '',\n      totalQuestions: '',\n      totalMarks: '',\n      passingMarks: '',\n      status: 'scheduled',\n      questions: [],\n    },\n  });\n\n  // Reset form when editingExam changes\n  React.useEffect(() => {\n    if (editingExam) {\n      form.reset({\n        title: editingExam.title || '',\n        description: editingExam.description || '',\n        classId: editingExam.classId || '',\n        subjectId: editingExam.subjectId || '',\n        chapterIds: editingExam.chapterIds || [],\n        soCenterIds: editingExam.soCenterIds || [],\n        examDate: editingExam.examDate ? new Date(editingExam.examDate).toISOString().split('T')[0] : '',\n        duration: editingExam.duration?.toString() || '',\n        totalQuestions: editingExam.totalQuestions?.toString() || '',\n        totalMarks: editingExam.totalMarks?.toString() || '',\n        passingMarks: editingExam.passingMarks?.toString() || '',\n        status: editingExam.status || 'scheduled',\n      });\n      // Load existing questions if editing - safely parse and ensure array\n      let parsedQuestions = [];\n      if (editingExam.questions) {\n        try {\n          parsedQuestions = typeof editingExam.questions === 'string' \n            ? JSON.parse(editingExam.questions) \n            : editingExam.questions;\n        } catch (error) {\n          console.warn('Failed to parse exam questions:', error);\n          parsedQuestions = [];\n        }\n      }\n      setQuestions(Array.isArray(parsedQuestions) ? parsedQuestions : []);\n    } else {\n      form.reset({\n        title: '',\n        description: '',\n        classId: '',\n        subjectId: '',\n        chapterIds: [],\n        soCenterIds: [],\n        examDate: '',\n        duration: '',\n        totalQuestions: '',\n        totalMarks: '',\n        passingMarks: '',\n        status: 'scheduled',\n        questions: [],\n      });\n      setQuestions([]);\n    }\n  }, [editingExam, form]);\n\n  // Auto-calculate total marks from questions\n  React.useEffect(() => {\n    const totalMarks = questions.reduce((sum, q) => sum + q.marks, 0);\n    if (totalMarks > 0) {\n      form.setValue('totalMarks', totalMarks.toString());\n      form.setValue('totalQuestions', questions.length.toString());\n    }\n  }, [questions, form]);\n\n  const selectedClassId = form.watch('classId');\n  const selectedSubjectId = form.watch('subjectId');\n  const selectedChapterIds = form.watch('chapterIds');\n  const selectedSoCenterIds = form.watch('soCenterIds');\n  \n  // Filter subjects by selected class\n  const filteredSubjects = subjects.filter((subject: any) => {\n    console.log('Subject:', subject, 'Selected Class ID:', selectedClassId);\n    return selectedClassId ? subject.classId === selectedClassId : false;\n  });\n\n  // Filter chapters by selected subject\n  const filteredChapters = chapters.filter((chapter: any) => \n    selectedSubjectId ? chapter.subjectId === selectedSubjectId : false\n  );\n\n  const mutation = useMutation({\n    mutationFn: async (data: ExamFormData) => {\n      const submitData = {\n        ...data,\n        duration: parseInt(data.duration),\n        totalQuestions: parseInt(data.totalQuestions),\n        totalMarks: parseInt(data.totalMarks),\n        passingMarks: parseInt(data.passingMarks),\n        questions: JSON.stringify(data.questions || []), // Convert questions array to JSON string\n      };\n      const endpoint = editingExam ? `/api/admin/exams/${editingExam.id}` : '/api/admin/exams';\n      const method = editingExam ? 'PUT' : 'POST';\n      return apiRequest(method, endpoint, submitData);\n    },\n    onSuccess: () => {\n      toast({\n        title: editingExam ? 'Exam Updated' : 'Exam Created',\n        description: `Exam has been successfully ${editingExam ? 'updated' : 'created'}.`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/exams'] });\n      form.reset();\n      setQuestions([]);\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || `Failed to ${editingExam ? 'update' : 'create'} exam.`,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: ExamFormData) => {\n    const submitData = {\n      ...data,\n      questions: questions,\n    };\n    mutation.mutate(submitData);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold text-green-700\">\n            {editingExam ? 'Edit Exam' : 'Create New Exam'}\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Basic Info */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-gray-800\">Basic Information</h3>\n                \n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Exam Title</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter exam title\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Enter exam description\"\n                          className=\"min-h-[100px]\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"examDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Exam Date</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"duration\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Duration (minutes)</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" placeholder=\"90\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"totalQuestions\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Total Questions</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" placeholder=\"50\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"totalMarks\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Total Marks</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" placeholder=\"100\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"passingMarks\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Passing Marks</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" placeholder=\"40\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              {/* Academic Structure */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-gray-800\">Academic Structure</h3>\n                \n                <FormField\n                  control={form.control}\n                  name=\"classId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Class</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select a class\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {classesLoading ? (\n                            <SelectItem value=\"loading\" disabled>Loading classes...</SelectItem>\n                          ) : classes.length > 0 ? (\n                            classes.map((cls: any) => (\n                              <SelectItem key={cls.id} value={cls.id}>\n                                {cls.name}\n                              </SelectItem>\n                            ))\n                          ) : (\n                            <SelectItem value=\"no-data\" disabled>No classes available</SelectItem>\n                          )}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"subjectId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Subject</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value} disabled={!selectedClassId}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select a subject\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {subjectsLoading ? (\n                            <SelectItem value=\"loading\" disabled>Loading subjects...</SelectItem>\n                          ) : filteredSubjects.length > 0 ? (\n                            filteredSubjects.map((subject: any) => (\n                              <SelectItem key={subject.id} value={subject.id}>\n                                {subject.name}\n                              </SelectItem>\n                            ))\n                          ) : (\n                            <SelectItem value=\"no-data\" disabled>\n                              {selectedClassId ? 'No subjects available for selected class' : 'Please select a class first'}\n                            </SelectItem>\n                          )}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Multi-Chapter Selection */}\n                <FormField\n                  control={form.control}\n                  name=\"chapterIds\"\n                  render={() => (\n                    <FormItem>\n                      <FormLabel>Chapters (Select Multiple)</FormLabel>\n                      <div className=\"max-h-40 overflow-y-auto border rounded-md p-3 space-y-2\">\n                        {chaptersLoading ? (\n                          <div className=\"text-sm text-gray-500\">Loading chapters...</div>\n                        ) : filteredChapters.length > 0 ? (\n                          filteredChapters.map((chapter: any) => (\n                            <FormField\n                              key={chapter.id}\n                              control={form.control}\n                              name=\"chapterIds\"\n                              render={({ field }) => {\n                                return (\n                                  <FormItem\n                                    key={chapter.id}\n                                    className=\"flex flex-row items-start space-x-3 space-y-0\"\n                                  >\n                                    <FormControl>\n                                      <Checkbox\n                                        checked={field.value?.includes(chapter.id)}\n                                        onCheckedChange={(checked) => {\n                                          return checked\n                                            ? field.onChange([...field.value, chapter.id])\n                                            : field.onChange(\n                                                field.value?.filter(\n                                                  (value) => value !== chapter.id\n                                                )\n                                              )\n                                        }}\n                                      />\n                                    </FormControl>\n                                    <FormLabel className=\"text-sm font-normal\">\n                                      {chapter.name}\n                                    </FormLabel>\n                                  </FormItem>\n                                )\n                              }}\n                            />\n                          ))\n                        ) : (\n                          <div className=\"text-sm text-gray-500\">\n                            {selectedSubjectId ? 'No chapters available for selected subject' : 'Please select a subject first'}\n                          </div>\n                        )}\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Multi-SO Center Selection */}\n                <FormField\n                  control={form.control}\n                  name=\"soCenterIds\"\n                  render={() => (\n                    <FormItem>\n                      <div className=\"flex items-center justify-between\">\n                        <FormLabel>SO Centers (Select Multiple)</FormLabel>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            const currentIds = form.getValues('soCenterIds') || [];\n                            const allIds = soCenters.map((center: any) => center.id);\n                            \n                            if (currentIds.length === allIds.length) {\n                              // If all are selected, unselect all\n                              form.setValue('soCenterIds', []);\n                            } else {\n                              // Select all\n                              form.setValue('soCenterIds', allIds);\n                            }\n                          }}\n                          className=\"text-xs\"\n                        >\n                          {selectedSoCenterIds.length === soCenters.length ? 'Unselect All' : 'Select All'}\n                        </Button>\n                      </div>\n                      <div className=\"max-h-40 overflow-y-auto border rounded-md p-3 space-y-2\">\n                        {soCentersLoading ? (\n                          <div className=\"text-sm text-gray-500\">Loading SO Centers...</div>\n                        ) : soCenters.length > 0 ? (\n                          soCenters.map((center: any) => (\n                            <FormField\n                              key={center.id}\n                              control={form.control}\n                              name=\"soCenterIds\"\n                              render={({ field }) => {\n                                return (\n                                  <FormItem\n                                    key={center.id}\n                                    className=\"flex flex-row items-start space-x-3 space-y-0\"\n                                  >\n                                    <FormControl>\n                                      <Checkbox\n                                        checked={field.value?.includes(center.id)}\n                                        onCheckedChange={(checked) => {\n                                          return checked\n                                            ? field.onChange([...field.value, center.id])\n                                            : field.onChange(\n                                                field.value?.filter(\n                                                  (value) => value !== center.id\n                                                )\n                                              )\n                                        }}\n                                      />\n                                    </FormControl>\n                                    <FormLabel className=\"text-sm font-normal\">\n                                      <div className=\"flex items-center gap-2\">\n                                        <Building className=\"h-4 w-4 text-green-600\" />\n                                        <span>{center.name}</span>\n                                        <Badge variant=\"outline\" className=\"text-xs\">\n                                          {center.centerId}\n                                        </Badge>\n                                      </div>\n                                    </FormLabel>\n                                  </FormItem>\n                                )\n                              }}\n                            />\n                          ))\n                        ) : (\n                          <div className=\"text-sm text-gray-500\">No SO Centers available</div>\n                        )}\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Questions Section */}\n            <div className=\"space-y-4 pt-6 border-t\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold text-gray-800\">Exam Questions</h3>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={addQuestion}\n                  className=\"flex items-center gap-2\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                  Add Question\n                </Button>\n              </div>\n\n              {Array.isArray(questions) && questions.length > 0 && (\n                <div className=\"space-y-3 max-h-60 overflow-y-auto border rounded-md p-4\">\n                  {questions.map((question, index) => (\n                    <div key={index} className=\"flex items-center gap-3 p-3 border rounded-md bg-gray-50\">\n                      <div className=\"flex items-center gap-2 min-w-0 flex-1\">\n                        <span className=\"text-sm font-medium text-gray-600 whitespace-nowrap\">\n                          Q{question.questionNumber}:\n                        </span>\n                        <Input\n                          placeholder=\"Enter question text\"\n                          value={question.questionText}\n                          onChange={(e) => updateQuestion(index, 'questionText', e.target.value)}\n                          className=\"flex-1\"\n                        />\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-sm text-gray-600\">Marks:</span>\n                        <Input\n                          type=\"number\"\n                          min=\"1\"\n                          value={question.marks}\n                          onChange={(e) => updateQuestion(index, 'marks', parseInt(e.target.value) || 1)}\n                          className=\"w-20\"\n                        />\n                      </div>\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeQuestion(index)}\n                        className=\"text-red-500 hover:text-red-700 hover:bg-red-50\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              )}\n\n              {questions.length === 0 && (\n                <div className=\"text-center py-8 text-gray-500 border-2 border-dashed border-gray-200 rounded-md\">\n                  <FileText className=\"h-8 w-8 mx-auto mb-2 text-gray-400\" />\n                  <p>No questions added yet. Click \"Add Question\" to start.</p>\n                </div>\n              )}\n\n              {questions.length > 0 && (\n                <div className=\"flex justify-between items-center p-3 bg-green-50 border border-green-200 rounded-md\">\n                  <div className=\"text-sm text-green-700\">\n                    <strong>Total Questions:</strong> {questions.length} | \n                    <strong> Total Marks:</strong> {questions.reduce((sum, q) => sum + q.marks, 0)}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex justify-end space-x-4 pt-6 border-t\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onClose}\n                disabled={mutation.isPending}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                className=\"bg-green-600 hover:bg-green-700\"\n                disabled={mutation.isPending}\n              >\n                {mutation.isPending ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"animate-spin w-4 h-4 border-2 border-white/30 border-t-white rounded-full\" />\n                    {editingExam ? 'Updating...' : 'Creating...'}\n                  </div>\n                ) : (\n                  <>\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    {editingExam ? 'Update Exam' : 'Create Exam'}\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function Academics() {\n  const [showExamModal, setShowExamModal] = useState(false);\n  const [editingExam, setEditingExam] = useState<any>(null);\n  const { toast } = useToast();\n\n  // Fetch real exams data from Supabase\n  const { data: exams = [], isLoading: examsLoading, refetch: refetchExams } = useQuery({\n    queryKey: ['/api/admin/exams'],\n  });\n\n  // Delete exam mutation\n  const deleteExamMutation = useMutation({\n    mutationFn: async (examId: string) => {\n      await apiRequest('DELETE', `/api/admin/exams/${examId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Exam deleted successfully\",\n      });\n      refetchExams();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete exam\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Fetch real stats from Supabase\n  const { data: classes = [] } = useQuery({\n    queryKey: ['/api/classes'],\n  });\n\n  const { data: subjects = [] } = useQuery({\n    queryKey: ['/api/subjects'],\n  });\n\n  const { data: chapters = [] } = useQuery({\n    queryKey: ['/api/chapters'],\n  });\n\n  const { data: soCenters = [] } = useQuery({\n    queryKey: ['/api/admin/so-centers'],\n  });\n\n  const handleEditExam = (exam: any) => {\n    setEditingExam(exam);\n    setShowExamModal(true);\n  };\n\n  const handleCreateExam = () => {\n    setEditingExam(null);\n    setShowExamModal(true);\n  };\n\n  const closeModal = () => {\n    setShowExamModal(false);\n    setEditingExam(null);\n  };\n\n  return (\n    <DashboardLayout title=\"Academic Management\">\n      <div className=\"space-y-8 p-6\">\n        {/* Header Section */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Academic Management</h1>\n            <p className=\"text-gray-600\">Manage exams, classes, subjects, and academic content</p>\n          </div>\n          <Button\n            onClick={handleCreateExam}\n            className=\"bg-green-600 hover:bg-green-700 text-white\"\n          >\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Create Exam\n          </Button>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card className=\"border-l-4 border-l-green-500\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Classes</CardTitle>\n              <School className=\"h-4 w-4 text-green-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-700\">{classes.length}</div>\n              <p className=\"text-xs text-muted-foreground\">Active classes</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-l-4 border-l-blue-500\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Subjects</CardTitle>\n              <BookOpen className=\"h-4 w-4 text-blue-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-700\">{subjects.length}</div>\n              <p className=\"text-xs text-muted-foreground\">Available subjects</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-l-4 border-l-purple-500\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Chapters</CardTitle>\n              <FileText className=\"h-4 w-4 text-purple-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-700\">{chapters.length}</div>\n              <p className=\"text-xs text-muted-foreground\">Available chapters</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-l-4 border-l-orange-500\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">SO Centers</CardTitle>\n              <Building className=\"h-4 w-4 text-orange-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-orange-700\">{soCenters.length}</div>\n              <p className=\"text-xs text-muted-foreground\">Connected centers</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Exams Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Award className=\"h-5 w-5 text-green-600\" />\n              Exams ({exams.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {examsLoading ? (\n              <div className=\"flex justify-center py-8\">\n                <div className=\"animate-spin w-8 h-8 border-4 border-green-600/30 border-t-green-600 rounded-full\" />\n              </div>\n            ) : exams.length === 0 ? (\n              <div className=\"text-center py-8 text-gray-500\">\n                No exams found. Create your first exam to get started.\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Title</TableHead>\n                    <TableHead>Class</TableHead>\n                    <TableHead>Subject</TableHead>\n                    <TableHead>Date</TableHead>\n                    <TableHead>Duration</TableHead>\n                    <TableHead>Total Marks</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead className=\"text-right\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {exams.map((exam: any) => (\n                    <TableRow key={exam.id}>\n                      <TableCell className=\"font-medium\">{exam.title}</TableCell>\n                      <TableCell>\n                        {classes.find((c: any) => c.id === exam.classId)?.name || 'Unknown'}\n                      </TableCell>\n                      <TableCell>\n                        {subjects.find((s: any) => s.id === exam.subjectId)?.name || 'Unknown'}\n                      </TableCell>\n                      <TableCell>\n                        {new Date(exam.examDate).toLocaleDateString('en-GB')}\n                      </TableCell>\n                      <TableCell>{exam.duration} min</TableCell>\n                      <TableCell>{exam.totalMarks}</TableCell>\n                      <TableCell>\n                        <Badge \n                          variant={exam.status === 'completed' ? 'default' : \n                                  exam.status === 'ongoing' ? 'secondary' : 'outline'}\n                          className={exam.status === 'completed' ? 'bg-green-100 text-green-800 border-green-200' : \n                                    exam.status === 'ongoing' ? 'bg-blue-100 text-blue-800 border-blue-200' : \n                                    'bg-yellow-100 text-yellow-800 border-yellow-200'}\n                        >\n                          {exam.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <div className=\"flex justify-end gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleEditExam(exam)}\n                            className=\"h-8 w-8 p-0\"\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              if (window.confirm('Are you sure you want to delete this exam?')) {\n                                deleteExamMutation.mutate(exam.id);\n                              }\n                            }}\n                            disabled={deleteExamMutation.isPending}\n                            className=\"h-8 w-8 p-0 text-red-600 hover:text-red-700 hover:bg-red-50\"\n                          >\n                            {deleteExamMutation.isPending ? (\n                              <div className=\"animate-spin w-4 h-4 border-2 border-red-600/30 border-t-red-600 rounded-full\" />\n                            ) : (\n                              <Trash2 className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Add Exam Modal */}\n        <AddExamModal\n          isOpen={showExamModal}\n          onClose={closeModal}\n          editingExam={editingExam}\n        />\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":37203},"client/src/pages/admin/Addresses.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { \n  MapPin, \n  Map, \n  Building2, \n  Home,\n  Plus,\n  Edit,\n  Trash2\n} from 'lucide-react';\n\n// Form schemas\nconst stateSchema = z.object({\n  name: z.string().min(1, 'State name is required'),\n  code: z.string().min(2, 'State code is required').max(3, 'State code should be 2-3 characters'),\n});\n\nconst districtSchema = z.object({\n  name: z.string().min(1, 'District name is required'),\n  code: z.string().min(2, 'District code is required').max(5, 'District code should be 2-5 characters'),\n  stateId: z.string().min(1, 'State selection is required'),\n});\n\nconst mandalSchema = z.object({\n  name: z.string().min(1, 'Mandal name is required'),\n  code: z.string().min(2, 'Mandal code is required').max(5, 'Mandal code should be 2-5 characters'),\n  districtId: z.string().min(1, 'District selection is required'),\n});\n\nconst villageSchema = z.object({\n  name: z.string().min(1, 'Village name is required'),\n  code: z.string().min(2, 'Village code is required').max(5, 'Village code should be 2-5 characters'),\n  mandalId: z.string().min(1, 'Mandal selection is required'),\n});\n\ntype StateFormData = z.infer<typeof stateSchema>;\ntype DistrictFormData = z.infer<typeof districtSchema>;\ntype MandalFormData = z.infer<typeof mandalSchema>;\ntype VillageFormData = z.infer<typeof villageSchema>;\n\ninterface AddModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  type: 'state' | 'district' | 'mandal' | 'village';\n  editing?: any;\n}\n\nfunction AddAddressModal({ isOpen, onClose, type, editing }: AddModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Determine schema and default values based on type\n  const getSchema = () => {\n    switch (type) {\n      case 'state': return stateSchema;\n      case 'district': return districtSchema;\n      case 'mandal': return mandalSchema;\n      case 'village': return villageSchema;\n      default: return stateSchema;\n    }\n  };\n\n  const form = useForm({\n    resolver: zodResolver(getSchema()),\n    defaultValues: editing || {},\n  });\n\n  const { data: states = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/states'],\n    enabled: type === 'district',\n  });\n\n  const { data: districts = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/districts'],\n    enabled: type === 'mandal',\n  });\n\n  const { data: mandals = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/mandals'],\n    enabled: type === 'village',\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: any) => {\n      const endpoint = editing \n        ? `/api/admin/addresses/${type}s/${editing.id}` \n        : `/api/admin/addresses/${type}s`;\n      const method = editing ? 'PUT' : 'POST';\n      return apiRequest(method, endpoint, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: `${type.charAt(0).toUpperCase() + type.slice(1)} ${editing ? 'Updated' : 'Created'}`,\n        description: `${type.charAt(0).toUpperCase() + type.slice(1)} has been successfully ${editing ? 'updated' : 'created'}.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/admin/addresses/${type}s`] });\n      form.reset();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || `Failed to ${editing ? 'update' : 'create'} ${type}.`,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    mutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle>\n            {editing ? 'Edit' : 'Add'} {type.charAt(0).toUpperCase() + type.slice(1)}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>{type.charAt(0).toUpperCase() + type.slice(1)} Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder={`Enter ${type} name`} {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"code\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>{type.charAt(0).toUpperCase() + type.slice(1)} Code</FormLabel>\n                  <FormControl>\n                    <Input placeholder={`Enter ${type} code`} {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {type === 'district' && (\n              <FormField\n                control={form.control}\n                name=\"stateId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>State</FormLabel>\n                    <FormControl>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select state\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {states.map((state: any) => (\n                            <SelectItem key={state.id} value={state.id}>\n                              {state.name} ({state.code})\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            {type === 'mandal' && (\n              <FormField\n                control={form.control}\n                name=\"districtId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>District</FormLabel>\n                    <FormControl>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select district\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {districts.map((district: any) => (\n                            <SelectItem key={district.id} value={district.id}>\n                              {district.name} ({district.code})\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            {type === 'village' && (\n              <FormField\n                control={form.control}\n                name=\"mandalId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Mandal</FormLabel>\n                    <FormControl>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select mandal\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {mandals.map((mandal: any) => (\n                            <SelectItem key={mandal.id} value={mandal.id}>\n                              {mandal.name} ({mandal.code})\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={mutation.isPending}\n                className=\"bg-primary text-white hover:bg-blue-700\"\n              >\n                {mutation.isPending \n                  ? (editing ? 'Updating...' : 'Creating...') \n                  : (editing ? `Update ${type.charAt(0).toUpperCase() + type.slice(1)}` : `Create ${type.charAt(0).toUpperCase() + type.slice(1)}`)\n                }\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function Addresses() {\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState('states');\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [modalType, setModalType] = useState<'state' | 'district' | 'mandal' | 'village'>('state');\n  const [editingItem, setEditingItem] = useState<any>(null);\n\n  // Fetch real data from Supabase database\n  const { data: states = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/states'],\n  });\n\n  const { data: districts = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/districts'],\n  });\n\n  const { data: mandals = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/mandals'],\n  });\n\n  const { data: villages = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/villages'],\n  });\n\n  const handleAdd = (type: 'state' | 'district' | 'mandal' | 'village') => {\n    setModalType(type);\n    setEditingItem(null);\n    setIsModalOpen(true);\n  };\n\n  const handleEdit = (type: 'state' | 'district' | 'mandal' | 'village', item: any) => {\n    setModalType(type);\n    setEditingItem(item);\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setEditingItem(null);\n  };\n\n  // Delete mutations for each address type\n  const deleteStateMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest('DELETE', `/api/admin/addresses/states/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"State deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/addresses/states'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Delete Failed\",\n        description: error.message || \"Failed to delete state\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteDistrictMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest('DELETE', `/api/admin/addresses/districts/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"District deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/addresses/districts'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Delete Failed\",\n        description: error.message || \"Failed to delete district\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMandalMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest('DELETE', `/api/admin/addresses/mandals/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Mandal deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/addresses/mandals'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Delete Failed\",\n        description: error.message || \"Failed to delete mandal\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteVillageMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest('DELETE', `/api/admin/addresses/villages/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Village deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/addresses/villages'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Delete Failed\",\n        description: error.message || \"Failed to delete village\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDelete = (type: 'state' | 'district' | 'mandal' | 'village', id: string) => {\n    if (!confirm(`Are you sure you want to delete this ${type}? This action cannot be undone.`)) {\n      return;\n    }\n\n    switch (type) {\n      case 'state':\n        deleteStateMutation.mutate(id);\n        break;\n      case 'district':\n        deleteDistrictMutation.mutate(id);\n        break;\n      case 'mandal':\n        deleteMandalMutation.mutate(id);\n        break;\n      case 'village':\n        deleteVillageMutation.mutate(id);\n        break;\n    }\n  };\n\n  return (\n    <DashboardLayout\n      title=\"Address Management\"\n      subtitle=\"Manage states, districts, mandals, and villages hierarchy\"\n    >\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"states\">States</TabsTrigger>\n          <TabsTrigger value=\"districts\">Districts</TabsTrigger>\n          <TabsTrigger value=\"mandals\">Mandals</TabsTrigger>\n          <TabsTrigger value=\"villages\">Villages</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"states\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <MapPin size={20} />\n                  <span>States</span>\n                </CardTitle>\n                <Button onClick={() => handleAdd('state')} className=\"bg-primary text-white\">\n                  <Plus className=\"mr-2\" size={16} />\n                  Add State\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-4\">\n                {states.map((state: any) => (\n                  <div key={state.id} className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\">\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900\">{state.name}</h3>\n                      <div className=\"flex items-center space-x-2 mt-1\">\n                        <Badge variant=\"outline\">{state.code}</Badge>\n                      </div>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => handleEdit('state', state)}>\n                        <Edit className=\"text-primary\" size={16} />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => handleDelete('state', state.id)}>\n                        <Trash2 className=\"text-destructive\" size={16} />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"districts\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Map size={20} />\n                  <span>Districts</span>\n                </CardTitle>\n                <Button onClick={() => handleAdd('district')} className=\"bg-primary text-white\">\n                  <Plus className=\"mr-2\" size={16} />\n                  Add District\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-4\">\n                {districts.map((district: any) => (\n                  <div key={district.id} className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\">\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900\">{district.name}</h3>\n                      <div className=\"flex items-center space-x-2 mt-1\">\n                        <Badge variant=\"outline\">{district.code}</Badge>\n                      </div>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => handleEdit('district', district)}>\n                        <Edit className=\"text-primary\" size={16} />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => handleDelete('district', district.id)}>\n                        <Trash2 className=\"text-destructive\" size={16} />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"mandals\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Building2 size={20} />\n                  <span>Mandals</span>\n                </CardTitle>\n                <Button onClick={() => handleAdd('mandal')} className=\"bg-primary text-white\">\n                  <Plus className=\"mr-2\" size={16} />\n                  Add Mandal\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-4\">\n                {mandals.map((mandal: any) => (\n                  <div key={mandal.id} className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\">\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900\">{mandal.name}</h3>\n                      <div className=\"flex items-center space-x-2 mt-1\">\n                        <Badge variant=\"outline\">{mandal.code}</Badge>\n                      </div>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => handleEdit('mandal', mandal)}>\n                        <Edit className=\"text-primary\" size={16} />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => handleDelete('mandal', mandal.id)}>\n                        <Trash2 className=\"text-destructive\" size={16} />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"villages\">\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Home size={20} />\n                  <span>Villages</span>\n                </CardTitle>\n                <Button onClick={() => handleAdd('village')} className=\"bg-primary text-white\">\n                  <Plus className=\"mr-2\" size={16} />\n                  Add Village\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-4\">\n                {villages.map((village: any) => (\n                  <div key={village.id} className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg\">\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900\">{village.name}</h3>\n                      <div className=\"flex items-center space-x-2 mt-1\">\n                        <Badge variant=\"outline\">{village.code}</Badge>\n                        <Badge variant=\"secondary\">{village.mandalName}</Badge>\n                      </div>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => handleEdit('village', village)}>\n                        <Edit className=\"text-primary\" size={16} />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => handleDelete('village', village.id)}>\n                        <Trash2 className=\"text-destructive\" size={16} />\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n      \n      <AddAddressModal \n        isOpen={isModalOpen} \n        onClose={handleCloseModal}\n        type={modalType}\n        editing={editingItem}\n      />\n    </DashboardLayout>\n  );\n}","size_bytes":21799},"client/src/pages/admin/AllPayments.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { useToast } from '@/hooks/use-toast';\nimport { \n  Search, \n  IndianRupee, \n  Download,\n  Calendar,\n  TrendingUp,\n  Filter,\n  Users,\n  Building2,\n  UserCheck,\n  Eye,\n  User,\n  Phone,\n  MapPin,\n  GraduationCap\n} from 'lucide-react';\n\nexport default function AdminAllPayments() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [methodFilter, setMethodFilter] = useState('all');\n  const [activeTab, setActiveTab] = useState('student-fees');\n  const { toast } = useToast();\n  \n  // Location filter states\n  const [selectedState, setSelectedState] = useState('all');\n  const [selectedDistrict, setSelectedDistrict] = useState('all');\n  const [selectedMandal, setSelectedMandal] = useState('all');\n  const [selectedVillage, setSelectedVillage] = useState('all');\n  \n  // Student detail modal states\n  const [selectedStudent, setSelectedStudent] = useState<any>(null);\n  const [monthFilter, setMonthFilter] = useState('all');\n  const [yearFilter, setYearFilter] = useState('all');\n\n  // Fetch real student fee payment histories\n  const { data: studentPayments = [], isLoading: isLoadingStudentPayments } = useQuery({\n    queryKey: ['/api/admin/payments/student-fees'],\n  });\n\n  // Fetch real SO Center wallet transaction histories\n  const { data: soWalletTransactions = [], isLoading: isLoadingSoWallet } = useQuery({\n    queryKey: ['/api/admin/payments/so-wallet-histories'],\n  });\n\n  // Fetch real Agent wallet transaction histories  \n  const { data: agentWalletTransactions = [], isLoading: isLoadingAgentWallet } = useQuery({\n    queryKey: ['/api/admin/payments/agent-wallet-histories'],\n  });\n\n  // Fetch location data for filtering\n  const { data: states = [] } = useQuery({\n    queryKey: ['/api/admin/locations/states'],\n  });\n\n  const { data: districts = [] } = useQuery({\n    queryKey: ['/api/admin/locations/districts', selectedState],\n    enabled: selectedState !== 'all',\n  });\n\n  const { data: mandals = [] } = useQuery({\n    queryKey: ['/api/admin/locations/mandals', selectedDistrict],\n    enabled: selectedDistrict !== 'all',\n  });\n\n  const { data: villages = [] } = useQuery({\n    queryKey: ['/api/admin/locations/villages', selectedMandal],\n    enabled: selectedMandal !== 'all',\n  });\n\n  // Fetch student details when selected\n  const { data: studentDetails, isLoading: isLoadingStudentDetails } = useQuery({\n    queryKey: ['/api/admin/students', selectedStudent?.id, 'details'],\n    enabled: !!selectedStudent?.id,\n  });\n\n  const getMethodBadgeColor = (method: string) => {\n    switch (method) {\n      case 'cash': return 'bg-green-100 text-green-800';\n      case 'online': return 'bg-blue-100 text-blue-800';\n      case 'bank_transfer': return 'bg-purple-100 text-purple-800';\n      case 'cheque': return 'bg-yellow-100 text-yellow-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getTypeBadgeColor = (type: string) => {\n    switch (type) {\n      case 'credit': return 'bg-green-100 text-green-800';\n      case 'debit': return 'bg-red-100 text-red-800';\n      case 'commission': return 'bg-blue-100 text-blue-800';\n      case 'withdrawal': return 'bg-orange-100 text-orange-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  // Location filter change handlers\n  const handleStateChange = (value: string) => {\n    setSelectedState(value);\n    setSelectedDistrict('all');\n    setSelectedMandal('all');\n    setSelectedVillage('all');\n  };\n\n  const handleDistrictChange = (value: string) => {\n    setSelectedDistrict(value);\n    setSelectedMandal('all');\n    setSelectedVillage('all');\n  };\n\n  const handleMandalChange = (value: string) => {\n    setSelectedMandal(value);\n    setSelectedVillage('all');\n  };\n\n  // Filter functions for each tab with location filtering\n  const filteredStudentPayments = studentPayments.filter((payment: any) => {\n    const matchesSearch = payment.studentName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         payment.soCenterName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         payment.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesMethod = methodFilter === 'all' || payment.paymentMethod === methodFilter;\n    const matchesState = selectedState === 'all' || payment.stateName === selectedState;\n    const matchesDistrict = selectedDistrict === 'all' || payment.districtName === selectedDistrict;\n    const matchesMandal = selectedMandal === 'all' || payment.mandalName === selectedMandal;\n    const matchesVillage = selectedVillage === 'all' || payment.villageName === selectedVillage;\n    return matchesSearch && matchesMethod && matchesState && matchesDistrict && matchesMandal && matchesVillage;\n  });\n\n  const filteredSoWalletTransactions = soWalletTransactions.filter((transaction: any) => {\n    const matchesSearch = transaction.soCenterName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         transaction.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         transaction.collectionAgentName?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesState = selectedState === 'all' || transaction.stateName === selectedState;\n    const matchesDistrict = selectedDistrict === 'all' || transaction.districtName === selectedDistrict;\n    const matchesMandal = selectedMandal === 'all' || transaction.mandalName === selectedMandal;\n    const matchesVillage = selectedVillage === 'all' || transaction.villageName === selectedVillage;\n    return matchesSearch && matchesState && matchesDistrict && matchesMandal && matchesVillage;\n  });\n\n  const filteredAgentWalletTransactions = agentWalletTransactions.filter((transaction: any) => {\n    const matchesSearch = transaction.soCenterName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         transaction.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesState = selectedState === 'all' || transaction.stateName === selectedState;\n    const matchesDistrict = selectedDistrict === 'all' || transaction.districtName === selectedDistrict;\n    const matchesMandal = selectedMandal === 'all' || transaction.mandalName === selectedMandal;\n    const matchesVillage = selectedVillage === 'all' || transaction.villageName === selectedVillage;\n    return matchesSearch && matchesState && matchesDistrict && matchesMandal && matchesVillage;\n  });\n\n  const handleExport = () => {\n    toast({ \n      title: 'Export Payments', \n      description: 'Payment data export functionality coming soon!' \n    });\n  };\n\n  // Calculate statistics based on active tab\n  const getTabStatistics = () => {\n    switch (activeTab) {\n      case 'student-fees':\n        const totalStudentAmount = filteredStudentPayments.reduce((sum: number, payment: any) => sum + parseFloat(payment.amount || 0), 0);\n        return {\n          totalAmount: totalStudentAmount,\n          totalCount: filteredStudentPayments.length,\n          label: 'Student Payments'\n        };\n      case 'so-wallet':\n        const totalSoAmount = filteredSoWalletTransactions.reduce((sum: number, transaction: any) => {\n          const amount = parseFloat(transaction.amount || 0);\n          return sum + (transaction.type === 'credit' ? amount : -amount);\n        }, 0);\n        return {\n          totalAmount: totalSoAmount,\n          totalCount: filteredSoWalletTransactions.length,\n          label: 'SO Center Transactions'\n        };\n      case 'agent-wallet':\n        const totalAgentAmount = filteredAgentWalletTransactions.reduce((sum: number, transaction: any) => {\n          const amount = parseFloat(transaction.amount || 0);\n          return sum + (transaction.type === 'commission' ? amount : -amount);\n        }, 0);\n        return {\n          totalAmount: totalAgentAmount,\n          totalCount: filteredAgentWalletTransactions.length,\n          label: 'Agent Transactions'\n        };\n      default:\n        return { totalAmount: 0, totalCount: 0, label: 'Transactions' };\n    }\n  };\n\n  const stats = getTabStatistics();\n\n  // Filter student payments by month/year\n  const getFilteredStudentPayments = () => {\n    if (!studentDetails?.payments) return [];\n    return studentDetails.payments.filter((payment: any) => {\n      const matchesMonth = monthFilter === 'all' || payment.month === monthFilter;\n      const matchesYear = yearFilter === 'all' || payment.year === yearFilter;\n      return matchesMonth && matchesYear;\n    });\n  };\n\n  // Student Detail Modal Component\n  const StudentDetailModal = () => {\n    if (!selectedStudent || !studentDetails) return null;\n\n    const student = studentDetails?.student;\n    const filteredPayments = getFilteredStudentPayments();\n    const totalPaid = filteredPayments.reduce((sum: number, payment: any) => sum + parseFloat(payment.amount || 0), 0);\n\n    return (\n      <Dialog open={!!selectedStudent} onOpenChange={() => setSelectedStudent(null)}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2 text-xl font-bold text-emerald-800 dark:text-emerald-300\">\n              <User className=\"w-6 h-6\" />\n              Student Details - {student.name}\n            </DialogTitle>\n          </DialogHeader>\n\n          <div className=\"space-y-6\">\n            {/* Student Basic Information */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg text-emerald-700 dark:text-emerald-300\">Basic Information</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <User className=\"w-4 h-4 text-gray-600\" />\n                    <span className=\"font-medium\">Student ID:</span>\n                    <span>{student.studentId}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Phone className=\"w-4 h-4 text-gray-600\" />\n                    <span className=\"font-medium\">Phone:</span>\n                    <span>{student.phone || 'N/A'}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <GraduationCap className=\"w-4 h-4 text-gray-600\" />\n                    <span className=\"font-medium\">Class:</span>\n                    <span>{student.className || 'N/A'}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Calendar className=\"w-4 h-4 text-gray-600\" />\n                    <span className=\"font-medium\">Enrollment Date:</span>\n                    <span>{student.enrollmentDate ? new Date(student.enrollmentDate).toLocaleDateString() : 'N/A'}</span>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg text-emerald-700 dark:text-emerald-300\">Location & Center</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <Building2 className=\"w-4 h-4 text-gray-600\" />\n                    <span className=\"font-medium\">SO Center:</span>\n                    <span>{student.soCenterName}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <MapPin className=\"w-4 h-4 text-gray-600\" />\n                    <span className=\"font-medium\">Location:</span>\n                    <span>{student.villageName}, {student.mandalName}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <MapPin className=\"w-4 h-4 text-gray-600\" />\n                    <span className=\"font-medium\">District:</span>\n                    <span>{student.districtName}, {student.stateName}</span>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Fee Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg text-emerald-700 dark:text-emerald-300\">Fee Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div className=\"text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">₹{student.paidAmount || 0}</div>\n                    <div className=\"text-sm text-green-700 dark:text-green-300\">Total Paid</div>\n                  </div>\n                  <div className=\"text-center p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-orange-600 dark:text-orange-400\">₹{student.pendingAmount || 0}</div>\n                    <div className=\"text-sm text-orange-700 dark:text-orange-300\">Pending Amount</div>\n                  </div>\n                  <div className=\"text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">₹{totalPaid}</div>\n                    <div className=\"text-sm text-blue-700 dark:text-blue-300\">Filtered Total</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Payment History with Filters */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg text-emerald-700 dark:text-emerald-300 flex items-center justify-between\">\n                  Payment History\n                  <div className=\"flex gap-2\">\n                    <Select value={monthFilter} onValueChange={setMonthFilter}>\n                      <SelectTrigger className=\"w-32\">\n                        <SelectValue placeholder=\"Month\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Months</SelectItem>\n                        <SelectItem value=\"01\">January</SelectItem>\n                        <SelectItem value=\"02\">February</SelectItem>\n                        <SelectItem value=\"03\">March</SelectItem>\n                        <SelectItem value=\"04\">April</SelectItem>\n                        <SelectItem value=\"05\">May</SelectItem>\n                        <SelectItem value=\"06\">June</SelectItem>\n                        <SelectItem value=\"07\">July</SelectItem>\n                        <SelectItem value=\"08\">August</SelectItem>\n                        <SelectItem value=\"09\">September</SelectItem>\n                        <SelectItem value=\"10\">October</SelectItem>\n                        <SelectItem value=\"11\">November</SelectItem>\n                        <SelectItem value=\"12\">December</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <Select value={yearFilter} onValueChange={setYearFilter}>\n                      <SelectTrigger className=\"w-24\">\n                        <SelectValue placeholder=\"Year\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Years</SelectItem>\n                        <SelectItem value=\"2024\">2024</SelectItem>\n                        <SelectItem value=\"2025\">2025</SelectItem>\n                        <SelectItem value=\"2026\">2026</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {isLoadingStudentDetails ? (\n                  <div className=\"text-center py-8\">Loading payment history...</div>\n                ) : filteredPayments.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">No payments found for selected filters</div>\n                ) : (\n                  <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                    {filteredPayments.map((payment: any) => (\n                      <div key={payment.id} className=\"border rounded p-3 bg-gray-50 dark:bg-gray-800\">\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <div className=\"font-medium\">₹{payment.amount}</div>\n                            <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                              {payment.description} - {payment.month}/{payment.year}\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              Receipt: {payment.receiptNumber} | Method: {payment.paymentMethod}\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"text-sm font-medium\">{new Date(payment.createdAt).toLocaleDateString()}</div>\n                            <div className=\"text-xs text-gray-500\">by {payment.recordedByName}</div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  };\n\n  return (\n    <DashboardLayout\n      title=\"All Payments\"\n      subtitle=\"System-wide payment tracking and management\"\n    >\n      <div className=\"space-y-6\">\n        {/* Payment Statistics */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Payment Overview</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-blue-600\">₹{stats.totalAmount.toLocaleString()}</div>\n                <p className=\"text-gray-600\">Total Amount</p>\n              </div>\n              <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-green-600\">{stats.totalCount}</div>\n                <p className=\"text-gray-600\">Total Records</p>\n              </div>\n              <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-purple-600\">\n                  ₹{stats.totalCount > 0 ? Math.round(stats.totalAmount / stats.totalCount).toLocaleString() : 0}\n                </div>\n                <p className=\"text-gray-600\">Avg Amount</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Three-Tab Payment System */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-xl font-semibold text-gray-900\">Payment Management</CardTitle>\n              <div className=\"flex items-center space-x-3\">\n                {/* Search */}\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-3 text-gray-400\" size={16} />\n                  <Input\n                    placeholder=\"Search records...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10 w-64\"\n                  />\n                </div>\n                \n                {/* Payment Method Filter (only for student fees tab) */}\n                {activeTab === 'student-fees' && (\n                  <Select value={methodFilter} onValueChange={setMethodFilter}>\n                    <SelectTrigger className=\"w-40\">\n                      <SelectValue placeholder=\"Payment Method\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Methods</SelectItem>\n                      <SelectItem value=\"cash\">Cash</SelectItem>\n                      <SelectItem value=\"online\">Online</SelectItem>\n                      <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                      <SelectItem value=\"cheque\">Cheque</SelectItem>\n                    </SelectContent>\n                  </Select>\n                )}\n\n                {/* Location Filters */}\n                <Select value={selectedState} onValueChange={handleStateChange}>\n                  <SelectTrigger className=\"w-40\">\n                    <SelectValue placeholder=\"Select State\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All States</SelectItem>\n                    {states.map((state: any) => (\n                      <SelectItem key={state.id} value={state.name}>{state.name}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n\n                {selectedState !== 'all' && (\n                  <Select value={selectedDistrict} onValueChange={handleDistrictChange}>\n                    <SelectTrigger className=\"w-40\">\n                      <SelectValue placeholder=\"Select District\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Districts</SelectItem>\n                      {districts.map((district: any) => (\n                        <SelectItem key={district.id} value={district.name}>{district.name}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                )}\n\n                {selectedDistrict !== 'all' && (\n                  <Select value={selectedMandal} onValueChange={handleMandalChange}>\n                    <SelectTrigger className=\"w-40\">\n                      <SelectValue placeholder=\"Select Mandal\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Mandals</SelectItem>\n                      {mandals.map((mandal: any) => (\n                        <SelectItem key={mandal.id} value={mandal.name}>{mandal.name}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                )}\n\n                {selectedMandal !== 'all' && (\n                  <Select value={selectedVillage} onValueChange={setSelectedVillage}>\n                    <SelectTrigger className=\"w-40\">\n                      <SelectValue placeholder=\"Select Village\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Villages</SelectItem>\n                      {villages.map((village: any) => (\n                        <SelectItem key={village.id} value={village.name}>{village.name}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                )}\n\n                <Button onClick={handleExport} variant=\"outline\">\n                  <Download className=\"mr-2\" size={16} />\n                  Export\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n\n          <CardContent>\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"student-fees\" className=\"flex items-center space-x-2\">\n                  <Users size={16} />\n                  <span>Student Fee Histories</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"so-wallet\" className=\"flex items-center space-x-2\">\n                  <Building2 size={16} />\n                  <span>SO Wallet Histories</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"agent-wallet\" className=\"flex items-center space-x-2\">\n                  <UserCheck size={16} />\n                  <span>Agent Wallet Histories</span>\n                </TabsTrigger>\n              </TabsList>\n\n              {/* Student Fee Histories Tab */}\n              <TabsContent value=\"student-fees\" className=\"mt-6\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                          Student & Center\n                        </th>\n                        <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                          Amount\n                        </th>\n                        <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                          Method\n                        </th>\n                        <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                          Description\n                        </th>\n                        <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                          Date\n                        </th>\n                        <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                          Receipt\n                        </th>\n                        <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                          Actions\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {isLoadingStudentPayments ? (\n                        <tr>\n                          <td colSpan={7} className=\"px-6 py-8 text-center text-gray-500\">\n                            Loading student payments...\n                          </td>\n                        </tr>\n                      ) : filteredStudentPayments.length === 0 ? (\n                        <tr>\n                          <td colSpan={7} className=\"px-6 py-8 text-center text-gray-500\">\n                            No student payments found matching your criteria.\n                          </td>\n                        </tr>\n                      ) : (\n                        filteredStudentPayments.map((payment: any) => (\n                          <tr key={payment.id} className=\"hover:bg-gray-50 transition\">\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div>\n                                <div className=\"text-sm font-medium text-gray-900\">{payment.studentName}</div>\n                                <div className=\"text-sm text-gray-500\">{payment.studentClass}</div>\n                                <div className=\"text-xs text-gray-400\">{payment.soCenterName}</div>\n                                <div className=\"text-xs text-gray-400\">By: {payment.recordedByName || 'N/A'}</div>\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"flex items-center text-sm font-bold text-secondary\">\n                                <IndianRupee size={14} className=\"mr-1\" />\n                                {parseFloat(payment.amount || 0).toLocaleString()}\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <Badge className={getMethodBadgeColor(payment.paymentMethod)}>\n                                {payment.paymentMethod?.replace('_', ' ').toUpperCase()}\n                              </Badge>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"text-sm text-gray-900\">{payment.description || 'N/A'}</div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"flex items-center text-sm text-gray-500\">\n                                <Calendar size={14} className=\"mr-1\" />\n                                {new Date(payment.createdAt).toLocaleDateString()}\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"text-sm text-gray-900\">{payment.receiptNumber || 'N/A'}</div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => setSelectedStudent(payment)}\n                                className=\"flex items-center gap-1\"\n                              >\n                                <Eye className=\"w-4 h-4\" />\n                                View Details\n                              </Button>\n                            </td>\n                          </tr>\n                        ))\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </TabsContent>\n\n              {/* SO Center Wallet Histories Tab */}\n              <TabsContent value=\"so-wallet\" className=\"mt-6\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                          SO Center\n                        </th>\n                        <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                          Amount\n                        </th>\n                        <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                          Type\n                        </th>\n                        <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                          Description\n                        </th>\n                        <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                          Date\n                        </th>\n                        <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                          Agent\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {isLoadingSoWallet ? (\n                        <tr>\n                          <td colSpan={6} className=\"px-6 py-8 text-center text-gray-500\">\n                            Loading SO wallet transactions...\n                          </td>\n                        </tr>\n                      ) : filteredSoWalletTransactions.length === 0 ? (\n                        <tr>\n                          <td colSpan={6} className=\"px-6 py-8 text-center text-gray-500\">\n                            No SO wallet transactions found matching your criteria.\n                          </td>\n                        </tr>\n                      ) : (\n                        filteredSoWalletTransactions.map((transaction: any) => (\n                          <tr key={transaction.id} className=\"hover:bg-gray-50 transition\">\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"text-sm font-medium text-gray-900\">{transaction.soCenterName}</div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"flex items-center text-sm font-bold text-secondary\">\n                                <IndianRupee size={14} className=\"mr-1\" />\n                                {parseFloat(transaction.amount || 0).toLocaleString()}\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <Badge className={getTypeBadgeColor(transaction.type)}>\n                                {transaction.type?.toUpperCase()}\n                              </Badge>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"text-sm text-gray-900\">{transaction.description || 'N/A'}</div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"flex items-center text-sm text-gray-500\">\n                                <Calendar size={14} className=\"mr-1\" />\n                                {new Date(transaction.createdAt).toLocaleDateString()}\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"text-sm text-gray-900\">{transaction.collectionAgentName || 'N/A'}</div>\n                            </td>\n                          </tr>\n                        ))\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </TabsContent>\n\n              {/* Agent Wallet Histories Tab */}\n              <TabsContent value=\"agent-wallet\" className=\"mt-6\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                          SO Center\n                        </th>\n                        <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                          Amount\n                        </th>\n                        <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                          Type\n                        </th>\n                        <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                          Description\n                        </th>\n                        <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                          Date\n                        </th>\n                        <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                          Wallet Balance\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {isLoadingAgentWallet ? (\n                        <tr>\n                          <td colSpan={6} className=\"px-6 py-8 text-center text-gray-500\">\n                            Loading agent wallet transactions...\n                          </td>\n                        </tr>\n                      ) : filteredAgentWalletTransactions.length === 0 ? (\n                        <tr>\n                          <td colSpan={6} className=\"px-6 py-8 text-center text-gray-500\">\n                            No agent wallet transactions found matching your criteria.\n                          </td>\n                        </tr>\n                      ) : (\n                        filteredAgentWalletTransactions.map((transaction: any) => (\n                          <tr key={transaction.id} className=\"hover:bg-gray-50 transition\">\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"text-sm font-medium text-gray-900\">{transaction.soCenterName}</div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"flex items-center text-sm font-bold text-secondary\">\n                                <IndianRupee size={14} className=\"mr-1\" />\n                                {parseFloat(transaction.amount || 0).toLocaleString()}\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <Badge className={getTypeBadgeColor(transaction.type)}>\n                                {transaction.type?.toUpperCase()}\n                              </Badge>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"text-sm text-gray-900\">{transaction.description || 'N/A'}</div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"flex items-center text-sm text-gray-500\">\n                                <Calendar size={14} className=\"mr-1\" />\n                                {new Date(transaction.createdAt).toLocaleDateString()}\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              <div className=\"text-sm text-gray-900\">\n                                ₹{parseFloat(transaction.walletAvailableBalance || 0).toLocaleString()}\n                              </div>\n                            </td>\n                          </tr>\n                        ))\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </TabsContent>\n            </Tabs>\n\n            {/* Summary Statistics */}\n            <div className=\"flex items-center justify-between mt-6 pt-4 border-t border-gray-200\">\n              <p className=\"text-sm text-gray-700\">\n                Showing <span className=\"font-medium\">{stats.totalCount}</span> {stats.label.toLowerCase()}\n              </p>\n              <div className=\"text-sm text-gray-500\">\n                Total: <span className=\"font-semibold text-gray-900\">₹{stats.totalAmount.toLocaleString()}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        {/* Student Detail Modal */}\n        <StudentDetailModal />\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":39609},"client/src/pages/admin/AllStudents.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { \n  Search, \n  Users, \n  Download,\n  Filter,\n  Eye,\n  QrCode,\n  MapPin,\n  School,\n  Phone,\n  Calendar,\n  User\n} from 'lucide-react';\n\nexport default function AdminAllStudents() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedState, setSelectedState] = useState('all');\n  const [selectedDistrict, setSelectedDistrict] = useState('all');\n  const [selectedMandal, setSelectedMandal] = useState('all');\n  const [selectedVillage, setSelectedVillage] = useState('all');\n  const [classFilter, setClassFilter] = useState('all');\n  const [centerFilter, setCenterFilter] = useState('all');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const { toast } = useToast();\n\n  // Fetch students data from real API\n  const { data: students = [], isLoading } = useQuery({\n    queryKey: ['/api/admin/students'],\n  });\n\n  // Fetch filter options\n  const { data: states = [] } = useQuery({\n    queryKey: ['/api/admin/addresses/states'],\n  });\n\n  const { data: districts = [] } = useQuery({\n    queryKey: ['/api/admin/addresses/districts'],\n  });\n\n  const { data: mandals = [] } = useQuery({\n    queryKey: ['/api/admin/addresses/mandals'],\n  });\n\n  const { data: villages = [] } = useQuery({\n    queryKey: ['/api/admin/addresses/villages'],\n  });\n\n  const { data: soCenters = [] } = useQuery({\n    queryKey: ['/api/admin/so-centers'],\n  });\n\n  const { data: classes = [] } = useQuery({\n    queryKey: ['/api/classes'],\n  });\n\n  // Filter location data based on selections\n  const filteredDistricts = (districts as any[]).filter((district: any) => \n    selectedState === 'all' || district.stateId === selectedState\n  );\n\n  const filteredMandals = (mandals as any[]).filter((mandal: any) => \n    selectedDistrict === 'all' || mandal.districtId === selectedDistrict\n  );\n\n  const filteredVillages = (villages as any[]).filter((village: any) => \n    selectedMandal === 'all' || village.mandalId === selectedMandal\n  );\n\n  const filteredSoCenters = (soCenters as any[]).filter((center: any) => {\n    if (selectedState === 'all' && selectedDistrict === 'all' && selectedMandal === 'all' && selectedVillage === 'all') {\n      return true;\n    }\n    \n    // Use the joined location data from the center\n    const stateMatch = selectedState === 'all' || center.stateName === (states as any[]).find(s => s.id === selectedState)?.name;\n    const districtMatch = selectedDistrict === 'all' || center.districtName === (districts as any[]).find(d => d.id === selectedDistrict)?.name;\n    const mandalMatch = selectedMandal === 'all' || center.mandalName === (mandals as any[]).find(m => m.id === selectedMandal)?.name;\n    const villageMatch = selectedVillage === 'all' || center.villageName === (villages as any[]).find(v => v.id === selectedVillage)?.name;\n\n    return stateMatch && districtMatch && mandalMatch && villageMatch;\n  });\n\n  // Filter students based on all criteria including location\n  const filteredStudents = (students as any[]).filter((student: any) => {\n    const matchesSearch = !searchTerm || \n      student.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      student.studentId?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      student.fatherMobile?.includes(searchTerm) ||\n      student.motherMobile?.includes(searchTerm) ||\n      student.fatherName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      student.motherName?.toLowerCase().includes(searchTerm.toLowerCase());\n\n    const matchesCenter = centerFilter === 'all' || student.soCenterId === centerFilter;\n    const matchesClass = classFilter === 'all' || student.classId === classFilter;\n    const matchesStatus = statusFilter === 'all' || student.paymentStatus === statusFilter;\n\n    // Location-based filtering through student's SO center\n    let matchesLocation = true;\n    if (selectedState !== 'all' || selectedDistrict !== 'all' || selectedMandal !== 'all' || selectedVillage !== 'all') {\n      const studentCenter = (soCenters as any[]).find(c => c.id === student.soCenterId);\n      if (studentCenter) {\n        const stateMatch = selectedState === 'all' || studentCenter.stateName === (states as any[]).find(s => s.id === selectedState)?.name;\n        const districtMatch = selectedDistrict === 'all' || studentCenter.districtName === (districts as any[]).find(d => d.id === selectedDistrict)?.name;\n        const mandalMatch = selectedMandal === 'all' || studentCenter.mandalName === (mandals as any[]).find(m => m.id === selectedMandal)?.name;\n        const villageMatch = selectedVillage === 'all' || studentCenter.villageName === (villages as any[]).find(v => v.id === selectedVillage)?.name;\n        matchesLocation = stateMatch && districtMatch && mandalMatch && villageMatch;\n      } else {\n        matchesLocation = false;\n      }\n    }\n\n    return matchesSearch && matchesCenter && matchesClass && matchesStatus && matchesLocation;\n  });\n\n  const handleStateChange = (stateId: string) => {\n    setSelectedState(stateId);\n    setSelectedDistrict('all');\n    setSelectedMandal('all');\n    setSelectedVillage('all');\n    setCenterFilter('all');\n  };\n\n  const handleDistrictChange = (districtId: string) => {\n    setSelectedDistrict(districtId);\n    setSelectedMandal('all');\n    setSelectedVillage('all');\n    setCenterFilter('all');\n  };\n\n  const handleMandalChange = (mandalId: string) => {\n    setSelectedMandal(mandalId);\n    setSelectedVillage('all');\n    setCenterFilter('all');\n  };\n\n  const handleVillageChange = (villageId: string) => {\n    setSelectedVillage(villageId);\n    setCenterFilter('all');\n  };\n\n  const clearAllFilters = () => {\n    setSearchTerm('');\n    setSelectedState('all');\n    setSelectedDistrict('all');\n    setSelectedMandal('all');\n    setSelectedVillage('all');\n    setClassFilter('all');\n    setCenterFilter('all');\n    setStatusFilter('all');\n  };\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\n  };\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return 'N/A';\n    return new Date(dateString).toLocaleDateString('en-GB');\n  };\n\n  if (isLoading) {\n    return (\n      <DashboardLayout \n        title=\"Student Management\"\n        subtitle=\"Loading students data...\"\n      >\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  const handleExport = () => {\n    toast({ \n      title: 'Export Students', \n      description: 'Student data export functionality coming soon!' \n    });\n  };\n\n  return (\n    <DashboardLayout title=\"All Students Management\">\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">Student Management</h1>\n            <p className=\"text-gray-600\">Manage all students across the system</p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button>\n              <Users className=\"h-4 w-4 mr-2\" />\n              Add Student\n            </Button>\n            <Button variant=\"outline\" onClick={handleExport}>\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export CSV\n            </Button>\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Student Management ({filteredStudents.length} students)</span>\n              <Badge variant=\"secondary\">{filteredStudents.length}</Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n              <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-blue-600\">{(students as any[]).length}</div>\n                <p className=\"text-gray-600\">Total Students</p>\n              </div>\n              <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {(students as any[]).filter((s: any) => (s.totalAmount - s.paidAmount) <= 0).length}\n                </div>\n                <p className=\"text-gray-600\">Paid Students</p>\n              </div>\n              <div className=\"text-center p-4 bg-yellow-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-yellow-600\">\n                  {(students as any[]).filter((s: any) => (s.totalAmount - s.paidAmount) > 0).length}\n                </div>\n                <p className=\"text-gray-600\">Pending Payments</p>\n              </div>\n              <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-purple-600\">\n                  {(soCenters as any[]).length}\n                </div>\n                <p className=\"text-gray-600\">SO Centers</p>\n              </div>\n              <div className=\"text-center p-4 bg-indigo-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-indigo-600\">\n                  {(classes as any[]).length}\n                </div>\n                <p className=\"text-gray-600\">Classes</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Student Management ({filteredStudents.length} students)</span>\n              <Badge variant=\"secondary\">{filteredStudents.length}</Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {/* Location Filters Section */}\n            <div className=\"bg-gray-50 p-4 rounded-lg border-b pb-6 mb-6\">\n              <h3 className=\"text-lg font-semibold mb-4 text-gray-900 flex items-center\">\n                <MapPin className=\"h-5 w-5 mr-2 text-blue-600\" />\n                Location Filters\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n                {/* State Filter */}\n                <Select onValueChange={handleStateChange} value={selectedState}>\n                  <SelectTrigger className=\"bg-white border-2 border-gray-300 focus:border-blue-500\">\n                    <SelectValue placeholder=\"🏛️ Select State\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All States</SelectItem>\n                    {(states as any[]).map((state: any) => (\n                      <SelectItem key={state.id} value={state.id}>\n                        {state.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n\n                {/* District Filter */}\n                <Select \n                  onValueChange={handleDistrictChange} \n                  value={selectedDistrict}\n                  disabled={selectedState === 'all'}\n                >\n                  <SelectTrigger className=\"bg-white border-2 border-gray-300 focus:border-blue-500 disabled:bg-gray-100\">\n                    <SelectValue placeholder=\"🏙️ Select District\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Districts</SelectItem>\n                    {filteredDistricts.map((district: any) => (\n                      <SelectItem key={district.id} value={district.id}>\n                        {district.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n\n                {/* Mandal Filter */}\n                <Select \n                  onValueChange={handleMandalChange} \n                  value={selectedMandal}\n                  disabled={selectedDistrict === 'all'}\n                >\n                  <SelectTrigger className=\"bg-white border-2 border-gray-300 focus:border-blue-500 disabled:bg-gray-100\">\n                    <SelectValue placeholder=\"🏘️ Select Mandal\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Mandals</SelectItem>\n                    {filteredMandals.map((mandal: any) => (\n                      <SelectItem key={mandal.id} value={mandal.id}>\n                        {mandal.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n\n                {/* Village Filter */}\n                <Select \n                  onValueChange={handleVillageChange} \n                  value={selectedVillage}\n                  disabled={selectedMandal === 'all'}\n                >\n                  <SelectTrigger className=\"bg-white border-2 border-gray-300 focus:border-blue-500 disabled:bg-gray-100\">\n                    <SelectValue placeholder=\"🏡 Select Village\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Villages</SelectItem>\n                    {filteredVillages.map((village: any) => (\n                      <SelectItem key={village.id} value={village.id}>\n                        {village.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n\n                {/* Clear Filters Button */}\n                <Button \n                  variant=\"outline\" \n                  onClick={clearAllFilters} \n                  className=\"w-full bg-red-50 hover:bg-red-100 text-red-700 border-red-200\"\n                >\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  Clear All Filters\n                </Button>\n              </div>\n            </div>\n\n            {/* Search and Other Filters */}\n            <div className=\"flex flex-col md:flex-row gap-4 mb-6\">\n              <div className=\"flex-1 relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search by name, student ID, phone, or father's name...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n              <Select onValueChange={setClassFilter} value={classFilter}>\n                <SelectTrigger className=\"w-full md:w-[200px]\">\n                  <SelectValue placeholder=\"All Classes\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Classes</SelectItem>\n                  {(classes as any[]).map((cls: any) => (\n                    <SelectItem key={cls.id} value={cls.id}>\n                      {cls.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Select onValueChange={setCenterFilter} value={centerFilter}>\n                <SelectTrigger className=\"w-full md:w-[200px]\">\n                  <SelectValue placeholder=\"All SO Centers\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All SO Centers</SelectItem>\n                  {filteredSoCenters.map((center: any) => (\n                    <SelectItem key={center.id} value={center.id}>\n                      {center.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Select onValueChange={setStatusFilter} value={statusFilter}>\n                <SelectTrigger className=\"w-full md:w-[200px]\">\n                  <SelectValue placeholder=\"All Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"paid\">Paid</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Students Table */}\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                      Student\n                    </th>\n                    <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                      Class\n                    </th>\n                    <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                      SO Center\n                    </th>\n                    <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                      Payment Status\n                    </th>\n                    <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                      Amount\n                    </th>\n                    <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                      Actions\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {filteredStudents.map((student) => (\n                    <tr key={student.id} className=\"hover:bg-gray-50 transition\">\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"flex items-center\">\n                          <div className=\"w-10 h-10 bg-gradient-to-r from-blue-400 to-blue-600 rounded-full flex items-center justify-center\">\n                            <span className=\"text-white font-medium text-sm\">\n                              {getInitials(student.name)}\n                            </span>\n                          </div>\n                          <div className=\"ml-4\">\n                            <div className=\"text-sm font-medium text-gray-900\">{student.name}</div>\n                            <div className=\"text-sm text-gray-500\">ID: {student.studentId}</div>\n                            <div className=\"text-sm text-gray-500\">{student.fatherMobile || student.motherMobile}</div>\n                          </div>\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <Badge variant=\"outline\" className=\"text-blue-800 border-blue-200\">\n                          {student.className}\n                        </Badge>\n                        <div className=\"text-xs text-gray-500 mt-1\">{student.courseType?.replace('_', ' ')}</div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"text-sm font-medium text-gray-900\">{student.soCenterName}</div>\n                        <div className=\"text-xs text-gray-500\">\n                          Enrolled: {formatDate(student.enrollmentDate)}\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <Badge \n                          variant={(student.totalAmount - student.paidAmount) <= 0 ? 'default' : 'secondary'}\n                          className={(student.totalAmount - student.paidAmount) <= 0\n                            ? 'bg-green-500 text-white' \n                            : 'bg-orange-500 text-white'\n                          }\n                        >\n                          {(student.totalAmount - student.paidAmount) <= 0 ? 'Paid' : 'Pending'}\n                        </Badge>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"text-sm\">\n                          <div className=\"text-green-600 font-medium\">₹{student.paidAmount || 0}</div>\n                          <div className=\"text-orange-600\">₹{(student.totalAmount - student.paidAmount) || 0} pending</div>\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                        <div className=\"flex space-x-2\">\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <Eye className=\"text-primary\" size={16} />\n                          </Button>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <QrCode className=\"text-secondary\" size={16} />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n\n            {filteredStudents.length === 0 && (\n              <div className=\"text-center py-8\">\n                <Users className=\"mx-auto text-gray-400 mb-4\" size={48} />\n                <p className=\"text-gray-500\">No students found matching your criteria.</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":21825},"client/src/pages/admin/Announcements.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport { \n  Dialog, \n  DialogContent, \n  DialogHeader, \n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { \n  Form, \n  FormControl, \n  FormField, \n  FormItem, \n  FormLabel, \n  FormMessage, \n  FormDescription \n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Button } from '@/components/ui/button';\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Plus, Edit, Trash2, Megaphone, Users, Eye, LinkIcon, Calendar, Send, QrCode } from 'lucide-react';\n\nconst announcementSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  description: z.string().min(1, 'Description is required'),\n  content: z.string().optional(),\n  targetAudience: z.array(z.enum(['students', 'teachers', 'so_centers', 'admin', 'all'])).min(1, 'At least one target audience is required'),\n  priority: z.enum(['low', 'normal', 'high', 'urgent']).default('normal'),\n  imageUrl: z.string().url().optional().or(z.literal('')),\n  fromDate: z.string().min(1, 'From date is required'),\n  toDate: z.string().min(1, 'To date is required'),\n  isActive: z.boolean().default(true),\n  showOnQrCode: z.boolean().default(false),\n});\n\ntype AnnouncementFormData = z.infer<typeof announcementSchema>;\n\nconst targetAudienceOptions = [\n  { id: 'students', name: 'Students', description: 'Students and parents (via QR code)' },\n  { id: 'teachers', name: 'Teachers', description: 'All teaching staff' },\n  { id: 'so_centers', name: 'SO Centers', description: 'SO center managers and staff' },\n  { id: 'admin', name: 'Administrators', description: 'System administrators' },\n  { id: 'all', name: 'Everyone', description: 'All users in the system' },\n];\n\nconst priorityOptions = [\n  { value: 'low', label: 'Low', color: 'bg-green-100 text-green-800' },\n  { value: 'normal', label: 'Normal', color: 'bg-blue-100 text-blue-800' },\n  { value: 'high', label: 'High', color: 'bg-orange-100 text-orange-800' },\n  { value: 'urgent', label: 'Urgent', color: 'bg-red-100 text-red-800' },\n];\n\ninterface AddAnnouncementModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  editingAnnouncement?: any;\n}\n\nfunction AddAnnouncementModal({ isOpen, onClose, editingAnnouncement }: AddAnnouncementModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<AnnouncementFormData>({\n    resolver: zodResolver(announcementSchema),\n    defaultValues: {\n      title: '',\n      description: '',\n      content: '',\n      targetAudience: ['students'],\n      priority: 'normal',\n      imageUrl: '',\n      fromDate: new Date().toISOString().split('T')[0],\n      toDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      isActive: true,\n      showOnQrCode: false,\n    },\n  });\n\n  // Reset form when editing announcement changes\n  useEffect(() => {\n    if (editingAnnouncement) {\n      form.reset({\n        title: editingAnnouncement.title || '',\n        description: editingAnnouncement.description || '',\n        content: editingAnnouncement.content || '',\n        targetAudience: editingAnnouncement.targetAudience || ['students'],\n        priority: editingAnnouncement.priority || 'normal',\n        imageUrl: editingAnnouncement.imageUrl || '',\n        fromDate: editingAnnouncement.fromDate || new Date().toISOString().split('T')[0],\n        toDate: editingAnnouncement.toDate || new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n        isActive: editingAnnouncement.isActive ?? true,\n        showOnQrCode: editingAnnouncement.showOnQrCode ?? false,\n      });\n    }\n  }, [editingAnnouncement, form]);\n\n  const mutation = useMutation({\n    mutationFn: async (data: AnnouncementFormData) => {\n      const endpoint = editingAnnouncement ? `/api/admin/announcements/${editingAnnouncement.id}` : '/api/admin/announcements';\n      const method = editingAnnouncement ? 'PUT' : 'POST';\n      return apiRequest(method, endpoint, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: editingAnnouncement ? 'Announcement Updated' : 'Announcement Created',\n        description: `Announcement has been successfully ${editingAnnouncement ? 'updated' : 'created'}.`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/announcements'] });\n      form.reset();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || `Failed to ${editingAnnouncement ? 'update' : 'create'} announcement.`,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: AnnouncementFormData) => {\n    mutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[600px] max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>{editingAnnouncement ? 'Edit Announcement' : 'Create New Announcement'}</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Title</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"e.g. System Maintenance Notice, Holiday Announcement\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Write your announcement message here...\"\n                      className=\"resize-none\"\n                      rows={4}\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"content\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Additional Content (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Additional details, instructions, or rich text content...\"\n                      className=\"resize-none\"\n                      rows={3}\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"imageUrl\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Banner Image URL (Optional)</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"url\"\n                      placeholder=\"https://example.com/banner-image.jpg\"\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"targetAudience\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Target Audience (Multi-Select)</FormLabel>\n                  <FormControl>\n                    <div className=\"space-y-3\">\n                      {targetAudienceOptions.map((option) => (\n                        <div key={option.id} className=\"flex items-start space-x-3\">\n                          <Checkbox\n                            checked={field.value.includes(option.id)}\n                            onCheckedChange={(checked) => {\n                              if (checked) {\n                                field.onChange([...field.value, option.id]);\n                              } else {\n                                field.onChange(field.value.filter((item: string) => item !== option.id));\n                              }\n                            }}\n                          />\n                          <div className=\"space-y-1 leading-none\">\n                            <div className=\"font-medium\">{option.name}</div>\n                            <div className=\"text-sm text-gray-600\">{option.description}</div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"priority\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Priority</FormLabel>\n                    <FormControl>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select priority\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {priorityOptions.map((option) => (\n                            <SelectItem key={option.value} value={option.value}>\n                              <span className={`px-2 py-1 rounded text-xs ${option.color}`}>\n                                {option.label}\n                              </span>\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"fromDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>From Date</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"date\" \n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"toDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>To Date</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"date\" \n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"isActive\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                      />\n                    </FormControl>\n                    <div className=\"space-y-1 leading-none\">\n                      <FormLabel>Active Announcement</FormLabel>\n                      <FormDescription>\n                        This announcement will be visible to target users when active\n                      </FormDescription>\n                    </div>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"showOnQrCode\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                      />\n                    </FormControl>\n                    <div className=\"space-y-1 leading-none\">\n                      <FormLabel className=\"flex items-center gap-2\">\n                        <QrCode className=\"h-4 w-4\" />\n                        Show on QR Code Scan\n                      </FormLabel>\n                      <FormDescription>\n                        Display this announcement when students scan QR codes\n                      </FormDescription>\n                    </div>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"bg-blue-50 p-4 rounded-lg\">\n              <p className=\"text-sm text-blue-800\">\n                <strong>Note:</strong> Announcements will be displayed based on the selected dates and target audience. \n                QR code announcements are shown when students scan their progress QR codes.\n              </p>\n            </div>\n\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={mutation.isPending}\n                className=\"bg-primary text-white hover:bg-blue-700\"\n              >\n                {mutation.isPending \n                  ? (editingAnnouncement ? 'Updating...' : 'Creating...') \n                  : (editingAnnouncement ? 'Update Announcement' : 'Create Announcement')\n                }\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function Announcements() {\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [editingAnnouncement, setEditingAnnouncement] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch real announcements from Supabase database\n  const { data: announcements = [], isLoading } = useQuery({\n    queryKey: ['/api/admin/announcements'],\n  });\n\n  const deleteAnnouncementMutation = useMutation({\n    mutationFn: async (announcementId: string) => {\n      return apiRequest('DELETE', `/api/admin/announcements/${announcementId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Announcement Deleted',\n        description: 'Announcement has been successfully deleted.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/announcements'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to delete announcement.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleEdit = (announcement: any) => {\n    setEditingAnnouncement(announcement);\n    setIsAddModalOpen(true);\n  };\n\n  const handleDelete = (announcementId: string) => {\n    if (confirm('Are you sure you want to delete this announcement?')) {\n      deleteAnnouncementMutation.mutate(announcementId);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setIsAddModalOpen(false);\n    setEditingAnnouncement(null);\n  };\n\n  const getPriorityColor = (priority: string) => {\n    const option = priorityOptions.find(p => p.value === priority);\n    return option ? option.color : 'bg-gray-100 text-gray-800';\n  };\n\n  if (isLoading) {\n    return <div className=\"flex justify-center items-center h-64\">Loading announcements...</div>;\n  }\n\n  const activeAnnouncements = announcements.filter((a: any) => a.isActive).length;\n  const qrCodeAnnouncements = announcements.filter((a: any) => a.showOnQrCode).length;\n\n  return (\n    <DashboardLayout \n      title=\"Announcements\" \n      subtitle=\"Create and manage system-wide announcements\"\n      showAddButton={true}\n      onAddClick={() => setIsAddModalOpen(true)}\n    >\n      <div className=\"space-y-6\">\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Announcements</CardTitle>\n              <Megaphone className=\"h-4 w-4 text-blue-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{announcements.length}</div>\n              <p className=\"text-xs text-muted-foreground\">{activeAnnouncements} active</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Active</CardTitle>\n              <Eye className=\"h-4 w-4 text-green-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{activeAnnouncements}</div>\n              <p className=\"text-xs text-muted-foreground\">Currently visible</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">QR Code Enabled</CardTitle>\n              <QrCode className=\"h-4 w-4 text-purple-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{qrCodeAnnouncements}</div>\n              <p className=\"text-xs text-muted-foreground\">Shown on QR scans</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Target Audiences</CardTitle>\n              <Users className=\"h-4 w-4 text-yellow-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{targetAudienceOptions.length}</div>\n              <p className=\"text-xs text-muted-foreground\">Available audiences</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Announcements Table */}\n        <div className=\"bg-white rounded-lg shadow\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">All Announcements</h2>\n          </div>\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Title & Description\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Audience & Priority\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Dates\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {announcements.length > 0 ? announcements.map((announcement: any) => (\n                  <tr key={announcement.id} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4\">\n                      <div>\n                        <div className=\"text-sm font-medium text-gray-900\">{announcement.title}</div>\n                        <div className=\"text-sm text-gray-500\">{announcement.description}</div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4\">\n                      <div className=\"space-y-2\">\n                        <div className=\"flex flex-wrap gap-1\">\n                          {Array.isArray(announcement.targetAudience) ? announcement.targetAudience.map((audience: string) => (\n                            <Badge key={audience} variant=\"outline\" className=\"text-xs\">\n                              {targetAudienceOptions.find(opt => opt.id === audience)?.name || audience}\n                            </Badge>\n                          )) : (\n                            <Badge variant=\"outline\">\n                              {targetAudienceOptions.find(opt => opt.id === announcement.targetAudience)?.name || announcement.targetAudience}\n                            </Badge>\n                          )}\n                        </div>\n                        <div>\n                          <span className={`px-2 py-1 rounded text-xs ${getPriorityColor(announcement.priority)}`}>\n                            {announcement.priority.charAt(0).toUpperCase() + announcement.priority.slice(1)}\n                          </span>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 text-sm text-gray-900\">\n                      <div>\n                        <div>From: {announcement.fromDate}</div>\n                        <div>To: {announcement.toDate}</div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4\">\n                      <div className=\"flex flex-col space-y-1\">\n                        <Badge variant={announcement.isActive ? \"default\" : \"secondary\"}>\n                          {announcement.isActive ? 'Active' : 'Inactive'}\n                        </Badge>\n                        {announcement.showOnQrCode && (\n                          <Badge variant=\"outline\" className=\"text-purple-600\">\n                            <QrCode className=\"h-3 w-3 mr-1\" />\n                            QR Enabled\n                          </Badge>\n                        )}\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 text-sm font-medium\">\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          onClick={() => handleEdit(announcement)}\n                          variant=\"outline\"\n                          size=\"sm\"\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          onClick={() => handleDelete(announcement.id)}\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"text-red-600 hover:bg-red-50\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                )) : (\n                  <tr>\n                    <td colSpan={5} className=\"px-6 py-8 text-center text-gray-500\">\n                      <div className=\"flex flex-col items-center space-y-2\">\n                        <Megaphone className=\"h-8 w-8 text-gray-300\" />\n                        <p>No announcements found</p>\n                        <Button onClick={() => setIsAddModalOpen(true)} variant=\"outline\" size=\"sm\">\n                          Create First Announcement\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                )}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n\n      <AddAnnouncementModal\n        isOpen={isAddModalOpen}\n        onClose={handleCloseModal}\n        editingAnnouncement={editingAnnouncement}\n      />\n    </DashboardLayout>\n  );\n}","size_bytes":24968},"client/src/pages/admin/Approvals.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { InvoiceGenerator } from '@/components/InvoiceGenerator';\nimport { \n  CheckCircle, \n  XCircle, \n  Clock, \n  Eye, \n  IndianRupee,\n  FileText,\n  User,\n  Calendar,\n  AlertTriangle,\n  MessageSquare,\n  Wallet,\n  CreditCard\n} from 'lucide-react';\n\n// Form schemas\nconst paymentFormSchema = z.object({\n  paymentMode: z.enum(['upi', 'voucher'], {\n    required_error: 'Please select a payment mode',\n  }),\n  paymentDetails: z.string().optional(),\n  notes: z.string().optional(),\n}).refine((data) => {\n  // Only require payment details for UPI transactions\n  if (data.paymentMode === 'upi' && (!data.paymentDetails || data.paymentDetails.trim() === '')) {\n    return false;\n  }\n  return true;\n}, {\n  message: \"UPI Transaction ID is required for UPI payments\",\n  path: [\"paymentDetails\"],\n});\n\ntype PaymentFormData = z.infer<typeof paymentFormSchema>;\n\ninterface WithdrawalApprovalModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  withdrawal: any;\n}\n\nfunction WithdrawalApprovalModal({ isOpen, onClose, withdrawal }: WithdrawalApprovalModalProps) {\n  const [showPaymentForm, setShowPaymentForm] = useState(false);\n  const [invoiceData, setInvoiceData] = useState<any>(null);\n  const [showInvoice, setShowInvoice] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<PaymentFormData>({\n    resolver: zodResolver(paymentFormSchema),\n    defaultValues: {\n      paymentMode: undefined,\n      paymentDetails: '',\n      notes: '',\n    },\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: async (data: PaymentFormData) => {\n      return apiRequest('POST', `/api/admin/withdrawal-requests/${withdrawal.id}/approve`, data);\n    },\n    onSuccess: (response) => {\n      toast({\n        title: 'Withdrawal Approved',\n        description: `Payment issued successfully. Transaction ID: ${response.transactionId}`,\n      });\n      \n      // Set invoice data for payment\n      setInvoiceData({\n        transactionId: response.transactionId,\n        withdrawalId: withdrawal.withdrawal_id,\n        amount: parseFloat(withdrawal.amount),\n        paymentMode: response.paymentMode,\n        paymentDetails: form.getValues('paymentDetails'),\n        userEmail: withdrawal.user_email,\n        userName: `${withdrawal.first_name || ''} ${withdrawal.last_name || ''}`.trim(),\n        processedAt: new Date().toISOString(),\n        type: 'withdrawal'\n      });\n      \n      queryClient.invalidateQueries({ queryKey: ['/api/admin/withdrawal-requests'] });\n      setShowPaymentForm(false);\n      onClose();\n      setShowInvoice(true);\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Approval Failed',\n        description: error.message || 'Failed to approve withdrawal request.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const rejectMutation = useMutation({\n    mutationFn: async (notes: string) => {\n      return apiRequest('POST', `/api/admin/withdrawal-requests/${withdrawal.id}/reject`, { notes });\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Withdrawal Rejected',\n        description: 'The withdrawal request has been rejected.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/withdrawal-requests'] });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to reject withdrawal request.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  if (!withdrawal) return null;\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const onSubmit = (data: PaymentFormData) => {\n    // For voucher payments, set a default payment details message\n    if (data.paymentMode === 'voucher' && !data.paymentDetails) {\n      data.paymentDetails = 'Voucher payment processed';\n    }\n    approveMutation.mutate(data);\n  };\n\n  return (\n    <>\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Wallet className=\"h-5 w-5\" />\n              Withdrawal Request Details\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-6\">\n            {/* Request Overview */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium text-gray-500\">Withdrawal ID</label>\n                <p className=\"text-sm font-mono font-medium\">#{withdrawal.id.slice(-8)}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-gray-500\">Status</label>\n                <Badge \n                  variant={withdrawal.status === 'pending' ? 'secondary' : \n                          withdrawal.status === 'approved' ? 'default' : 'destructive'}\n                >\n                  {withdrawal.status}\n                </Badge>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-gray-500\">Requested By</label>\n                <p className=\"text-sm\">{withdrawal.user_email}</p>\n                <p className=\"text-xs text-gray-500 capitalize\">{withdrawal.user_role}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-gray-500\">Amount</label>\n                <p className=\"text-sm font-medium text-green-600 flex items-center\">\n                  <IndianRupee className=\"h-4 w-4\" />\n                  {parseFloat(withdrawal.amount).toLocaleString('en-IN')}\n                </p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-gray-500\">Date Requested</label>\n                <p className=\"text-sm\">{new Date(withdrawal.request_date).toLocaleDateString('en-IN')}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-gray-500\">User Name</label>\n                <p className=\"text-sm\">{withdrawal.user_name || 'N/A'}</p>\n              </div>\n            </div>\n\n            {/* Payment Form */}\n            {showPaymentForm && withdrawal.status === 'pending' && (\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"paymentMode\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"flex items-center gap-2\">\n                          <CreditCard className=\"h-4 w-4\" />\n                          Payment Mode\n                        </FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select payment mode\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"upi\">UPI Payment</SelectItem>\n                            <SelectItem value=\"voucher\">Bank Voucher</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {form.watch('paymentMode') === 'voucher' ? (\n                    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                      <div className=\"flex items-center\">\n                        <CheckCircle className=\"h-5 w-5 text-blue-600 mr-2\" />\n                        <div>\n                          <p className=\"text-sm font-medium text-blue-900\">Voucher Payment Selected</p>\n                          <p className=\"text-sm text-blue-700\">Ready to process voucher payment for ₹{parseFloat(withdrawal.amount).toLocaleString('en-IN')}</p>\n                        </div>\n                      </div>\n                    </div>\n                  ) : (\n                    <FormField\n                      control={form.control}\n                      name=\"paymentDetails\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>\n                            UPI Transaction ID\n                          </FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Enter UPI transaction ID\"\n                              {...field} \n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  )}\n\n                  <FormField\n                    control={form.control}\n                    name=\"notes\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Additional Notes (Optional)</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Enter any additional notes...\"\n                            className=\"resize-none\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"flex gap-3 pt-4\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={() => setShowPaymentForm(false)}\n                      className=\"flex-1\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"submit\"\n                      disabled={approveMutation.isPending}\n                      className=\"flex-1 bg-green-600 hover:bg-green-700\"\n                    >\n                      {approveMutation.isPending ? 'Processing...' : 'Confirm Payment'}\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            )}\n\n            {/* Action Buttons */}\n            {!showPaymentForm && withdrawal.status === 'pending' && (\n              <div className=\"flex gap-3 pt-4\">\n                <Button\n                  onClick={() => rejectMutation.mutate('Request rejected by admin')}\n                  variant=\"outline\"\n                  disabled={rejectMutation.isPending}\n                  className=\"flex-1 text-red-600 border-red-200 hover:bg-red-50\"\n                >\n                  <XCircle className=\"h-4 w-4 mr-2\" />\n                  Reject Request\n                </Button>\n                <Button\n                  onClick={() => setShowPaymentForm(true)}\n                  className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n                >\n                  <CheckCircle className=\"h-4 w-4 mr-2\" />\n                  Issue Payment\n                </Button>\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Invoice Generator */}\n      <InvoiceGenerator \n        invoiceData={invoiceData}\n        isOpen={showInvoice}\n        onClose={() => setShowInvoice(false)}\n      />\n    </>\n  );\n}\n\nexport default function Approvals() {\n  const [selectedStatus, setSelectedStatus] = useState<string>('pending');\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [selectedWithdrawal, setSelectedWithdrawal] = useState<any>(null);\n  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);\n\n  // Fetch real withdrawal requests from API\n  const { data: withdrawalRequests = [], isLoading } = useQuery({\n    queryKey: ['/api/admin/withdrawal-requests'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/admin/withdrawal-requests');\n      const result = await response.json();\n      return result;\n    },\n  });\n\n  // Filter withdrawal requests based on status and search\n  const filteredRequests = (Array.isArray(withdrawalRequests) ? withdrawalRequests : []).filter((request: any) => {\n    const matchesStatus = selectedStatus === 'all' || request.status === selectedStatus;\n    const matchesSearch = !searchTerm || \n      request.user_email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      request.id?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      request.user_name?.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    return matchesStatus && matchesSearch;\n  });\n\n  const handleViewDetails = (withdrawal: any) => {\n    setSelectedWithdrawal(withdrawal);\n    setIsDetailsModalOpen(true);\n  };\n\n  const handleCloseDetailsModal = () => {\n    setIsDetailsModalOpen(false);\n    setSelectedWithdrawal(null);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return 'secondary';\n      case 'approved': return 'default';\n      case 'rejected': return 'destructive';\n      default: return 'secondary';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pending': return Clock;\n      case 'approved': return CheckCircle;\n      case 'rejected': return XCircle;\n      default: return Clock;\n    }\n  };\n\n  if (isLoading) {\n    return <div className=\"flex justify-center items-center h-64\">Loading withdrawal requests...</div>;\n  }\n\n  const pendingCount = filteredRequests.filter(w => w.status === 'pending').length;\n  const approvedCount = filteredRequests.filter(w => w.status === 'approved').length;\n  const rejectedCount = filteredRequests.filter(w => w.status === 'rejected').length;\n  const totalAmount = filteredRequests.filter(w => w.amount && w.status === 'approved').reduce((sum, w) => sum + (parseFloat(w.amount) || 0), 0);\n\n  return (\n    <DashboardLayout title=\"Withdrawal Approvals\" subtitle=\"Review and approve agent withdrawal requests\">\n      <div className=\"space-y-6\">\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending Withdrawals</CardTitle>\n            <Clock className=\"h-4 w-4 text-yellow-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-yellow-600\">{pendingCount}</div>\n            <p className=\"text-xs text-muted-foreground\">Awaiting approval</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Approved</CardTitle>\n            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{approvedCount}</div>\n            <p className=\"text-xs text-muted-foreground\">This month</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Rejected</CardTitle>\n            <XCircle className=\"h-4 w-4 text-red-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">{rejectedCount}</div>\n            <p className=\"text-xs text-muted-foreground\">This month</p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Approved Amount</CardTitle>\n            <IndianRupee className=\"h-4 w-4 text-blue-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">\n              ₹{totalAmount.toLocaleString()}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">This month</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Filters</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div>\n            <label className=\"text-sm font-medium text-gray-700 mb-2 block\">Search</label>\n            <Input\n              placeholder=\"Search by email, withdrawal ID, or name...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n            />\n          </div>\n          <div>\n            <label className=\"text-sm font-medium text-gray-700 mb-2 block\">Status</label>\n            <Select value={selectedStatus} onValueChange={setSelectedStatus}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"approved\">Approved</SelectItem>\n                <SelectItem value=\"rejected\">Rejected</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          <div className=\"flex items-end\">\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                setSelectedStatus('pending');\n                setSearchTerm('');\n              }}\n              className=\"w-full\"\n            >\n              Clear Filters\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Withdrawal Requests Table */}\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">Withdrawal Requests</h2>\n          <p className=\"text-sm text-gray-600\">Review and process agent withdrawal requests</p>\n        </div>\n\n        {filteredRequests.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Wallet className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No withdrawal requests</h3>\n            <p className=\"text-gray-600\">There are no withdrawal requests to display.</p>\n          </div>\n        ) : (\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Withdrawal ID</TableHead>\n                <TableHead>Requested By</TableHead>\n                <TableHead>Amount</TableHead>\n                <TableHead>Date Requested</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {filteredRequests.map((request: any) => {\n                const StatusIcon = getStatusIcon(request.status);\n                return (\n                  <TableRow key={request.id}>\n                    <TableCell>\n                      <div className=\"font-mono text-sm font-medium\">#{request.id.slice(-8)}</div>\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        <div className=\"font-medium\">{request.user_email}</div>\n                        <div className=\"text-sm text-gray-600 capitalize\">\n                          {request.user_name || 'N/A'} \n                          {request.user_role && ` • ${request.user_role}`}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-1\">\n                        <IndianRupee className=\"w-4 h-4 text-green-600\" />\n                        <span className=\"font-medium\">\n                          {parseFloat(request.amount).toLocaleString('en-IN')}\n                        </span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm\">\n                        <div>{new Date(request.request_date).toLocaleDateString('en-IN')}</div>\n                        <div className=\"text-gray-600\">{new Date(request.request_date).toLocaleTimeString('en-IN')}</div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-2\">\n                        <StatusIcon className=\"w-4 h-4\" />\n                        <Badge variant={getStatusColor(request.status)}>\n                          {request.status}\n                        </Badge>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleViewDetails(request)}\n                        >\n                          <Eye className=\"w-4 h-4 mr-1\" />\n                          {request.status === 'pending' ? 'Review' : 'View'}\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </TableBody>\n          </Table>\n        )}\n      </div>\n\n        <WithdrawalApprovalModal\n          isOpen={isDetailsModalOpen}\n          onClose={handleCloseDetailsModal}\n          withdrawal={selectedWithdrawal}\n        />\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":23119},"client/src/pages/admin/Attendance.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { CalendarIcon, Users, TrendingUp, TrendingDown, UserCheck, Download, MapPin, Building, School } from 'lucide-react';\nimport { format } from 'date-fns';\nimport { cn } from '@/lib/utils';\n\ninterface State {\n  id: string;\n  name: string;\n}\n\ninterface District {\n  id: string;\n  name: string;\n  stateId: string;\n}\n\ninterface Mandal {\n  id: string;\n  name: string;\n  districtId: string;\n}\n\ninterface Village {\n  id: string;\n  name: string;\n  mandalId: string;\n}\n\ninterface SoCenter {\n  id: string;\n  name: string;\n  villageId: string;\n}\n\ninterface Class {\n  id: string;\n  name: string;\n}\n\ninterface Student {\n  id: string;\n  name: string;\n  student_id: string;\n  class_name: string;\n}\n\ninterface AttendanceRecord {\n  id: string;\n  student_id: string;\n  date: string;\n  status: 'present' | 'absent' | 'late';\n  remarks?: string;\n  student_name: string;\n  student_code: string;\n  class_name: string;\n  center_name: string;\n  center_code: string;\n}\n\nexport default function Attendance() {\n  // Hierarchical filter states\n  const [selectedState, setSelectedState] = useState<string>('');\n  const [selectedDistrict, setSelectedDistrict] = useState<string>('');\n  const [selectedMandal, setSelectedMandal] = useState<string>('');\n  const [selectedVillage, setSelectedVillage] = useState<string>('');\n  const [selectedCenter, setSelectedCenter] = useState<string>('');\n  const [selectedClass, setSelectedClass] = useState<string>('');\n  const [selectedStudent, setSelectedStudent] = useState<string>('');\n  const [selectedDate, setSelectedDate] = useState<string>(format(new Date(), 'yyyy-MM-dd'));\n\n  // API calls for hierarchical data\n  const { data: states = [] } = useQuery({\n    queryKey: ['/api/locations/states'],\n    enabled: true,\n  });\n\n  const { data: districts = [] } = useQuery({\n    queryKey: ['/api/locations/districts', selectedState],\n    queryFn: async () => {\n      if (!selectedState) return [];\n      const response = await fetch(`/api/locations/districts?stateId=${selectedState}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch districts');\n      return response.json();\n    },\n    enabled: !!selectedState,\n  });\n\n  const { data: mandals = [] } = useQuery({\n    queryKey: ['/api/locations/mandals', selectedDistrict],\n    queryFn: async () => {\n      if (!selectedDistrict) return [];\n      const response = await fetch(`/api/locations/mandals?districtId=${selectedDistrict}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch mandals');\n      return response.json();\n    },\n    enabled: !!selectedDistrict,\n  });\n\n  const { data: villages = [] } = useQuery({\n    queryKey: ['/api/locations/villages', selectedMandal],\n    queryFn: async () => {\n      if (!selectedMandal) return [];\n      const response = await fetch(`/api/locations/villages?mandalId=${selectedMandal}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch villages');\n      return response.json();\n    },\n    enabled: !!selectedMandal,\n  });\n\n  const { data: centers = [] } = useQuery({\n    queryKey: ['/api/locations/so-centers', selectedVillage],\n    queryFn: async () => {\n      if (!selectedVillage) return [];\n      const response = await fetch(`/api/locations/so-centers?villageId=${selectedVillage}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch SO centers');\n      return response.json();\n    },\n    enabled: !!selectedVillage,\n  });\n\n  const { data: classes = [] } = useQuery({\n    queryKey: ['/api/classes/by-center', selectedCenter],\n    queryFn: async () => {\n      if (!selectedCenter) return [];\n      const response = await fetch(`/api/classes/by-center?centerId=${selectedCenter}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch classes');\n      return response.json();\n    },\n    enabled: !!selectedCenter,\n  });\n\n  const { data: students = [] } = useQuery({\n    queryKey: ['/api/students/by-filter', selectedClass, selectedCenter],\n    queryFn: async () => {\n      if (!selectedClass && !selectedCenter) return [];\n      const params = new URLSearchParams();\n      if (selectedClass) params.append('classId', selectedClass);\n      if (selectedCenter) params.append('centerId', selectedCenter);\n      \n      const response = await fetch(`/api/students/by-filter?${params.toString()}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch students');\n      return response.json();\n    },\n    enabled: !!(selectedClass || selectedCenter),\n  });\n\n  // Attendance data query\n  const { data: attendanceData = [], isLoading } = useQuery({\n    queryKey: ['/api/attendance', selectedStudent, selectedClass, selectedCenter, selectedDate],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedStudent) params.append('studentId', selectedStudent);\n      if (selectedClass) params.append('classId', selectedClass);\n      if (selectedCenter) params.append('centerId', selectedCenter);\n      if (selectedDate) params.append('date', selectedDate);\n      \n      const response = await fetch(`/api/attendance?${params.toString()}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch attendance');\n      return response.json();\n    },\n    enabled: !!(selectedStudent || selectedClass || selectedCenter),\n  });\n\n  // Reset child selections when parent changes\n  useEffect(() => {\n    setSelectedDistrict('');\n    setSelectedMandal('');\n    setSelectedVillage('');\n    setSelectedCenter('');\n    setSelectedClass('');\n    setSelectedStudent('');\n  }, [selectedState]);\n\n  useEffect(() => {\n    setSelectedMandal('');\n    setSelectedVillage('');\n    setSelectedCenter('');\n    setSelectedClass('');\n    setSelectedStudent('');\n  }, [selectedDistrict]);\n\n  useEffect(() => {\n    setSelectedVillage('');\n    setSelectedCenter('');\n    setSelectedClass('');\n    setSelectedStudent('');\n  }, [selectedMandal]);\n\n  useEffect(() => {\n    setSelectedCenter('');\n    setSelectedClass('');\n    setSelectedStudent('');\n  }, [selectedVillage]);\n\n  useEffect(() => {\n    setSelectedClass('');\n    setSelectedStudent('');\n  }, [selectedCenter]);\n\n  useEffect(() => {\n    setSelectedStudent('');\n  }, [selectedClass]);\n\n  // Calculate attendance statistics\n  const totalPresent = attendanceData.filter((record: AttendanceRecord) => record.status === 'present').length;\n  const totalAbsent = attendanceData.filter((record: AttendanceRecord) => record.status === 'absent').length;\n  const totalLate = attendanceData.filter((record: AttendanceRecord) => record.status === 'late').length;\n  const attendancePercentage = attendanceData.length > 0 ? Math.round((totalPresent / attendanceData.length) * 100) : 0;\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case 'present': return 'default';\n      case 'absent': return 'destructive';\n      case 'late': return 'secondary';\n      default: return 'outline';\n    }\n  };\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Attendance Monitoring</h1>\n            <p className=\"text-muted-foreground\">\n              Track student attendance with hierarchical filtering across the academy\n            </p>\n          </div>\n          <Button variant=\"outline\" className=\"gap-2\">\n            <Download className=\"h-4 w-4\" />\n            Export Report\n          </Button>\n        </div>\n\n        {/* Hierarchical Filters */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <MapPin className=\"h-5 w-5\" />\n              Location & Student Filters\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              Select filters from left to right to narrow down attendance data\n            </p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {/* Date Filter */}\n              <div className=\"space-y-2\">\n                <Label>Date</Label>\n                <Input\n                  type=\"date\"\n                  value={selectedDate}\n                  onChange={(e) => setSelectedDate(e.target.value)}\n                  className=\"w-full md:w-64\"\n                />\n              </div>\n\n              {/* Location Hierarchy Filters */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-7 gap-4 overflow-x-auto\">\n                {/* State */}\n                <div className=\"space-y-2 min-w-40\">\n                  <Label>State</Label>\n                  <Select value={selectedState} onValueChange={setSelectedState}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select State\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {(states as State[]).map((state: State) => (\n                        <SelectItem key={state.id} value={state.id}>\n                          {state.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* District */}\n                <div className=\"space-y-2 min-w-40\">\n                  <Label>District</Label>\n                  <Select \n                    value={selectedDistrict} \n                    onValueChange={setSelectedDistrict}\n                    disabled={!selectedState}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select District\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {(districts as District[]).map((district: District) => (\n                        <SelectItem key={district.id} value={district.id}>\n                          {district.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Mandal */}\n                <div className=\"space-y-2 min-w-40\">\n                  <Label>Mandal</Label>\n                  <Select \n                    value={selectedMandal} \n                    onValueChange={setSelectedMandal}\n                    disabled={!selectedDistrict}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select Mandal\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {(mandals as Mandal[]).map((mandal: Mandal) => (\n                        <SelectItem key={mandal.id} value={mandal.id}>\n                          {mandal.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Village */}\n                <div className=\"space-y-2 min-w-40\">\n                  <Label>Village</Label>\n                  <Select \n                    value={selectedVillage} \n                    onValueChange={setSelectedVillage}\n                    disabled={!selectedMandal}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select Village\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {(villages as Village[]).map((village: Village) => (\n                        <SelectItem key={village.id} value={village.id}>\n                          {village.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* SO Center */}\n                <div className=\"space-y-2 min-w-40\">\n                  <Label>SO Center</Label>\n                  <Select \n                    value={selectedCenter} \n                    onValueChange={setSelectedCenter}\n                    disabled={!selectedVillage}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select SO Center\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {(centers as SoCenter[]).map((center: SoCenter) => (\n                        <SelectItem key={center.id} value={center.id}>\n                          {center.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Class */}\n                <div className=\"space-y-2 min-w-40\">\n                  <Label>Class</Label>\n                  <Select \n                    value={selectedClass} \n                    onValueChange={setSelectedClass}\n                    disabled={!selectedCenter}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select Class\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {(classes as Class[]).map((cls: Class) => (\n                        <SelectItem key={cls.id} value={cls.id}>\n                          {cls.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Student */}\n                <div className=\"space-y-2 min-w-40\">\n                  <Label>Student (Optional)</Label>\n                  <Select \n                    value={selectedStudent} \n                    onValueChange={setSelectedStudent}\n                    disabled={!selectedClass}\n                  >\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select Student\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {(students as Student[]).map((student: Student) => (\n                        <SelectItem key={student.id} value={student.id}>\n                          {student.name} ({student.student_id})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Attendance Statistics */}\n        {attendanceData.length > 0 && (\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-2xl font-bold text-green-600\">{totalPresent}</p>\n                    <p className=\"text-xs text-muted-foreground\">Present</p>\n                  </div>\n                  <UserCheck className=\"h-4 w-4 text-green-600\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-2xl font-bold text-red-600\">{totalAbsent}</p>\n                    <p className=\"text-xs text-muted-foreground\">Absent</p>\n                  </div>\n                  <TrendingDown className=\"h-4 w-4 text-red-600\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-2xl font-bold text-yellow-600\">{totalLate}</p>\n                    <p className=\"text-xs text-muted-foreground\">Late</p>\n                  </div>\n                  <TrendingUp className=\"h-4 w-4 text-yellow-600\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-2xl font-bold\">{attendancePercentage}%</p>\n                    <p className=\"text-xs text-muted-foreground\">Attendance Rate</p>\n                  </div>\n                  <Users className=\"h-4 w-4\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Attendance Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <School className=\"h-5 w-5\" />\n              Attendance Records\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              {selectedStudent \n                ? `Showing attendance for selected student on ${format(new Date(selectedDate), 'MMM dd, yyyy')}`\n                : `Showing attendance records based on current filters for ${format(new Date(selectedDate), 'MMM dd, yyyy')}`\n              }\n            </p>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"flex items-center justify-center p-8\">\n                <div className=\"text-muted-foreground\">Loading attendance data...</div>\n              </div>\n            ) : attendanceData.length === 0 ? (\n              <div className=\"flex items-center justify-center p-8\">\n                <div className=\"text-center text-muted-foreground\">\n                  <School className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p className=\"text-lg font-medium\">No attendance records found</p>\n                  <p className=\"text-sm\">\n                    {!selectedCenter \n                      ? \"Please select filters to view attendance data\"\n                      : \"No attendance records for the selected filters and date\"\n                    }\n                  </p>\n                </div>\n              </div>\n            ) : (\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Student</TableHead>\n                      <TableHead>Student ID</TableHead>\n                      <TableHead>Class</TableHead>\n                      <TableHead>SO Center</TableHead>\n                      <TableHead>Date</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Remarks</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {attendanceData.map((record: AttendanceRecord) => (\n                      <TableRow key={record.id}>\n                        <TableCell className=\"font-medium\">\n                          {record.student_name}\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\">{record.student_code}</Badge>\n                        </TableCell>\n                        <TableCell>{record.class_name}</TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            <Building className=\"h-4 w-4 text-muted-foreground\" />\n                            {record.center_name}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          {format(new Date(record.date), 'MMM dd, yyyy')}\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={getStatusBadgeVariant(record.status)}>\n                            {record.status.charAt(0).toUpperCase() + record.status.slice(1)}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"text-muted-foreground\">\n                          {record.remarks || '-'}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":21531},"client/src/pages/admin/Centers.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { AddSoCenterModal } from '@/components/admin/AddSoCenterModal';\nimport { EditSoCenterModal } from '@/components/admin/EditSoCenterModal';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\nimport { \n  Search, \n  Building, \n  Plus,\n  Edit,\n  Eye,\n  MapPin,\n  Phone,\n  Users,\n  Trash2\n} from 'lucide-react';\n\nexport default function AdminCenters() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [selectedCenter, setSelectedCenter] = useState<any>(null);\n  const [editingCenter, setEditingCenter] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch real SO Centers data from API\n  const { data: centers = [], isLoading, refetch: refetchCenters } = useQuery({\n    queryKey: ['/api/admin/so-centers'],\n  });\n\n  // Delete center mutation (This mutation is not used in the handleDeleteCenter, but kept for completeness)\n  const deleteCenterMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest('DELETE', `/api/admin/so-centers/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Center Deleted',\n        description: 'SO Center has been successfully deleted.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/so-centers'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to delete SO center.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const filteredCenters = (centers as any[]).filter(center => \n    center.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    center.address.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    (center.managerName || '').toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\n  };\n\n  const handleAddCenter = () => {\n    setIsAddModalOpen(true);\n  };\n\n  const handleEditCenter = (center: any) => {\n    setEditingCenter(center);\n  };\n\n  // Updated handleDeleteCenter function\n  const handleDeleteCenter = async (centerId: string) => {\n    const center = centers.find(c => c.id === centerId);\n    const centerName = center?.name || 'this SO Center';\n\n    if (!confirm(`Are you sure you want to permanently delete \"${centerName}\"?\\n\\nThis action cannot be undone and will:\\n- Remove all SO Center data\\n- Delete associated user account\\n- Remove related records\\n\\nNote: SO Centers with active students cannot be deleted.`)) {\n      return;\n    }\n\n    try {\n      const response = await fetch(`/api/admin/so-centers/${centerId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Success\",\n          description: `SO Center \"${centerName}\" deleted successfully`,\n        });\n        refetchCenters();\n      } else {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to delete SO Center');\n      }\n    } catch (error: any) {\n      console.error('Error deleting SO Center:', error);\n      toast({\n        title: \"Delete Failed\",\n        description: error.message || \"Failed to delete SO Center\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <DashboardLayout\n      title=\"SO Centers\"\n      subtitle=\"Manage satellite office centers and their operations\"\n      showAddButton={true}\n      onAddClick={handleAddCenter}\n    >\n      <div className=\"space-y-6\">\n        {/* Search and Stats */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-xl font-semibold text-gray-900\">SO Centers Overview</CardTitle>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 text-gray-400\" size={16} />\n                <Input\n                  placeholder=\"Search centers...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 w-64\"\n                />\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-blue-600\">{(centers as any[]).length}</div>\n                <p className=\"text-gray-600\">Total Centers</p>\n              </div>\n              <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {(centers as any[]).reduce((sum, center) => sum + (center.studentCount || 0), 0)}\n                </div>\n                <p className=\"text-gray-600\">Total Students</p>\n              </div>\n              <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-purple-600\">\n                  ₹{(centers as any[]).reduce((sum, center) => sum + (parseInt(center.walletBalance) || 0), 0).toLocaleString()}\n                </div>\n                <p className=\"text-gray-600\">Total Wallet Balance</p>\n              </div>\n              <div className=\"text-center p-4 bg-yellow-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-yellow-600\">\n                  {(centers as any[]).filter(c => c.isActive).length}\n                </div>\n                <p className=\"text-gray-600\">Active Centers</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Centers List */}\n        {isLoading ? (\n          <div className=\"text-center py-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-gray-500\">Loading SO centers...</p>\n          </div>\n        ) : (\n          <div className=\"grid gap-6\">\n            {filteredCenters.map((center) => (\n              <Card key={center.id}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-start space-x-4\">\n                      <div className=\"w-12 h-12 bg-gradient-to-r from-blue-400 to-blue-600 rounded-lg flex items-center justify-center\">\n                        <Building className=\"text-white\" size={20} />\n                      </div>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-3 mb-2\">\n                          <h3 className=\"text-lg font-semibold text-gray-900\">{center.name}</h3>\n                          <Badge className={center.isActive ? \"bg-green-100 text-green-800\" : \"bg-red-100 text-red-800\"}>\n                            {center.isActive ? 'ACTIVE' : 'INACTIVE'}\n                          </Badge>\n                        </div>\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-600\">\n                          <div className=\"flex items-center space-x-2\">\n                            <MapPin size={16} className=\"text-gray-400\" />\n                            <span>{center.address}</span>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Phone size={16} className=\"text-gray-400\" />\n                            <span>{center.phone}</span>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"w-6 h-6 bg-gradient-to-r from-green-400 to-green-600 rounded-full flex items-center justify-center\">\n                              <span className=\"text-white text-xs font-medium\">\n                                {getInitials(center.managerName || 'Unknown')}\n                              </span>\n                            </div>\n                            <span>{center.managerName || 'Unknown'} - {center.managerEmail || 'N/A'}</span>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Users size={16} className=\"text-gray-400\" />\n                            <span>{center.studentCount || 0} students</span>\n                          </div>\n                        </div>\n\n                        <div className=\"mt-4 flex items-center space-x-6 text-sm\">\n                          <div>\n                            <span className=\"text-gray-500\">Wallet Balance: </span>\n                            <span className=\"font-semibold text-green-600\">₹{(parseInt(center.walletBalance) || 0).toLocaleString()}</span>\n                          </div>\n                          <div>\n                            <span className=\"text-gray-500\">Created: </span>\n                            <span className=\"font-medium\">{new Date(center.createdAt).toLocaleDateString()}</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"flex space-x-2\">\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        onClick={() => setSelectedCenter(center)}\n                        className=\"hover:bg-blue-50\"\n                      >\n                        <Eye className=\"text-blue-600\" size={16} />\n                      </Button>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => handleEditCenter(center)}\n                        className=\"hover:bg-green-50\"\n                      >\n                        <Edit className=\"text-green-600\" size={16} />\n                      </Button>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => handleDeleteCenter(center.id)}\n                        disabled={deleteCenterMutation.isPending}\n                        className=\"hover:bg-red-50\"\n                      >\n                        <Trash2 className=\"text-red-600\" size={16} />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n\n            {filteredCenters.length === 0 && (\n              <Card>\n                <CardContent className=\"p-8 text-center\">\n                  <Building className=\"mx-auto text-gray-400 mb-4\" size={48} />\n                  <p className=\"text-gray-500\">No SO centers found matching your search.</p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        )}\n      </div>\n\n      <AddSoCenterModal \n        isOpen={isAddModalOpen} \n        onClose={() => setIsAddModalOpen(false)}\n        onSuccess={() => {\n          queryClient.invalidateQueries({ queryKey: ['/api/admin/so-centers'] });\n        }}\n      />\n\n      <EditSoCenterModal\n        isOpen={!!editingCenter}\n        onClose={() => setEditingCenter(null)}\n        center={editingCenter}\n      />\n\n      {/* View Details Dialog */}\n      <Dialog open={!!selectedCenter} onOpenChange={() => setSelectedCenter(null)}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>SO Center Details</DialogTitle>\n            <DialogDescription>\n              Complete information about {selectedCenter?.name}\n            </DialogDescription>\n          </DialogHeader>\n\n          {selectedCenter && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-6\">\n                <div>\n                  <h3 className=\"font-semibold mb-3\">Basic Information</h3>\n                  <div className=\"space-y-2 text-sm\">\n                    <p><span className=\"font-medium\">Center ID:</span> {selectedCenter.centerId || selectedCenter.center_id || 'N/A'}</p>\n                    <p><span className=\"font-medium\">Name:</span> {selectedCenter.name || 'N/A'}</p>\n                    <p><span className=\"font-medium\">Email:</span> {selectedCenter.email || 'N/A'}</p>\n                    <p><span className=\"font-medium\">Phone:</span> {selectedCenter.phone || 'N/A'}</p>\n                    <p><span className=\"font-medium\">Address:</span> {selectedCenter.address || 'N/A'}</p>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"font-semibold mb-3\">Financial Information</h3>\n                  <div className=\"space-y-2 text-sm\">\n                    <p><span className=\"font-medium\">Wallet Balance:</span> ₹{(parseFloat(selectedCenter.walletBalance || selectedCenter.wallet_balance) || 0).toLocaleString()}</p>\n                    {selectedCenter.rentAmount && (\n                      <p><span className=\"font-medium\">Rent Amount:</span> ₹{(parseFloat(selectedCenter.rentAmount || selectedCenter.rent_amount) || 0).toLocaleString()}</p>\n                    )}\n                    {selectedCenter.electricBillAccountNumber && (\n                      <p><span className=\"font-medium\">Electric Bill Account:</span> {selectedCenter.electricBillAccountNumber || selectedCenter.electric_bill_account_number || 'N/A'}</p>\n                    )}\n                    {selectedCenter.internetBillAccountNumber && (\n                      <p><span className=\"font-medium\">Internet Bill Account:</span> {selectedCenter.internetBillAccountNumber || selectedCenter.internet_bill_account_number || 'N/A'}</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {(selectedCenter.ownerName || selectedCenter.owner_name) && (\n                <div>\n                  <h3 className=\"font-semibold mb-3\">Property Owner Information</h3>\n                  <div className=\"grid grid-cols-2 gap-6 text-sm\">\n                    <div className=\"space-y-2\">\n                      <p><span className=\"font-medium\">Owner Name:</span> {(selectedCenter.ownerName || selectedCenter.owner_name || '')} {(selectedCenter.ownerLastName || selectedCenter.owner_last_name || '')}</p>\n                      {selectedCenter.ownerFatherName && (\n                        <p><span className=\"font-medium\">Father's Name:</span> {selectedCenter.ownerFatherName || selectedCenter.owner_father_name}</p>\n                      )}\n                      {selectedCenter.ownerMotherName && (\n                        <p><span className=\"font-medium\">Mother's Name:</span> {selectedCenter.ownerMotherName || selectedCenter.owner_mother_name}</p>\n                      )}\n                    </div>\n                    <div className=\"space-y-2\">\n                      {selectedCenter.ownerPhone && (\n                        <p><span className=\"font-medium\">Owner Phone:</span> {selectedCenter.ownerPhone || selectedCenter.owner_phone}</p>\n                      )}\n                      {selectedCenter.roomSize && (\n                        <p><span className=\"font-medium\">Room Size:</span> {selectedCenter.roomSize || selectedCenter.room_size}</p>\n                      )}\n                      {selectedCenter.landmarks && (\n                        <p><span className=\"font-medium\">Landmarks:</span> {selectedCenter.landmarks}</p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              <div>\n                <h3 className=\"font-semibold mb-3\">Status & Statistics</h3>\n                <div className=\"grid grid-cols-3 gap-6 text-sm\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center\">\n                      <span className=\"font-medium mr-2\">Status:</span> \n                      <Badge className={(selectedCenter.isActive !== false && selectedCenter.is_active !== false) ? \"bg-green-100 text-green-800\" : \"bg-red-100 text-red-800\"}>\n                        {(selectedCenter.isActive !== false && selectedCenter.is_active !== false) ? 'ACTIVE' : 'INACTIVE'}\n                      </Badge>\n                    </div>\n                    <p><span className=\"font-medium\">Students:</span> {selectedCenter.studentCount || selectedCenter.student_count || 0}</p>\n                  </div>\n                  <div className=\"space-y-2\">\n                    {selectedCenter.capacity && (\n                      <p><span className=\"font-medium\">Capacity:</span> {selectedCenter.capacity || 'N/A'}</p>\n                    )}\n                    <p><span className=\"font-medium\">Created:</span> {new Date(selectedCenter.createdAt || selectedCenter.created_at).toLocaleDateString()}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </DashboardLayout>\n  );\n}","size_bytes":17663},"client/src/pages/admin/Expenses.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { apiRequest } from '@/lib/queryClient';\nimport { CheckCircle, XCircle, Clock, Filter, Search, Calendar, DollarSign, FileText, Eye } from 'lucide-react';\n\ninterface ExpenseRequest {\n  id: string;\n  expenseType: 'rent' | 'electric_bill' | 'internet_bill' | 'so_salary' | 'others';\n  amount: string;\n  description?: string;\n  electricBillNumber?: string;\n  internetBillNumber?: string;\n  internetServiceProvider?: string;\n  serviceName?: string;\n  serviceDescription?: string;\n  servicePhone?: string;\n  status: 'pending' | 'approved' | 'rejected' | 'paid';\n  requestedAt: string;\n  approvedAt?: string;\n  paidAt?: string;\n  soCenterId: string;\n  soCenterName: string;\n  centerCode: string;\n  adminNotes?: string;\n}\n\ninterface ExpenseStats {\n  totalPending: number;\n  totalApproved: number;\n  totalPaid: number;\n  totalAmount: string;\n}\n\nexport default function AdminExpenses() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [selectedExpense, setSelectedExpense] = useState<ExpenseRequest | null>(null);\n  const [showApprovalModal, setShowApprovalModal] = useState(false);\n\n  // Fetch expense requests\n  const { data: expenseRequests = [], isLoading: loadingExpenses } = useQuery({\n    queryKey: ['/api/admin/expenses', { status: statusFilter, search: searchTerm }],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (statusFilter !== 'all') params.append('status', statusFilter);\n      if (searchTerm) params.append('search', searchTerm);\n      \n      const response = await apiRequest('GET', `/api/admin/expenses?${params}`);\n      return response.json();\n    },\n  }) as { data: ExpenseRequest[], isLoading: boolean };\n\n  // Fetch expense statistics from API\n  const { data: expenseStats } = useQuery({\n    queryKey: ['/api/admin/expense-stats'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/admin/expense-stats');\n      return response.json();\n    },\n  }) as { data: ExpenseStats };\n\n  // Approval mutation\n  const approvalMutation = useMutation({\n    mutationFn: async ({ expenseId, action, adminNotes }: { expenseId: string; action: 'approve' | 'reject'; adminNotes?: string }) => {\n      const response = await apiRequest('POST', `/api/admin/expenses/${expenseId}/approval`, {\n        action,\n        adminNotes,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Success\",\n        description: data.message,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/expenses'] });\n      setShowApprovalModal(false);\n      setSelectedExpense(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Action Failed\",\n        description: error.message || \"Failed to process expense approval\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      pending: { label: 'Pending', variant: 'secondary' as const, icon: Clock },\n      approved: { label: 'Approved', variant: 'default' as const, icon: CheckCircle },\n      rejected: { label: 'Rejected', variant: 'destructive' as const, icon: XCircle },\n      paid: { label: 'Paid', variant: 'success' as const, icon: CheckCircle },\n    };\n    \n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.pending;\n    const IconComponent = config.icon;\n    \n    return (\n      <Badge variant={config.variant} className=\"flex items-center space-x-1\">\n        <IconComponent className=\"w-3 h-3\" />\n        <span>{config.label}</span>\n      </Badge>\n    );\n  };\n\n  const getExpenseTypeLabel = (type: string) => {\n    const labels = {\n      rent: 'Rent',\n      electric_bill: 'Electric Bill',\n      internet_bill: 'Internet Bill',\n      so_salary: 'SO Salary',\n      others: 'Others',\n    };\n    return labels[type as keyof typeof labels] || type;\n  };\n\n  const ApprovalModal = () => {\n    const [action, setAction] = useState<'approve' | 'reject'>('approve');\n    const [adminNotes, setAdminNotes] = useState('');\n\n    const handleSubmit = () => {\n      if (!selectedExpense) return;\n      \n      approvalMutation.mutate({\n        expenseId: selectedExpense.id,\n        action,\n        adminNotes: adminNotes || undefined,\n      });\n    };\n\n    return (\n      <Dialog open={showApprovalModal} onOpenChange={setShowApprovalModal}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Review Expense Request</DialogTitle>\n          </DialogHeader>\n          \n          {selectedExpense && (\n            <div className=\"space-y-6\">\n              {/* Expense Details */}\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <Label>SO Center</Label>\n                  <p className=\"font-semibold\">{selectedExpense.soCenterName}</p>\n                  <p className=\"text-sm text-gray-600\">{selectedExpense.centerCode}</p>\n                </div>\n                <div>\n                  <Label>Expense Type</Label>\n                  <p className=\"font-semibold\">{getExpenseTypeLabel(selectedExpense.expenseType)}</p>\n                </div>\n                <div>\n                  <Label>Amount</Label>\n                  <p className=\"font-semibold text-green-600\">₹{parseFloat(selectedExpense.amount).toFixed(2)}</p>\n                </div>\n                <div>\n                  <Label>Requested Date</Label>\n                  <p>{new Date(selectedExpense.requestedAt).toLocaleDateString()}</p>\n                </div>\n              </div>\n\n              {/* Additional Details */}\n              {selectedExpense.description && (\n                <div>\n                  <Label>Description</Label>\n                  <p className=\"bg-gray-50 p-2 rounded\">{selectedExpense.description}</p>\n                </div>\n              )}\n\n              {selectedExpense.expenseType === 'electric_bill' && selectedExpense.electricBillNumber && (\n                <div>\n                  <Label>Electric Bill Number</Label>\n                  <p>{selectedExpense.electricBillNumber}</p>\n                </div>\n              )}\n\n              {selectedExpense.expenseType === 'internet_bill' && (\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  {selectedExpense.internetBillNumber && (\n                    <div>\n                      <Label>Internet Bill Number</Label>\n                      <p>{selectedExpense.internetBillNumber}</p>\n                    </div>\n                  )}\n                  {selectedExpense.internetServiceProvider && (\n                    <div>\n                      <Label>Service Provider</Label>\n                      <p>{selectedExpense.internetServiceProvider}</p>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {selectedExpense.expenseType === 'others' && (\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  {selectedExpense.serviceName && (\n                    <div>\n                      <Label>Service Name</Label>\n                      <p>{selectedExpense.serviceName}</p>\n                    </div>\n                  )}\n                  {selectedExpense.servicePhone && (\n                    <div>\n                      <Label>Service Phone</Label>\n                      <p>{selectedExpense.servicePhone}</p>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Action Selection */}\n              <div>\n                <Label>Action</Label>\n                <Select value={action} onValueChange={(value: 'approve' | 'reject') => setAction(value)}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"approve\">Approve</SelectItem>\n                    <SelectItem value=\"reject\">Reject</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Admin Notes */}\n              <div>\n                <Label>Admin Notes (Optional)</Label>\n                <Textarea\n                  value={adminNotes}\n                  onChange={(e) => setAdminNotes(e.target.value)}\n                  placeholder=\"Add any notes for this decision...\"\n                  rows={3}\n                />\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex justify-end space-x-2\">\n                <Button variant=\"outline\" onClick={() => setShowApprovalModal(false)}>\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleSubmit}\n                  disabled={approvalMutation.isPending}\n                  className={action === 'approve' ? 'bg-green-600 hover:bg-green-700' : 'bg-red-600 hover:bg-red-700'}\n                >\n                  {approvalMutation.isPending ? 'Processing...' : `${action === 'approve' ? 'Approve' : 'Reject'} Request`}\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    );\n  };\n\n  return (\n    <div className=\"container mx-auto p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Expenses & Salary Management</h1>\n          <p className=\"text-gray-600 dark:text-gray-300 mt-1\">Manage SO Center expense requests and approvals</p>\n        </div>\n      </div>\n\n      {/* Statistics Cards */}\n      {expenseStats && (\n        <div className=\"grid md:grid-cols-4 gap-6 mb-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Pending Requests</CardTitle>\n              <Clock className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-orange-600\">{expenseStats.totalPending}</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Approved Requests</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600\">{expenseStats.totalApproved}</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Paid Expenses</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">{expenseStats.totalPaid}</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Paid Amount</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">₹{parseFloat(expenseStats.totalAmount).toFixed(2)}</div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Filters */}\n      <Card className=\"mb-6\">\n        <CardHeader>\n          <CardTitle>Filter Requests</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex space-x-4\">\n            <div className=\"flex-1\">\n              <Label>Status</Label>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"approved\">Approved</SelectItem>\n                  <SelectItem value=\"rejected\">Rejected</SelectItem>\n                  <SelectItem value=\"paid\">Paid</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex-1\">\n              <Label>Search SO Centers</Label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  placeholder=\"Search by center name or code...\"\n                  className=\"pl-8\"\n                />\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Expense Requests Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Expense Requests</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {loadingExpenses ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n            </div>\n          ) : expenseRequests.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              No expense requests found\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>SO Center</TableHead>\n                    <TableHead>Type</TableHead>\n                    <TableHead>Amount</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Requested</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {expenseRequests.map((expense) => (\n                    <TableRow key={expense.id}>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-semibold\">{expense.soCenterName}</div>\n                          <div className=\"text-sm text-gray-600\">{expense.centerCode}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>{getExpenseTypeLabel(expense.expenseType)}</TableCell>\n                      <TableCell>\n                        <span className=\"font-semibold text-green-600\">\n                          ₹{parseFloat(expense.amount).toFixed(2)}\n                        </span>\n                      </TableCell>\n                      <TableCell>{getStatusBadge(expense.status)}</TableCell>\n                      <TableCell>\n                        {new Date(expense.requestedAt).toLocaleDateString()}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => {\n                              setSelectedExpense(expense);\n                              setShowApprovalModal(true);\n                            }}\n                            className=\"flex items-center\"\n                          >\n                            <Eye className=\"w-4 h-4 mr-1\" />\n                            Review\n                          </Button>\n                          {expense.status === 'pending' && (\n                            <>\n                              <Button\n                                size=\"sm\"\n                                onClick={() => {\n                                  approvalMutation.mutate({\n                                    expenseId: expense.id,\n                                    action: 'approve'\n                                  });\n                                }}\n                                disabled={approvalMutation.isPending}\n                                className=\"bg-green-600 hover:bg-green-700\"\n                              >\n                                <CheckCircle className=\"w-4 h-4 mr-1\" />\n                                Approve\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"destructive\"\n                                onClick={() => {\n                                  approvalMutation.mutate({\n                                    expenseId: expense.id,\n                                    action: 'reject'\n                                  });\n                                }}\n                                disabled={approvalMutation.isPending}\n                              >\n                                <XCircle className=\"w-4 h-4 mr-1\" />\n                                Reject\n                              </Button>\n                            </>\n                          )}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <ApprovalModal />\n    </div>\n  );\n}","size_bytes":18524},"client/src/pages/admin/Fees.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Plus, Edit, Trash2, IndianRupee, Calendar } from 'lucide-react';\n\nconst feeSchema = z.object({\n  classId: z.string().min(1, 'Class selection is required'),\n  courseType: z.enum(['monthly', 'yearly'], { required_error: 'Course type is required' }),\n  monthlyFee: z.string().min(1, 'Monthly fee is required'),\n  yearlyFee: z.string().min(1, 'Yearly fee is required'),\n  admissionFee: z.string().min(1, 'Admission fee is required'),\n  description: z.string().optional(),\n  isActive: z.boolean().default(true),\n});\n\ntype FeeFormData = z.infer<typeof feeSchema>;\n\ninterface AddEditFeeModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  editingFee?: any;\n}\n\nfunction AddEditFeeModal({ isOpen, onClose, editingFee }: AddEditFeeModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch real classes data from API\n  const { data: classes = [] } = useQuery({\n    queryKey: ['/api/classes'],\n  });\n\n  const form = useForm<FeeFormData>({\n    resolver: zodResolver(feeSchema),\n    defaultValues: {\n      classId: editingFee?.classId || '',\n      courseType: editingFee?.courseType || 'monthly',\n      monthlyFee: editingFee?.monthlyFee?.toString() || '',\n      yearlyFee: editingFee?.yearlyFee?.toString() || '',\n      admissionFee: editingFee?.admissionFee?.toString() || '',\n      description: editingFee?.description || '',\n      isActive: editingFee?.isActive ?? true,\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: FeeFormData) => {\n      const submitData = {\n        ...data,\n        monthlyFee: parseInt(data.monthlyFee),\n        yearlyFee: parseInt(data.yearlyFee),\n        admissionFee: parseInt(data.admissionFee),\n      };\n      const endpoint = editingFee ? `/api/admin/fees/${editingFee.id}` : '/api/admin/fees';\n      const method = editingFee ? 'PUT' : 'POST';\n      return apiRequest(method, endpoint, submitData);\n    },\n    onSuccess: () => {\n      toast({\n        title: editingFee ? 'Fee Updated' : 'Fee Created',\n        description: `Fee structure has been successfully ${editingFee ? 'updated' : 'created'}.`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/fees'] });\n      form.reset();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || `Failed to ${editingFee ? 'update' : 'create'} fee structure.`,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: FeeFormData) => {\n    mutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle>{editingFee ? 'Edit Fee Structure' : 'Add New Fee Structure'}</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"classId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Class</FormLabel>\n                    <FormControl>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select class\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {(classes as any[]).map((cls: any) => (\n                            <SelectItem key={cls.id} value={cls.id}>\n                              {cls.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"courseType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Course Type</FormLabel>\n                    <FormControl>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select course type\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"monthly\">Monthly</SelectItem>\n                          <SelectItem value=\"yearly\">Yearly</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"admissionFee\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Admission Fee (₹)</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"number\" \n                      placeholder=\"5000\"\n                      min=\"0\"\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"monthlyFee\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Monthly Fee (₹)</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        placeholder=\"2000\"\n                        min=\"0\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"yearlyFee\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Yearly Fee (₹)</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        placeholder=\"20000\"\n                        min=\"0\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description (Optional)</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Additional details about this fee structure\"\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"bg-blue-50 p-4 rounded-lg\">\n              <p className=\"text-sm text-blue-800\">\n                <strong>Note:</strong> When a student is added to an SO center and selects this class, \n                these fees will be automatically applicable. The admission fee is charged once during enrollment.\n              </p>\n            </div>\n\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={mutation.isPending}\n                className=\"bg-primary text-white hover:bg-blue-700\"\n              >\n                {mutation.isPending \n                  ? (editingFee ? 'Updating...' : 'Creating...') \n                  : (editingFee ? 'Update Fee' : 'Create Fee')\n                }\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function Fees() {\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [editingFee, setEditingFee] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch real fees data from API\n  const { data: fees = [], isLoading } = useQuery({\n    queryKey: ['/api/admin/fees'],\n  });\n\n  // Fetch classes for displaying class names\n  const { data: classes = [] } = useQuery({\n    queryKey: ['/api/classes'],\n  });\n\n  const deleteFeeMutation = useMutation({\n    mutationFn: async (feeId: string) => {\n      return apiRequest('DELETE', `/api/admin/fees/${feeId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Fee Deleted',\n        description: 'Fee structure has been successfully deleted.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/fees'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to delete fee structure.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleEdit = (fee: any) => {\n    setEditingFee(fee);\n    setIsAddModalOpen(true);\n  };\n\n  const handleDelete = (feeId: string) => {\n    if (confirm('Are you sure you want to delete this fee structure?')) {\n      deleteFeeMutation.mutate(feeId);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setIsAddModalOpen(false);\n    setEditingFee(null);\n  };\n\n  const getClassName = (classId: string) => {\n    const cls = (classes as any[]).find((c: any) => c.id === classId);\n    return cls?.name || 'Unknown';\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  if (isLoading) {\n    return <div className=\"flex justify-center items-center h-64\">Loading fee structures...</div>;\n  }\n\n  return (\n    <DashboardLayout \n      title=\"Fee Management\" \n      subtitle=\"Manage class-wise fee structures\"\n      showAddButton={true}\n      onAddClick={() => setIsAddModalOpen(true)}\n    >\n      <div className=\"space-y-6\">\n\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">Fee Structures</h2>\n          <p className=\"text-sm text-gray-600\">Class-wise monthly, yearly, and admission fees</p>\n        </div>\n\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Class</TableHead>\n              <TableHead>Admission Fee</TableHead>\n              <TableHead>Monthly Fee</TableHead>\n              <TableHead>Yearly Fee</TableHead>\n              <TableHead>Status</TableHead>\n              <TableHead>Students</TableHead>\n              <TableHead>Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {(fees as any[]).map((fee: any) => (\n              <TableRow key={fee.id}>\n                <TableCell className=\"font-medium\">{getClassName(fee.classId)}</TableCell>\n                <TableCell>\n                  <div className=\"flex items-center space-x-1\">\n                    <IndianRupee className=\"w-4 h-4 text-green-600\" />\n                    <span className=\"font-medium text-green-600\">\n                      {formatCurrency(fee.admissionFee).replace('₹', '')}\n                    </span>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center space-x-1\">\n                    <Calendar className=\"w-4 h-4 text-blue-600\" />\n                    <span>{formatCurrency(fee.monthlyFee).replace('₹', '')}</span>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center space-x-1\">\n                    <Calendar className=\"w-4 h-4 text-purple-600\" />\n                    <span>{formatCurrency(fee.yearlyFee).replace('₹', '')}</span>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <Badge variant={fee.isActive ? \"default\" : \"secondary\"}>\n                    {fee.isActive ? 'Active' : 'Inactive'}\n                  </Badge>\n                </TableCell>\n                <TableCell>\n                  <span className=\"text-sm text-gray-600\">{fee.studentsEnrolled} enrolled</span>\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleEdit(fee)}\n                    >\n                      <Edit className=\"w-4 h-4 mr-1\" />\n                      Edit\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleDelete(fee.id)}\n                      className=\"text-red-600 hover:text-red-700 hover:border-red-300\"\n                    >\n                      <Trash2 className=\"w-4 h-4 mr-1\" />\n                      Delete\n                    </Button>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"bg-gradient-to-br from-green-50 to-green-100 rounded-lg p-6 border border-green-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-green-600 text-sm font-medium\">Total Monthly Revenue</p>\n              <p className=\"text-2xl font-bold text-green-800\">\n                {formatCurrency((fees as any[]).reduce((sum, fee) => sum + ((fee.monthlyFee || 0) * (fee.studentsEnrolled || 0)), 0))}\n              </p>\n            </div>\n            <IndianRupee className=\"w-8 h-8 text-green-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg p-6 border border-blue-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-blue-600 text-sm font-medium\">Active Fee Structures</p>\n              <p className=\"text-2xl font-bold text-blue-800\">\n                {(fees as any[]).filter(fee => fee.isActive).length}\n              </p>\n            </div>\n            <Calendar className=\"w-8 h-8 text-blue-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-gradient-to-br from-purple-50 to-purple-100 rounded-lg p-6 border border-purple-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-purple-600 text-sm font-medium\">Total Students</p>\n              <p className=\"text-2xl font-bold text-purple-800\">\n                {(fees as any[]).reduce((sum, fee) => sum + (fee.studentsEnrolled || 0), 0)}\n              </p>\n            </div>\n            <Calendar className=\"w-8 h-8 text-purple-600\" />\n          </div>\n        </div>\n      </div>\n\n        <AddEditFeeModal \n          isOpen={isAddModalOpen}\n          onClose={handleCloseModal}\n          editingFee={editingFee}\n        />\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":16595},"client/src/pages/admin/Roles.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Shield, Plus, Edit, Trash2, Users } from 'lucide-react';\n\nconst roleSchema = z.object({\n  name: z.string().min(1, 'Role name is required'),\n  description: z.string().min(1, 'Description is required'),\n  permissions: z.array(z.string()).min(1, 'At least one permission is required'),\n  isActive: z.boolean().default(true),\n});\n\ntype RoleFormData = z.infer<typeof roleSchema>;\n\nconst availablePermissions = [\n  { id: 'users_read', name: 'View Users', category: 'Users' },\n  { id: 'users_write', name: 'Manage Users', category: 'Users' },\n  { id: 'students_read', name: 'View Students', category: 'Students' },\n  { id: 'students_write', name: 'Manage Students', category: 'Students' },\n  { id: 'payments_read', name: 'View Payments', category: 'Payments' },\n  { id: 'payments_write', name: 'Manage Payments', category: 'Payments' },\n  { id: 'academic_read', name: 'View Academic Data', category: 'Academic' },\n  { id: 'academic_write', name: 'Manage Academic Structure', category: 'Academic' },\n  { id: 'centers_read', name: 'View SO Centers', category: 'Centers' },\n  { id: 'centers_write', name: 'Manage SO Centers', category: 'Centers' },\n  { id: 'reports_read', name: 'View Reports', category: 'Reports' },\n  { id: 'reports_write', name: 'Generate Reports', category: 'Reports' },\n  { id: 'system_admin', name: 'System Administration', category: 'System' },\n];\n\ninterface AddEditRoleModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  editingRole?: any;\n}\n\nfunction AddEditRoleModal({ isOpen, onClose, editingRole }: AddEditRoleModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<RoleFormData>({\n    resolver: zodResolver(roleSchema),\n    defaultValues: {\n      name: editingRole?.name || '',\n      description: editingRole?.description || '',\n      permissions: editingRole?.permissions || [],\n      isActive: editingRole?.isActive ?? true,\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: async (data: RoleFormData) => {\n      const endpoint = editingRole ? `/api/admin/roles/${editingRole.id}` : '/api/admin/roles';\n      const method = editingRole ? 'PUT' : 'POST';\n      return apiRequest(method, endpoint, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: editingRole ? 'Role Updated' : 'Role Created',\n        description: `Role has been successfully ${editingRole ? 'updated' : 'created'}.`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/roles'] });\n      form.reset();\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || `Failed to ${editingRole ? 'update' : 'create'} role.`,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: RoleFormData) => {\n    mutation.mutate(data);\n  };\n\n  const selectedPermissions = form.watch('permissions');\n\n  const togglePermission = (permissionId: string) => {\n    const current = selectedPermissions || [];\n    const updated = current.includes(permissionId)\n      ? current.filter(p => p !== permissionId)\n      : [...current, permissionId];\n    form.setValue('permissions', updated);\n  };\n\n  const permissionsByCategory = availablePermissions.reduce((acc, permission) => {\n    if (!acc[permission.category]) {\n      acc[permission.category] = [];\n    }\n    acc[permission.category].push(permission);\n    return acc;\n  }, {} as Record<string, typeof availablePermissions>);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[600px] max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>{editingRole ? 'Edit Role' : 'Add New Role'}</DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Role Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"e.g. Branch Manager, Senior Teacher\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"isActive\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <FormControl>\n                      <Select \n                        onValueChange={(value) => field.onChange(value === 'active')}\n                        value={field.value ? 'active' : 'inactive'}\n                      >\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"active\">Active</SelectItem>\n                          <SelectItem value=\"inactive\">Inactive</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Describe the role and its responsibilities\"\n                      className=\"resize-none\"\n                      rows={3}\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div>\n              <FormLabel className=\"text-base font-medium\">Permissions</FormLabel>\n              <div className=\"mt-3 space-y-4\">\n                {Object.entries(permissionsByCategory).map(([category, permissions]) => (\n                  <div key={category} className=\"border rounded-lg p-4\">\n                    <h4 className=\"font-medium text-sm text-gray-700 mb-3\">{category}</h4>\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      {permissions.map((permission) => (\n                        <div\n                          key={permission.id}\n                          className={`cursor-pointer rounded-md border p-2 text-sm transition-colors ${\n                            selectedPermissions?.includes(permission.id)\n                              ? 'border-primary bg-primary/10 text-primary'\n                              : 'border-gray-200 hover:border-gray-300'\n                          }`}\n                          onClick={() => togglePermission(permission.id)}\n                        >\n                          {permission.name}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n              {form.formState.errors.permissions && (\n                <p className=\"text-sm text-red-600 mt-2\">\n                  {form.formState.errors.permissions.message}\n                </p>\n              )}\n            </div>\n\n            <div className=\"flex justify-end space-x-3 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={mutation.isPending}\n                className=\"bg-primary text-white hover:bg-blue-700\"\n              >\n                {mutation.isPending \n                  ? (editingRole ? 'Updating...' : 'Creating...') \n                  : (editingRole ? 'Update Role' : 'Create Role')\n                }\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function Roles() {\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [editingRole, setEditingRole] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Mock data - replace with actual API call\n  const { data: roles = [], isLoading } = useQuery({\n    queryKey: ['/api/admin/roles'],\n    queryFn: async () => {\n      // Mock data for now\n      return [\n        {\n          id: '1',\n          name: 'Super Admin',\n          description: 'Full system access and control',\n          permissions: ['system_admin', 'users_write', 'students_write', 'payments_write', 'academic_write', 'centers_write', 'reports_write'],\n          isActive: true,\n          userCount: 2,\n        },\n        {\n          id: '2',\n          name: 'SO Center Manager',\n          description: 'Manages SO center operations and students',\n          permissions: ['students_read', 'students_write', 'payments_read', 'payments_write'],\n          isActive: true,\n          userCount: 8,\n        },\n        {\n          id: '3',\n          name: 'Teacher',\n          description: 'Handles student progress and topic updates',\n          permissions: ['students_read', 'academic_read'],\n          isActive: true,\n          userCount: 15,\n        },\n        {\n          id: '4',\n          name: 'Academic Admin',\n          description: 'Manages academic structure and oversight',\n          permissions: ['academic_read', 'academic_write', 'reports_read'],\n          isActive: true,\n          userCount: 3,\n        },\n      ];\n    },\n  });\n\n  const deleteRoleMutation = useMutation({\n    mutationFn: async (roleId: string) => {\n      return apiRequest('DELETE', `/api/admin/roles/${roleId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Role Deleted',\n        description: 'Role has been successfully deleted.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/roles'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to delete role.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleEdit = (role: any) => {\n    setEditingRole(role);\n    setIsAddModalOpen(true);\n  };\n\n  const handleDelete = (roleId: string) => {\n    if (confirm('Are you sure you want to delete this role?')) {\n      deleteRoleMutation.mutate(roleId);\n    }\n  };\n\n  const handleCloseModal = () => {\n    setIsAddModalOpen(false);\n    setEditingRole(null);\n  };\n\n  if (isLoading) {\n    return <div className=\"flex justify-center items-center h-64\">Loading roles...</div>;\n  }\n\n  return (\n    <DashboardLayout \n      title=\"Role Management\" \n      subtitle=\"Manage user roles and permissions\"\n      showAddButton={true}\n      onAddClick={() => setIsAddModalOpen(true)}\n    >\n      <div className=\"space-y-6\">\n\n      <div className=\"bg-white rounded-lg shadow\">\n        <div className=\"px-6 py-4 border-b border-gray-200\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">System Roles</h2>\n          <p className=\"text-sm text-gray-600\">Configure roles and their permissions</p>\n        </div>\n\n        <div className=\"divide-y divide-gray-200\">\n          {roles.map((role: any) => (\n            <div key={role.id} className=\"px-6 py-4 hover:bg-gray-50\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Shield className=\"w-5 h-5 text-primary\" />\n                    <h3 className=\"text-lg font-medium text-gray-900\">{role.name}</h3>\n                    <Badge variant={role.isActive ? \"default\" : \"secondary\"}>\n                      {role.isActive ? 'Active' : 'Inactive'}\n                    </Badge>\n                  </div>\n                  <p className=\"text-gray-600 mt-1\">{role.description}</p>\n                  \n                  <div className=\"flex items-center space-x-4 mt-3 text-sm text-gray-500\">\n                    <div className=\"flex items-center space-x-1\">\n                      <Users className=\"w-4 h-4\" />\n                      <span>{role.userCount} users</span>\n                    </div>\n                    <span>•</span>\n                    <span>{role.permissions.length} permissions</span>\n                  </div>\n\n                  <div className=\"mt-3\">\n                    <div className=\"flex flex-wrap gap-1\">\n                      {role.permissions.slice(0, 6).map((permission: string) => (\n                        <Badge key={permission} variant=\"outline\" className=\"text-xs\">\n                          {availablePermissions.find(p => p.id === permission)?.name || permission}\n                        </Badge>\n                      ))}\n                      {role.permissions.length > 6 && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          +{role.permissions.length - 6} more\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex space-x-2 ml-4\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => handleEdit(role)}\n                  >\n                    <Edit className=\"w-4 h-4 mr-1\" />\n                    Edit\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => handleDelete(role.id)}\n                    className=\"text-red-600 hover:text-red-700 hover:border-red-300\"\n                  >\n                    <Trash2 className=\"w-4 h-4 mr-1\" />\n                    Delete\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n        <AddEditRoleModal \n          isOpen={isAddModalOpen}\n          onClose={handleCloseModal}\n          editingRole={editingRole}\n        />\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":15151},"client/src/pages/admin/Structure.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\nimport { useNavigate } from 'react-router-dom';\nimport { apiRequest } from '@/lib/queryClient';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Plus, \n  BookOpen, \n  FileText, \n  Edit, \n  Trash2, \n  Target,\n  Flag,\n  Star\n} from 'lucide-react';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { AddChapterModal } from '@/components/admin/AddChapterModal';\nimport { AddTopicModal } from '@/components/admin/AddTopicModal';\n\ninterface Chapter {\n  id: string;\n  name: string;\n  description?: string;\n  subjectId: string;\n  subjectName: string;\n  className: string;\n  order?: number;\n  topicCount?: number;\n}\n\ninterface Topic {\n  id: string;\n  name: string;\n  description?: string;\n  chapterId: string;\n  chapterName: string;\n  subjectName: string;\n  className: string;\n  isImportant: boolean;\n  isModerate: boolean;\n  order?: number;\n}\n\nfunction AdminStructure() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const navigate = useNavigate();\n  const [activeTab, setActiveTab] = useState('chapters');\n  const [showAddChapterModal, setShowAddChapterModal] = useState(false);\n  const [showAddTopicModal, setShowAddTopicModal] = useState(false);\n  const [editingChapter, setEditingChapter] = useState<Chapter | undefined>();\n  const [editingTopic, setEditingTopic] = useState<Topic | undefined>();\n\n  // Fetch chapters\n  const { data: chapters = [], isLoading: chaptersLoading } = useQuery<Chapter[]>({\n    queryKey: ['/api/admin/chapters'],\n  });\n\n  // Fetch topics\n  const { data: topics = [], isLoading: topicsLoading } = useQuery<Topic[]>({\n    queryKey: ['/api/admin/topics'],\n  });\n\n  // Delete chapter mutation\n  const deleteChapterMutation = useMutation({\n    mutationFn: async (chapterId: string) => {\n      return apiRequest('DELETE', `/api/admin/chapters/${chapterId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Chapter Deleted',\n        description: 'Chapter has been successfully deleted.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/chapters'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/topics'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to delete chapter.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Delete topic mutation\n  const deleteTopicMutation = useMutation({\n    mutationFn: async (topicId: string) => {\n      return apiRequest('DELETE', `/api/admin/topics/${topicId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Topic Deleted',\n        description: 'Topic has been successfully deleted.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/topics'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to delete topic.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleDeleteChapter = (chapterId: string, chapterName: string) => {\n    if (window.confirm(`Are you sure you want to delete \"${chapterName}\"? This will also delete all topics in this chapter.`)) {\n      deleteChapterMutation.mutate(chapterId);\n    }\n  };\n\n  const handleDeleteTopic = (topicId: string, topicName: string) => {\n    if (window.confirm(`Are you sure you want to delete \"${topicName}\"?`)) {\n      deleteTopicMutation.mutate(topicId);\n    }\n  };\n\n  // Calculate statistics\n  const totalChapters = chapters.length;\n  const totalTopics = topics.length;\n  const moderateTopics = topics.filter(topic => topic.isModerate).length;\n  const importantTopics = topics.filter(topic => topic.isImportant).length;\n\n  return (\n    <DashboardLayout\n      title=\"Chapters and Topics Management\"\n      subtitle=\"Manage the academic structure: chapters and topics for all subjects\"\n    >\n      <div className=\"space-y-6\">\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Chapters</CardTitle>\n              <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{totalChapters}</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Topics</CardTitle>\n              <FileText className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{totalTopics}</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Moderate Topics</CardTitle>\n              <Flag className=\"h-4 w-4 text-orange-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-orange-600\">{moderateTopics}</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Important Topics</CardTitle>\n              <Star className=\"h-4 w-4 text-red-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600\">{importantTopics}</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <TabsList className=\"grid w-full max-w-md grid-cols-2\">\n              <TabsTrigger value=\"chapters\">Chapters</TabsTrigger>\n              <TabsTrigger value=\"topics\">Topics</TabsTrigger>\n            </TabsList>\n\n            <div className=\"flex gap-3\">\n              <Button \n                onClick={() => navigate('/admin/topics-management')}\n                variant=\"outline\"\n                className=\"border-purple-600 text-purple-600 hover:bg-purple-50\"\n              >\n                <Target className=\"h-4 w-4 mr-2\" />\n                Manage Topic Flags\n              </Button>\n              <Button \n                onClick={() => setShowAddChapterModal(true)}\n                className=\"bg-green-600 hover:bg-green-700\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Chapter\n              </Button>\n              <Button \n                onClick={() => setShowAddTopicModal(true)}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Topic\n              </Button>\n            </div>\n          </div>\n\n          <TabsContent value=\"chapters\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <BookOpen className=\"h-5 w-5\" />\n                  Chapters ({totalChapters})\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {chaptersLoading ? (\n                  <div className=\"text-center py-8\">Loading chapters...</div>\n                ) : chapters.length === 0 ? (\n                  <div className=\"text-center py-12 text-gray-500\">\n                    <BookOpen className=\"mx-auto h-16 w-16 text-gray-400 mb-4\" />\n                    <h3 className=\"text-xl font-semibold mb-2\">No Chapters Added Yet</h3>\n                    <p className=\"text-gray-600 max-w-md mx-auto leading-relaxed\">\n                      Start building your academic structure by adding chapters to your subjects.\n                    </p>\n                    <Button \n                      onClick={() => setShowAddChapterModal(true)}\n                      className=\"mt-4\"\n                    >\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add Your First Chapter\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"rounded-md border\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Chapter Name</TableHead>\n                          <TableHead>Subject</TableHead>\n                          <TableHead>Class</TableHead>\n                          <TableHead>Topics Count</TableHead>\n                          <TableHead>Actions</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {chapters.map((chapter) => (\n                          <TableRow key={chapter.id}>\n                            <TableCell className=\"font-medium\">\n                              {chapter.name}\n                            </TableCell>\n                            <TableCell>{chapter.subjectName}</TableCell>\n                            <TableCell>{chapter.className}</TableCell>\n                            <TableCell>\n                              <Badge variant=\"secondary\">\n                                {topics.filter(t => t.chapterId === chapter.id).length} topics\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex items-center gap-2\">\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => setEditingChapter(chapter)}\n                                >\n                                  <Edit className=\"h-4 w-4\" />\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => handleDeleteChapter(chapter.id, chapter.name)}\n                                  disabled={deleteChapterMutation.isPending}\n                                >\n                                  <Trash2 className=\"h-4 w-4 text-red-500\" />\n                                </Button>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"topics\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <FileText className=\"h-5 w-5\" />\n                  Topics ({totalTopics})\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {topicsLoading ? (\n                  <div className=\"text-center py-8\">Loading topics...</div>\n                ) : topics.length === 0 ? (\n                  <div className=\"text-center py-12 text-gray-500\">\n                    <FileText className=\"mx-auto h-16 w-16 text-gray-400 mb-4\" />\n                    <h3 className=\"text-xl font-semibold mb-2\">No Topics Added Yet</h3>\n                    <p className=\"text-gray-600 max-w-md mx-auto leading-relaxed\">\n                      Add topics to your chapters to complete the academic structure.\n                    </p>\n                    <Button \n                      onClick={() => setShowAddTopicModal(true)}\n                      className=\"mt-4\"\n                    >\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add Your First Topic\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"rounded-md border\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Topic Name</TableHead>\n                          <TableHead>Chapter</TableHead>\n                          <TableHead>Subject</TableHead>\n                          <TableHead>Class</TableHead>\n                          <TableHead>Priority</TableHead>\n                          <TableHead>Actions</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {topics.map((topic) => (\n                          <TableRow key={topic.id}>\n                            <TableCell className=\"font-medium\">\n                              {topic.name}\n                            </TableCell>\n                            <TableCell>{topic.chapterName}</TableCell>\n                            <TableCell>{topic.subjectName}</TableCell>\n                            <TableCell>{topic.className}</TableCell>\n                            <TableCell>\n                              <div className=\"flex gap-1\">\n                                {topic.isImportant && (\n                                  <Badge variant=\"destructive\" className=\"text-xs\">\n                                    <Star className=\"h-3 w-3 mr-1\" />\n                                    Important\n                                  </Badge>\n                                )}\n                                {topic.isModerate && (\n                                  <Badge variant=\"secondary\" className=\"text-xs bg-orange-100 text-orange-700\">\n                                    <Flag className=\"h-3 w-3 mr-1\" />\n                                    Moderate\n                                  </Badge>\n                                )}\n                                {!topic.isImportant && !topic.isModerate && (\n                                  <Badge variant=\"outline\" className=\"text-xs\">\n                                    Normal\n                                  </Badge>\n                                )}\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex items-center gap-2\">\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => setEditingTopic(topic)}\n                                >\n                                  <Edit className=\"h-4 w-4\" />\n                                </Button>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => handleDeleteTopic(topic.id, topic.name)}\n                                  disabled={deleteTopicMutation.isPending}\n                                >\n                                  <Trash2 className=\"h-4 w-4 text-red-500\" />\n                                </Button>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* Add Chapter Modal */}\n        <AddChapterModal\n          isOpen={showAddChapterModal}\n          onClose={() => setShowAddChapterModal(false)}\n        />\n\n        {/* Add Topic Modal */}\n        <AddTopicModal\n          isOpen={showAddTopicModal}\n          onClose={() => setShowAddTopicModal(false)}\n        />\n      </div>\n    </DashboardLayout>\n  );\n}\n\nexport default AdminStructure;\n","size_bytes":16482},"client/src/pages/admin/Teachers.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { AddTeachingRecordForm } from '@/components/admin/AddTeachingRecordForm';\nimport { TeacherRecordsModal } from '@/components/admin/TeacherRecordsModal';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogFooter,\n} from '@/components/ui/dialog';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\nimport { \n  Search, \n  UserPlus, \n  Eye, \n  Trash2, \n  Users,\n  BookOpen,\n  Clock,\n  CalendarDays,\n  UserCheck,\n  Settings\n} from 'lucide-react';\n// Import components inline to avoid missing module errors\nimport type { Teacher } from '@shared/schema';\n\nexport default function AdminTeachers() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isRecordModalOpen, setIsRecordModalOpen] = useState(false);\n  const [isAssignModalOpen, setIsAssignModalOpen] = useState(false);\n  const [isViewRecordsModalOpen, setIsViewRecordsModalOpen] = useState(false);\n  const [selectedTeacher, setSelectedTeacher] = useState<Teacher | null>(null);\n  const [teacherToDelete, setTeacherToDelete] = useState<{id: string, name: string} | null>(null);\n  const [selectedSubjects, setSelectedSubjects] = useState<string[]>([]);\n  const [selectedClasses, setSelectedClasses] = useState<string[]>([]);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch teachers from API\n  const { data: teachers = [], isLoading } = useQuery<Teacher[]>({\n    queryKey: ['/api/admin/teachers'],\n  });\n\n  // Fetch all subjects for assignment\n  const { data: allSubjects = [] } = useQuery({\n    queryKey: ['/api/admin/academic/subjects'],\n  });\n\n  // Fetch all classes for assignment\n  const { data: allClasses = [] } = useQuery({\n    queryKey: ['/api/admin/academic/classes'],\n  });\n\n  // Fetch teacher's current assignments\n  const { data: teacherSubjects = [] } = useQuery({\n    queryKey: ['/api/admin/teachers', selectedTeacher?.id, 'subjects'],\n    enabled: !!selectedTeacher?.id && isAssignModalOpen,\n  });\n\n  const { data: teacherClasses = [] } = useQuery({\n    queryKey: ['/api/admin/teachers', selectedTeacher?.id, 'classes'],\n    enabled: !!selectedTeacher?.id && isAssignModalOpen,\n  });\n\n  // Delete teacher mutation\n  const deleteTeacherMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest('DELETE', `/api/admin/teachers/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Teacher Deleted',\n        description: 'Teacher has been successfully deleted.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/teachers'] });\n      setTeacherToDelete(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to delete teacher.',\n        variant: 'destructive',\n      });\n      setTeacherToDelete(null);\n    },\n  });\n\n  const handleDeleteClick = (teacher: Teacher) => {\n    setTeacherToDelete({ id: teacher.id, name: teacher.name });\n  };\n\n  const confirmDelete = () => {\n    if (teacherToDelete) {\n      deleteTeacherMutation.mutate(teacherToDelete.id);\n    }\n  };\n\n  const handleViewTeacher = (teacher: Teacher) => {\n    setSelectedTeacher(teacher);\n    setIsViewRecordsModalOpen(true);\n  };\n\n  const handleAssignTeacher = (teacher: Teacher) => {\n    setSelectedTeacher(teacher);\n    setIsAssignModalOpen(true);\n  };\n\n  // Update assignments mutation\n  const updateAssignmentsMutation = useMutation({\n    mutationFn: async ({ teacherId, subjectIds, classIds }: { teacherId: string, subjectIds: string[], classIds: string[] }) => {\n      // Update subjects\n      await apiRequest('PUT', `/api/admin/teachers/${teacherId}/subjects`, { subjectIds });\n      // Update classes  \n      await apiRequest('PUT', `/api/admin/teachers/${teacherId}/classes`, { classIds });\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Assignments Updated',\n        description: 'Teacher assignments have been successfully updated.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/teachers'] });\n      setIsAssignModalOpen(false);\n      setSelectedTeacher(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to update assignments.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleSaveAssignments = () => {\n    if (!selectedTeacher) return;\n    updateAssignmentsMutation.mutate({\n      teacherId: selectedTeacher.id,\n      subjectIds: selectedSubjects,\n      classIds: selectedClasses\n    });\n  };\n\n  const openAssignModal = async (teacher: Teacher) => {\n    setSelectedTeacher(teacher);\n    setIsAssignModalOpen(true);\n  };\n\n  // Load current assignments when modal opens\n  useEffect(() => {\n    if (isAssignModalOpen && teacherSubjects && teacherClasses) {\n      const currentSubjects = Array.isArray(teacherSubjects) ? teacherSubjects.map((s: any) => s.id) : [];\n      const currentClasses = Array.isArray(teacherClasses) ? teacherClasses.map((c: any) => c.id) : [];\n      setSelectedSubjects(currentSubjects);\n      setSelectedClasses(currentClasses);\n    }\n  }, [isAssignModalOpen, teacherSubjects, teacherClasses]);\n\n  const filteredTeachers = (teachers as any[]).filter((teacher: any) => {\n    const matchesSearch = teacher.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (teacher.phone && teacher.phone.toLowerCase().includes(searchTerm.toLowerCase())) ||\n                         (teacher.fatherName && teacher.fatherName.toLowerCase().includes(searchTerm.toLowerCase()));\n    return matchesSearch && teacher.isActive;\n  });\n\n  if (isLoading) {\n    return (\n      <DashboardLayout title=\"Teacher Management\" subtitle=\"Loading teachers...\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"text-lg\">Loading teachers...</div>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout title=\"Teacher Management\" subtitle=\"Manage teachers, assignments, and daily records\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-6 w-6\" />\n                Teacher Management\n              </CardTitle>\n              <p className=\"text-gray-600 mt-1\">Manage teachers, assign subjects and classes, track daily teaching records</p>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button \n                onClick={() => setIsRecordModalOpen(true)}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                <BookOpen className=\"mr-2 h-4 w-4\" />\n                Add Teaching Record\n              </Button>\n              <Button onClick={() => setIsCreateModalOpen(true)}>\n                <UserPlus className=\"mr-2 h-4 w-4\" />\n                Create Teacher\n              </Button>\n            </div>\n          </div>\n\n          {/* Search and Filters */}\n          <div className=\"flex flex-col sm:flex-row gap-4 mt-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                placeholder=\"Search teachers by name, mobile, or father name...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                    Teacher Details\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                    Contact Info\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                    Salary\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                    Created\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {filteredTeachers.map((teacher: Teacher) => (\n                  <tr key={teacher.id} className=\"hover:bg-gray-50 transition\">\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-10 h-10 bg-gradient-to-r from-green-400 to-green-600 rounded-full flex items-center justify-center\">\n                          <span className=\"text-white font-medium text-sm\">\n                            {teacher.name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2)}\n                          </span>\n                        </div>\n                        <div className=\"ml-4\">\n                          <div className=\"text-sm font-medium text-gray-900\">{teacher.name}</div>\n                          <div className=\"text-sm text-gray-500\">Father: {teacher.fatherName || 'N/A'}</div>\n                          <div className=\"text-sm text-gray-500\">DOB: {teacher.dateOfBirth ? new Date(teacher.dateOfBirth).toLocaleDateString() : 'N/A'}</div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm text-gray-900\">{teacher.mobile || 'N/A'}</div>\n                      <div className=\"text-sm text-gray-500\">{teacher.address || 'N/A'}</div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm font-medium text-gray-900\">₹{teacher.salary ? parseFloat(teacher.salary).toLocaleString() : '0'}</div>\n                      <Badge variant=\"outline\" className=\"mt-1\">\n                        {teacher.salaryType ? teacher.salaryType.toUpperCase() : 'FIXED'}\n                      </Badge>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {teacher.createdAt ? new Date(teacher.createdAt).toLocaleDateString() : 'N/A'}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                      <div className=\"flex space-x-2\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => handleViewTeacher(teacher)}\n                          title=\"View Teaching Records\"\n                          className=\"hover:bg-blue-50\"\n                        >\n                          <Eye className=\"text-blue-600\" size={16} />\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => openAssignModal(teacher)}\n                          title=\"Assign Classes & Subjects\"\n                        >\n                          <Settings className=\"text-green-600\" size={16} />\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => handleDeleteClick(teacher)}\n                          disabled={deleteTeacherMutation.isPending}\n                        >\n                          <Trash2 className=\"text-destructive\" size={16} />\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n\n          {filteredTeachers.length === 0 && (\n            <div className=\"text-center py-8\">\n              <Users className=\"mx-auto h-12 w-12 text-gray-400\" />\n              <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No teachers found</h3>\n              <p className=\"mt-1 text-sm text-gray-500\">\n                {searchTerm ? 'Try adjusting your search terms.' : 'Get started by creating your first teacher.'}\n              </p>\n            </div>\n          )}\n\n          {/* Stats */}\n          <div className=\"mt-6 pt-4 border-t border-gray-200\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">{teachers.filter((t: Teacher) => t.isActive).length}</div>\n                <p className=\"text-gray-600\">Active Teachers</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">{teachers.filter((t: Teacher) => t.salaryType === 'fixed').length}</div>\n                <p className=\"text-gray-600\">Fixed Salary</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">{teachers.filter((t: Teacher) => t.salaryType === 'hourly').length}</div>\n                <p className=\"text-gray-600\">Hourly Rate</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Create Teacher Modal */}\n      <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Create New Teacher</DialogTitle>\n          </DialogHeader>\n          <div className=\"p-4\">\n            <p>Teacher creation form will be available soon.</p>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Add Teaching Record Modal */}\n      <Dialog open={isRecordModalOpen} onOpenChange={setIsRecordModalOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Add Daily Teaching Record</DialogTitle>\n            <DialogDescription>\n              Create a new teaching record with details about the session, including class, subject, and topics covered.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"p-6\">\n            <AddTeachingRecordForm\n              onSuccess={() => setIsRecordModalOpen(false)}\n            />\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Teacher Detail View Modal */}\n      {selectedTeacher && (\n        <Dialog open={!!selectedTeacher} onOpenChange={() => setSelectedTeacher(null)}>\n          <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>{selectedTeacher.name} - Teaching Profile</DialogTitle>\n              <DialogDescription>\n                View complete teacher information including contact details, salary, and personal data.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"p-4\">\n              <h3 className=\"font-medium\">Teacher Details</h3>\n              <div className=\"mt-2 space-y-2\">\n                <p><strong>Name:</strong> {selectedTeacher.name}</p>\n                <p><strong>Father Name:</strong> {selectedTeacher.fatherName}</p>\n                <p><strong>Mobile:</strong> {selectedTeacher.mobile}</p>\n                <p><strong>Salary:</strong> ₹{selectedTeacher.salary} ({selectedTeacher.salaryType})</p>\n                <p><strong>Date of Birth:</strong> {selectedTeacher.dateOfBirth}</p>\n                <p><strong>Status:</strong> {selectedTeacher.isActive ? 'Active' : 'Inactive'}</p>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={!!teacherToDelete} onOpenChange={() => setTeacherToDelete(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action cannot be undone. This will permanently delete the teacher \n              <strong> {teacherToDelete?.name}</strong> and remove all their teaching records from the system.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancel</AlertDialogCancel>\n            <AlertDialogAction \n              onClick={confirmDelete}\n              className=\"bg-red-600 hover:bg-red-700\"\n              disabled={deleteTeacherMutation.isPending}\n            >\n              {deleteTeacherMutation.isPending ? 'Deleting...' : 'Delete Teacher'}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n\n      {/* Assignment Modal */}\n      <Dialog open={isAssignModalOpen} onOpenChange={setIsAssignModalOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Assign Classes & Subjects - {selectedTeacher?.name}</DialogTitle>\n            <DialogDescription>\n              Select subjects and classes to assign to this teacher. You can select multiple items from each section.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"grid md:grid-cols-2 gap-6 p-4\">\n            {/* Subjects Section */}\n            <div>\n              <h3 className=\"font-medium mb-3 flex items-center gap-2\">\n                <BookOpen className=\"h-5 w-5\" />\n                Assign Subjects\n              </h3>\n              <div className=\"space-y-2 max-h-60 overflow-y-auto border rounded p-3\">\n                {Array.isArray(allSubjects) && allSubjects.length > 0 ? allSubjects.map((subject: any) => (\n                  <div key={subject.id} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={`subject-${subject.id}`}\n                      checked={selectedSubjects.includes(subject.id)}\n                      onCheckedChange={(checked) => {\n                        if (checked) {\n                          setSelectedSubjects([...selectedSubjects, subject.id]);\n                        } else {\n                          setSelectedSubjects(selectedSubjects.filter(id => id !== subject.id));\n                        }\n                      }}\n                    />\n                    <label htmlFor={`subject-${subject.id}`} className=\"text-sm\">\n                      {subject.name}\n                    </label>\n                  </div>\n                )) : <div className=\"text-sm text-gray-500\">No subjects available</div>}\n              </div>\n            </div>\n\n            {/* Classes Section */}\n            <div>\n              <h3 className=\"font-medium mb-3 flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                Assign Classes\n              </h3>\n              <div className=\"space-y-2 max-h-60 overflow-y-auto border rounded p-3\">\n                {Array.isArray(allClasses) && allClasses.length > 0 ? allClasses.map((classItem: any) => (\n                  <div key={classItem.id} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={`class-${classItem.id}`}\n                      checked={selectedClasses.includes(classItem.id)}\n                      onCheckedChange={(checked) => {\n                        if (checked) {\n                          setSelectedClasses([...selectedClasses, classItem.id]);\n                        } else {\n                          setSelectedClasses(selectedClasses.filter(id => id !== classItem.id));\n                        }\n                      }}\n                    />\n                    <label htmlFor={`class-${classItem.id}`} className=\"text-sm\">\n                      {classItem.name}\n                    </label>\n                  </div>\n                )) : <div className=\"text-sm text-gray-500\">No classes available</div>}\n              </div>\n            </div>\n          </div>\n\n          <DialogFooter className=\"px-4 py-3\">\n            <Button variant=\"outline\" onClick={() => setIsAssignModalOpen(false)}>\n              Cancel\n            </Button>\n            <Button \n              onClick={handleSaveAssignments}\n              disabled={updateAssignmentsMutation.isPending}\n              className=\"bg-green-600 hover:bg-green-700\"\n            >\n              {updateAssignmentsMutation.isPending ? 'Saving...' : 'Save Assignments'}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Teacher Records Modal */}\n      {selectedTeacher && (\n        <TeacherRecordsModal\n          isOpen={isViewRecordsModalOpen}\n          onClose={() => {\n            setIsViewRecordsModalOpen(false);\n            setSelectedTeacher(null);\n          }}\n          teacherId={selectedTeacher.id}\n          teacherName={selectedTeacher.name}\n        />\n      )}\n    </DashboardLayout>\n  );\n}","size_bytes":22290},"client/src/pages/admin/Users.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { AddUserModal } from '@/components/admin/AddUserModal';\nimport { EditUserModal } from '@/components/admin/EditUserModal';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\nimport { \n  Search, \n  Plus, \n  MoreVertical, \n  Edit, \n  Trash2 \n} from 'lucide-react';\n\n// Define a User type for better type safety\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  phone?: string;\n  createdAt: string;\n}\n\nexport default function AdminUsers() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [roleFilter, setRoleFilter] = useState('all');\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n  const [deletingUser, setDeletingUser] = useState<User | null>(null);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch users from API\n  const { data: users = [], isLoading } = useQuery<User[]>({\n    queryKey: ['/api/admin/users'],\n  });\n\n  // Add user mutation (assuming this exists and is handled elsewhere or will be added)\n  // Placeholder for addUserMutation if it's not defined in the original snippet\n  const addUserMutation = {\n    mutate: (userData: any) => {\n      console.log('Adding user:', userData);\n      // In a real scenario, this would be an API call\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n    },\n    isPending: false,\n  };\n\n\n  // Edit user mutation\n  const editUserMutation = useMutation({\n    mutationFn: (userData: { id: string; name: string; email: string; role: string }) => {\n      return apiRequest('PUT', `/api/admin/users/${userData.id}`, userData);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'User Updated',\n        description: 'User has been successfully updated.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      setIsEditModalOpen(false);\n      setEditingUser(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Update Failed',\n        description: error.message || 'Failed to update user. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Delete user mutation\n  const deleteUserMutation = useMutation({\n    mutationFn: (userId: string) => {\n      return apiRequest('DELETE', `/api/admin/users/${userId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'User Deleted',\n        description: 'User has been successfully deleted.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      setIsDeleteDialogOpen(false);\n      setDeletingUser(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Delete Failed',\n        description: error.message || 'Failed to delete user. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleAddUser = (userData: any) => {\n    addUserMutation.mutate(userData);\n  };\n\n  const handleEditUser = (user: User) => {\n    setEditingUser(user);\n    setIsEditModalOpen(true);\n  };\n\n  const handleUpdateUser = (userData: any) => {\n    if (editingUser) {\n      editUserMutation.mutate({ ...userData, id: editingUser.id });\n    }\n  };\n\n  const handleDeleteUser = (user: User) => {\n    setDeletingUser(user);\n    setIsDeleteDialogOpen(true);\n  };\n\n  const confirmDelete = () => {\n    if (deletingUser) {\n      deleteUserMutation.mutate(deletingUser.id);\n    }\n  };\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\n  };\n\n  const getRoleBadgeColor = (role: string) => {\n    switch (role) {\n      case 'admin': return 'bg-red-100 text-red-800';\n      case 'so_center': return 'bg-blue-100 text-blue-800';\n      case 'teacher': return 'bg-green-100 text-green-800';\n      case 'academic_admin': return 'bg-purple-100 text-purple-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const filteredUsers = (users as User[]).filter((user: User) => {\n    const matchesSearch = user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         user.email.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesRole = roleFilter === 'all' || user.role === roleFilter;\n    return matchesSearch && matchesRole;\n  });\n\n  return (\n    <DashboardLayout\n      title=\"Manage Users\"\n      subtitle=\"Manage system users and their roles\"\n      showAddButton={true}\n      onAddClick={() => setIsAddModalOpen(true)}\n    >\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-xl font-semibold text-gray-900\">System Users</CardTitle>\n            <div className=\"flex items-center space-x-3\">\n              {/* Search */}\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 text-gray-400\" size={16} />\n                <Input\n                  placeholder=\"Search users...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 w-64\"\n                />\n              </div>\n\n              {/* Filter */}\n              <Select value={roleFilter} onValueChange={setRoleFilter}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue placeholder=\"All Roles\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Roles</SelectItem>\n                  <SelectItem value=\"admin\">Admin</SelectItem>\n                  <SelectItem value=\"so_center\">SO Center</SelectItem>\n                  <SelectItem value=\"teacher\">Teacher</SelectItem>\n                  <SelectItem value=\"academic_admin\">Academic Admin</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                    User\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                    Role\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                    Created\n                  </th>\n                  <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {filteredUsers.map((user: User) => (\n                  <tr key={user.id} className=\"hover:bg-gray-50 transition\">\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-10 h-10 bg-gradient-to-r from-blue-400 to-blue-600 rounded-full flex items-center justify-center\">\n                          <span className=\"text-white font-medium text-sm\">\n                            {getInitials(user.name)}\n                          </span>\n                        </div>\n                        <div className=\"ml-4\">\n                          <div className=\"text-sm font-medium text-gray-900\">{user.name}</div>\n                          <div className=\"text-sm text-gray-500\">{user.email}</div>\n                          <div className=\"text-sm text-gray-500\">{user.phone}</div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Badge className={getRoleBadgeColor(user.role)}>\n                        {user.role.replace('_', ' ').toUpperCase()}\n                      </Badge>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Badge variant=\"default\" className=\"bg-success text-white\">\n                        Active\n                      </Badge>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {new Date(user.createdAt).toLocaleDateString()}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <MoreVertical className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem onClick={() => handleEditUser(user)}>\n                              <Edit className=\"h-4 w-4 mr-2\" />\n                              Edit User\n                            </DropdownMenuItem>\n                            <DropdownMenuItem \n                              onClick={() => handleDeleteUser(user)}\n                              className=\"text-red-600\"\n                            >\n                              <Trash2 className=\"h-4 w-4 mr-2\" />\n                              Delete User\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n\n          {/* Stats */}\n          <div className=\"mt-6 pt-4 border-t border-gray-200\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-primary\">{users.filter((u: User) => u.role === 'admin').length}</div>\n                <p className=\"text-gray-600\">Admins</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">{users.filter((u: User) => u.role === 'so_center').length}</div>\n                <p className=\"text-gray-600\">SO Centers</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">{users.filter((u: User) => u.role === 'teacher').length}</div>\n                <p className=\"text-gray-600\">Teachers</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-gray-600\">{users.length}</div>\n                <p className=\"text-gray-600\">Total Users</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <AddUserModal \n        isOpen={isAddModalOpen} \n        onClose={() => setIsAddModalOpen(false)}\n        onSubmit={handleAddUser}\n        isLoading={addUserMutation.isPending}\n      />\n\n      {/* Edit User Modal */}\n      <EditUserModal \n        isOpen={isEditModalOpen} \n        onClose={() => {\n          setIsEditModalOpen(false);\n          setEditingUser(null);\n        }}\n        onSubmit={handleUpdateUser}\n        isLoading={editUserMutation.isPending}\n        user={editingUser}\n      />\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete User</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete {deletingUser?.name}? This action cannot be undone.\n              All user data will be permanently removed.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={() => setIsDeleteDialogOpen(false)}>\n              Cancel\n            </AlertDialogCancel>\n            <AlertDialogAction \n              onClick={confirmDelete}\n              className=\"bg-red-600 hover:bg-red-700\"\n              disabled={deleteUserMutation.isPending}\n            >\n              {deleteUserMutation.isPending ? 'Deleting...' : 'Delete User'}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </DashboardLayout>\n  );\n}","size_bytes":13735},"client/src/pages/FeePayments.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport DashboardLayout from \"@/components/layout/DashboardLayout\";\nimport { CreditCard, Send, Receipt, Eye } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport confetti from \"canvas-confetti\";\n\ninterface Student {\n  id: string;\n  name: string;\n  studentId: string;\n  className: string;\n  classId: string;\n  courseType: 'monthly' | 'yearly';\n  parentPhone: string;\n  paymentStatus: string;\n  totalFeeAmount: string;\n  paidAmount: string;\n  pendingAmount: string;\n  previousBalance: string;\n  admissionFeePaid: boolean;\n  enrollmentDate: string;\n  progress: number;\n}\n\ninterface ClassFee {\n  id: string;\n  classId: string;\n  courseType: 'monthly' | 'yearly';\n  admissionFee: string;\n  monthlyFee: string;\n  yearlyFee: string;\n}\n\ninterface PaymentHistory {\n  id: string;\n  amount: string;\n  paymentMethod: string;\n  description: string;\n  month?: string;\n  year?: number;\n  createdAt: string;\n}\n\nexport function FeePayments() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedClass, setSelectedClass] = useState<string>(\"\");\n  const [selectedStudent, setSelectedStudent] = useState<Student | null>(null);\n  const [paymentAmount, setPaymentAmount] = useState(\"\");\n  const [receiptNumber, setReceiptNumber] = useState(\"\");\n  const [selectedFeeType, setSelectedFeeType] = useState<'monthly' | 'yearly'>('monthly');\n  const [showInvoice, setShowInvoice] = useState(false);\n  const [invoiceData, setInvoiceData] = useState<any>(null);\n  const [showPaymentHistory, setShowPaymentHistory] = useState(false);\n  const [selectedStudentHistory, setSelectedStudentHistory] = useState<PaymentHistory[]>([]);\n\n  // Get user context\n  const { user } = useAuth();\n\n  // Fetch all students for this SO center\n  const { data: allStudents = [], isLoading: studentsLoading } = useQuery({\n    queryKey: ['/api/students', user?.id],\n    queryFn: async () => {\n      const soCenterId = user?.role === 'so_center' ? '84bf6d19-8830-4abd-8374-2c29faecaa24' : user?.id;\n      console.log('Fetching students for fee payments SO Center:', soCenterId);\n      const response = await fetch('/api/students?soCenterId=' + soCenterId, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n      console.log('Fee payments response status:', response.status);\n      if (!response.ok) {\n        throw new Error('Failed to fetch students');\n      }\n      const data = await response.json();\n      console.log('Fee payments students data:', data);\n      return Array.isArray(data) ? data : [];\n    },\n    enabled: !!user,\n    refetchOnWindowFocus: false,\n    staleTime: 0, // Always fetch fresh data for payment tracking\n  });\n\n  // Get unique classes from students\n  const availableClasses = Array.from(new Set(allStudents.map((student: Student) => student.className))).filter(Boolean);\n\n  // Filter students by selected class\n  const students = selectedClass ? allStudents.filter((student: Student) => student.className === selectedClass) : [];\n\n  // Fetch class fees\n  const { data: classFees = [] } = useQuery({\n    queryKey: ['/api/class-fees']\n  });\n\n  // Calculate total due balance and fee info - using REAL DATA from Supabase\n  const calculateStudentBalance = () => {\n    if (!selectedStudent) return { \n      totalDue: 0, \n      admissionFee: 0, \n      previousBalance: 0, \n      monthlyFee: 0, \n      paidAmount: 0, \n      pendingAmount: 0 \n    };\n    \n    const classFee = (classFees as ClassFee[]).find((fee: ClassFee) => \n      fee.classId === selectedStudent.classId && fee.courseType === selectedStudent.courseType\n    );\n    \n    const admissionFee = parseFloat(classFee?.admissionFee || '0');\n    const previousBalance = 0; // Removed previous balance feature\n    const monthlyFee = parseFloat(classFee?.monthlyFee || '0');\n    const paidAmount = parseFloat(selectedStudent.paidAmount || '0');\n    const pendingAmount = parseFloat(selectedStudent.pendingAmount || '0');\n    \n    // Total Due = Admission Fee (if not paid)\n    const totalDue = selectedStudent.admissionFeePaid ? 0 : admissionFee;\n    \n    return { \n      totalDue, \n      admissionFee, \n      previousBalance, \n      monthlyFee, \n      paidAmount, \n      pendingAmount: Math.max(totalDue - paidAmount, 0)\n    };\n  };\n\n  // Process payment mutation\n  const processPaymentMutation = useMutation({\n    mutationFn: async (paymentData: any) => {\n      const response = await apiRequest('POST', '/api/payments/process', paymentData);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      // Show confetti effect\n      confetti({\n        particleCount: 100,\n        spread: 70,\n        origin: { y: 0.6 }\n      });\n\n      // Play PhonePe success sound\n      try {\n        const audio = new Audio('/phone_pe_notification_1754708520112.mp3');\n        audio.play().catch(console.error);\n      } catch (error) {\n        console.log('PhonePe audio not available');\n      }\n\n      // Show invoice\n      setInvoiceData(data);\n      setShowInvoice(true);\n      \n      // Reset form\n      setSelectedStudent(null);\n      setPaymentAmount(\"\");\n      setReceiptNumber(\"\");\n      \n      // Refresh data - force refetch to get updated pending amounts  \n      queryClient.invalidateQueries({ queryKey: ['/api/students', user?.id] });\n      queryClient.invalidateQueries({ queryKey: ['/api/wallet'] });\n      \n      // Force immediate refetch with a small delay to ensure DB has been updated\n      setTimeout(async () => {\n        await queryClient.refetchQueries({ queryKey: ['/api/students', user?.id] });\n        console.log('Students data refreshed after payment');\n      }, 500);\n      \n      toast({\n        title: \"Payment Processed Successfully!\",\n        description: `₹${data.amount} added to wallet. Transaction ID: ${data.transactionId}`,\n        variant: \"default\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Payment Failed\",\n        description: error.message || \"An error occurred while processing the payment\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Fetch payment history\n  const fetchPaymentHistory = async (studentId: string) => {\n    try {\n      const response = await apiRequest('GET', `/api/students/${studentId}/payments`);\n      const data = await response.json();\n      setSelectedStudentHistory(data);\n      setShowPaymentHistory(true);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch payment history\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  // Handle payment submission\n  const handlePayment = () => {\n    if (!selectedStudent || !paymentAmount || !receiptNumber) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill all required fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const { totalDue } = calculateStudentBalance();\n    \n    processPaymentMutation.mutate({\n      studentId: selectedStudent.id,\n      amount: parseFloat(paymentAmount),\n      feeType: selectedFeeType,\n      receiptNumber,\n      expectedFeeAmount: totalDue\n    });\n  };\n\n  // Send WhatsApp invoice\n  const sendWhatsAppInvoice = () => {\n    if (!invoiceData) return;\n\n    const invoiceText = `\n*NAVANIDHI ACADEMY - PAYMENT RECEIPT*\n\nStudent: ${invoiceData.studentName}\nStudent ID: ${invoiceData.studentId}\nClass: ${invoiceData.className}\n\nPayment Details:\nAmount Paid: ₹${invoiceData.amount}\nFee Type: ${invoiceData.feeType}\nReceipt No: ${invoiceData.receiptNumber}\nTransaction ID: ${invoiceData.transactionId}\n\nDate: ${new Date().toLocaleDateString()}\nTime: ${new Date().toLocaleTimeString()}\n\nThank you for your payment!\n    `.trim();\n\n    const encodedText = encodeURIComponent(invoiceText);\n    \n    // Get phone number from invoice data or student data - use father's mobile\n    const student = students.find(s => s.studentId === invoiceData.studentId);\n    const phoneNumber = invoiceData.fatherMobile || student?.fatherMobile || student?.parentPhone;\n    \n    console.log('WhatsApp Debug:', {\n      studentId: invoiceData.studentId,\n      invoiceFatherMobile: invoiceData.fatherMobile,\n      studentFatherMobile: student?.fatherMobile,\n      studentParentPhone: student?.parentPhone,\n      finalPhoneNumber: phoneNumber\n    });\n    \n    if (phoneNumber) {\n      const cleanPhone = phoneNumber.replace(/\\D/g, '');\n      const whatsappUrl = `https://wa.me/91${cleanPhone}?text=${encodedText}`;\n      window.open(whatsappUrl, '_blank');\n      \n      toast({\n        title: \"WhatsApp Opened\",\n        description: \"Invoice sent to WhatsApp successfully!\",\n        variant: \"default\"\n      });\n    } else {\n      toast({\n        title: \"Phone Number Missing\", \n        description: \"Cannot send WhatsApp message - phone number not available\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const { totalDue, admissionFee, previousBalance, monthlyFee, paidAmount, pendingAmount } = calculateStudentBalance();\n\n  return (\n    <DashboardLayout title=\"Fee Payments\">\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <h1 className=\"text-3xl font-bold\">Fee Payments</h1>\n        </div>\n\n        {/* Student Selection and Payment Form */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CreditCard size={20} />\n              Process Student Payment\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Class and Student Selection */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <Label>Select Class</Label>\n                <Select \n                  value={selectedClass}\n                  onValueChange={(value) => {\n                    setSelectedClass(value);\n                    setSelectedStudent(null); // Reset student selection\n                  }}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Choose a class first\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {availableClasses.map((className) => (\n                      <SelectItem key={className} value={className}>\n                        {className}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {!studentsLoading && availableClasses.length > 0 && (\n                  <div className=\"text-sm text-blue-600 mt-2\">\n                    {availableClasses.length} classes available\n                  </div>\n                )}\n              </div>\n\n              <div>\n                <Label>Select Student</Label>\n                <Select \n                  disabled={!selectedClass || studentsLoading || students.length === 0}\n                  onValueChange={(studentId) => {\n                    const student = students.find((s: Student) => s.id === studentId);\n                    setSelectedStudent(student || null);\n                    // Automatically set fee type based on student's registration\n                    if (student) {\n                      setSelectedFeeType(student.courseType);\n                    }\n                  }}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder={\n                      !selectedClass \n                        ? \"Select class first\" \n                        : studentsLoading \n                        ? \"Loading students...\" \n                        : students.length === 0 \n                        ? \"No students in this class\" \n                        : \"Choose a student\"\n                    } />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {students.map((student: Student) => (\n                      <SelectItem key={student.id} value={student.id}>\n                        {student.name} ({student.studentId}) - {student.courseType.toUpperCase()}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                {selectedClass && !studentsLoading && students.length > 0 && (\n                  <div className=\"text-sm text-green-600 mt-2\">\n                    ✓ {students.length} students in {selectedClass}\n                  </div>\n                )}\n                {selectedClass && !studentsLoading && students.length === 0 && (\n                  <div className=\"text-sm text-orange-600 mt-2\">\n                    No students found in {selectedClass}\n                  </div>\n                )}\n              </div>\n\n              <div>\n                <Label>Fee Type</Label>\n                <div className=\"p-3 border rounded-md bg-gray-50\">\n                  {selectedStudent ? (\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"font-medium\">\n                        {selectedStudent.courseType.charAt(0).toUpperCase() + selectedStudent.courseType.slice(1)} Fee\n                      </span>\n                      <span className=\"text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full\">\n                        Registered Type\n                      </span>\n                    </div>\n                  ) : (\n                    <span className=\"text-gray-500\">Select student to see fee type</span>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Enhanced Payment Progress Section */}\n            {selectedStudent && (\n              <div className=\"p-6 bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl border border-blue-200\">\n                <h3 className=\"font-bold text-2xl mb-6 text-blue-900\">📊 Payment Progress Overview</h3>\n                \n                {/* Large Payment Progress Display */}\n                <div className=\"bg-white p-8 rounded-xl shadow-lg border border-gray-200\">\n                  <div className=\"text-center mb-6\">\n                    <h4 className=\"text-3xl font-bold text-gray-800 mb-2\">Current Payment Status</h4>\n                    <p className=\"text-gray-600\">Student: {selectedStudent.name}</p>\n                  </div>\n                  \n                  {/* Simplified Payment Stats - Only Paid and Pending */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-8\">\n                    <div className=\"text-center p-8 bg-green-50 rounded-lg border border-green-200\">\n                      <h5 className=\"text-xl font-semibold text-green-800 mb-3\">Amount Paid</h5>\n                      <p className=\"text-5xl font-bold text-green-600\">₹{paidAmount.toLocaleString()}</p>\n                      <p className=\"text-sm text-green-500 mt-2\">Total payments received</p>\n                    </div>\n                    \n                    <div className={`text-center p-8 rounded-lg border ${pendingAmount > 0 ? 'bg-red-50 border-red-200' : 'bg-green-50 border-green-200'}`}>\n                      <h5 className={`text-xl font-semibold mb-3 ${pendingAmount > 0 ? 'text-red-800' : 'text-green-800'}`}>\n                        Pending Amount\n                      </h5>\n                      <p className={`text-5xl font-bold ${pendingAmount > 0 ? 'text-red-600' : 'text-green-600'}`}>\n                        {pendingAmount > 0 ? `₹${pendingAmount.toLocaleString()}` : '₹0'}\n                      </p>\n                      <p className={`text-sm mt-2 ${pendingAmount > 0 ? 'text-red-500' : 'text-green-500'}`}>\n                        {pendingAmount > 0 ? 'Outstanding balance' : 'All fees paid'}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  {/* Simple Progress Bar - Paid vs Pending */}\n                  <div className=\"mb-6\">\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"text-sm font-medium text-gray-700\">Payment Status</span>\n                      <span className=\"text-sm font-medium text-gray-700\">\n                        {pendingAmount === 0 ? '100% Paid' : `₹${pendingAmount.toLocaleString()} Pending`}\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-4\">\n                      <div \n                        className={`h-4 rounded-full transition-all duration-500 ${\n                          pendingAmount === 0 ? 'bg-green-500' : 'bg-blue-500'\n                        }`}\n                        style={{ width: `${Math.min((paidAmount / Math.max(paidAmount + pendingAmount, 1)) * 100, 100)}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                  \n                  {/* Fee Summary */}\n                  <div className=\"bg-gray-50 p-4 rounded-lg\">\n                    <h6 className=\"font-semibold text-gray-800 mb-3\">Fee Summary</h6>\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span>Student ID:</span>\n                        <span className=\"font-medium\">{selectedStudent.studentId}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Course Type:</span>\n                        <span className=\"font-medium\">{selectedStudent.courseType.toUpperCase()}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Total Paid:</span>\n                        <span className=\"font-medium text-green-600\">₹{paidAmount.toLocaleString()}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Total Pending:</span>\n                        <span className={`font-medium ${pendingAmount > 0 ? 'text-red-600' : 'text-green-600'}`}>\n                          ₹{pendingAmount.toLocaleString()}\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"mt-3 pt-3 border-t border-gray-200\">\n                      <p className=\"text-xs text-gray-500\">\n                        📅 New monthly fees are automatically added to pending amount every month at midnight\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Payment Input */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label>Payment Amount *</Label>\n                <Input\n                  type=\"number\"\n                  placeholder=\"Enter amount\"\n                  value={paymentAmount}\n                  onChange={(e) => setPaymentAmount(e.target.value)}\n                  disabled={!selectedStudent}\n                />\n              </div>\n              <div>\n                <Label>Receipt Number *</Label>\n                <Input\n                  placeholder=\"Enter receipt number\"\n                  value={receiptNumber}\n                  onChange={(e) => setReceiptNumber(e.target.value)}\n                  disabled={!selectedStudent}\n                />\n              </div>\n            </div>\n\n            <Button \n              onClick={handlePayment}\n              disabled={!selectedStudent || !paymentAmount || !receiptNumber || processPaymentMutation.isPending}\n              className=\"w-full\"\n            >\n              {processPaymentMutation.isPending ? \"Processing...\" : \"Process Payment\"}\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Student List with Payment History */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Students & Payment History</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {students.map((student: Student) => (\n                <div key={student.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                  <div>\n                    <p className=\"font-semibold\">{student.name}</p>\n                    <p className=\"text-sm text-gray-600\">{student.studentId} - {student.className}</p>\n                    <p className=\"text-sm text-gray-600\">Phone: {student.parentPhone}</p>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className={`px-2 py-1 rounded-full text-xs ${\n                      student.paymentStatus === 'paid' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                    }`}>\n                      {student.paymentStatus}\n                    </span>\n                    <Button \n                      variant=\"outline\" \n                      size=\"sm\" \n                      onClick={() => fetchPaymentHistory(student.id)}\n                    >\n                      <Eye size={16} />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Invoice Modal */}\n        <Dialog open={showInvoice} onOpenChange={setShowInvoice}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Payment Invoice</DialogTitle>\n            </DialogHeader>\n            {invoiceData && (\n              <div className=\"space-y-4\">\n                <div className=\"text-center border-b pb-4\">\n                  <h2 className=\"text-lg font-bold\">NAVANIDHI ACADEMY</h2>\n                  <p className=\"text-sm text-gray-600\">Payment Receipt</p>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span>Student:</span>\n                    <span className=\"font-semibold\">{invoiceData.studentName}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Student ID:</span>\n                    <span>{invoiceData.studentId}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Class:</span>\n                    <span>{invoiceData.className}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Amount Paid:</span>\n                    <span className=\"font-bold\">₹{invoiceData.amount}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Receipt No:</span>\n                    <span>{invoiceData.receiptNumber}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Transaction ID:</span>\n                    <span className=\"text-sm\">{invoiceData.transactionId}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Date:</span>\n                    <span>{new Date().toLocaleDateString()}</span>\n                  </div>\n                </div>\n\n                <div className=\"flex gap-2\">\n                  <Button onClick={sendWhatsAppInvoice} className=\"flex-1\">\n                    <Send size={16} className=\"mr-2\" />\n                    Send WhatsApp\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => setShowInvoice(false)} className=\"flex-1\">\n                    Close\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n\n        {/* Payment History Modal */}\n        <Dialog open={showPaymentHistory} onOpenChange={setShowPaymentHistory}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Payment History</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n              {selectedStudentHistory.length === 0 ? (\n                <p className=\"text-center text-gray-500\">No payment history found</p>\n              ) : (\n                selectedStudentHistory.map((payment) => (\n                  <div key={payment.id} className=\"flex justify-between items-center p-3 border rounded\">\n                    <div>\n                      <p className=\"font-semibold\">₹{parseFloat(payment.amount).toLocaleString()}</p>\n                      <p className=\"text-sm text-gray-600\">{payment.description}</p>\n                      <p className=\"text-xs text-gray-500\">\n                        {new Date(payment.createdAt).toLocaleDateString()}\n                      </p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-sm capitalize\">{payment.paymentMethod}</p>\n                      {payment.month && <p className=\"text-xs text-gray-500\">{payment.month} {payment.year}</p>}\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":25828},"client/src/pages/AttendanceReports.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\nimport { Calendar, BarChart3, Users, TrendingUp } from 'lucide-react';\nimport { format, startOfMonth, endOfMonth } from 'date-fns';\n\ninterface AttendanceStats {\n  totalPresent: number;\n  totalAbsent: number;\n  totalHolidays: number;\n  classWiseStats: {\n    className: string;\n    present: number;\n    absent: number;\n    total: number;\n    percentage: number;\n  }[];\n}\n\ninterface StudentAttendance {\n  studentId: string;\n  studentName: string;\n  attendanceRecords: {\n    date: string;\n    status: 'present' | 'absent' | 'holiday';\n  }[];\n  attendancePercentage: number;\n  totalPresent: number;\n  totalAbsent: number;\n  totalDays: number;\n}\n\nexport default function AttendanceReports() {\n  const { user } = useAuth();\n  const [selectedMonth, setSelectedMonth] = useState<string>(format(new Date(), 'yyyy-MM'));\n  const [selectedClass, setSelectedClass] = useState<string>('');\n  const [selectedStudent, setSelectedStudent] = useState<string>('');\n\n  // Fetch attendance statistics\n  const { data: attendanceStats, isLoading: statsLoading } = useQuery<AttendanceStats>({\n    queryKey: ['/api/attendance/stats', selectedMonth, selectedClass],\n    queryFn: async () => {\n      const soCenterId = user?.role === 'so_center' ? '84bf6d19-8830-4abd-8374-2c29faecaa24' : user?.id;\n      const params = new URLSearchParams();\n      if (soCenterId) params.append('soCenterId', soCenterId);\n      if (selectedMonth) params.append('month', selectedMonth);\n      if (selectedClass) params.append('classId', selectedClass);\n      \n      const response = await fetch(`/api/attendance/stats?${params}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch attendance stats');\n      return await response.json();\n    },\n    enabled: !!user && !!selectedMonth,\n  });\n\n  // Fetch students for class selection\n  const { data: allStudents = [] } = useQuery({\n    queryKey: ['/api/students', user?.id],\n    queryFn: async () => {\n      const soCenterId = user?.role === 'so_center' ? '84bf6d19-8830-4abd-8374-2c29faecaa24' : user?.id;\n      const response = await fetch('/api/students?soCenterId=' + soCenterId, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch students');\n      const data = await response.json();\n      return Array.isArray(data) ? data : [];\n    },\n    enabled: !!user,\n  });\n\n  // Fetch individual student attendance report\n  const { data: studentReport, isLoading: reportLoading } = useQuery<StudentAttendance>({\n    queryKey: ['/api/attendance/student-report', selectedStudent, selectedMonth],\n    queryFn: async () => {\n      const response = await fetch(`/api/attendance/student-report?studentId=${selectedStudent}&month=${selectedMonth}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch student report');\n      return await response.json();\n    },\n    enabled: !!selectedStudent && !!selectedMonth,\n  });\n\n  // Get unique classes\n  const availableClasses = allStudents ? Array.from(new Set(allStudents.map((student: any) => ({\n    id: student.classId,\n    name: student.className\n  })).filter(c => c.name).map(c => JSON.stringify(c)))).map(c => JSON.parse(c)) : [];\n\n  // Filter students by selected class\n  const classStudents = selectedClass && allStudents ? allStudents.filter((student: any) => student.classId === selectedClass) : [];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'present': return 'bg-green-500';\n      case 'absent': return 'bg-red-500';\n      case 'holiday': return 'bg-blue-500';\n      default: return 'bg-gray-300';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'present': return 'P';\n      case 'absent': return 'A';\n      case 'holiday': return 'H';\n      default: return '-';\n    }\n  };\n\n  const getAttendanceSymbol = (status: string) => {\n    switch (status) {\n      case 'present': return 'Present';\n      case 'absent': return 'Absent';\n      case 'holiday': return 'H';\n      default: return '';\n    }\n  };\n\n  const getAttendanceCellColor = (status: string) => {\n    switch (status) {\n      case 'present': return 'bg-green-50 text-green-700';\n      case 'absent': return 'bg-red-50 text-red-700';\n      case 'holiday': return 'bg-blue-50 text-blue-700';\n      default: return 'bg-gray-50';\n    }\n  };\n\n  // Get all days in the selected month\n  const getDaysInMonth = () => {\n    if (!selectedMonth) return [];\n    const year = parseInt(selectedMonth.split('-')[0]);\n    const month = parseInt(selectedMonth.split('-')[1]);\n    const daysInMonth = new Date(year, month, 0).getDate();\n    return Array.from({ length: daysInMonth }, (_, i) => i + 1);\n  };\n\n  // Fetch monthly attendance report data\n  const { data: monthlyReportData } = useQuery({\n    queryKey: ['/api/attendance/monthly-report', selectedMonth, selectedClass],\n    queryFn: async () => {\n      const soCenterId = user?.role === 'so_center' ? '84bf6d19-8830-4abd-8374-2c29faecaa24' : user?.id;\n      const params = new URLSearchParams();\n      if (soCenterId) params.append('soCenterId', soCenterId);\n      if (selectedMonth) params.append('month', selectedMonth);\n      if (selectedClass) params.append('classId', selectedClass);\n      \n      const response = await fetch(`/api/attendance/monthly-report?${params}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch monthly report');\n      return await response.json();\n    },\n    enabled: !!selectedMonth && !!selectedClass && !!user,\n    staleTime: 30000,\n  });\n\n  // Get student attendance for the entire month\n  const getStudentMonthlyAttendance = (studentId: string) => {\n    if (!monthlyReportData?.students) {\n      return [];\n    }\n    \n    const student = monthlyReportData.students.find(s => s.id === studentId);\n    if (!student) return [];\n    \n    const year = parseInt(selectedMonth.split('-')[0]);\n    const month = parseInt(selectedMonth.split('-')[1]);\n    const daysInMonth = new Date(year, month, 0).getDate();\n    \n    // Create a map of all possible dates in the month with actual attendance data\n    const monthAttendance = [];\n    for (let day = 1; day <= daysInMonth; day++) {\n      const dateStr = `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;\n      const attendanceRecord = student.attendanceRecords.find(record => record.date === dateStr);\n      \n      monthAttendance.push({\n        date: dateStr,\n        status: attendanceRecord?.status || ''\n      });\n    }\n    \n    return monthAttendance;\n  };\n\n  // Download monthly report as CSV\n  const downloadMonthlyReport = () => {\n    if (!selectedClass || !monthlyReportData?.students.length) return;\n    \n    const className = availableClasses.find(c => c.id === selectedClass)?.name || 'Unknown Class';\n    const monthName = new Date(selectedMonth + '-01').toLocaleDateString('en-US', { month: 'long', year: 'numeric' });\n    \n    // Create CSV content\n    let csvContent = `Attendance - Class: ${className} Section: All Sections,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Month: ${monthName}\\n`;\n    csvContent += `Students ↓,${getDaysInMonth().join(',')},Total Attendance,Total Present,Total Absent,Total Holiday,Total %\\n`;\n    \n    monthlyReportData.students.forEach(student => {\n      const studentAttendance = getStudentMonthlyAttendance(student.id);\n      const totalPresent = studentAttendance.filter(a => a.status === 'present').length;\n      const totalAbsent = studentAttendance.filter(a => a.status === 'absent').length;\n      const totalHoliday = studentAttendance.filter(a => a.status === 'holiday').length;\n      const totalWorkingDays = totalPresent + totalAbsent;\n      const percentage = totalWorkingDays > 0 ? (totalPresent / totalWorkingDays * 100).toFixed(1) : '0.0';\n      \n      const row = [\n        `${student.name} Roll No. ${student.studentId}`,\n        ...getDaysInMonth().map(day => {\n          const dayRecord = studentAttendance.find(a => new Date(a.date).getDate() === day);\n          return getAttendanceSymbol(dayRecord?.status || '');\n        }),\n        totalPresent + totalAbsent + totalHoliday,\n        totalPresent,\n        totalAbsent,\n        totalHoliday,\n        percentage + '%'\n      ];\n      csvContent += row.join(',') + '\\n';\n    });\n    \n    // Create and download file\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute('href', url);\n      link.setAttribute('download', `${className}_Attendance_${monthName.replace(' ', '_')}.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  return (\n    <DashboardLayout title=\"Attendance Reports\" subtitle=\"View detailed attendance statistics and reports\">\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center gap-2\">\n          <BarChart3 className=\"h-6 w-6\" />\n          <h1 className=\"text-2xl font-bold\">Attendance Reports</h1>\n        </div>\n\n      {/* Month Selection */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Report Filters</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Label>Select Month</Label>\n              <input\n                type=\"month\"\n                value={selectedMonth}\n                onChange={(e) => setSelectedMonth(e.target.value)}\n                className=\"w-full p-2 border rounded-md\"\n              />\n            </div>\n            <div>\n              <Label>Filter by Class (Optional)</Label>\n              <Select value={selectedClass || 'all'} onValueChange={(value) => setSelectedClass(value === 'all' ? '' : value)}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"All Classes\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Classes</SelectItem>\n                  {availableClasses.map((cls) => (\n                    <SelectItem key={cls.id} value={cls.id || 'unknown'}>\n                      {cls.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label>Student Report</Label>\n              <Select value={selectedStudent} onValueChange={setSelectedStudent}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select Student\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {classStudents.map((student: any) => (\n                    <SelectItem key={student.id} value={student.id}>\n                      {student.name} ({student.studentId})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Overall Statistics */}\n      {attendanceStats && (\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5 text-green-600\" />\n                <span className=\"text-sm font-medium text-gray-600\">Total Present</span>\n              </div>\n              <div className=\"text-2xl font-bold text-green-600 mt-2\">\n                {attendanceStats.totalPresent}\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5 text-red-600\" />\n                <span className=\"text-sm font-medium text-gray-600\">Total Absent</span>\n              </div>\n              <div className=\"text-2xl font-bold text-red-600 mt-2\">\n                {attendanceStats.totalAbsent}\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-2\">\n                <Calendar className=\"h-5 w-5 text-blue-600\" />\n                <span className=\"text-sm font-medium text-gray-600\">Holidays</span>\n              </div>\n              <div className=\"text-2xl font-bold text-blue-600 mt-2\">\n                {attendanceStats.totalHolidays}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Detailed Monthly Report */}\n      {selectedClass && attendanceStats && (\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between\">\n            <CardTitle>Monthly Attendance Report - {availableClasses.find(c => c.id === selectedClass)?.name}</CardTitle>\n            <Button onClick={downloadMonthlyReport} variant=\"outline\">\n              Download Report\n            </Button>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full border-collapse border border-gray-300 text-sm\">\n                <thead>\n                  <tr className=\"bg-blue-50\">\n                    <th className=\"border border-gray-300 p-2 text-left font-semibold\">Students ↓</th>\n                    {getDaysInMonth().map(day => (\n                      <th key={day} className=\"border border-gray-300 p-1 text-center font-semibold min-w-[30px]\">\n                        {day}\n                      </th>\n                    ))}\n                    <th className=\"border border-gray-300 p-2 text-center font-semibold\">Total Attendance</th>\n                    <th className=\"border border-gray-300 p-2 text-center font-semibold\">Total Present</th>\n                    <th className=\"border border-gray-300 p-2 text-center font-semibold\">Total Absent</th>\n                    <th className=\"border border-gray-300 p-2 text-center font-semibold\">Total Holiday</th>\n                    <th className=\"border border-gray-300 p-2 text-center font-semibold\">Total %</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {monthlyReportData?.students.map((student) => {\n                    const studentAttendance = getStudentMonthlyAttendance(student.id);\n                    const totalPresent = studentAttendance.filter(a => a.status === 'present').length;\n                    const totalAbsent = studentAttendance.filter(a => a.status === 'absent').length;\n                    const totalHoliday = studentAttendance.filter(a => a.status === 'holiday').length;\n                    const totalWorkingDays = totalPresent + totalAbsent;\n                    const percentage = totalWorkingDays > 0 ? (totalPresent / totalWorkingDays * 100).toFixed(1) : '0.0';\n                    \n                    return (\n                      <tr key={student.id} className=\"hover:bg-gray-50\">\n                        <td className=\"border border-gray-300 p-2 font-medium\">\n                          <div>{student.name}</div>\n                          <div className=\"text-xs text-gray-500\">Roll No. {student.studentId}</div>\n                        </td>\n                        {getDaysInMonth().map(day => {\n                          const dayRecord = studentAttendance.find(a => new Date(a.date).getDate() === day);\n                          const status = dayRecord?.status || '';\n                          return (\n                            <td key={day} className={`border border-gray-300 p-1 text-center font-medium ${getAttendanceCellColor(status)}`}>\n                              {getAttendanceSymbol(status)}\n                            </td>\n                          );\n                        })}\n                        <td className=\"border border-gray-300 p-2 text-center font-medium\">{totalPresent + totalAbsent + totalHoliday}</td>\n                        <td className=\"border border-gray-300 p-2 text-center font-medium text-green-600\">{totalPresent}</td>\n                        <td className=\"border border-gray-300 p-2 text-center font-medium text-red-600\">{totalAbsent}</td>\n                        <td className=\"border border-gray-300 p-2 text-center font-medium text-blue-600\">{totalHoliday}</td>\n                        <td className=\"border border-gray-300 p-2 text-center font-medium text-purple-600\">{percentage}%</td>\n                      </tr>\n                    );\n                  }) || []}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Class-wise Statistics */}\n      {attendanceStats?.classWiseStats && attendanceStats.classWiseStats.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Class-wise Attendance</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {attendanceStats.classWiseStats.map((classStats, index) => (\n                <div key={index} className=\"border rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h3 className=\"font-semibold\">{classStats.className}</h3>\n                    <span className=\"text-sm text-gray-600\">\n                      {classStats.percentage.toFixed(1)}% Attendance\n                    </span>\n                  </div>\n                  <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                    <div className=\"text-green-600\">\n                      Present: {classStats.present}\n                    </div>\n                    <div className=\"text-red-600\">\n                      Absent: {classStats.absent}\n                    </div>\n                    <div className=\"text-gray-600\">\n                      Total: {classStats.total}\n                    </div>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\n                    <div\n                      className=\"bg-green-600 h-2 rounded-full\"\n                      style={{ width: `${classStats.percentage}%` }}\n                    ></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Individual Student Report */}\n      {studentReport && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5\" />\n              Monthly Report: {studentReport.studentName}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {/* Student Statistics */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-gray-50 rounded-lg\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {studentReport.attendancePercentage.toFixed(1)}%\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Attendance Rate</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-xl font-bold text-green-600\">\n                    {studentReport.totalPresent}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Present Days</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-xl font-bold text-red-600\">\n                    {studentReport.totalAbsent}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Absent Days</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-xl font-bold text-gray-600\">\n                    {studentReport.totalDays}\n                  </div>\n                  <div className=\"text-sm text-gray-600\">Total Days</div>\n                </div>\n              </div>\n\n              {/* Daily Attendance Calendar */}\n              <div>\n                <h4 className=\"font-semibold mb-3\">Daily Attendance</h4>\n                <div className=\"grid grid-cols-7 gap-2 text-center text-xs\">\n                  {/* Calendar headers */}\n                  {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n                    <div key={day} className=\"font-semibold p-2\">{day}</div>\n                  ))}\n                  \n                  {/* Calendar days */}\n                  {studentReport.attendanceRecords.map((record, index) => (\n                    <div\n                      key={index}\n                      className={`w-8 h-8 rounded-full flex items-center justify-center text-white font-semibold ${getStatusColor(record.status)}`}\n                      title={`${record.date}: ${record.status}`}\n                    >\n                      {getStatusText(record.status)}\n                    </div>\n                  ))}\n                </div>\n                \n                {/* Legend */}\n                <div className=\"flex gap-4 mt-4 text-sm\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 bg-green-500 rounded\"></div>\n                    <span>Present (P)</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 bg-red-500 rounded\"></div>\n                    <span>Absent (A)</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 bg-blue-500 rounded\"></div>\n                    <span>Holiday (H)</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":22757},"client/src/pages/Attendance.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Calendar, Users, CheckCircle, XCircle, CalendarOff, Info } from 'lucide-react';\nimport { format } from 'date-fns';\n\ninterface Student {\n  id: string;\n  name: string;\n  studentId: string;\n  classId: string;\n  className: string;\n}\n\nexport default function Attendance() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedClass, setSelectedClass] = useState<string>('');\n  const [attendanceDate, setAttendanceDate] = useState<string>(format(new Date(), 'yyyy-MM-dd'));\n  const [attendanceStatus, setAttendanceStatus] = useState<Record<string, 'present' | 'absent' | 'not_posted'>>({});\n  const [existingAttendance, setExistingAttendance] = useState<Record<string, { status: string; id: string }>>({});\n  const [showConfirmHoliday, setShowConfirmHoliday] = useState(false);\n\n  // Fetch students for the SO center\n  const { data: allStudents = [], isLoading: studentsLoading } = useQuery({\n    queryKey: ['/api/students', user?.id],\n    queryFn: async () => {\n      const soCenterId = user?.role === 'so_center' ? '84bf6d19-8830-4abd-8374-2c29faecaa24' : user?.id;\n      const response = await fetch('/api/students?soCenterId=' + soCenterId, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch students');\n      const data = await response.json();\n      return Array.isArray(data) ? data : [];\n    },\n    enabled: !!user,\n  });\n\n  // Get unique classes\n  const availableClasses = Array.from(new Set(allStudents.map((student: Student) => student.className))).filter(Boolean);\n\n  // Filter students by selected class\n  const classStudents = selectedClass ? allStudents.filter((student: Student) => student.className === selectedClass) : [];\n\n  // Fetch existing attendance when class or date changes\n  const { data: existingAttendanceData = {} } = useQuery({\n    queryKey: ['/api/attendance/existing', attendanceDate, selectedClass],\n    queryFn: async () => {\n      if (!selectedClass || classStudents.length === 0) return {};\n      \n      const studentIds = classStudents.map(s => s.id).join(',');\n      const response = await fetch(`/api/attendance/existing?date=${attendanceDate}&studentIds=${studentIds}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n      \n      if (!response.ok) throw new Error('Failed to fetch existing attendance');\n      return response.json();\n    },\n    enabled: !!selectedClass && classStudents.length > 0,\n  });\n\n  // Track previous class to detect when it changes\n  const [prevClass, setPrevClass] = React.useState<string>('');\n\n  React.useEffect(() => {\n    setExistingAttendance(existingAttendanceData);\n  }, [existingAttendanceData]);\n\n  // Only reset attendance status when class actually changes, not on every render\n  React.useEffect(() => {\n    if (selectedClass !== prevClass) {\n      setPrevClass(selectedClass);\n      \n      // Load existing attendance for the new class\n      const newAttendanceStatus: Record<string, 'present' | 'absent' | 'not_posted'> = {};\n      if (existingAttendanceData && Object.keys(existingAttendanceData).length > 0) {\n        classStudents.forEach(student => {\n          if (existingAttendanceData[student.id]) {\n            newAttendanceStatus[student.id] = existingAttendanceData[student.id].status as 'present' | 'absent';\n          }\n        });\n      }\n      setAttendanceStatus(newAttendanceStatus);\n    }\n  }, [selectedClass, existingAttendanceData, classStudents, prevClass]);\n\n  // Submit attendance mutation\n  const submitAttendanceMutation = useMutation({\n    mutationFn: async (attendanceData: any) => {\n      return await apiRequest('POST', '/api/attendance/submit', attendanceData);\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Attendance Submitted Successfully!\",\n        description: `Attendance has been recorded for the selected students`,\n        variant: \"default\"\n      });\n      setAttendanceStatus({});\n      queryClient.invalidateQueries({ queryKey: ['/api/attendance'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/attendance/existing'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Submit Attendance\",\n        description: error.message || \"An error occurred\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Mark holiday mutation\n  const markHolidayMutation = useMutation({\n    mutationFn: async (holidayData: any) => {\n      return await apiRequest('POST', '/api/attendance/holiday', holidayData);\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Holiday Marked Successfully!\",\n        description: `Holiday marked for all students in the class`,\n        variant: \"default\"\n      });\n      setShowConfirmHoliday(false);\n      queryClient.invalidateQueries({ queryKey: ['/api/attendance'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/attendance/existing'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to Mark Holiday\",\n        description: error.message || \"An error occurred\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Handle individual student attendance marking\n  const handleAttendanceChange = (studentId: string, status: 'present' | 'absent') => {\n    // Check if already marked in database\n    if (existingAttendance[studentId] && existingAttendance[studentId].status !== 'not_posted') {\n      toast({\n        title: \"Already Marked\",\n        description: `Attendance already marked as ${existingAttendance[studentId].status}`,\n        variant: \"default\"\n      });\n      return;\n    }\n\n    setAttendanceStatus(prev => ({\n      ...prev,\n      [studentId]: status\n    }));\n  };\n\n  // Clear individual student attendance\n  const handleClearAttendance = (studentId: string) => {\n    setAttendanceStatus(prev => {\n      const newStatus = { ...prev };\n      delete newStatus[studentId];\n      return newStatus;\n    });\n  };\n\n  const handleSubmitAttendance = () => {\n    if (!selectedClass || classStudents.length === 0) {\n      toast({\n        title: \"No Class Selected\",\n        description: \"Please select a class first\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Only submit records for students that have been marked\n    const recordsToSubmit = classStudents\n      .filter(student => attendanceStatus[student.id] && attendanceStatus[student.id] !== 'not_posted')\n      .map((student: Student) => ({\n        studentId: student.id,\n        status: attendanceStatus[student.id]\n      }));\n\n    if (recordsToSubmit.length === 0) {\n      toast({\n        title: \"No Attendance to Submit\",\n        description: \"Please mark attendance for at least one student\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    submitAttendanceMutation.mutate({\n      date: attendanceDate,\n      classId: classStudents[0]?.classId,\n      records: recordsToSubmit\n    });\n  };\n\n  const handleMarkHoliday = () => {\n    if (!selectedClass || classStudents.length === 0) {\n      toast({\n        title: \"No Class Selected\",\n        description: \"Please select a class first\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const holidayRecords = classStudents.map((student: Student) => ({\n      studentId: student.id,\n      classId: student.classId,\n      date: attendanceDate,\n      status: 'holiday'\n    }));\n\n    markHolidayMutation.mutate({\n      date: attendanceDate,\n      classId: classStudents[0]?.classId,\n      records: holidayRecords\n    });\n  };\n\n  return (\n    <DashboardLayout title=\"Attendance Management\" subtitle=\"Mark daily attendance for students\">\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center gap-2\">\n          <Calendar className=\"h-6 w-6\" />\n          <h1 className=\"text-2xl font-bold\">Attendance Management</h1>\n        </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Mark Attendance</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Date and Class Selection */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label>Date (Display Only)</Label>\n              <input\n                type=\"date\"\n                value={attendanceDate}\n                readOnly\n                className=\"w-full p-2 border rounded-md bg-gray-100 cursor-not-allowed\"\n                title=\"Date cannot be changed - shows current date\"\n              />\n            </div>\n            <div>\n              <Label>Select Class</Label>\n              <Select value={selectedClass} onValueChange={setSelectedClass}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Choose a class\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {availableClasses.map((className) => (\n                    <SelectItem key={className} value={className}>\n                      {className}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Student List */}\n          {selectedClass && (\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                  <Users className=\"h-5 w-5\" />\n                  Students in {selectedClass} ({classStudents.length})\n                </h3>\n                <div className=\"text-sm text-gray-600\">\n                  Present: {Object.values(attendanceStatus).filter(s => s === 'present').length} | \n                  Absent: {Object.values(attendanceStatus).filter(s => s === 'absent').length} | \n                  Not Posted: {classStudents.length - Object.keys(attendanceStatus).length}\n                </div>\n              </div>\n\n              {/* Instructions */}\n              <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n                <div className=\"flex items-center gap-2 text-blue-800\">\n                  <Info className=\"h-4 w-4\" />\n                  <span className=\"font-medium\">Instructions:</span>\n                </div>\n                <p className=\"text-sm text-blue-700 mt-1\">\n                  Click \"Present\" or \"Absent\" for each student. Unselected students will remain \"Not Posted\". \n                  Click \"Submit Attendance\" when done to save all marked attendance to database.\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-1 gap-3 max-h-96 overflow-y-auto\">\n                {classStudents.map((student: Student) => {\n                  const currentStatus = attendanceStatus[student.id] || 'not_posted';\n                  const isAlreadyMarked = existingAttendance[student.id] && existingAttendance[student.id].status !== 'not_posted';\n                  \n                  return (\n                    <div\n                      key={student.id}\n                      className={`flex items-center space-x-3 p-3 border rounded-lg transition-colors ${\n                        currentStatus === 'present'\n                          ? 'bg-green-50 border-green-200'\n                          : currentStatus === 'absent'\n                          ? 'bg-red-50 border-red-200'\n                          : 'bg-gray-50 border-gray-200'\n                      }`}\n                    >\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium\">{student.name}</p>\n                        <p className=\"text-sm text-gray-600\">{student.studentId}</p>\n                        {isAlreadyMarked && (\n                          <p className=\"text-xs text-blue-600 font-semibold\">\n                            Already Marked: {existingAttendance[student.id].status.toUpperCase()}\n                          </p>\n                        )}\n                      </div>\n                      \n                      <div className=\"flex gap-2\">\n                        <Button\n                          size=\"sm\"\n                          variant={currentStatus === 'present' ? \"default\" : \"outline\"}\n                          onClick={() => handleAttendanceChange(student.id, 'present')}\n                          disabled={isAlreadyMarked}\n                          className=\"min-w-[80px]\"\n                        >\n                          <CheckCircle className=\"h-4 w-4 mr-1\" />\n                          Present\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant={currentStatus === 'absent' ? \"default\" : \"outline\"}\n                          onClick={() => handleAttendanceChange(student.id, 'absent')}\n                          disabled={isAlreadyMarked}\n                          className=\"min-w-[80px]\"\n                        >\n                          <XCircle className=\"h-4 w-4 mr-1\" />\n                          Absent\n                        </Button>\n                        {currentStatus !== 'not_posted' && !isAlreadyMarked && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => handleClearAttendance(student.id)}\n                            className=\"min-w-[60px]\"\n                          >\n                            Clear\n                          </Button>\n                        )}\n                      </div>\n                      \n                      <div className=\"w-24 text-center\">\n                        {currentStatus === 'present' && (\n                          <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n                            PRESENT\n                          </span>\n                        )}\n                        {currentStatus === 'absent' && (\n                          <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800\">\n                            ABSENT\n                          </span>\n                        )}\n                        {currentStatus === 'not_posted' && !isAlreadyMarked && (\n                          <span className=\"text-gray-500 text-sm\">Not Posted</span>\n                        )}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex gap-4 pt-4\">\n                <Button\n                  onClick={handleSubmitAttendance}\n                  disabled={!selectedClass || classStudents.length === 0 || submitAttendanceMutation.isPending}\n                  className=\"flex-1\"\n                >\n                  {submitAttendanceMutation.isPending ? \"Submitting...\" : \"Submit Attendance\"}\n                </Button>\n                \n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowConfirmHoliday(true)}\n                  disabled={!selectedClass || classStudents.length === 0 || markHolidayMutation.isPending}\n                  className=\"flex items-center gap-2\"\n                >\n                  <CalendarOff className=\"h-4 w-4\" />\n                  Mark Holiday\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Holiday Confirmation Dialog */}\n      {showConfirmHoliday && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white p-6 rounded-lg max-w-md w-full mx-4\">\n            <h3 className=\"text-lg font-semibold mb-4\">Confirm Holiday</h3>\n            <p className=\"text-gray-600 mb-6\">\n              Are you sure you want to mark {attendanceDate} as a holiday for all students in {selectedClass}?\n              This will mark all {classStudents.length} students as on holiday.\n            </p>\n            <div className=\"flex gap-4\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowConfirmHoliday(false)}\n                className=\"flex-1\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleMarkHoliday}\n                disabled={markHolidayMutation.isPending}\n                className=\"flex-1\"\n              >\n                {markHolidayMutation.isPending ? \"Marking...\" : \"Confirm Holiday\"}\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":17360},"client/src/pages/admin/ProgressTracking.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport {\n  Target, Users, School, Building, BookOpen, CheckCircle, Clock,\n  TrendingUp, BarChart3, Filter, Search, Calendar, AlertCircle,\n  MapPin, GraduationCap, User, Brain, Award\n} from 'lucide-react';\nimport { useAuth } from '@/hooks/useAuth';\n\n// Interfaces\ninterface State {\n  id: string;\n  name: string;\n}\n\ninterface District {\n  id: string;\n  name: string;\n  stateId: string;\n}\n\ninterface Mandal {\n  id: string;\n  name: string;\n  districtId: string;\n}\n\ninterface Village {\n  id: string;\n  name: string;\n  mandalId: string;\n}\n\ninterface SoCenter {\n  id: string;\n  name: string;\n  center_id: string;\n  villageId: string;\n}\n\ninterface Class {\n  id: string;\n  name: string;\n}\n\ninterface Student {\n  id: string;\n  name: string;\n  student_id: string;\n  class_id: string;\n  class_name: string;\n  so_center_id: string;\n  center_name: string;\n}\n\ninterface Subject {\n  id: string;\n  name: string;\n  classId: string;\n}\n\ninterface Chapter {\n  id: string;\n  name: string;\n  subjectId: string;\n}\n\ninterface Topic {\n  id: string;\n  name: string;\n  chapterId: string;\n  isImportant: boolean;\n  isModerate: boolean;\n}\n\ninterface ProgressSummary {\n  soCenterId: string;\n  centerName: string;\n  centerCode: string;\n  totalStudents: number;\n  totalTopics: number;\n  completedTopics: number;\n  completionPercentage: number;\n  homeworkCompletionPercentage: number;\n  lastUpdated: string;\n}\n\ninterface StudentProgress {\n  studentId: string;\n  studentName: string;\n  studentCode: string;\n  classId: string;\n  className: string;\n  soCenterId: string;\n  centerName: string;\n  totalTopics: number;\n  completedTopics: number;\n  completionPercentage: number;\n  homeworkCompletionPercentage: number;\n  lastActivity: string;\n}\n\ninterface TopicProgress {\n  topicId: string;\n  topicName: string;\n  chapterId: string;\n  chapterName: string;\n  subjectId: string;\n  subjectName: string;\n  isImportant: boolean;\n  isModerate: boolean;\n  totalStudents: number;\n  completedStudents: number;\n  completionPercentage: number;\n}\n\nexport default function AdminProgressTracking() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Access control\n  useEffect(() => {\n    if (user && user.role !== 'admin' && user.role !== 'super_admin') {\n      toast({\n        title: \"Access Denied\",\n        description: \"You do not have permission to access Progress Tracking.\",\n        variant: \"destructive\",\n      });\n      setLocation('/dashboard');\n      return;\n    }\n  }, [user, setLocation, toast]);\n\n  if (user && user.role !== 'admin' && user.role !== 'super_admin') {\n    return null;\n  }\n\n  // State management\n  const [activeTab, setActiveTab] = useState('overview');\n  const [selectedState, setSelectedState] = useState<string>('');\n  const [selectedDistrict, setSelectedDistrict] = useState<string>('');\n  const [selectedMandal, setSelectedMandal] = useState<string>('');\n  const [selectedVillage, setSelectedVillage] = useState<string>('');\n  const [selectedCenter, setSelectedCenter] = useState<string>('');\n  const [selectedClass, setSelectedClass] = useState<string>('');\n  const [selectedStudent, setSelectedStudent] = useState<string>('');\n  const [selectedSubject, setSelectedSubject] = useState<string>('');\n  const [selectedChapter, setSelectedChapter] = useState<string>('');\n  const [dateRange, setDateRange] = useState({\n    fromDate: '',\n    toDate: ''\n  });\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // API calls for hierarchical data\n  const { data: states = [] } = useQuery({\n    queryKey: ['/api/locations/states'],\n    enabled: true,\n  });\n\n  const { data: districts = [] } = useQuery({\n    queryKey: ['/api/locations/districts', selectedState],\n    queryFn: async () => {\n      if (!selectedState) return [];\n      const response = await fetch(`/api/locations/districts?stateId=${selectedState}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch districts');\n      return response.json();\n    },\n    enabled: !!selectedState,\n  });\n\n  const { data: mandals = [] } = useQuery({\n    queryKey: ['/api/locations/mandals', selectedDistrict],\n    queryFn: async () => {\n      if (!selectedDistrict) return [];\n      const response = await fetch(`/api/locations/mandals?districtId=${selectedDistrict}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch mandals');\n      return response.json();\n    },\n    enabled: !!selectedDistrict,\n  });\n\n  const { data: villages = [] } = useQuery({\n    queryKey: ['/api/locations/villages', selectedMandal],\n    queryFn: async () => {\n      if (!selectedMandal) return [];\n      const response = await fetch(`/api/locations/villages?mandalId=${selectedMandal}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch villages');\n      return response.json();\n    },\n    enabled: !!selectedMandal,\n  });\n\n  const { data: centers = [] } = useQuery({\n    queryKey: ['/api/locations/so-centers', selectedVillage],\n    queryFn: async () => {\n      if (!selectedVillage) return [];\n      const response = await fetch(`/api/locations/so-centers?villageId=${selectedVillage}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch SO centers');\n      return response.json();\n    },\n    enabled: !!selectedVillage,\n  });\n\n  const { data: classes = [] } = useQuery({\n    queryKey: ['/api/classes'],\n  });\n\n  const { data: subjects = [] } = useQuery({\n    queryKey: ['/api/admin/subjects'],\n  });\n\n  const { data: chapters = [] } = useQuery({\n    queryKey: ['/api/admin/chapters'],\n  });\n\n  // Fetch SO Center-wise Progress Summary\n  const { data: centerProgressSummary = [] } = useQuery({\n    queryKey: ['/api/admin/progress-tracking/centers', selectedState, selectedDistrict, selectedMandal, selectedVillage, selectedCenter],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedState) params.append('stateId', selectedState);\n      if (selectedDistrict) params.append('districtId', selectedDistrict);\n      if (selectedMandal) params.append('mandalId', selectedMandal);\n      if (selectedVillage) params.append('villageId', selectedVillage);\n      if (selectedCenter) params.append('centerId', selectedCenter);\n\n      const response = await fetch(`/api/admin/progress-tracking/centers?${params.toString()}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch center progress');\n      return response.json();\n    },\n    enabled: activeTab === 'overview',\n  });\n\n  // Fetch Student-wise Progress\n  const { data: studentProgress = [] } = useQuery({\n    queryKey: ['/api/admin/progress-tracking/students', selectedCenter, selectedClass, searchTerm],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedCenter) params.append('centerId', selectedCenter);\n      if (selectedClass) params.append('classId', selectedClass);\n      if (searchTerm) params.append('search', searchTerm);\n\n      const response = await fetch(`/api/admin/progress-tracking/students?${params.toString()}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch student progress');\n      return response.json();\n    },\n    enabled: activeTab === 'students',\n  });\n\n  // Fetch Topic-wise Progress\n  const { data: topicProgress = [] } = useQuery({\n    queryKey: ['/api/admin/progress-tracking/topics', selectedClass, selectedSubject, selectedChapter, selectedCenter],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedClass) params.append('classId', selectedClass);\n      if (selectedSubject) params.append('subjectId', selectedSubject);\n      if (selectedChapter) params.append('chapterId', selectedChapter);\n      if (selectedCenter) params.append('centerId', selectedCenter);\n\n      const response = await fetch(`/api/admin/progress-tracking/topics?${params.toString()}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch topic progress');\n      return response.json();\n    },\n    enabled: activeTab === 'topics',\n  });\n\n  // Reset functions for hierarchical dropdowns\n  const resetChildDropdowns = (level: 'state' | 'district' | 'mandal') => {\n    if (level === 'state') {\n      setSelectedDistrict('all-districts');\n      setSelectedMandal('all-mandals');\n      setSelectedCenter('');\n    } else if (level === 'district') {\n      setSelectedMandal('all-mandals');\n      setSelectedCenter('');\n    } else if (level === 'mandal') {\n      setSelectedCenter('');\n    }\n  };\n\n  const getStatusColor = (percentage: number) => {\n    if (percentage >= 80) return 'bg-green-500';\n    if (percentage >= 60) return 'bg-yellow-500';\n    return 'bg-red-500';\n  };\n\n  const getStatusBadge = (percentage: number) => {\n    if (percentage >= 80) return { variant: 'default' as const, className: 'bg-green-600', text: 'Excellent' };\n    if (percentage >= 60) return { variant: 'secondary' as const, className: 'bg-yellow-600 text-white', text: 'Good' };\n    return { variant: 'destructive' as const, text: 'Needs Attention' };\n  };\n\n  return (\n    <DashboardLayout\n      title=\"Admin Progress Tracking\"\n      subtitle=\"Comprehensive tracking of student progress across SO Centers, Classes, and Topics\"\n    >\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"overview\" className=\"flex items-center gap-2\">\n            <Building className=\"h-4 w-4\" />\n            SO Center Overview\n          </TabsTrigger>\n          <TabsTrigger value=\"students\" className=\"flex items-center gap-2\">\n            <Users className=\"h-4 w-4\" />\n            Student Progress\n          </TabsTrigger>\n          <TabsTrigger value=\"topics\" className=\"flex items-center gap-2\">\n            <BookOpen className=\"h-4 w-4\" />\n            Topic Analysis\n          </TabsTrigger>\n        </TabsList>\n\n        {/* SO Center Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {/* Location Filters */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MapPin className=\"h-5 w-5\" />\n                Location Filters\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>State</Label>\n                  <Select value={selectedState} onValueChange={(value) => {\n                    setSelectedState(value);\n                    resetChildDropdowns('state');\n                  }}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"All States\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all-states\">All States</SelectItem>\n                      {(states as State[]).map((state: State) => (\n                        <SelectItem key={state.id} value={state.id}>\n                          {state.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>District</Label>\n                  <Select value={selectedDistrict} onValueChange={(value) => {\n                    setSelectedDistrict(value);\n                    resetChildDropdowns('district');\n                  }}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"All Districts\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all-districts\">All Districts</SelectItem>\n                      {(districts as District[]).map((district: District) => (\n                        <SelectItem key={district.id} value={district.id}>\n                          {district.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Mandal</Label>\n                  <Select value={selectedMandal} onValueChange={(value) => {\n                    setSelectedMandal(value);\n                    resetChildDropdowns('mandal');\n                  }}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"All Mandals\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all-mandals\">All Mandals</SelectItem>\n                      {(mandals as Mandal[]).map((mandal: Mandal) => (\n                        <SelectItem key={mandal.id} value={mandal.id}>\n                          {mandal.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Village</Label>\n                  <Select value={selectedVillage} onValueChange={(value) => {\n                    setSelectedVillage(value);\n                    resetChildDropdowns('village');\n                  }}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"All Villages\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all-villages\">All Villages</SelectItem>\n                      {(villages as Village[]).map((village: Village) => (\n                        <SelectItem key={village.id} value={village.id}>\n                          {village.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>SO Center</Label>\n                  <Select value={selectedCenter} onValueChange={setSelectedCenter}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"All Centers\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all-centers\">All Centers</SelectItem>\n                      {(centers as SoCenter[]).map((center: SoCenter) => (\n                        <SelectItem key={center.id} value={center.id}>\n                          {center.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* SO Center Progress Summary */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {(centerProgressSummary as ProgressSummary[]).map((center) => (\n              <Card key={center.soCenterId} className=\"hover:shadow-md transition-shadow\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-base\">{center.centerName}</CardTitle>\n                    <Badge variant=\"outline\">{center.centerCode}</Badge>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Students</span>\n                    <span className=\"font-medium\">{center.totalStudents}</span>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Topic Progress</span>\n                      <span className=\"font-medium\">{center.completionPercentage.toFixed(1)}%</span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div\n                        className={`h-2 rounded-full transition-all ${getStatusColor(center.completionPercentage)}`}\n                        style={{ width: `${Math.min(center.completionPercentage, 100)}%` }}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-muted-foreground\">Homework</span>\n                      <span className=\"font-medium\">{center.homeworkCompletionPercentage.toFixed(1)}%</span>\n                    </div>\n                    <div className=\"w-full bg-muted rounded-full h-2\">\n                      <div\n                        className={`h-2 rounded-full transition-all ${getStatusColor(center.homeworkCompletionPercentage)}`}\n                        style={{ width: `${Math.min(center.homeworkCompletionPercentage, 100)}%` }}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between pt-2\">\n                    <Badge {...getStatusBadge(center.completionPercentage)}>\n                      {getStatusBadge(center.completionPercentage).text}\n                    </Badge>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {center.completedTopics}/{center.totalTopics} topics\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {(centerProgressSummary as ProgressSummary[]).length === 0 && (\n            <Card>\n              <CardContent className=\"py-12 text-center\">\n                <Building className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-lg font-medium mb-2\">No SO Centers Found</p>\n                <p className=\"text-muted-foreground\">Adjust your filters to view SO Center progress data</p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Student Progress Tab */}\n        <TabsContent value=\"students\" className=\"space-y-6\">\n          {/* Student Filters */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Filter className=\"h-5 w-5\" />\n                Student Filters\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>SO Center</Label>\n                  <Select value={selectedCenter} onValueChange={setSelectedCenter}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"All Centers\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all-centers\">All Centers</SelectItem>\n                      {(centers as SoCenter[]).map((center: SoCenter) => (\n                        <SelectItem key={center.id} value={center.id}>\n                          {center.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Class</Label>\n                  <Select value={selectedClass} onValueChange={setSelectedClass}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"All Classes\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all-classes\">All Classes</SelectItem>\n                      {(classes as Class[]).map((cls: Class) => (\n                        <SelectItem key={cls.id} value={cls.id}>\n                          {cls.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Search Student</Label>\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                    <Input\n                      placeholder=\"Search by name or ID...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"pl-10\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Student Progress Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                Student Progress Details\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"border rounded-md\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full text-sm\">\n                    <thead className=\"bg-muted/50\">\n                      <tr>\n                        <th className=\"border-b px-4 py-3 text-left font-medium\">Student</th>\n                        <th className=\"border-b px-4 py-3 text-left font-medium\">Class</th>\n                        <th className=\"border-b px-4 py-3 text-left font-medium\">SO Center</th>\n                        <th className=\"border-b px-4 py-3 text-center font-medium\">Topics Progress</th>\n                        <th className=\"border-b px-4 py-3 text-center font-medium\">Homework Progress</th>\n                        <th className=\"border-b px-4 py-3 text-center font-medium\">Status</th>\n                        <th className=\"border-b px-4 py-3 text-center font-medium\">Last Activity</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {(studentProgress as StudentProgress[]).map((student) => (\n                        <tr key={student.studentId} className=\"hover:bg-muted/30\">\n                          <td className=\"border-b px-4 py-3\">\n                            <div>\n                              <div className=\"font-medium\">{student.studentName}</div>\n                              <div className=\"text-xs text-muted-foreground\">{student.studentCode}</div>\n                            </div>\n                          </td>\n                          <td className=\"border-b px-4 py-3 font-medium\">{student.className}</td>\n                          <td className=\"border-b px-4 py-3\">\n                            <div className=\"text-sm\">{student.centerName}</div>\n                          </td>\n                          <td className=\"border-b px-4 py-3 text-center\">\n                            <div className=\"flex flex-col items-center gap-1\">\n                              <div className=\"w-full bg-muted rounded-full h-2 max-w-[80px]\">\n                                <div\n                                  className={`h-2 rounded-full ${getStatusColor(student.completionPercentage)}`}\n                                  style={{ width: `${Math.min(student.completionPercentage, 100)}%` }}\n                                />\n                              </div>\n                              <div className=\"text-xs font-medium\">\n                                {student.completionPercentage.toFixed(1)}%\n                              </div>\n                              <div className=\"text-xs text-muted-foreground\">\n                                {student.completedTopics}/{student.totalTopics}\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"border-b px-4 py-3 text-center\">\n                            <div className=\"flex flex-col items-center gap-1\">\n                              <div className=\"w-full bg-muted rounded-full h-2 max-w-[80px]\">\n                                <div\n                                  className={`h-2 rounded-full ${getStatusColor(student.homeworkCompletionPercentage)}`}\n                                  style={{ width: `${Math.min(student.homeworkCompletionPercentage, 100)}%` }}\n                                />\n                              </div>\n                              <div className=\"text-xs font-medium\">\n                                {student.homeworkCompletionPercentage.toFixed(1)}%\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"border-b px-4 py-3 text-center\">\n                            <Badge {...getStatusBadge(student.completionPercentage)}>\n                              {getStatusBadge(student.completionPercentage).text}\n                            </Badge>\n                          </td>\n                          <td className=\"border-b px-4 py-3 text-center text-xs text-muted-foreground\">\n                            {student.lastActivity ? new Date(student.lastActivity).toLocaleDateString() : 'No activity'}\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n\n              {(studentProgress as StudentProgress[]).length === 0 && (\n                <div className=\"py-12 text-center\">\n                  <User className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-lg font-medium mb-2\">No Students Found</p>\n                  <p className=\"text-muted-foreground\">Adjust your filters to view student progress data</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Topic Analysis Tab */}\n        <TabsContent value=\"topics\" className=\"space-y-6\">\n          {/* Topic Filters */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BookOpen className=\"h-5 w-5\" />\n                Topic Analysis Filters\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label>Class</Label>\n                  <Select value={selectedClass} onValueChange={(value) => {\n                    setSelectedClass(value);\n                    setSelectedSubject('');\n                    setSelectedChapter('');\n                  }}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select Class\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all-classes\">All Classes</SelectItem>\n                      {(classes as Class[]).map((cls: Class) => (\n                        <SelectItem key={cls.id} value={cls.id}>\n                          {cls.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Subject</Label>\n                  <Select value={selectedSubject} onValueChange={(value) => {\n                    setSelectedSubject(value);\n                    setSelectedChapter('');\n                  }}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select Subject\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all-subjects\">All Subjects</SelectItem>\n                      {(subjects as Subject[]).filter(s => s.classId === selectedClass).map((subject: Subject) => (\n                        <SelectItem key={subject.id} value={subject.id}>\n                          {subject.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>Chapter</Label>\n                  <Select value={selectedChapter} onValueChange={setSelectedChapter}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select Chapter\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all-chapters\">All Chapters</SelectItem>\n                      {(chapters as Chapter[]).filter(c => c.subjectId === selectedSubject).map((chapter: Chapter) => (\n                        <SelectItem key={chapter.id} value={chapter.id}>\n                          {chapter.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>SO Center</Label>\n                  <Select value={selectedCenter} onValueChange={setSelectedCenter}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"All Centers\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all-centers\">All Centers</SelectItem>\n                      {(centers as SoCenter[]).map((center: SoCenter) => (\n                        <SelectItem key={center.id} value={center.id}>\n                          {center.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Topic Progress Analysis */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BarChart3 className=\"h-5 w-5\" />\n                Topic Completion Analysis\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {selectedClass && selectedSubject ? (\n                <div className=\"space-y-4\">\n                  {(topicProgress as TopicProgress[]).map((topic) => (\n                    <div key={topic.topicId} className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <div className=\"flex items-center gap-3\">\n                          <Brain className=\"h-5 w-5 text-blue-600\" />\n                          <div>\n                            <h3 className=\"font-medium\">{topic.topicName}</h3>\n                            <p className=\"text-sm text-muted-foreground\">{topic.chapterName} • {topic.subjectName}</p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          {topic.isImportant && (\n                            <Badge variant=\"destructive\" className=\"text-xs\">Important</Badge>\n                          )}\n                          {topic.isModerate && (\n                            <Badge variant=\"secondary\" className=\"text-xs\">Moderate</Badge>\n                          )}\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-muted-foreground\">Progress</span>\n                            <span className=\"font-medium\">{topic.completionPercentage.toFixed(1)}%</span>\n                          </div>\n                          <div className=\"w-full bg-muted rounded-full h-3\">\n                            <div\n                              className={`h-3 rounded-full transition-all ${getStatusColor(topic.completionPercentage)}`}\n                              style={{ width: `${Math.min(topic.completionPercentage, 100)}%` }}\n                            />\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center gap-4\">\n                          <div className=\"flex items-center gap-2\">\n                            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                            <span className=\"text-sm\">Completed: {topic.completedStudents}</span>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Clock className=\"h-4 w-4 text-yellow-600\" />\n                            <span className=\"text-sm\">Pending: {topic.totalStudents - topic.completedStudents}</span>\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center justify-end\">\n                          <Badge {...getStatusBadge(topic.completionPercentage)}>\n                            {getStatusBadge(topic.completionPercentage).text}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n\n                  {(topicProgress as TopicProgress[]).length === 0 && (\n                    <div className=\"py-8 text-center\">\n                      <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-lg font-medium mb-2\">No Topics Found</p>\n                      <p className=\"text-muted-foreground\">Topics will appear here for the selected filters</p>\n                    </div>\n                  )}\n                </div>\n              ) : (\n                <div className=\"py-12 text-center\">\n                  <AlertCircle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"text-lg font-medium mb-2\">Select Class and Subject</p>\n                  <p className=\"text-muted-foreground\">Please select both class and subject to view topic analysis</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </DashboardLayout>\n  );\n}","size_bytes":35693},"server/feeCalculationService.ts":{"content":"import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport { students, classFees, ClassFee } from '@shared/schema';\nimport { eq, and } from 'drizzle-orm';\nimport * as schema from \"@shared/schema\";\n\nconst sql = postgres(process.env.DATABASE_URL!, { max: 1 });\nconst db = drizzle(sql, { schema });\n\ninterface FeeCalculationResult {\n  totalDueAmount: number;\n  monthlyBreakdown: Array<{\n    month: string;\n    year: number;\n    amount: number;\n    reason: string;\n  }>;\n  admissionFee: number;\n  totalMonthlyFees: number;\n}\n\n/**\n * Calculate retroactive fees based on enrollment date\n * \n * Logic:\n * - Enrollment 1st-10th: Full fee for enrollment month + all subsequent months\n * - Enrollment 11th-20th: Half fee for enrollment month + full fee for subsequent months  \n * - Enrollment 21st+: No fee for enrollment month + full fee for subsequent months\n */\nexport class FeeCalculationService {\n  \n  /**\n   * Calculate total due amount based on enrollment date and current date\n   */\n  static async calculateRetroactiveFees(\n    enrollmentDate: Date,\n    classId: string,\n    courseType: 'monthly' | 'yearly',\n    admissionFeePaid: boolean = false\n  ): Promise<FeeCalculationResult> {\n    \n    console.log('📊 Starting retroactive fee calculation:', {\n      enrollmentDate: enrollmentDate.toISOString(),\n      classId,\n      courseType,\n      admissionFeePaid\n    });\n\n    // Get class fee structure\n    const classFee = await this.getClassFee(classId, courseType);\n    if (!classFee) {\n      throw new Error(`No fee structure found for class ${classId} with course type ${courseType}`);\n    }\n\n    const admissionFee = parseFloat(classFee.admissionFee || '0');\n    const monthlyFeeAmount = parseFloat(classFee.monthlyFee || '0');\n    \n    console.log('💰 Fee structure:', {\n      admissionFee,\n      monthlyFeeAmount,\n      yearlyFee: classFee.yearlyFee\n    });\n\n    // Calculate monthly fees from enrollment to current month\n    const monthlyBreakdown = this.calculateMonthlyBreakdown(\n      enrollmentDate,\n      monthlyFeeAmount\n    );\n\n    const totalMonthlyFees = monthlyBreakdown.reduce((sum, month) => sum + month.amount, 0);\n    const totalDueAmount = (admissionFeePaid ? 0 : admissionFee) + totalMonthlyFees;\n\n    console.log('📋 Fee calculation complete:', {\n      totalDueAmount,\n      admissionFee: admissionFeePaid ? 0 : admissionFee,\n      totalMonthlyFees,\n      monthCount: monthlyBreakdown.length\n    });\n\n    return {\n      totalDueAmount,\n      monthlyBreakdown,\n      admissionFee: admissionFeePaid ? 0 : admissionFee,\n      totalMonthlyFees\n    };\n  }\n\n  /**\n   * Get class fee structure from database\n   */\n  private static async getClassFee(classId: string, courseType: string): Promise<ClassFee | null> {\n    const [classFee] = await db\n      .select()\n      .from(schema.classFees)\n      .where(\n        and(\n          eq(schema.classFees.classId, classId),\n          eq(schema.classFees.courseType, courseType)\n        )\n      )\n      .limit(1);\n\n    return classFee || null;\n  }\n\n  /**\n   * Calculate monthly fee breakdown from enrollment date to current month\n   */\n  private static calculateMonthlyBreakdown(\n    enrollmentDate: Date,\n    monthlyFeeAmount: number\n  ): Array<{ month: string; year: number; amount: number; reason: string }> {\n    \n    const breakdown: Array<{ month: string; year: number; amount: number; reason: string }> = [];\n    const currentDate = new Date();\n    \n    // Start from enrollment month\n    const currentMonth = new Date(enrollmentDate.getFullYear(), enrollmentDate.getMonth(), 1);\n    const endMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n    \n    console.log('📅 Calculating monthly breakdown from', currentMonth.toISOString(), 'to', endMonth.toISOString());\n\n    while (currentMonth <= endMonth) {\n      const monthName = currentMonth.toLocaleString('default', { month: 'long' });\n      const year = currentMonth.getFullYear();\n      \n      let amount = 0;\n      let reason = '';\n      \n      // Check if this is the enrollment month\n      if (currentMonth.getMonth() === enrollmentDate.getMonth() && \n          currentMonth.getFullYear() === enrollmentDate.getFullYear()) {\n        \n        const enrollmentDay = enrollmentDate.getDate();\n        \n        if (enrollmentDay <= 10) {\n          amount = monthlyFeeAmount;\n          reason = `Full monthly fee - enrolled on ${enrollmentDay}th (1st-10th: full fee)`;\n        } else if (enrollmentDay <= 20) {\n          amount = monthlyFeeAmount / 2;\n          reason = `Half monthly fee - enrolled on ${enrollmentDay}th (11th-20th: half fee)`;\n        } else {\n          amount = 0;\n          reason = `No fee - enrolled on ${enrollmentDay}th (21st+: no fee for enrollment month)`;\n        }\n      } else {\n        // Subsequent months always get full fee\n        amount = monthlyFeeAmount;\n        reason = `Full monthly fee - subsequent month`;\n      }\n      \n      breakdown.push({\n        month: monthName,\n        year,\n        amount,\n        reason\n      });\n      \n      console.log(`📆 ${monthName} ${year}: ₹${amount} (${reason})`);\n      \n      // Move to next month\n      currentMonth.setMonth(currentMonth.getMonth() + 1);\n    }\n    \n    return breakdown;\n  }\n\n  /**\n   * Update student's fee amounts in database based on calculation\n   */\n  static async updateStudentFeeAmounts(\n    studentId: string,\n    feeCalculation: FeeCalculationResult\n  ): Promise<void> {\n    \n    console.log('💾 Updating student fee amounts in database:', {\n      studentId,\n      totalDueAmount: feeCalculation.totalDueAmount\n    });\n\n    await db\n      .update(schema.students)\n      .set({\n        totalFeeAmount: feeCalculation.totalDueAmount.toString(),\n        pendingAmount: feeCalculation.totalDueAmount.toString(),\n        paidAmount: '0.00',\n        paymentStatus: feeCalculation.totalDueAmount > 0 ? 'pending' : 'paid'\n      })\n      .where(eq(schema.students.id, studentId));\n\n    console.log('✅ Student fee amounts updated successfully');\n  }\n\n  /**\n   * Calculate and update fees for existing student (useful for enrollment date changes)\n   */\n  static async recalculateStudentFees(studentId: string): Promise<FeeCalculationResult> {\n    \n    console.log('🔄 Recalculating fees for existing student:', studentId);\n\n    // Get student details\n    const [student] = await db\n      .select()\n      .from(schema.students)\n      .where(eq(schema.students.id, studentId))\n      .limit(1);\n\n    if (!student) {\n      throw new Error(`Student not found: ${studentId}`);\n    }\n\n    if (!student.enrollmentDate) {\n      throw new Error(`No enrollment date found for student: ${studentId}`);\n    }\n\n    // Calculate fees\n    const feeCalculation = await this.calculateRetroactiveFees(\n      new Date(student.enrollmentDate),\n      student.classId,\n      student.courseType,\n      student.admissionFeePaid || false\n    );\n\n    // Update student record\n    await this.updateStudentFeeAmounts(studentId, feeCalculation);\n\n    return feeCalculation;\n  }\n}","size_bytes":7033},"client/src/components/admin/AddTeachingRecordForm.tsx":{"content":"import { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { insertTeacherDailyRecordSchema, type InsertTeacherDailyRecord } from '@shared/schema';\nimport { useState } from 'react';\n\ninterface AddTeachingRecordFormProps {\n  onSuccess: () => void;\n}\n\nexport function AddTeachingRecordForm({ onSuccess }: AddTeachingRecordFormProps) {\n  const [selectedTeacher, setSelectedTeacher] = useState('');\n  const [selectedClass, setSelectedClass] = useState('');\n  const [selectedSubject, setSelectedSubject] = useState('');\n  const [selectedChapter, setSelectedChapter] = useState('');\n  const { toast } = useToast();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n    watch,\n  } = useForm<InsertTeacherDailyRecord>({\n    resolver: zodResolver(insertTeacherDailyRecordSchema),\n    defaultValues: {\n      recordDate: new Date().toISOString().split('T')[0],\n    },\n  });\n\n  // Fetch required data\n  const { data: teachers = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/teachers'],\n  });\n\n  // Fetch teacher's assigned classes\n  const { data: classes = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/teachers', selectedTeacher, 'classes'],\n    enabled: !!selectedTeacher,\n  });\n\n  // Fetch teacher's assigned subjects\n  const { data: subjects = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/teachers', selectedTeacher, 'subjects'],\n    enabled: !!selectedTeacher,\n  });\n\n  // Fetch chapters based on selected subject and class\n  const { data: chapters = [] } = useQuery<any[]>({\n    queryKey: ['/api/chapters', selectedSubject, selectedClass],\n    queryFn: async () => {\n      if (!selectedSubject || !selectedClass) return [];\n      const response = await fetch(`/api/chapters/${selectedSubject}/${selectedClass}`);\n      if (!response.ok) throw new Error('Failed to fetch chapters');\n      return response.json();\n    },\n    enabled: !!selectedSubject && !!selectedClass,\n  });\n\n  // Create teaching record mutation\n  const createRecordMutation = useMutation({\n    mutationFn: async (data: InsertTeacherDailyRecord) => {\n      return apiRequest('POST', '/api/admin/teacher-records', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Teaching Record Added',\n        description: 'Daily teaching record has been successfully recorded.',\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to add teaching record.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertTeacherDailyRecord) => {\n    createRecordMutation.mutate(data);\n  };\n\n  const handleTeacherChange = (teacherId: string) => {\n    setSelectedTeacher(teacherId);\n    setValue('teacherId', teacherId);\n    // Reset dependent selections when teacher changes\n    setSelectedClass('');\n    setSelectedSubject('');\n    setSelectedChapter('');\n    setValue('classId', '');\n    setValue('subjectId', '');\n    setValue('chapterId', undefined);\n  };\n\n  const handleClassChange = (classId: string) => {\n    setSelectedClass(classId);\n    setValue('classId', classId);\n    // Reset subject and chapter when class changes\n    setSelectedSubject('');\n    setSelectedChapter('');\n    setValue('subjectId', '');\n    setValue('chapterId', undefined);\n  };\n\n  const handleSubjectChange = (subjectId: string) => {\n    setSelectedSubject(subjectId);\n    setValue('subjectId', subjectId);\n    // Reset chapter when subject changes\n    setSelectedChapter('');\n    setValue('chapterId', undefined);\n  };\n\n  const handleChapterChange = (chapterId: string) => {\n    setSelectedChapter(chapterId);\n    setValue('chapterId', chapterId);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        {/* Teacher Selection */}\n        <div>\n          <Label htmlFor=\"teacherId\">Select Teacher *</Label>\n          <Select onValueChange={handleTeacherChange}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Choose teacher\" />\n            </SelectTrigger>\n            <SelectContent>\n              {teachers.map((teacher: any) => (\n                <SelectItem key={teacher.id} value={teacher.id}>\n                  {teacher.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          {errors.teacherId && <p className=\"text-sm text-red-600\">{errors.teacherId.message}</p>}\n        </div>\n\n        {/* Date */}\n        <div>\n          <Label htmlFor=\"recordDate\">Teaching Date *</Label>\n          <Input\n            id=\"recordDate\"\n            type=\"date\"\n            {...register('recordDate')}\n          />\n          {errors.recordDate && <p className=\"text-sm text-red-600\">{errors.recordDate.message}</p>}\n        </div>\n\n        {/* Class Selection */}\n        <div>\n          <Label htmlFor=\"classId\">Class *</Label>\n          <Select onValueChange={handleClassChange} disabled={!selectedTeacher}>\n            <SelectTrigger>\n              <SelectValue placeholder={selectedTeacher ? \"Choose class\" : \"Select teacher first\"} />\n            </SelectTrigger>\n            <SelectContent>\n              {classes.length > 0 ? classes.map((classItem: any) => (\n                <SelectItem key={classItem.id} value={classItem.id}>\n                  {classItem.name}\n                </SelectItem>\n              )) : selectedTeacher ? (\n                <div className=\"px-2 py-1 text-sm text-gray-500\">No classes assigned to this teacher</div>\n              ) : null}\n            </SelectContent>\n          </Select>\n          {errors.classId && <p className=\"text-sm text-red-600\">{errors.classId.message}</p>}\n        </div>\n\n        {/* Subject Selection */}\n        <div>\n          <Label htmlFor=\"subjectId\">Subject *</Label>\n          <Select onValueChange={handleSubjectChange} disabled={!selectedTeacher}>\n            <SelectTrigger>\n              <SelectValue placeholder={selectedTeacher ? \"Choose subject\" : \"Select teacher first\"} />\n            </SelectTrigger>\n            <SelectContent>\n              {subjects.length > 0 ? subjects.map((subject: any) => (\n                <SelectItem key={subject.id} value={subject.id}>\n                  {subject.name}\n                </SelectItem>\n              )) : selectedTeacher ? (\n                <div className=\"px-2 py-1 text-sm text-gray-500\">No subjects assigned to this teacher</div>\n              ) : null}\n            </SelectContent>\n          </Select>\n          {errors.subjectId && <p className=\"text-sm text-red-600\">{errors.subjectId.message}</p>}\n        </div>\n\n        {/* Chapter Selection */}\n        <div>\n          <Label htmlFor=\"chapterId\">Chapter (Optional)</Label>\n          <Select onValueChange={handleChapterChange} disabled={!selectedSubject}>\n            <SelectTrigger>\n              <SelectValue placeholder={selectedSubject ? \"Choose chapter\" : \"Select subject first\"} />\n            </SelectTrigger>\n            <SelectContent>\n              {chapters.map((chapter: any) => (\n                <SelectItem key={chapter.id} value={chapter.id}>\n                  {chapter.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n\n\n        {/* Teaching Duration */}\n        <div>\n          <Label htmlFor=\"teachingDuration\">Duration (minutes) *</Label>\n          <Input\n            id=\"teachingDuration\"\n            type=\"number\"\n            min=\"1\"\n            max=\"600\"\n            {...register('teachingDuration', { valueAsNumber: true })}\n            placeholder=\"e.g., 60\"\n          />\n          {errors.teachingDuration && <p className=\"text-sm text-red-600\">{errors.teachingDuration.message}</p>}\n        </div>\n      </div>\n\n      {/* Notes */}\n      <div>\n        <Label htmlFor=\"notes\">Teaching Notes (Optional)</Label>\n        <Textarea\n          id=\"notes\"\n          {...register('notes')}\n          placeholder=\"Add notes about what was taught, student responses, etc.\"\n          rows={3}\n        />\n      </div>\n\n      {/* Submit Button */}\n      <div className=\"flex justify-end gap-4\">\n        <Button \n          type=\"submit\" \n          disabled={createRecordMutation.isPending}\n          className=\"min-w-32\"\n        >\n          {createRecordMutation.isPending ? 'Adding...' : 'Add Record'}\n        </Button>\n      </div>\n    </form>\n  );\n}","size_bytes":8900},"client/src/components/admin/CreateTeacherForm.tsx":{"content":"import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { insertTeacherSchema, type InsertTeacher } from '@shared/schema';\nimport { z } from 'zod';\n\nconst teacherFormSchema = insertTeacherSchema.extend({\n  subjectIds: z.array(z.string()).min(1, 'At least one subject must be selected'),\n  classIds: z.array(z.string()).min(1, 'At least one class must be assigned'),\n});\n\ntype TeacherFormData = z.infer<typeof teacherFormSchema>;\n\ninterface CreateTeacherFormProps {\n  onSuccess: () => void;\n}\n\nexport function CreateTeacherForm({ onSuccess }: CreateTeacherFormProps) {\n  const [selectedSubjects, setSelectedSubjects] = useState<string[]>([]);\n  const [selectedClasses, setSelectedClasses] = useState<string[]>([]);\n  const { toast } = useToast();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n    watch,\n  } = useForm<TeacherFormData>({\n    resolver: zodResolver(teacherFormSchema),\n    defaultValues: {\n      salaryType: 'fixed',\n      subjectIds: [],\n      classIds: [],\n    },\n  });\n\n  // Fetch required data\n  const { data: subjects = [] } = useQuery({\n    queryKey: ['/api/subjects'],\n  });\n\n  const { data: classes = [] } = useQuery({\n    queryKey: ['/api/classes'],\n  });\n\n  const { data: villages = [] } = useQuery({\n    queryKey: ['/api/admin/addresses/villages'],\n  });\n\n  // Create teacher mutation\n  const createTeacherMutation = useMutation({\n    mutationFn: async (data: TeacherFormData) => {\n      return apiRequest('POST', '/api/admin/teachers', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Teacher Created',\n        description: 'Teacher has been successfully created with subject and class assignments.',\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to create teacher.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleSubjectChange = (subjectId: string, checked: boolean) => {\n    const newSubjects = checked\n      ? [...selectedSubjects, subjectId]\n      : selectedSubjects.filter(id => id !== subjectId);\n    \n    setSelectedSubjects(newSubjects);\n    setValue('subjectIds', newSubjects);\n  };\n\n  const handleClassChange = (classId: string, checked: boolean) => {\n    const newClasses = checked\n      ? [...selectedClasses, classId]\n      : selectedClasses.filter(id => id !== classId);\n    \n    setSelectedClasses(newClasses);\n    setValue('classIds', newClasses);\n  };\n\n  const onSubmit = (data: TeacherFormData) => {\n    createTeacherMutation.mutate(data);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Personal Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Personal Information</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"name\">Full Name *</Label>\n              <Input\n                id=\"name\"\n                {...register('name')}\n                placeholder=\"Enter teacher's full name\"\n              />\n              {errors.name && <p className=\"text-sm text-red-600\">{errors.name.message}</p>}\n            </div>\n\n            <div>\n              <Label htmlFor=\"fatherName\">Father's Name *</Label>\n              <Input\n                id=\"fatherName\"\n                {...register('fatherName')}\n                placeholder=\"Enter father's name\"\n              />\n              {errors.fatherName && <p className=\"text-sm text-red-600\">{errors.fatherName.message}</p>}\n            </div>\n\n            <div>\n              <Label htmlFor=\"dateOfBirth\">Date of Birth *</Label>\n              <Input\n                id=\"dateOfBirth\"\n                type=\"date\"\n                {...register('dateOfBirth')}\n              />\n              {errors.dateOfBirth && <p className=\"text-sm text-red-600\">{errors.dateOfBirth.message}</p>}\n            </div>\n\n            <div>\n              <Label htmlFor=\"mobile\">Mobile Number *</Label>\n              <Input\n                id=\"mobile\"\n                {...register('mobile')}\n                placeholder=\"Enter 10-digit mobile number\"\n              />\n              {errors.mobile && <p className=\"text-sm text-red-600\">{errors.mobile.message}</p>}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Address & Salary */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Address & Salary</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"address\">Residential Address *</Label>\n              <Textarea\n                id=\"address\"\n                {...register('address')}\n                placeholder=\"Enter complete residential address\"\n                rows={3}\n              />\n              {errors.address && <p className=\"text-sm text-red-600\">{errors.address.message}</p>}\n            </div>\n\n            <div>\n              <Label htmlFor=\"villageId\">Village</Label>\n              <Select onValueChange={(value) => setValue('villageId', value)}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select village\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {villages.map((village: any) => (\n                    <SelectItem key={village.id} value={village.id}>\n                      {village.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"salary\">Salary Amount *</Label>\n                <Input\n                  id=\"salary\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  {...register('salary')}\n                  placeholder=\"Enter amount\"\n                />\n                {errors.salary && <p className=\"text-sm text-red-600\">{errors.salary.message}</p>}\n              </div>\n\n              <div>\n                <Label htmlFor=\"salaryType\">Salary Type *</Label>\n                <Select onValueChange={(value) => setValue('salaryType', value as 'fixed' | 'hourly')}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"fixed\">Fixed Monthly</SelectItem>\n                    <SelectItem value=\"hourly\">Hourly Rate</SelectItem>\n                  </SelectContent>\n                </Select>\n                {errors.salaryType && <p className=\"text-sm text-red-600\">{errors.salaryType.message}</p>}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Subject Assignments */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Subject Assignments *</CardTitle>\n            <p className=\"text-sm text-gray-600\">Select subjects this teacher will teach</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3 max-h-40 overflow-y-auto\">\n              {subjects.map((subject: any) => (\n                <div key={subject.id} className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id={`subject-${subject.id}`}\n                    checked={selectedSubjects.includes(subject.id)}\n                    onCheckedChange={(checked) => handleSubjectChange(subject.id, checked as boolean)}\n                  />\n                  <Label htmlFor={`subject-${subject.id}`} className=\"text-sm\">\n                    {subject.name}\n                  </Label>\n                </div>\n              ))}\n            </div>\n            {errors.subjectIds && <p className=\"text-sm text-red-600 mt-2\">{errors.subjectIds.message}</p>}\n          </CardContent>\n        </Card>\n\n        {/* Class Assignments */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Class Assignments *</CardTitle>\n            <p className=\"text-sm text-gray-600\">Assign classes this teacher will handle</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3 max-h-40 overflow-y-auto\">\n              {classes.map((classItem: any) => (\n                <div key={classItem.id} className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id={`class-${classItem.id}`}\n                    checked={selectedClasses.includes(classItem.id)}\n                    onCheckedChange={(checked) => handleClassChange(classItem.id, checked as boolean)}\n                  />\n                  <Label htmlFor={`class-${classItem.id}`} className=\"text-sm\">\n                    {classItem.name}\n                  </Label>\n                </div>\n              ))}\n            </div>\n            {errors.classIds && <p className=\"text-sm text-red-600 mt-2\">{errors.classIds.message}</p>}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Submit Button */}\n      <div className=\"flex justify-end gap-4\">\n        <Button \n          type=\"submit\" \n          disabled={createTeacherMutation.isPending}\n          className=\"min-w-32\"\n        >\n          {createTeacherMutation.isPending ? 'Creating...' : 'Create Teacher'}\n        </Button>\n      </div>\n    </form>\n  );\n}","size_bytes":10175},"client/src/components/admin/TeacherDetailView.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { CalendarDays, BookOpen, Clock, Users, MapPin, Phone, Calendar, DollarSign } from 'lucide-react';\nimport type { Teacher } from '@shared/schema';\n\ninterface TeacherDetailViewProps {\n  teacher: Teacher;\n}\n\nexport function TeacherDetailView({ teacher }: TeacherDetailViewProps) {\n  // Fetch teacher's subjects\n  const { data: teacherSubjects = [] } = useQuery({\n    queryKey: ['/api/admin/teachers', teacher.id, 'subjects'],\n  });\n\n  // Fetch teacher's classes\n  const { data: teacherClasses = [] } = useQuery({\n    queryKey: ['/api/admin/teachers', teacher.id, 'classes'],\n  });\n\n  // Fetch teacher's daily records\n  const { data: teachingRecords = [] } = useQuery({\n    queryKey: ['/api/admin/teachers', teacher.id, 'records'],\n  });\n\n  // Calculate stats\n  const totalHours = teachingRecords.reduce((sum: number, record: any) => sum + record.teachingDuration, 0);\n  const avgDailyHours = teachingRecords.length > 0 ? (totalHours / 60 / teachingRecords.length).toFixed(1) : '0';\n  const uniqueDays = new Set(teachingRecords.map((r: any) => r.recordDate)).size;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Teacher Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {/* Personal Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"h-5 w-5\" />\n              Personal Information\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-green-400 to-green-600 rounded-full flex items-center justify-center\">\n                <span className=\"text-white font-medium\">\n                  {teacher.name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2)}\n                </span>\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-lg\">{teacher.name}</h3>\n                <p className=\"text-gray-600\">Father: {teacher.fatherName}</p>\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2\">\n                <Calendar className=\"h-4 w-4 text-gray-500\" />\n                <span className=\"text-sm\">DOB: {new Date(teacher.dateOfBirth).toLocaleDateString()}</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Phone className=\"h-4 w-4 text-gray-500\" />\n                <span className=\"text-sm\">{teacher.mobile}</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <MapPin className=\"h-4 w-4 text-gray-500\" />\n                <span className=\"text-sm\">{teacher.address}</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <DollarSign className=\"h-4 w-4 text-gray-500\" />\n                <span className=\"text-sm\">₹{parseFloat(teacher.salary).toLocaleString()} \n                  <Badge variant=\"outline\" className=\"ml-2\">\n                    {teacher.salaryType.toUpperCase()}\n                  </Badge>\n                </span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Teaching Stats */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <BookOpen className=\"h-5 w-5\" />\n              Teaching Statistics\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-blue-600\">{teachingRecords.length}</div>\n                <p className=\"text-sm text-gray-600\">Total Records</p>\n              </div>\n              <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-green-600\">{uniqueDays}</div>\n                <p className=\"text-sm text-gray-600\">Days Taught</p>\n              </div>\n              <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-purple-600\">{Math.round(totalHours / 60)}</div>\n                <p className=\"text-sm text-gray-600\">Total Hours</p>\n              </div>\n              <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\n                <div className=\"text-2xl font-bold text-orange-600\">{avgDailyHours}</div>\n                <p className=\"text-sm text-gray-600\">Avg Hours/Day</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed Information */}\n      <Tabs defaultValue=\"assignments\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"assignments\">Assignments</TabsTrigger>\n          <TabsTrigger value=\"records\">Teaching Records</TabsTrigger>\n          <TabsTrigger value=\"schedule\">Schedule</TabsTrigger>\n        </TabsList>\n\n        {/* Assignments Tab */}\n        <TabsContent value=\"assignments\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Assigned Subjects</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  {teacherSubjects.length > 0 ? (\n                    teacherSubjects.map((subject: any) => (\n                      <Badge key={subject.id} variant=\"secondary\" className=\"mr-2 mb-2\">\n                        {subject.name}\n                      </Badge>\n                    ))\n                  ) : (\n                    <p className=\"text-gray-500 text-sm\">No subjects assigned</p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Assigned Classes</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  {teacherClasses.length > 0 ? (\n                    teacherClasses.map((classItem: any) => (\n                      <Badge key={classItem.id} variant=\"outline\" className=\"mr-2 mb-2\">\n                        {classItem.name}\n                      </Badge>\n                    ))\n                  ) : (\n                    <p className=\"text-gray-500 text-sm\">No classes assigned</p>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Teaching Records Tab */}\n        <TabsContent value=\"records\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Recent Teaching Records</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {teachingRecords.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full text-sm\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-4 py-2 text-left\">Date</th>\n                        <th className=\"px-4 py-2 text-left\">Class</th>\n                        <th className=\"px-4 py-2 text-left\">Subject</th>\n                        <th className=\"px-4 py-2 text-left\">Topic</th>\n                        <th className=\"px-4 py-2 text-left\">Duration</th>\n                        <th className=\"px-4 py-2 text-left\">Notes</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y\">\n                      {teachingRecords.slice(0, 10).map((record: any) => (\n                        <tr key={record.id} className=\"hover:bg-gray-50\">\n                          <td className=\"px-4 py-2\">{new Date(record.recordDate).toLocaleDateString()}</td>\n                          <td className=\"px-4 py-2\">{record.className || 'N/A'}</td>\n                          <td className=\"px-4 py-2\">{record.subjectName || 'N/A'}</td>\n                          <td className=\"px-4 py-2\">{record.topicName || record.chapterName || 'N/A'}</td>\n                          <td className=\"px-4 py-2\">\n                            <Badge variant=\"outline\">\n                              {Math.round(record.teachingDuration / 60)}h {record.teachingDuration % 60}m\n                            </Badge>\n                          </td>\n                          <td className=\"px-4 py-2 max-w-xs truncate\">{record.notes || '-'}</td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                  {teachingRecords.length > 10 && (\n                    <p className=\"text-sm text-gray-500 mt-4 text-center\">\n                      Showing 10 of {teachingRecords.length} records\n                    </p>\n                  )}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <BookOpen className=\"mx-auto h-12 w-12 text-gray-400\" />\n                  <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No teaching records</h3>\n                  <p className=\"mt-1 text-sm text-gray-500\">\n                    No daily teaching records have been added for this teacher yet.\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Schedule Tab */}\n        <TabsContent value=\"schedule\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Teaching Schedule</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8\">\n                <CalendarDays className=\"mx-auto h-12 w-12 text-gray-400\" />\n                <h3 className=\"mt-2 text-sm font-medium text-gray-900\">Schedule Management</h3>\n                <p className=\"mt-1 text-sm text-gray-500\">\n                  Schedule management feature coming soon.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":10616},"server/storage/teacherStorage.ts":{"content":"import { eq, and, sql } from 'drizzle-orm';\nimport { db } from '../storage';\nimport {\n  teachers,\n  teacherSubjects,\n  teacherClasses,\n  teacherDailyRecords,\n  subjects,\n  classes,\n  chapters,\n  topics,\n  type Teacher,\n  type TeacherSubject,\n  type TeacherClass,\n  type TeacherDailyRecord,\n  type InsertTeacher,\n  type InsertTeacherDailyRecord\n} from '@shared/schema';\n\nexport class TeacherStorage {\n  // Get all teachers with their assignments\n  async getAllTeachers(): Promise<any[]> {\n    const result = await db\n      .select({\n        id: teachers.id,\n        name: teachers.name,\n        fatherName: teachers.fatherName,\n        mobile: teachers.mobile,\n        address: teachers.address,\n        salary: teachers.salary,\n        salaryType: teachers.salaryType,\n        dateOfBirth: teachers.dateOfBirth,\n        villageId: teachers.villageId,\n        isActive: teachers.isActive,\n        createdAt: teachers.createdAt,\n        updatedAt: teachers.updatedAt,\n      })\n      .from(teachers)\n      .where(eq(teachers.isActive, true))\n      .orderBy(teachers.createdAt);\n\n    return result;\n  }\n\n  // Get teacher by ID\n  async getTeacherById(id: string): Promise<Teacher | undefined> {\n    const [teacher] = await db\n      .select()\n      .from(teachers)\n      .where(eq(teachers.id, id));\n\n    return teacher;\n  }\n\n  // Create teacher with subject and class assignments\n  async createTeacher(data: InsertTeacher & { subjectIds: string[], classIds: string[] }): Promise<Teacher> {\n    const { subjectIds, classIds, ...teacherData } = data;\n\n    return await db.transaction(async (tx) => {\n      // Create teacher\n      const [teacher] = await tx\n        .insert(teachers)\n        .values(teacherData)\n        .returning();\n\n      // Assign subjects\n      if (subjectIds.length > 0) {\n        await tx\n          .insert(teacherSubjects)\n          .values(subjectIds.map(subjectId => ({\n            teacherId: teacher.id,\n            subjectId\n          })));\n      }\n\n      // Assign classes\n      if (classIds.length > 0) {\n        await tx\n          .insert(teacherClasses)\n          .values(classIds.map(classId => ({\n            teacherId: teacher.id,\n            classId\n          })));\n      }\n\n      return teacher;\n    });\n  }\n\n  // Get teacher's assigned subjects\n  async getTeacherSubjects(teacherId: string): Promise<any[]> {\n    const result = await db\n      .select({\n        id: subjects.id,\n        name: subjects.name,\n      })\n      .from(teacherSubjects)\n      .innerJoin(subjects, eq(teacherSubjects.subjectId, subjects.id))\n      .where(eq(teacherSubjects.teacherId, teacherId));\n\n    return result;\n  }\n\n  // Get teacher's assigned classes\n  async getTeacherClasses(teacherId: string): Promise<any[]> {\n    const result = await db\n      .select({\n        id: classes.id,\n        name: classes.name,\n      })\n      .from(teacherClasses)\n      .innerJoin(classes, eq(teacherClasses.classId, classes.id))\n      .where(eq(teacherClasses.teacherId, teacherId));\n\n    return result;\n  }\n\n  // Get teacher's daily records\n  async getTeacherRecords(teacherId: string): Promise<any[]> {\n    const result = await db\n      .select({\n        id: teacherDailyRecords.id,\n        teacherId: teacherDailyRecords.teacherId,\n        recordDate: teacherDailyRecords.recordDate,\n        classId: teacherDailyRecords.classId,\n        subjectId: teacherDailyRecords.subjectId,\n        chapterId: teacherDailyRecords.chapterId,\n        topicId: teacherDailyRecords.topicId,\n        teachingDuration: teacherDailyRecords.teachingDuration,\n        notes: teacherDailyRecords.notes,\n        createdAt: teacherDailyRecords.createdAt,\n        className: classes.name,\n        subjectName: subjects.name,\n        chapterName: chapters.name,\n        topicName: topics.name,\n      })\n      .from(teacherDailyRecords)\n      .leftJoin(classes, eq(teacherDailyRecords.classId, classes.id))\n      .leftJoin(subjects, eq(teacherDailyRecords.subjectId, subjects.id))\n      .leftJoin(chapters, eq(teacherDailyRecords.chapterId, chapters.id))\n      .leftJoin(topics, eq(teacherDailyRecords.topicId, topics.id))\n      .where(eq(teacherDailyRecords.teacherId, teacherId))\n      .orderBy(sql`${teacherDailyRecords.recordDate} DESC`);\n\n    return result;\n  }\n\n  // Add daily teaching record\n  async addTeachingRecord(data: InsertTeacherDailyRecord): Promise<TeacherDailyRecord> {\n    const [record] = await db\n      .insert(teacherDailyRecords)\n      .values({\n        ...data,\n        // Convert date string to proper format if needed\n        recordDate: typeof data.recordDate === 'string' ? data.recordDate : data.recordDate,\n      })\n      .returning();\n\n    return record;\n  }\n\n  // Update teacher\n  async updateTeacher(id: string, data: Partial<InsertTeacher>): Promise<Teacher> {\n    const [teacher] = await db\n      .update(teachers)\n      .set({\n        ...data,\n        updatedAt: new Date(),\n      })\n      .where(eq(teachers.id, id))\n      .returning();\n\n    return teacher;\n  }\n\n  // Delete teacher (soft delete)\n  async deleteTeacher(id: string): Promise<void> {\n    await db\n      .update(teachers)\n      .set({\n        isActive: false,\n        updatedAt: new Date(),\n      })\n      .where(eq(teachers.id, id));\n  }\n\n  // Update teacher subject assignments\n  async updateTeacherSubjects(teacherId: string, subjectIds: string[]): Promise<void> {\n    await db.transaction(async (tx) => {\n      // Remove existing assignments\n      await tx\n        .delete(teacherSubjects)\n        .where(eq(teacherSubjects.teacherId, teacherId));\n\n      // Add new assignments\n      if (subjectIds.length > 0) {\n        await tx\n          .insert(teacherSubjects)\n          .values(subjectIds.map(subjectId => ({\n            teacherId,\n            subjectId\n          })));\n      }\n    });\n  }\n\n  // Update teacher class assignments\n  async updateTeacherClasses(teacherId: string, classIds: string[]): Promise<void> {\n    await db.transaction(async (tx) => {\n      // Remove existing assignments\n      await tx\n        .delete(teacherClasses)\n        .where(eq(teacherClasses.teacherId, teacherId));\n\n      // Add new assignments\n      if (classIds.length > 0) {\n        await tx\n          .insert(teacherClasses)\n          .values(classIds.map(classId => ({\n            teacherId,\n            classId\n          })));\n      }\n    });\n  }\n}","size_bytes":6318},"client/src/pages/StudentsAdmin.tsx":{"content":"import { AdminStudentsList } from '@/components/students/AdminStudentsList';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\n\nexport default function StudentsAdmin() {\n  return (\n    <DashboardLayout title=\"Student Management\" subtitle=\"Manage all students across the system\">\n      <AdminStudentsList />\n    </DashboardLayout>\n  );\n}","size_bytes":353},"client/src/components/admin/TeacherRecordsModal.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { format, parseISO } from 'date-fns';\nimport { apiRequest } from '@/lib/queryClient';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Calendar, Clock, BookOpen, FileText } from 'lucide-react';\n\ninterface TeacherRecord {\n  id: string;\n  teacherId: string;\n  recordDate: string;\n  classId: string;\n  subjectId: string;\n  chapterId?: string;\n  teachingDuration: number;\n  notes?: string;\n  className: string;\n  subjectName: string;\n  chapterTitle?: string;\n  createdAt: string;\n}\n\ninterface TeacherRecordsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  teacherId: string;\n  teacherName: string;\n}\n\nexport function TeacherRecordsModal({ isOpen, onClose, teacherId, teacherName }: TeacherRecordsModalProps) {\n  const [fromDate, setFromDate] = useState('');\n  const [toDate, setToDate] = useState('');\n\n  const { data: records = [], isLoading, refetch } = useQuery<TeacherRecord[]>({\n    queryKey: ['/api/admin/teachers', teacherId, 'records', fromDate, toDate],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (fromDate) params.append('fromDate', fromDate);\n      if (toDate) params.append('toDate', toDate);\n      \n      const url = `/api/admin/teachers/${teacherId}/records${params.toString() ? '?' + params.toString() : ''}`;\n      const response = await apiRequest('GET', url);\n      console.log('Teacher records API response:', response);\n      return response;\n    },\n    enabled: isOpen && !!teacherId,\n  });\n\n  const handleDateFilter = () => {\n    refetch();\n  };\n\n  // Calculate total hours taught\n  const totalHours = Array.isArray(records) ? records.reduce((sum, record) => sum + (record.teachingDuration || 0), 0) : 0;\n\n  const clearDateFilter = () => {\n    setFromDate('');\n    setToDate('');\n  };\n\n  const formatDate = (dateString: string) => {\n    try {\n      return format(parseISO(dateString), 'MMM dd, yyyy');\n    } catch {\n      return dateString;\n    }\n  };\n\n  const formatTime = (dateString: string) => {\n    try {\n      return format(parseISO(dateString), 'hh:mm a');\n    } catch {\n      return '';\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-5xl max-h-[85vh] overflow-hidden flex flex-col\">\n        <DialogHeader className=\"border-b pb-4\">\n          <DialogTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center\">\n                <BookOpen className=\"h-5 w-5 text-white\" />\n              </div>\n              <div>\n                <h2 className=\"text-xl font-semibold text-gray-900\">Teaching Records</h2>\n                <p className=\"text-sm text-gray-500\">{teacherName}</p>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-2xl font-bold text-blue-600\">{Math.floor(totalHours / 60)}h {totalHours % 60}m</div>\n              <div className=\"text-xs text-gray-500 uppercase tracking-wide\">Total Teaching Time</div>\n            </div>\n          </DialogTitle>\n          <DialogDescription>\n            {fromDate || toDate \n              ? `Filtered records ${fromDate ? `from ${formatDate(fromDate)}` : ''} ${toDate ? `to ${formatDate(toDate)}` : ''}`\n              : \"All teaching records for this teacher\"\n            }\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"flex-1 overflow-hidden flex flex-col space-y-4\">\n          {/* Modern Filter Section */}\n          <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-xl p-4 border border-blue-200/50\">\n            <div className=\"flex items-center gap-2 mb-3\">\n              <Calendar className=\"h-4 w-4 text-blue-600\" />\n              <span className=\"font-medium text-gray-700 dark:text-gray-300\">Date Range Filter</span>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-3 items-end\">\n              <div>\n                <Label htmlFor=\"fromDate\" className=\"text-xs text-gray-600 dark:text-gray-400\">From Date</Label>\n                <Input\n                  id=\"fromDate\"\n                  type=\"date\"\n                  value={fromDate}\n                  onChange={(e) => setFromDate(e.target.value)}\n                  className=\"mt-1 bg-white/70 border-blue-200\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"toDate\" className=\"text-xs text-gray-600 dark:text-gray-400\">To Date</Label>\n                <Input\n                  id=\"toDate\"\n                  type=\"date\"\n                  value={toDate}\n                  onChange={(e) => setToDate(e.target.value)}\n                  className=\"mt-1 bg-white/70 border-blue-200\"\n                />\n              </div>\n              <div className=\"flex gap-2\">\n                <Button \n                  onClick={handleDateFilter} \n                  size=\"sm\" \n                  className=\"bg-blue-600 hover:bg-blue-700 text-white shadow-md\"\n                >\n                  Apply Filter\n                </Button>\n                <Button \n                  onClick={clearDateFilter} \n                  variant=\"outline\" \n                  size=\"sm\"\n                  className=\"border-blue-200 text-blue-600 hover:bg-blue-50\"\n                >\n                  Clear\n                </Button>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-lg font-bold text-gray-700 dark:text-gray-300\">{Array.isArray(records) ? records.length : 0}</div>\n                <div className=\"text-xs text-gray-500 uppercase tracking-wide\">Records Found</div>\n              </div>\n            </div>\n          </div>\n\n          {/* Modern Records Display */}\n          <div className=\"flex-1 overflow-y-auto space-y-3\">\n            {isLoading ? (\n              <div className=\"flex flex-col items-center justify-center py-12\">\n                <div className=\"relative\">\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-4 border-blue-200\"></div>\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-4 border-blue-600 border-t-transparent absolute top-0 left-0\"></div>\n                </div>\n                <p className=\"text-gray-500 mt-4 font-medium\">Loading teaching records...</p>\n              </div>\n            ) : !Array.isArray(records) || records.length === 0 ? (\n              <div className=\"flex flex-col items-center justify-center py-16\">\n                <div className=\"w-20 h-20 bg-gradient-to-br from-gray-100 to-gray-200 rounded-full flex items-center justify-center mb-4\">\n                  <BookOpen className=\"h-8 w-8 text-gray-400\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">No Records Found</h3>\n                <p className=\"text-gray-500 text-center max-w-md\">\n                  {fromDate || toDate \n                    ? \"No teaching records found for the selected date range. Try adjusting your filter dates.\" \n                    : \"This teacher hasn't recorded any teaching activities yet. Records will appear here once they start logging their sessions.\"\n                  }\n                </p>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {Array.isArray(records) && records.map((record, index) => (\n                  <div key={record.id} className=\"group\">\n                    <Card className=\"hover:shadow-lg transition-all duration-200 border-l-4 border-l-blue-500 hover:border-l-blue-600 bg-gradient-to-r from-white to-blue-50/30\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center group-hover:bg-blue-200 transition-colors\">\n                              <Calendar className=\"h-4 w-4 text-blue-600\" />\n                            </div>\n                            <div>\n                              <div className=\"font-semibold text-gray-900\">{formatDate(record.recordDate)}</div>\n                              <div className=\"text-xs text-gray-500\">{formatTime(record.createdAt)}</div>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"flex items-center gap-1 text-blue-600 font-semibold\">\n                              <Clock className=\"h-4 w-4\" />\n                              {Math.floor(record.teachingDuration / 60)}h {record.teachingDuration % 60}m\n                            </div>\n                            <div className=\"text-xs text-gray-500\">{record.teachingDuration} minutes</div>\n                          </div>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-3\">\n                          <div className=\"bg-white/60 rounded-lg p-3 border border-gray-100\">\n                            <div className=\"text-xs font-medium text-gray-500 uppercase tracking-wide mb-1\">Class</div>\n                            <div className=\"font-semibold text-gray-800\">{record.className}</div>\n                          </div>\n                          <div className=\"bg-white/60 rounded-lg p-3 border border-gray-100\">\n                            <div className=\"text-xs font-medium text-gray-500 uppercase tracking-wide mb-1\">Subject</div>\n                            <div className=\"font-semibold text-gray-800\">{record.subjectName}</div>\n                          </div>\n                        </div>\n                        \n                        {record.chapterTitle && (\n                          <div className=\"bg-purple-50 rounded-lg p-3 border border-purple-100 mb-3\">\n                            <div className=\"text-xs font-medium text-purple-600 uppercase tracking-wide mb-1\">Chapter Covered</div>\n                            <div className=\"font-semibold text-purple-800\">{record.chapterTitle}</div>\n                          </div>\n                        )}\n                        \n                        {record.notes && (\n                          <div className=\"bg-amber-50 rounded-lg p-3 border border-amber-100\">\n                            <div className=\"text-xs font-medium text-amber-600 uppercase tracking-wide mb-1 flex items-center gap-1\">\n                              <FileText className=\"h-3 w-3\" />\n                              Teaching Notes\n                            </div>\n                            <div className=\"text-sm text-amber-800 leading-relaxed\">{record.notes}</div>\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":11610},"client/src/pages/admin/Products.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Plus, Package, Edit2, DollarSign, FileText, CheckSquare, X } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport DashboardLayout from '@/components/layout/DashboardLayout';\n\ninterface Product {\n  id: string;\n  name: string;\n  description: string | null;\n  requirements: string | null;\n  price: string;\n  commissionPercentage: string;\n  isActive: boolean;\n  createdAt: string;\n}\n\nconst productFormSchema = z.object({\n  name: z.string().min(1, \"Product name is required\"),\n  description: z.string().optional(),\n  requirements: z.string().optional(),\n  price: z.string().min(1, \"Price is required\").refine((val) => !isNaN(Number(val)) && Number(val) > 0, \"Must be a valid positive number\"),\n  commissionPercentage: z.string().min(1, \"Commission percentage is required\").refine((val) => !isNaN(Number(val)) && Number(val) >= 0 && Number(val) <= 100, \"Must be between 0-100\"),\n});\n\ntype ProductFormData = z.infer<typeof productFormSchema>;\n\nfunction AdminProducts() {\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [editingProduct, setEditingProduct] = useState<Product | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<ProductFormData>({\n    resolver: zodResolver(productFormSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      requirements: \"\",\n      price: \"\",\n      commissionPercentage: \"0\",\n    },\n  });\n\n  // Fetch products\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: ['/api/admin/products'],\n  });\n\n  // Create product mutation\n  const createProductMutation = useMutation({\n    mutationFn: async (data: ProductFormData) => {\n      await apiRequest('POST', '/api/admin/products', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/products'] });\n      setIsCreateOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Product created successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update product mutation\n  const updateProductMutation = useMutation({\n    mutationFn: async (data: ProductFormData & { id: string }) => {\n      await apiRequest('PUT', `/api/admin/products/${data.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/products'] });\n      setEditingProduct(null);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Product updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Toggle active status mutation\n  const toggleActiveMutation = useMutation({\n    mutationFn: async ({ id, isActive }: { id: string; isActive: boolean }) => {\n      await apiRequest('PATCH', `/api/admin/products/${id}/toggle`, { isActive });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/products'] });\n      toast({\n        title: \"Success\",\n        description: \"Product status updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: ProductFormData) => {\n    if (editingProduct) {\n      updateProductMutation.mutate({ ...data, id: editingProduct.id });\n    } else {\n      createProductMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (product: Product) => {\n    setEditingProduct(product);\n    form.reset({\n      name: product.name,\n      description: product.description || \"\",\n      requirements: product.requirements || \"\",\n      price: product.price,\n      commissionPercentage: product.commissionPercentage,\n    });\n  };\n\n  const handleToggleActive = (id: string, currentStatus: boolean) => {\n    toggleActiveMutation.mutate({ id, isActive: !currentStatus });\n  };\n\n  const formatCurrency = (amount: string) => {\n    return `₹${Number(amount).toLocaleString('en-IN')}`;\n  };\n\n  return (\n    <DashboardLayout \n      title=\"Products Management\" \n      subtitle=\"Create, manage, and optimize your product portfolio with real-time analytics\"\n      showAddButton={true}\n      onAddClick={() => setIsCreateOpen(true)}\n      addButtonText=\"Add Product\"\n    >\n      <div className=\"relative overflow-hidden\">\n        {/* Floating background elements */}\n        <div className=\"absolute top-0 left-0 w-64 h-64 bg-gradient-to-br from-blue-400/10 to-purple-400/10 rounded-full blur-3xl animate-float-slow\"></div>\n        <div className=\"absolute top-32 right-0 w-80 h-80 bg-gradient-to-br from-purple-400/10 to-pink-400/10 rounded-full blur-3xl animate-float-slower\"></div>\n      <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\n        <DialogContent className=\"sm:max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Create New Product</DialogTitle>\n          </DialogHeader>\n          <ProductForm \n            form={form} \n            onSubmit={handleSubmit} \n            isLoading={createProductMutation.isPending}\n            isEditing={false}\n          />\n        </DialogContent>\n      </Dialog>\n\n      {/* Products Grid with premium animations */}\n      <div className=\"relative z-10 grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n        {isLoading ? (\n            Array.from({ length: 6 }).map((_, i) => (\n              <Card key={i} className=\"animate-pulse-premium bg-gradient-to-br from-gray-100 to-gray-200 border-0 shadow-lg\">\n                <CardHeader>\n                  <div className=\"h-6 bg-gray-300 rounded-full animate-shimmer\"></div>\n                  <div className=\"h-4 bg-gray-300 rounded-full w-2/3 animate-shimmer\"></div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"h-4 bg-gray-300 rounded-full animate-shimmer\"></div>\n                    <div className=\"h-4 bg-gray-300 rounded-full w-1/2 animate-shimmer\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          ) : products.length === 0 ? (\n            <div className=\"col-span-full flex flex-col items-center justify-center py-16 text-gray-500 animate-fade-in-up\">\n              <div className=\"relative\">\n                <Package className=\"h-20 w-20 mb-6 opacity-30 animate-float-slow\" />\n                <div className=\"absolute inset-0 bg-gradient-to-br from-blue-400/20 to-purple-400/20 rounded-full blur-xl\"></div>\n              </div>\n              <h3 className=\"text-2xl font-bold mb-4 bg-gradient-to-r from-gray-700 to-gray-900 bg-clip-text text-transparent\">No Products Found</h3>\n              <p className=\"text-lg text-center max-w-md leading-relaxed\">\n                Start by creating your first product to enable commission-based sales for SO centers.\n              </p>\n              <Button \n                onClick={() => setIsCreateOpen(true)}\n                className=\"mt-6 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Your First Product\n              </Button>\n            </div>\n          ) : (\n            products.map((product, index) => (\n              <Card key={product.id} className={`group relative overflow-hidden transition-all duration-500 border-0 shadow-lg hover:shadow-2xl hover:-translate-y-2 transform hover:scale-105 animate-slide-up-stagger ${product.isActive ? 'bg-gradient-to-br from-white via-green-50/20 to-emerald-50/30' : 'bg-gradient-to-br from-white via-red-50/20 to-rose-50/30'}`}\n                    style={{ animationDelay: `${index * 100}ms` }}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-lg font-semibold text-gray-900 group-hover:text-blue-600 transition-colors\">\n                        {product.name}\n                      </CardTitle>\n                      {product.description && (\n                        <p className=\"text-sm text-gray-600 mt-1 line-clamp-2\">{product.description}</p>\n                      )}\n                    </div>\n                    <div className=\"flex items-center gap-2 ml-3\">\n                      <Badge variant={product.isActive ? \"default\" : \"secondary\"} className=\"text-xs\">\n                        {product.isActive ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardHeader>\n\n                <CardContent className=\"space-y-4\">\n                  {/* Price and Commission */}\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    <div className=\"bg-white/60 rounded-lg p-3 border border-gray-100\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <DollarSign className=\"h-4 w-4 text-green-600\" />\n                        <span className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">Price</span>\n                      </div>\n                      <div className=\"font-bold text-green-700\">{formatCurrency(product.price)}</div>\n                    </div>\n                    <div className=\"bg-white/60 rounded-lg p-3 border border-gray-100\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <FileText className=\"h-4 w-4 text-blue-600\" />\n                        <span className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">Commission</span>\n                      </div>\n                      <div className=\"font-bold text-blue-700\">{product.commissionPercentage}%</div>\n                    </div>\n                  </div>\n\n                  {/* Requirements */}\n                  {product.requirements && (\n                    <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <CheckSquare className=\"h-4 w-4 text-yellow-600\" />\n                        <span className=\"text-xs font-medium text-yellow-700 uppercase tracking-wide\">Requirements</span>\n                      </div>\n                      <p className=\"text-sm text-yellow-800 line-clamp-3\">{product.requirements}</p>\n                    </div>\n                  )}\n\n                  {/* Actions */}\n                  <div className=\"flex items-center justify-between pt-2 border-t border-gray-100\">\n                    <div className=\"flex items-center gap-2\">\n                      <Switch\n                        checked={product.isActive}\n                        onCheckedChange={() => handleToggleActive(product.id, product.isActive)}\n                      />\n                      <span className=\"text-sm text-gray-600\">\n                        {product.isActive ? \"Active\" : \"Inactive\"}\n                      </span>\n                    </div>\n\n                    <Dialog open={editingProduct?.id === product.id} onOpenChange={(open) => !open && setEditingProduct(null)}>\n                      <DialogTrigger asChild>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => handleEdit(product)}\n                          className=\"hover:bg-blue-50 hover:border-blue-300\"\n                        >\n                          <Edit2 className=\"h-4 w-4 mr-1\" />\n                          Edit\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"sm:max-w-2xl\">\n                        <DialogHeader>\n                          <DialogTitle>Edit Product</DialogTitle>\n                        </DialogHeader>\n                        <ProductForm \n                          form={form} \n                          onSubmit={handleSubmit} \n                          isLoading={updateProductMutation.isPending}\n                          isEditing={true}\n                        />\n                      </DialogContent>\n                    </Dialog>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n        )}\n      </div>\n      </div>\n    </DashboardLayout>\n  );\n}\n\n// Product Form Component\ninterface ProductFormProps {\n  form: any;\n  onSubmit: (data: ProductFormData) => void;\n  isLoading: boolean;\n  isEditing: boolean;\n}\n\nfunction ProductForm({ form, onSubmit, isLoading, isEditing }: ProductFormProps) {\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Product Name *</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Enter product name\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"price\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Price (₹) *</FormLabel>\n                <FormControl>\n                  <Input type=\"number\" placeholder=\"0.00\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"commissionPercentage\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Commission Percentage (%) *</FormLabel>\n              <FormControl>\n                <Input type=\"number\" min=\"0\" max=\"100\" placeholder=\"0\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Description</FormLabel>\n              <FormControl>\n                <Textarea \n                  placeholder=\"Product description...\" \n                  className=\"resize-none\"\n                  rows={3}\n                  {...field} \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"requirements\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Requirements</FormLabel>\n              <FormControl>\n                <Textarea \n                  placeholder=\"List any requirements for purchasing this product...\" \n                  className=\"resize-none\"\n                  rows={3}\n                  {...field} \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex justify-end gap-3 pt-4\">\n          <Button type=\"submit\" disabled={isLoading} className=\"bg-blue-600 hover:bg-blue-700\">\n            {isLoading ? \"Saving...\" : isEditing ? \"Update Product\" : \"Create Product\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n\nexport default AdminProducts;","size_bytes":16595},"server/db.ts":{"content":"// MANDATORY SUPABASE DATABASE CONNECTION - NEON COMPLETELY DISABLED\nimport { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\n\n// FORCE SUPABASE DATABASE URL AS PRIMARY CONNECTION\nconst SUPABASE_CONNECTION = process.env.SUPABASE_DATABASE_URL;\nif (!SUPABASE_CONNECTION) {\n  throw new Error(\"SUPABASE_DATABASE_URL is required - System enforces Supabase exclusively\");\n}\n\nconsole.log('🚫 FORCING NEON DISCONNECTION - ORIGINAL DATABASE_URL:', process.env.DATABASE_URL?.slice(0, 30) + '...');\n\n// CRITICAL: COMPLETELY DISABLE ANY NEON CONNECTION ATTEMPTS\n// Remove any existing DATABASE_URL that might point to Neon\ndelete process.env.DATABASE_URL;\n\nconsole.log('🚫 DATABASE_URL COMPLETELY DELETED - No Neon access possible');\n\n// COMPLETE REMOVAL OF ALL NEON/LOCAL DATABASE VARIABLES\ndelete process.env.PGHOST;\ndelete process.env.PGPORT; \ndelete process.env.PGUSER;\ndelete process.env.PGPASSWORD;\ndelete process.env.PGDATABASE;\n\nconsole.log('🚫 NEON DATABASE COMPLETELY DISABLED');\nconsole.log('🔗 SUPABASE DATABASE ENFORCED:', SUPABASE_CONNECTION.slice(0, 60) + '...');\nconsole.log('✅ ONLY SUPABASE_DATABASE_URL IS ACTIVE - Neon completely eliminated');\n\n// CREATE SUPABASE CONNECTION WITH REGULAR PG POOL (NO NEON DEPENDENCIES)\nexport const pool = new Pool({ \n  connectionString: SUPABASE_CONNECTION,\n  max: 10,\n  idleTimeoutMillis: 20000,\n  connectionTimeoutMillis: 8000,\n  query_timeout: 15000,\n  statement_timeout: 15000,\n  ssl: { rejectUnauthorized: false }\n});\n\nexport const db = drizzle(pool, { schema });\n\n// IMMEDIATE CONNECTION VERIFICATION TO SUPABASE\npool.query('SELECT current_database(), current_user, version()', (err, result) => {\n  if (err) {\n    console.error('❌ SUPABASE CONNECTION FAILED:', err.message);\n    throw new Error('Supabase connection mandatory - cannot proceed with Neon');\n  } else {\n    console.log('✅ SUPABASE DATABASE CONNECTED SUCCESSFULLY:');\n    console.log('   Database:', result.rows[0].current_database);\n    console.log('   User:', result.rows[0].current_user);\n    console.log('   PostgreSQL Version:', result.rows[0].version.slice(0, 50) + '...');\n    console.log('🎉 ALL DATABASE OPERATIONS NOW USE SUPABASE EXCLUSIVELY');\n  }\n});\n","size_bytes":2255},"server/supabaseClient.ts":{"content":"import { createClient } from '@supabase/supabase-js';\n\nif (!process.env.NEXT_PUBLIC_SUPABASE_URL) {\n  throw new Error('NEXT_PUBLIC_SUPABASE_URL is required');\n}\n\nif (!process.env.SUPABASE_SERVICE_ROLE_KEY) {\n  throw new Error('SUPABASE_SERVICE_ROLE_KEY is required');\n}\n\n// Create Supabase client with service role key for server-side operations\n// NOW USING CORRECT ENVIRONMENT VARIABLES\nexport const supabaseAdmin = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!, // Correct URL\n  process.env.SUPABASE_SERVICE_ROLE_KEY!,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  }\n);\n\n// Create public client for regular operations  \n// NOW USING CORRECT ENVIRONMENT VARIABLES\nexport const supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!, // Correct URL\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY! // Correct anon key\n);","size_bytes":872},"server/authService.ts":{"content":"import { supabaseAdmin } from './supabaseClient';\nimport { storage } from './storage';\nimport type { User, InsertUser, SoCenter, InsertSoCenter } from '@shared/schema';\n\n/**\n * Comprehensive authentication service that enforces Supabase Auth for ALL authentication operations\n * As mandated by user: \"From Now, any Type of Authentication is Created from Supabase Auth. This is must\"\n */\nexport class AuthService {\n  \n  /**\n   * Login user through Supabase Auth ONLY\n   * This is the ONLY way to authenticate users in the system\n   */\n  static async login(email: string, password: string): Promise<{ user: User; token: string }> {\n    try {\n      console.log('🔐 Authenticating with Supabase Auth:', email);\n      \n      // Step 1: Authenticate with Supabase Auth (MANDATORY)\n      const { data: authData, error: authError } = await supabaseAdmin.auth.signInWithPassword({\n        email,\n        password\n      });\n      \n      if (authError || !authData.user) {\n        console.error('❌ Supabase Auth failed:', authError?.message);\n        throw new Error('Invalid credentials');\n      }\n      \n      console.log('✅ Supabase Auth successful:', authData.user.id);\n      \n      // Step 2: Get or sync user from our database with timeout handling\n      let user: User | null = null;\n      try {\n        user = await Promise.race([\n          storage.getUserByEmail(email),\n          new Promise<null>((_, reject) => \n            setTimeout(() => reject(new Error('Database query timeout')), 10000)\n          )\n        ]);\n      } catch (error: any) {\n        console.warn('⚠️ Database query failed, continuing with minimal user data:', error.message);\n        // Fallback user data from Supabase Auth\n        const userMetadata = authData.user.user_metadata;\n        user = {\n          id: authData.user.id,\n          email: email,\n          name: userMetadata?.name || authData.user.email?.split('@')[0] || 'User',\n          role: userMetadata?.role || 'agent',\n          phone: userMetadata?.phone,\n          isActive: true,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        } as User;\n      }\n      \n      if (!user) {\n        // User exists in Supabase but not in our database - sync them (with timeout)\n        console.log('🔄 Attempting user sync to database:', email);\n        try {\n          const userMetadata = authData.user.user_metadata;\n          user = await Promise.race([\n            storage.createUser({\n              email: email,\n              role: (userMetadata?.role || 'agent') as any,\n              name: userMetadata?.name || authData.user.email?.split('@')[0] || 'User',\n              phone: userMetadata?.phone,\n              isActive: true,\n              password: '' // We use Supabase Auth, no local password needed\n            }),\n            new Promise<never>((_, reject) => \n              setTimeout(() => reject(new Error('User creation timeout')), 8000)\n            )\n          ]);\n          console.log('✅ User synced to database:', user.id);\n        } catch (syncError: any) {\n          console.warn('⚠️ Database sync failed, using Supabase data:', syncError.message);\n          // Use Supabase user data as fallback\n          const userMetadata = authData.user.user_metadata;\n          user = {\n            id: authData.user.id,\n            email: email,\n            name: userMetadata?.name || authData.user.email?.split('@')[0] || 'User',\n            role: userMetadata?.role || 'agent',\n            phone: userMetadata?.phone,\n            isActive: true,\n            createdAt: new Date(),\n            updatedAt: new Date()\n          } as User;\n        }\n      }\n      \n      console.log('✅ User authenticated:', { id: user.id, email: user.email, role: user.role });\n\n      // Step 3: Create JWT token for API access\n      const jwt = require('jsonwebtoken');\n      const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';\n      const token = jwt.sign(\n        { userId: user.id, email: user.email, role: user.role },\n        JWT_SECRET,\n        { expiresIn: '24h' }\n      );\n\n      return {\n        user,\n        token\n      };\n    } catch (error) {\n      console.error('❌ Login failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create a new user through Supabase Auth ONLY\n   * This is the ONLY way to create new users in the system\n   */\n  static async createUser(userData: {\n    email: string;\n    password: string;\n    role: 'admin' | 'so_center' | 'teacher' | 'agent';\n    name: string;\n    phone?: string;\n    address?: string;\n  }): Promise<{ supabaseUser: any; dbUser: User }> {\n    try {\n      console.log('🔧 Creating user in Supabase Auth:', userData.email);\n      \n      // Step 1: Create user in Supabase Auth (MANDATORY)\n      const { data: authData, error: authError } = await supabaseAdmin.auth.admin.createUser({\n        email: userData.email,\n        password: userData.password,\n        email_confirm: true, // Auto-confirm email\n        user_metadata: {\n          name: userData.name,\n          role: userData.role,\n          phone: userData.phone,\n        }\n      });\n\n      if (authError) {\n        console.error('❌ Supabase Auth creation failed:', authError);\n        throw new Error(`Authentication creation failed: ${authError.message}`);\n      }\n\n      if (!authData.user) {\n        throw new Error('Supabase Auth user creation returned no user data');\n      }\n\n      console.log('✅ Supabase Auth user created:', authData.user.id);\n\n      // Step 2: Sync to PostgreSQL database with Supabase User ID\n      const dbUserData: InsertUser = {\n        email: userData.email,\n        password: '', // No password in DB - handled by Supabase Auth\n        role: userData.role,\n        name: userData.name,\n        phone: userData.phone,\n        address: userData.address,\n        isActive: true\n      };\n\n      const dbUser = await storage.createUser(dbUserData);\n      console.log('✅ Database user synchronized:', dbUser.id);\n\n      return {\n        supabaseUser: authData.user,\n        dbUser\n      };\n    } catch (error) {\n      console.error('❌ User creation failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Authenticate user through Supabase Auth ONLY\n   */\n  static async authenticateUser(email: string, password: string): Promise<{\n    supabaseUser: any;\n    dbUser: User;\n    session: any;\n  }> {\n    try {\n      console.log('🔐 Authenticating with Supabase Auth:', email);\n      \n      // Step 1: Authenticate with Supabase Auth (MANDATORY)\n      const { data, error } = await supabaseAdmin.auth.signInWithPassword({\n        email,\n        password\n      });\n\n      if (error) {\n        console.error('❌ Supabase Auth failed:', error);\n        throw new Error(`Authentication failed: ${error.message}`);\n      }\n\n      if (!data.user || !data.session) {\n        throw new Error('Supabase Auth returned no user or session');\n      }\n\n      console.log('✅ Supabase Auth successful:', data.user.id);\n\n      // Step 2: Get synchronized database user\n      const dbUser = await storage.getUserByEmail(email);\n      if (!dbUser) {\n        console.log('🔄 Syncing Supabase user to database...');\n        // Auto-sync if user exists in Supabase but not in database\n        const syncedUser = await this.syncSupabaseUserToDb(data.user);\n        return {\n          supabaseUser: data.user,\n          dbUser: syncedUser,\n          session: data.session\n        };\n      }\n\n      console.log('✅ User authenticated:', { id: dbUser.id, email: dbUser.email, role: dbUser.role });\n\n      return {\n        supabaseUser: data.user,\n        dbUser,\n        session: data.session\n      };\n    } catch (error) {\n      console.error('❌ Authentication failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Sync existing Supabase Auth user to database\n   */\n  private static async syncSupabaseUserToDb(supabaseUser: any): Promise<User> {\n    const dbUserData: InsertUser = {\n      email: supabaseUser.email,\n      password: '', // Handled by Supabase Auth\n      role: supabaseUser.user_metadata?.role || 'agent',\n      name: supabaseUser.user_metadata?.name || 'User',\n      phone: supabaseUser.user_metadata?.phone,\n      isActive: true\n    };\n\n    return await storage.createUser(dbUserData);\n  }\n\n  /**\n   * Update user through Supabase Auth\n   */\n  static async updateUser(userId: string, updates: {\n    email?: string;\n    password?: string;\n    name?: string;\n    phone?: string;\n    role?: string;\n  }): Promise<User> {\n    try {\n      // Step 1: Update in Supabase Auth\n      const authUpdates: any = {};\n      if (updates.email) authUpdates.email = updates.email;\n      if (updates.password) authUpdates.password = updates.password;\n      \n      const metadataUpdates: any = {};\n      if (updates.name) metadataUpdates.name = updates.name;\n      if (updates.phone) metadataUpdates.phone = updates.phone;\n      if (updates.role) metadataUpdates.role = updates.role;\n\n      if (Object.keys(authUpdates).length > 0) {\n        const { error: authError } = await supabaseAdmin.auth.admin.updateUserById(\n          userId, \n          { ...authUpdates, user_metadata: metadataUpdates }\n        );\n\n        if (authError) {\n          throw new Error(`Supabase Auth update failed: ${authError.message}`);\n        }\n      }\n\n      // Step 2: Update in database\n      const dbUpdates: Partial<InsertUser> = {};\n      if (updates.email) dbUpdates.email = updates.email;\n      if (updates.name) dbUpdates.name = updates.name;\n      if (updates.phone) dbUpdates.phone = updates.phone;\n      if (updates.role) dbUpdates.role = updates.role as any;\n\n      return await storage.updateUser(userId, dbUpdates);\n    } catch (error) {\n      console.error('❌ User update failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete user from both Supabase Auth and database\n   */\n  static async deleteUser(userId: string): Promise<void> {\n    try {\n      // Step 1: Delete from Supabase Auth\n      const { error: authError } = await supabaseAdmin.auth.admin.deleteUser(userId);\n      if (authError) {\n        console.error('⚠️ Supabase Auth deletion failed:', authError);\n        // Continue with database deletion even if auth fails\n      }\n\n      // Step 2: Delete from database\n      await storage.deleteUser(userId);\n      console.log('✅ User deleted from all systems:', userId);\n    } catch (error) {\n      console.error('❌ User deletion failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Create SO Center with Supabase Auth integration\n   * SO Centers are also users in the system with 'so_center' role\n   */\n  static async createSoCenter(soCenterData: {\n    email: string;\n    password: string;\n    name: string;\n    phone?: string;\n    address?: string;\n    centerId: string;\n    centerName: string;\n    location?: string;\n    managerName?: string;\n    rentAmount?: string;\n    rentalAdvance?: string;\n    electricityAmount?: string;\n    internetAmount?: string;\n    facilities?: string[];\n    capacity?: number;\n    roomSize?: string;\n    landmarks?: string;\n    ownerName?: string;\n    ownerLastName?: string;\n    ownerPhone?: string;\n    dateOfHouseTaken?: string;\n    monthlyRentDate?: number;\n    monthlyInternetDate?: number;\n    internetServiceProvider?: string;\n    electricBillAccountNumber?: string;\n    internetBillAccountNumber?: string;\n    villageId?: string;\n  }, nearbySchools?: any[], nearbyTuitions?: any[], equipment?: any[]): Promise<{ supabaseUser: any; dbUser: User; soCenter: SoCenter }> {\n    try {\n      console.log('🔧 Creating SO Center with Supabase Auth:', soCenterData.email);\n      console.log('📊 SO Center Data:', { \n        name: soCenterData.name, \n        centerName: soCenterData.centerName,\n        email: soCenterData.email,\n        centerId: soCenterData.centerId \n      });\n      \n      // Step 1: Create user in Supabase Auth with 'so_center' role\n      const userResult = await this.createUser({\n        email: soCenterData.email,\n        password: soCenterData.password,\n        role: 'so_center',\n        name: soCenterData.name,\n        phone: soCenterData.phone,\n        address: soCenterData.address\n      });\n\n      // Step 2: Create SO Center record linked to the user\n      const soCenterRecord: InsertSoCenter = {\n        centerId: soCenterData.centerId,\n        name: soCenterData.name || soCenterData.centerName,\n        email: soCenterData.email,\n        address: soCenterData.address,\n        villageId: soCenterData.villageId,\n        phone: soCenterData.phone,\n        ownerName: soCenterData.ownerName,\n        ownerLastName: soCenterData.ownerLastName,\n        ownerPhone: soCenterData.ownerPhone,\n        landmarks: soCenterData.landmarks,\n        roomSize: soCenterData.roomSize,\n        rentAmount: soCenterData.rentAmount,\n        rentalAdvance: soCenterData.rentalAdvance,\n        dateOfHouseTaken: soCenterData.dateOfHouseTaken,\n        monthlyRentDate: soCenterData.monthlyRentDate,\n        electricBillAccountNumber: soCenterData.electricBillAccountNumber,\n        internetBillAccountNumber: soCenterData.internetBillAccountNumber,\n        capacity: soCenterData.capacity,\n        facilities: soCenterData.facilities || [],\n        walletBalance: '0',\n        admissionFeeApplicable: true, // Default value for new SO Centers\n        isActive: true\n      };\n\n      console.log('📝 SO Center Record to be inserted:', soCenterRecord);\n\n      const soCenter = await storage.createSoCenter(soCenterRecord, nearbySchools, nearbyTuitions, equipment);\n      console.log('✅ SO Center created with Supabase Auth:', soCenter.id);\n      \n      // Verify SO Center was created successfully\n      const verification = await storage.getSoCenterByEmail(soCenterData.email);\n      if (!verification) {\n        console.error('❌ CRITICAL: SO Center created but not retrievable by email!');\n        throw new Error('SO Center creation verification failed - data synchronization issue');\n      }\n      console.log('✅ SO Center creation verified:', verification.centerId);\n\n      return {\n        supabaseUser: userResult.supabaseUser,\n        dbUser: userResult.dbUser,\n        soCenter\n      };\n    } catch (error) {\n      console.error('❌ SO Center creation failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Update SO Center through Supabase Auth\n   */\n  static async updateSoCenter(userId: string, updates: {\n    email?: string;\n    password?: string;\n    name?: string;\n    phone?: string;\n    centerName?: string;\n    location?: string;\n    managerName?: string;\n  }): Promise<{ user: User; soCenter?: SoCenter }> {\n    try {\n      // Step 1: Update user through Supabase Auth\n      const userUpdates: any = {};\n      if (updates.email) userUpdates.email = updates.email;\n      if (updates.password) userUpdates.password = updates.password;\n      if (updates.name) userUpdates.name = updates.name;\n      if (updates.phone) userUpdates.phone = updates.phone;\n\n      const updatedUser = await this.updateUser(userId, userUpdates);\n\n      // Step 2: Update SO Center record if needed\n      let soCenter;\n      const soCenterUpdates: any = {};\n      if (updates.centerName) soCenterUpdates.centerName = updates.centerName;\n      if (updates.location) soCenterUpdates.location = updates.location;\n      if (updates.managerName) soCenterUpdates.managerName = updates.managerName;\n      if (updates.email) soCenterUpdates.managerEmail = updates.email;\n      if (updates.phone) soCenterUpdates.managerPhone = updates.phone;\n\n      if (Object.keys(soCenterUpdates).length > 0) {\n        soCenter = await storage.updateSoCenterByUserId(userId, soCenterUpdates);\n      }\n\n      console.log('✅ SO Center updated through Supabase Auth:', userId);\n      \n      return {\n        user: updatedUser,\n        soCenter\n      };\n    } catch (error) {\n      console.error('❌ SO Center update failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Delete SO Center from both Supabase Auth and database\n   */\n  static async deleteSoCenter(userId: string): Promise<void> {\n    try {\n      // Step 1: Delete SO Center record\n      await storage.deleteSoCenterByUserId(userId);\n\n      // Step 2: Delete user from Supabase Auth and database\n      await this.deleteUser(userId);\n\n      console.log('✅ SO Center deleted from all systems:', userId);\n    } catch (error) {\n      console.error('❌ SO Center deletion failed:', error);\n      throw error;\n    }\n  }\n}","size_bytes":16378},"demo-so-center-creation.ts":{"content":"// DEMONSTRATION: SO Center Creation Flow\n// This script demonstrates how to create SO Center authentication users\nimport { SOCenterAuthManager } from './server/createSOCenterAuth';\n\nasync function demonstrateSOCenterCreation() {\n  console.log('🏢 SO CENTER AUTHENTICATION CREATION DEMONSTRATION');\n  console.log('==================================================');\n  \n  try {\n    // Example: Create multiple SO Centers\n    const soCenters = [\n      {\n        centerId: 'NNASOC00004',\n        centerName: 'Vijayawada Main Branch',\n        password: 'vijay123',\n        phone: '+91 98765 43210',\n        address: 'Main Road, Vijayawada, Andhra Pradesh'\n      },\n      {\n        centerId: 'NNASOC00005', \n        centerName: 'Guntur District Center',\n        password: 'guntur456',\n        phone: '+91 87654 32109',\n        address: 'District Center, Guntur, Andhra Pradesh'\n      },\n      {\n        centerId: 'NNASOC00006',\n        centerName: 'Krishna District Branch',\n        password: 'krishna789',\n        phone: '+91 76543 21098'\n      }\n    ];\n    \n    console.log('Creating SO Centers with standardized flow...\\n');\n    \n    const results = await SOCenterAuthManager.createMultipleSOCenters(soCenters);\n    \n    results.forEach((result, index) => {\n      console.log(`SO Center ${index + 1}:`);\n      if (result.success) {\n        console.log(`✅ ${result.centerId} - ${result.centerName}`);\n        console.log(`   Email: ${result.email}`);\n        console.log(`   Login Methods:`);\n        result.loginMethods?.forEach(method => console.log(`     - ${method}`));\n        console.log(`   Password: ${result.credentials?.password}`);\n      } else {\n        console.log(`❌ ${result.centerId} - Failed: ${result.error}`);\n      }\n      console.log('');\n    });\n    \n    console.log('==================================================');\n    console.log('✅ SO CENTER CREATION FLOW COMPLETE');\n    console.log('');\n    console.log('📋 STANDARDIZED FEATURES:');\n    console.log('• Automatic ID-to-email conversion (id@navanidhi.org)');\n    console.log('• Supabase Authentication integration');\n    console.log('• Database synchronization');\n    console.log('• Dual login support (ID format or email format)');\n    console.log('• Batch creation support');\n    console.log('• Duplicate prevention');\n    console.log('• Production-ready error handling');\n    \n  } catch (error: any) {\n    console.error('❌ Demo failed:', error.message);\n  }\n}\n\n// Export for use in other scripts\nexport { demonstrateSOCenterCreation };\n\n// Run demo if this file is executed directly\nif (require.main === module) {\n  demonstrateSOCenterCreation();\n}","size_bytes":2657},"server/createSOCenterAuth.ts":{"content":"// SO CENTER AUTHENTICATION CREATION SYSTEM\n// Standardized flow for creating SO Center users in Supabase Auth\nimport { supabaseAdmin } from './supabaseClient';\nimport { storage } from './storage';\n\ninterface SOCenterData {\n  centerId: string;\n  centerName: string;\n  password: string;\n  phone?: string;\n  address?: string;\n}\n\nexport class SOCenterAuthManager {\n  /**\n   * Creates a new SO Center authentication user following standardized flow\n   * @param centerData SO Center information\n   * @returns Created user details\n   */\n  static async createSOCenterAuth(centerData: SOCenterData) {\n    try {\n      console.log(`🏢 Creating SO Center authentication for: ${centerData.centerId}`);\n      \n      // 1. Convert SO Center ID to email format\n      const email = `${centerData.centerId.toLowerCase()}@navanidhi.org`;\n      console.log(`📧 Email format: ${email}`);\n      \n      // 2. Create user in Supabase Auth with metadata\n      const { data: authUser, error: authError } = await supabaseAdmin.auth.admin.createUser({\n        email: email,\n        password: centerData.password,\n        user_metadata: {\n          role: 'so_center',\n          name: centerData.centerName,\n          center_id: centerData.centerId,\n          phone: centerData.phone,\n          address: centerData.address\n        },\n        email_confirm: true\n      });\n      \n      if (authError) {\n        console.error('❌ Supabase Auth user creation failed:', authError.message);\n        throw new Error(`Supabase Auth failed: ${authError.message}`);\n      }\n      \n      console.log('✅ SO Center user created in Supabase Auth:', authUser.user.id);\n      \n      // 3. Create corresponding user in database\n      const dbUser = await storage.createUser({\n        email: email,\n        role: 'so_center',\n        name: centerData.centerName,\n        phone: centerData.phone,\n        address: centerData.address,\n        isActive: true,\n        password: '' // Supabase Auth handles authentication\n      });\n      \n      console.log('✅ SO Center user created in database:', dbUser.id);\n      \n      // 4. Return standardized response\n      const result = {\n        success: true,\n        centerId: centerData.centerId,\n        email: email,\n        supabaseUserId: authUser.user.id,\n        databaseUserId: dbUser.id,\n        centerName: centerData.centerName,\n        loginMethods: [\n          `ID Format: ${centerData.centerId}`,\n          `Email Format: ${email}`\n        ],\n        credentials: {\n          id: centerData.centerId,\n          email: email,\n          password: centerData.password,\n          role: 'so_center'\n        }\n      };\n      \n      console.log('🎉 SO Center authentication setup complete!');\n      console.log('📋 Login Details:');\n      console.log(`   Center ID: ${centerData.centerId}`);\n      console.log(`   Email: ${email}`);\n      console.log(`   Password: ${centerData.password}`);\n      console.log(`   Role: so_center`);\n      \n      return result;\n      \n    } catch (error: any) {\n      console.error('❌ SO Center authentication creation failed:', error.message);\n      throw new Error(`Failed to create SO Center auth: ${error.message}`);\n    }\n  }\n  \n  /**\n   * Batch create multiple SO Centers\n   * @param centers Array of SO Center data\n   * @returns Array of creation results\n   */\n  static async createMultipleSOCenters(centers: SOCenterData[]) {\n    const results = [];\n    \n    for (const center of centers) {\n      try {\n        const result = await this.createSOCenterAuth(center);\n        results.push(result);\n      } catch (error: any) {\n        results.push({\n          success: false,\n          centerId: center.centerId,\n          error: error.message\n        });\n      }\n    }\n    \n    return results;\n  }\n  \n  /**\n   * Check if SO Center already exists\n   * @param centerId SO Center ID to check\n   * @returns Boolean indicating existence\n   */\n  static async checkSOCenterExists(centerId: string): Promise<boolean> {\n    try {\n      const email = `${centerId.toLowerCase()}@navanidhi.org`;\n      const user = await storage.getUserByEmail(email);\n      return !!user;\n    } catch (error) {\n      return false;\n    }\n  }\n}","size_bytes":4169},"client/src/pages/Expenses.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { apiRequest } from '@/lib/queryClient';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport { PlusCircle, Receipt, Wallet, Calendar, Filter, DollarSign, Clock } from 'lucide-react';\n\ninterface ExpenseRequest {\n  id: string;\n  expenseType: 'rent' | 'electric_bill' | 'internet_bill' | 'so_salary' | 'others';\n  amount: string;\n  description?: string;\n  electricBillNumber?: string;\n  internetBillNumber?: string;\n  internetServiceProvider?: string;\n  serviceName?: string;\n  serviceDescription?: string;\n  servicePhone?: string;\n  status: 'pending' | 'approved' | 'rejected' | 'paid';\n  requestedAt: string;\n  approvedAt?: string;\n  paidAt?: string;\n  transactionId?: string;\n  paymentMethod?: string;\n  paymentReference?: string;\n}\n\ninterface ExpenseWallet {\n  totalExpenses: string;\n  remainingBalance: string;\n  lastUpdated: string;\n}\n\ninterface SOCenterData {\n  id: string;\n  centerId: string;\n  name: string;\n  ownerName?: string;\n  ownerPhone?: string;\n  rentAmount?: string;\n  electricBillAccountNumber?: string;\n  internetBillAccountNumber?: string;\n  internetServiceProvider?: string;\n}\n\nexport default function Expenses() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedExpenseType, setSelectedExpenseType] = useState<string>('');\n  const [showAddExpense, setShowAddExpense] = useState(false);\n  const [selectedFilter, setSelectedFilter] = useState<string>('all');\n  const [showPaymentModal, setShowPaymentModal] = useState(false);\n  const [selectedExpense, setSelectedExpense] = useState<ExpenseRequest | null>(null);\n  const [formData, setFormData] = useState<any>({});\n\n  // Fetch SO Center data for autofill\n  const { data: soCenterData } = useQuery({\n    queryKey: ['/api/so-center/profile'],\n  }) as { data: SOCenterData };\n\n  // Fetch expense requests\n  const { data: expenseRequests = [], isLoading: loadingExpenses } = useQuery({\n    queryKey: ['/api/so-center/expenses'],\n  }) as { data: ExpenseRequest[] };\n\n  // Fetch expense wallet\n  const { data: expenseWallet } = useQuery({\n    queryKey: ['/api/so-center/expense-wallet'],\n  }) as { data: ExpenseWallet };\n\n  // Create expense request mutation\n  const createExpenseMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/so-center/expenses', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Expense Request Submitted\",\n        description: \"Your expense request has been sent for admin approval.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/so-center/expenses'] });\n      setShowAddExpense(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Request Failed\",\n        description: error.message || \"Failed to submit expense request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mark as paid mutation\n  const markPaidMutation = useMutation({\n    mutationFn: async (data: { expenseId: string; paymentMethod: string; paymentReference?: string }) => {\n      const response = await apiRequest('POST', `/api/so-center/expenses/${data.expenseId}/pay`, {\n        paymentMethod: data.paymentMethod,\n        paymentReference: data.paymentReference,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Payment Recorded\",\n        description: `Payment recorded successfully. Transaction ID: ${data.transactionId}`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/so-center/expenses'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/so-center/expense-wallet'] });\n      setShowPaymentModal(false);\n      setSelectedExpense(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Payment Failed\",\n        description: error.message || \"Failed to record payment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setSelectedExpenseType('');\n    setFormData({});\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      pending: { label: 'Pending', variant: 'secondary' as const },\n      approved: { label: 'Approved', variant: 'default' as const },\n      rejected: { label: 'Rejected', variant: 'destructive' as const },\n      paid: { label: 'Paid', variant: 'success' as const },\n    };\n    \n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.pending;\n    return <Badge variant={config.variant === 'success' ? 'default' : config.variant}>{config.label}</Badge>;\n  };\n\n  const getExpenseTypeLabel = (type: string) => {\n    const labels = {\n      rent: 'Rent',\n      electric_bill: 'Electric Bill',\n      internet_bill: 'Internet Bill',\n      so_salary: 'SO Salary',\n      others: 'Others',\n    };\n    return labels[type as keyof typeof labels] || type;\n  };\n\n  const filteredExpenses = expenseRequests.filter(expense => {\n    if (selectedFilter === 'all') return true;\n    return expense.status === selectedFilter;\n  });\n\n  const ExpenseForm = () => {\n    const [formData, setFormData] = useState<any>(() => ({ expenseType: selectedExpenseType }));\n\n    React.useEffect(() => {\n      // Autofill based on expense type\n      if (selectedExpenseType && soCenterData) {\n        const autofillData: any = { expenseType: selectedExpenseType };\n        \n        switch (selectedExpenseType) {\n          case 'rent':\n            if (soCenterData.rentAmount) {\n              autofillData.amount = soCenterData.rentAmount;\n              autofillData.description = `Monthly rent for ${soCenterData.name}`;\n            }\n            break;\n          case 'electric_bill':\n            if (soCenterData.electricBillAccountNumber) {\n              autofillData.electricBillNumber = soCenterData.electricBillAccountNumber;\n              autofillData.description = 'Monthly electricity bill';\n            }\n            break;\n          case 'internet_bill':\n            if (soCenterData.internetBillAccountNumber) {\n              autofillData.internetBillNumber = soCenterData.internetBillAccountNumber;\n              autofillData.internetServiceProvider = soCenterData.internetServiceProvider || '';\n              autofillData.description = 'Monthly internet bill';\n            }\n            break;\n          case 'so_salary':\n            autofillData.description = `Salary request for ${soCenterData.centerId} - ${soCenterData.name}`;\n            break;\n        }\n        \n        setFormData((prev: any) => ({ ...prev, ...autofillData }));\n      }\n    }, [selectedExpenseType, soCenterData]);\n\n    const handleSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      createExpenseMutation.mutate(formData);\n    };\n\n    const handleInputChange = (field: string, value: string) => {\n      setFormData((prev: any) => ({ ...prev, [field]: value }));\n    };\n\n    return (\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        <div className=\"grid gap-4\">\n          <div>\n            <Label htmlFor=\"expenseType\">Expense Type</Label>\n            <Select value={selectedExpenseType} onValueChange={(value) => {\n              setSelectedExpenseType(value);\n              setFormData(prev => ({ ...prev, expenseType: value }));\n            }}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select expense type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"rent\">Rent</SelectItem>\n                <SelectItem value=\"electric_bill\">Electric Bill</SelectItem>\n                <SelectItem value=\"internet_bill\">Internet Bill</SelectItem>\n                <SelectItem value=\"so_salary\">SO Salary</SelectItem>\n                <SelectItem value=\"others\">Others</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {selectedExpenseType === 'electric_bill' && (\n            <>\n              <div>\n                <Label htmlFor=\"electricBillNumber\">Bill Number</Label>\n                <Input\n                  id=\"electricBillNumber\"\n                  value={formData.electricBillNumber || ''}\n                  disabled\n                  className=\"bg-gray-50 cursor-not-allowed\"\n                  placeholder=\"Bill number auto-filled from registration\"\n                />\n                {!formData.electricBillNumber && (\n                  <p className=\"text-sm text-red-500 mt-1\">\n                    Electric bill account number not found in registration data\n                  </p>\n                )}\n              </div>\n              <div>\n                <Label htmlFor=\"amount\">Amount</Label>\n                <Input\n                  id=\"amount\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={formData.amount || ''}\n                  onChange={(e) => handleInputChange('amount', e.target.value)}\n                  placeholder=\"Enter amount\"\n                  required\n                />\n              </div>\n            </>\n          )}\n\n          {selectedExpenseType === 'internet_bill' && (\n            <>\n              <div>\n                <Label htmlFor=\"internetBillNumber\">Bill Number</Label>\n                <Input\n                  id=\"internetBillNumber\"\n                  value={formData.internetBillNumber || ''}\n                  onChange={(e) => handleInputChange('internetBillNumber', e.target.value)}\n                  placeholder=\"Enter bill number\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"internetServiceProvider\">Service Provider</Label>\n                <Input\n                  id=\"internetServiceProvider\"\n                  value={formData.internetServiceProvider || ''}\n                  onChange={(e) => handleInputChange('internetServiceProvider', e.target.value)}\n                  placeholder=\"Enter service provider\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"amount\">Amount</Label>\n                <Input\n                  id=\"amount\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={formData.amount || ''}\n                  onChange={(e) => handleInputChange('amount', e.target.value)}\n                  placeholder=\"Enter amount\"\n                  required\n                />\n              </div>\n            </>\n          )}\n\n          {selectedExpenseType === 'rent' && (\n            <>\n              <div>\n                <Label>House Owner</Label>\n                <Input\n                  value={soCenterData?.ownerName || ''}\n                  disabled\n                  className=\"bg-gray-50\"\n                />\n              </div>\n              <div>\n                <Label>Owner Phone</Label>\n                <Input\n                  value={soCenterData?.ownerPhone || ''}\n                  disabled\n                  className=\"bg-gray-50\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"amount\">Rent Amount</Label>\n                <Input\n                  id=\"amount\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={formData.amount || ''}\n                  onChange={(e) => handleInputChange('amount', e.target.value)}\n                  placeholder=\"Enter rent amount\"\n                  required\n                />\n              </div>\n            </>\n          )}\n\n          {selectedExpenseType === 'so_salary' && (\n            <>\n              <div>\n                <Label>SO Center ID</Label>\n                <Input\n                  value={soCenterData?.centerId || ''}\n                  disabled\n                  className=\"bg-gray-50\"\n                />\n              </div>\n              <div>\n                <Label>SO Center Name</Label>\n                <Input\n                  value={soCenterData?.name || ''}\n                  disabled\n                  className=\"bg-gray-50\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"amount\">Salary Amount</Label>\n                <Input\n                  id=\"amount\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={formData.amount || ''}\n                  onChange={(e) => handleInputChange('amount', e.target.value)}\n                  placeholder=\"Enter salary amount\"\n                  required\n                />\n              </div>\n            </>\n          )}\n\n          {selectedExpenseType === 'others' && (\n            <>\n              <div>\n                <Label htmlFor=\"serviceName\">Service Name</Label>\n                <Input\n                  id=\"serviceName\"\n                  value={formData.serviceName || ''}\n                  onChange={(e) => handleInputChange('serviceName', e.target.value)}\n                  placeholder=\"Enter service name\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"serviceDescription\">What is the Service</Label>\n                <Textarea\n                  id=\"serviceDescription\"\n                  value={formData.serviceDescription || ''}\n                  onChange={(e) => handleInputChange('serviceDescription', e.target.value)}\n                  placeholder=\"Describe the service\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"amount\">Service Amount</Label>\n                <Input\n                  id=\"amount\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={formData.amount || ''}\n                  onChange={(e) => handleInputChange('amount', e.target.value)}\n                  placeholder=\"Enter service amount\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"servicePhone\">Phone Number</Label>\n                <Input\n                  id=\"servicePhone\"\n                  value={formData.servicePhone || ''}\n                  onChange={(e) => handleInputChange('servicePhone', e.target.value)}\n                  placeholder=\"Enter phone number\"\n                />\n              </div>\n            </>\n          )}\n\n          <div>\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea\n              id=\"description\"\n              value={formData.description || ''}\n              onChange={(e) => handleInputChange('description', e.target.value)}\n              placeholder=\"Additional notes\"\n            />\n          </div>\n        </div>\n\n        <div className=\"flex justify-end space-x-2\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={() => setShowAddExpense(false)}\n          >\n            Cancel\n          </Button>\n          <Button type=\"submit\" disabled={createExpenseMutation.isPending}>\n            {createExpenseMutation.isPending ? 'Submitting...' : 'Submit Request'}\n          </Button>\n        </div>\n      </form>\n    );\n  };\n\n  const PaymentModal = () => {\n    const [paymentMethod, setPaymentMethod] = useState<string>('');\n    const [paymentReference, setPaymentReference] = useState<string>('');\n\n    const handlePayment = () => {\n      if (!selectedExpense) return;\n      \n      markPaidMutation.mutate({\n        expenseId: selectedExpense.id,\n        paymentMethod,\n        paymentReference: paymentReference || undefined,\n      });\n    };\n\n    return (\n      <Dialog open={showPaymentModal} onOpenChange={setShowPaymentModal}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Record Payment</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label>Payment Method</Label>\n              <Select value={paymentMethod} onValueChange={setPaymentMethod}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select payment method\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"bill\">Bill</SelectItem>\n                  <SelectItem value=\"voucher\">Voucher</SelectItem>\n                  <SelectItem value=\"upi\">UPI</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {paymentMethod === 'bill' && (\n              <div>\n                <Label>Bill Number</Label>\n                <Input\n                  value={paymentReference}\n                  onChange={(e) => setPaymentReference(e.target.value)}\n                  placeholder=\"Enter bill number\"\n                />\n              </div>\n            )}\n\n            {paymentMethod === 'upi' && (\n              <div>\n                <Label>UPI Transaction ID</Label>\n                <Input\n                  value={paymentReference}\n                  onChange={(e) => setPaymentReference(e.target.value)}\n                  placeholder=\"Enter UPI transaction ID\"\n                />\n              </div>\n            )}\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button variant=\"outline\" onClick={() => setShowPaymentModal(false)}>\n                Cancel\n              </Button>\n              <Button \n                onClick={handlePayment}\n                disabled={markPaidMutation.isPending || !paymentMethod}\n              >\n                {markPaidMutation.isPending ? 'Recording...' : 'Record Payment'}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  };\n\n  return (\n    <DashboardLayout title=\"Expenses Management\">\n      <div className=\"container mx-auto p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Expenses Management</h1>\n          <p className=\"text-gray-600 dark:text-gray-300 mt-1\">Manage your SO Center expenses and track payments</p>\n        </div>\n        <Dialog open={showAddExpense} onOpenChange={setShowAddExpense}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white\">\n              <PlusCircle className=\"w-4 h-4 mr-2\" />\n              Add Expense\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Add New Expense Request</DialogTitle>\n            </DialogHeader>\n            <ExpenseForm />\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Expense Wallet Summary */}\n      {expenseWallet && (\n        <div className=\"grid md:grid-cols-3 gap-6 mb-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Expenses</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600\">₹{parseFloat(expenseWallet.totalExpenses).toFixed(2)}</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Remaining Balance</CardTitle>\n              <Wallet className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className={`text-2xl font-bold ${parseFloat(expenseWallet.remainingBalance) >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                ₹{parseFloat(expenseWallet.remainingBalance).toFixed(2)}\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Last Updated</CardTitle>\n              <Clock className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {new Date(expenseWallet.lastUpdated).toLocaleDateString()}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Expense Requests */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex justify-between items-center\">\n            <CardTitle>Expense Requests</CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <Filter className=\"w-4 h-4\" />\n              <Select value={selectedFilter} onValueChange={setSelectedFilter}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"approved\">Approved</SelectItem>\n                  <SelectItem value=\"paid\">Paid</SelectItem>\n                  <SelectItem value=\"rejected\">Rejected</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {loadingExpenses ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n            </div>\n          ) : filteredExpenses.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              No expense requests found\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {filteredExpenses.map((expense) => (\n                <div key={expense.id} className=\"border rounded-lg p-4 hover:shadow-md transition-shadow\">\n                  <div className=\"flex justify-between items-start\">\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <h3 className=\"font-semibold\">{getExpenseTypeLabel(expense.expenseType)}</h3>\n                        {getStatusBadge(expense.status)}\n                      </div>\n                      <p className=\"text-2xl font-bold text-green-600\">₹{parseFloat(expense.amount).toFixed(2)}</p>\n                      {expense.description && (\n                        <p className=\"text-sm text-gray-600\">{expense.description}</p>\n                      )}\n                      <div className=\"text-xs text-gray-500\">\n                        Requested: {new Date(expense.requestedAt).toLocaleString()}\n                        {expense.approvedAt && (\n                          <span className=\"ml-4\">\n                            Approved: {new Date(expense.approvedAt).toLocaleString()}\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col items-end space-y-2\">\n                      {expense.status === 'approved' && (\n                        <Button\n                          size=\"sm\"\n                          onClick={() => {\n                            setSelectedExpense(expense);\n                            setShowPaymentModal(true);\n                          }}\n                          className=\"bg-green-600 hover:bg-green-700\"\n                        >\n                          <Receipt className=\"w-4 h-4 mr-1\" />\n                          Mark as Paid\n                        </Button>\n                      )}\n                      {expense.status === 'paid' && expense.transactionId && (\n                        <div className=\"text-xs text-right\">\n                          <div>Transaction ID:</div>\n                          <div className=\"font-mono\">{expense.transactionId}</div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <PaymentModal />\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":24954},"client/src/components/admin/EditSoCenterModal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useMutation, useQueryClient, useQuery } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Badge } from '@/components/ui/badge';\n\nconst editSoCenterSchema = z.object({\n  name: z.string().min(1, 'Center name is required'),\n  phone: z.string().min(10, 'Phone number must be at least 10 digits'),\n  address: z.string().min(1, 'Address is required'),\n  villageId: z.string().min(1, 'Village selection is required'),\n  managerId: z.string().optional(),\n  ownerName: z.string().optional(),\n  ownerLastName: z.string().optional(),\n  ownerFatherName: z.string().optional(),\n  ownerMotherName: z.string().optional(),\n  ownerPhone: z.string().optional(),\n  landmarks: z.string().optional(),\n  roomSize: z.string().optional(),\n  rentAmount: z.string().optional(),\n  rentalAdvance: z.string().optional(),\n  dateOfHouseTaken: z.string().optional(),\n  monthlyRentDate: z.number().min(1).max(31).optional(),\n  electricBillAccountNumber: z.string().optional(),\n  internetBillAccountNumber: z.string().optional(),\n  capacity: z.number().min(1).optional(),\n  facilities: z.array(z.string()).optional(),\n  isActive: z.boolean(),\n});\n\ntype EditSoCenterFormData = z.infer<typeof editSoCenterSchema>;\n\ninterface EditSoCenterModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  center: any;\n}\n\nconst facilityOptions = [\n  'Air Conditioning',\n  'WiFi Internet',\n  'Backup Power',\n  'Water Supply',\n  'Parking',\n  'Security',\n  'Furniture',\n  'Whiteboard',\n  'Projector',\n  'Library'\n];\n\nexport function EditSoCenterModal({ isOpen, onClose, center }: EditSoCenterModalProps) {\n  const [selectedState, setSelectedState] = useState('');\n  const [selectedDistrict, setSelectedDistrict] = useState('');\n  const [selectedMandal, setSelectedMandal] = useState('');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<EditSoCenterFormData>({\n    resolver: zodResolver(editSoCenterSchema),\n    defaultValues: {\n      name: '',\n      phone: '',\n      address: '',\n      villageId: '',\n      managerId: '',\n      ownerName: '',\n      ownerLastName: '',\n      ownerFatherName: '',\n      ownerMotherName: '',\n      ownerPhone: '',\n      landmarks: '',\n      roomSize: '',\n      rentAmount: '',\n      rentalAdvance: '',\n      dateOfHouseTaken: '',\n      monthlyRentDate: undefined,\n      electricBillAccountNumber: '',\n      internetBillAccountNumber: '',\n      capacity: undefined,\n      facilities: [],\n      isActive: true,\n    },\n  });\n\n  // Fetch location data\n  const { data: states = [] } = useQuery({\n    queryKey: ['/api/admin/addresses/states'],\n  });\n\n  const { data: districts = [] } = useQuery({\n    queryKey: ['/api/admin/addresses/districts'],\n  });\n\n  const { data: mandals = [] } = useQuery({\n    queryKey: ['/api/admin/addresses/mandals'],\n  });\n\n  const { data: villages = [] } = useQuery({\n    queryKey: ['/api/admin/addresses/villages'],\n  });\n\n  // FIXED: Use dedicated endpoint that fetches available managers for editing (includes current manager)\n  const { data: managers = [] } = useQuery<any[]>({\n    queryKey: [`/api/admin/users/available-managers/${center?.id}`],\n    enabled: isOpen && !!center?.id,\n  });\n\n  // Filter location data based on selections\n  const filteredDistricts = districts.filter((district: any) => district.stateId === selectedState);\n  const filteredMandals = mandals.filter((mandal: any) => mandal.districtId === selectedDistrict);\n  const filteredVillages = villages.filter((village: any) => village.mandalId === selectedMandal);\n\n  // Update form when center changes\n  useEffect(() => {\n    if (center && isOpen) {\n      form.reset({\n        name: center.name || '',\n        phone: center.phone || '',\n        address: center.address || '',\n        villageId: center.villageId || center.village_id || '',\n        managerId: center.managerId || center.manager_id || '',\n        ownerName: center.ownerName || center.owner_name || '',\n        ownerLastName: center.ownerLastName || center.owner_last_name || '',\n        ownerFatherName: center.ownerFatherName || center.owner_father_name || '',\n        ownerMotherName: center.ownerMotherName || center.owner_mother_name || '',\n        ownerPhone: center.ownerPhone || center.owner_phone || '',\n        landmarks: center.landmarks || '',\n        roomSize: center.roomSize || center.room_size || '',\n        rentAmount: center.rentAmount || center.rent_amount || '',\n        rentalAdvance: center.rentalAdvance || center.rental_advance || '',\n        dateOfHouseTaken: center.dateOfHouseTaken || center.date_of_house_taken || '',\n        monthlyRentDate: center.monthlyRentDate || center.monthly_rent_date || undefined,\n        electricBillAccountNumber: center.electricBillAccountNumber || center.electric_bill_account_number || '',\n        internetBillAccountNumber: center.internetBillAccountNumber || center.internet_bill_account_number || '',\n        capacity: center.capacity || undefined,\n        facilities: center.facilities || [],\n        isActive: center.isActive !== false && center.is_active !== false,\n      });\n\n      // Set location selections based on village\n      if (center.villageId || center.village_id) {\n        const village = villages.find((v: any) => v.id === (center.villageId || center.village_id));\n        if (village) {\n          const mandal = mandals.find((m: any) => m.id === village.mandalId);\n          if (mandal) {\n            const district = districts.find((d: any) => d.id === mandal.districtId);\n            if (district) {\n              const state = states.find((s: any) => s.id === district.stateId);\n              if (state) {\n                setSelectedState(state.id);\n                setSelectedDistrict(district.id);\n                setSelectedMandal(mandal.id);\n              }\n            }\n          }\n        }\n      }\n    }\n  }, [center, isOpen, form, villages, mandals, districts, states]);\n\n  // Handle location changes\n  const handleStateChange = (stateId: string) => {\n    setSelectedState(stateId);\n    setSelectedDistrict('');\n    setSelectedMandal('');\n    form.setValue('villageId', '');\n  };\n\n  const handleDistrictChange = (districtId: string) => {\n    setSelectedDistrict(districtId);\n    setSelectedMandal('');\n    form.setValue('villageId', '');\n  };\n\n  const handleMandalChange = (mandalId: string) => {\n    setSelectedMandal(mandalId);\n    form.setValue('villageId', '');\n  };\n\n  // Update SO Center mutation\n  const updateCenterMutation = useMutation({\n    mutationFn: async (data: EditSoCenterFormData) => {\n      return apiRequest('PUT', `/api/admin/so-centers/${center.id}`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'SO Center Updated',\n        description: 'SO Center details have been successfully updated.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/so-centers'] });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to update SO center.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: EditSoCenterFormData) => {\n    updateCenterMutation.mutate(data);\n  };\n\n  const handleFacilityChange = (facility: string, checked: boolean) => {\n    const currentFacilities = form.getValues('facilities') || [];\n    if (checked) {\n      form.setValue('facilities', [...currentFacilities, facility]);\n    } else {\n      form.setValue('facilities', currentFacilities.filter(f => f !== facility));\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Edit SO Center</DialogTitle>\n          <DialogDescription>\n            Update SO Center information. Center ID, Email, and Wallet Balance cannot be modified.\n          </DialogDescription>\n        </DialogHeader>\n\n        {center && (\n          <div className=\"mb-4 p-3 bg-gray-50 rounded-lg\">\n            <div className=\"grid grid-cols-3 gap-4 text-sm\">\n              <div>\n                <span className=\"font-medium text-gray-600\">Center ID:</span>\n                <p className=\"font-semibold\">{center.centerId || center.center_id}</p>\n              </div>\n              <div>\n                <span className=\"font-medium text-gray-600\">Email:</span>\n                <p className=\"font-semibold\">{center.email}</p>\n              </div>\n              <div>\n                <span className=\"font-medium text-gray-600\">Wallet Balance:</span>\n                <p className=\"font-semibold text-green-600\">₹{(parseFloat(center.walletBalance || center.wallet_balance) || 0).toLocaleString()}</p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Basic Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Basic Information</h3>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Center Name *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter center name\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone Number *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter phone number\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"managerId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>SO Study Organizer</FormLabel>\n                    <FormControl>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select SO Study Organizer\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {managers.map((manager: any) => (\n                            <SelectItem key={manager.id} value={manager.id}>\n                              {manager.name} ({manager.email})\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Location Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Location Information</h3>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">State *</label>\n                  <Select onValueChange={handleStateChange} value={selectedState}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select state\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {states.map((state: any) => (\n                        <SelectItem key={state.id} value={state.id}>\n                          {state.name} ({state.code})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">District *</label>\n                  <Select onValueChange={handleDistrictChange} value={selectedDistrict} disabled={!selectedState}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select district\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {filteredDistricts.map((district: any) => (\n                        <SelectItem key={district.id} value={district.id}>\n                          {district.name} ({district.code})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-700\">Mandal *</label>\n                  <Select onValueChange={handleMandalChange} value={selectedMandal} disabled={!selectedDistrict}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select mandal\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {filteredMandals.map((mandal: any) => (\n                        <SelectItem key={mandal.id} value={mandal.id}>\n                          {mandal.name} ({mandal.code})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"villageId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Village *</FormLabel>\n                      <FormControl>\n                        <Select onValueChange={field.onChange} value={field.value} disabled={!selectedMandal}>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select village\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {filteredVillages.map((village: any) => (\n                              <SelectItem key={village.id} value={village.id}>\n                                {village.name} ({village.code})\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Complete Address *</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Enter complete address with street, landmarks, building details\"\n                        className=\"resize-none\"\n                        rows={3}\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"landmarks\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Landmarks</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Nearby landmarks or reference points\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Property Owner Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Property Owner Information</h3>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"ownerName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Owner First Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter owner first name\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"ownerLastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Owner Last Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter owner last name\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"ownerFatherName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Owner's Father Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter owner's father name\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"ownerMotherName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Owner's Mother Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter owner's mother name\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"ownerPhone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Owner Phone</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter owner phone number\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Property Details */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Property & Financial Details</h3>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"roomSize\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Room Size</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g., 20x15 feet\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"capacity\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Student Capacity</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          placeholder=\"Maximum students\"\n                          {...field}\n                          onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"rentAmount\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Monthly Rent Amount</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter monthly rent\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"rentalAdvance\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Rental Advance Paid</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter advance amount\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"dateOfHouseTaken\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>House Taken Date</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"date\" \n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"monthlyRentDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Monthly Rent Due Date</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\"\n                          min=\"1\"\n                          max=\"31\" \n                          placeholder=\"Day of month (1-31)\"\n                          {...field}\n                          onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : undefined)}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"electricBillAccountNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Electric Bill Account Number</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter electric bill account number\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"internetBillAccountNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Internet Bill Account Number</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter internet bill account number\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Facilities */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Facilities Available</h3>\n              <div className=\"grid grid-cols-3 gap-3\">\n                {facilityOptions.map((facility) => (\n                  <div key={facility} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      checked={(form.watch('facilities') || []).includes(facility)}\n                      onCheckedChange={(checked) => handleFacilityChange(facility, checked as boolean)}\n                    />\n                    <label className=\"text-sm\">{facility}</label>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Status */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Status</h3>\n              <FormField\n                control={form.control}\n                name=\"isActive\"\n                render={({ field }) => (\n                  <FormItem className=\"flex items-center space-x-2\">\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                      />\n                    </FormControl>\n                    <FormLabel>SO Center is Active</FormLabel>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-4 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={updateCenterMutation.isPending}>\n                {updateCenterMutation.isPending ? 'Updating...' : 'Update SO Center'}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":26786},"client/src/pages/admin/Students.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { \n  Dialog, \n  DialogContent, \n  DialogHeader, \n  DialogTitle, \n  DialogDescription \n} from '@/components/ui/dialog';\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { \n  Search, \n  Eye, \n  Filter,\n  MapPin,\n  School,\n  Users,\n  Phone,\n  Calendar,\n  User,\n  CreditCard,\n  GraduationCap,\n  Home,\n  FileText,\n  Plus,\n  Download,\n  BarChart3,\n  TrendingUp,\n  Activity,\n  BookOpen,\n  ClipboardCheck,\n  AlertTriangle\n} from 'lucide-react';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  PieChart,\n  Pie,\n  Cell,\n  LineChart,\n  Line,\n  ResponsiveContainer\n} from 'recharts';\n\nexport default function Students() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedState, setSelectedState] = useState('all');\n  const [selectedDistrict, setSelectedDistrict] = useState('all');\n  const [selectedMandal, setSelectedMandal] = useState('all');\n  const [selectedVillage, setSelectedVillage] = useState('all');\n  const [selectedCenter, setSelectedCenter] = useState('all');\n  const [selectedClass, setSelectedClass] = useState('all');\n  const [selectedStudent, setSelectedStudent] = useState<any>(null);\n  const { toast } = useToast();\n\n  // Fetch students data\n  const { data: students = [], isLoading } = useQuery({\n    queryKey: ['/api/admin/students'],\n  });\n\n  // Fetch filter options\n  const { data: states = [] } = useQuery({\n    queryKey: ['/api/admin/addresses/states'],\n  });\n\n  const { data: districts = [] } = useQuery({\n    queryKey: ['/api/admin/addresses/districts'],\n  });\n\n  const { data: mandals = [] } = useQuery({\n    queryKey: ['/api/admin/addresses/mandals'],\n  });\n\n  const { data: villages = [] } = useQuery({\n    queryKey: ['/api/admin/addresses/villages'],\n  });\n\n  const { data: soCenters = [] } = useQuery({\n    queryKey: ['/api/admin/so-centers'],\n  });\n\n  const { data: classes = [] } = useQuery({\n    queryKey: ['/api/classes'],\n  });\n\n  // Filter location data based on selections\n  const filteredDistricts = (districts as any[]).filter((district: any) => \n    selectedState === 'all' || district.stateId === selectedState\n  );\n\n  const filteredMandals = (mandals as any[]).filter((mandal: any) => \n    selectedDistrict === 'all' || mandal.districtId === selectedDistrict\n  );\n\n  const filteredVillages = (villages as any[]).filter((village: any) => \n    selectedMandal === 'all' || village.mandalId === selectedMandal\n  );\n\n  const filteredSoCenters = (soCenters as any[]).filter((center: any) => {\n    if (selectedState === 'all' && selectedDistrict === 'all' && selectedMandal === 'all' && selectedVillage === 'all') {\n      return true;\n    }\n\n    // Use the joined location data from the center\n    const stateMatch = selectedState === 'all' || center.stateName === (states as any[]).find(s => s.id === selectedState)?.name;\n    const districtMatch = selectedDistrict === 'all' || center.districtName === (districts as any[]).find(d => d.id === selectedDistrict)?.name;\n    const mandalMatch = selectedMandal === 'all' || center.mandalName === (mandals as any[]).find(m => m.id === selectedMandal)?.name;\n    const villageMatch = selectedVillage === 'all' || center.villageName === (villages as any[]).find(v => v.id === selectedVillage)?.name;\n\n    return stateMatch && districtMatch && mandalMatch && villageMatch;\n  });\n\n  // Filter students based on search, class, and location\n  const filteredStudents = (students as any[]).filter((student: any) => {\n    // Enhanced search including SO Center and location information\n    const studentCenter = (soCenters as any[]).find(c => c.id === student.soCenterId);\n    const matchesSearch = !searchTerm || \n      student.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      student.studentId?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      student.fatherMobile?.includes(searchTerm) ||\n      student.motherMobile?.includes(searchTerm) ||\n      student.fatherName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      student.motherName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      studentCenter?.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      studentCenter?.centerId?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      studentCenter?.villageName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      studentCenter?.mandalName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      studentCenter?.districtName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      studentCenter?.stateName?.toLowerCase().includes(searchTerm.toLowerCase());\n\n    const matchesClass = selectedClass === 'all' || student.classId === selectedClass;\n    const matchesCenter = selectedCenter === 'all' || student.soCenterId === selectedCenter;\n\n    // Location-based filtering through student's SO center\n    let matchesLocation = true;\n    if (selectedState !== 'all' || selectedDistrict !== 'all' || selectedMandal !== 'all' || selectedVillage !== 'all') {\n      if (studentCenter) {\n        const stateMatch = selectedState === 'all' || studentCenter.stateName === (states as any[]).find(s => s.id === selectedState)?.name;\n        const districtMatch = selectedDistrict === 'all' || studentCenter.districtName === (districts as any[]).find(d => d.id === selectedDistrict)?.name;\n        const mandalMatch = selectedMandal === 'all' || studentCenter.mandalName === (mandals as any[]).find(m => m.id === selectedMandal)?.name;\n        const villageMatch = selectedVillage === 'all' || studentCenter.villageName === (villages as any[]).find(v => v.id === selectedVillage)?.name;\n        matchesLocation = stateMatch && districtMatch && mandalMatch && villageMatch;\n      } else {\n        matchesLocation = false;\n      }\n    }\n\n    return matchesSearch && matchesClass && matchesCenter && matchesLocation;\n  });\n\n  const handleStateChange = (stateId: string) => {\n    setSelectedState(stateId);\n    setSelectedDistrict('all');\n    setSelectedMandal('all');\n    setSelectedVillage('all');\n    setSelectedCenter('all');\n  };\n\n  const handleDistrictChange = (districtId: string) => {\n    setSelectedDistrict(districtId);\n    setSelectedMandal('all');\n    setSelectedVillage('all');\n    setSelectedCenter('all');\n  };\n\n  const handleMandalChange = (mandalId: string) => {\n    setSelectedMandal(mandalId);\n    setSelectedVillage('all');\n    setSelectedCenter('all');\n  };\n\n  const handleVillageChange = (villageId: string) => {\n    setSelectedVillage(villageId);\n    setSelectedCenter('all');\n  };\n\n  const handleViewStudent = (student: any) => {\n    setSelectedStudent(student);\n  };\n\n  const clearFilters = () => {\n    setSearchTerm('');\n    setSelectedState('all');\n    setSelectedDistrict('all');\n    setSelectedMandal('all');\n    setSelectedVillage('all');\n    setSelectedCenter('all');\n    setSelectedClass('all');\n  };\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return 'N/A';\n    return new Date(dateString).toLocaleDateString('en-GB');\n  };\n\n  const formatCurrency = (amount: any) => {\n    return `₹${(parseFloat(amount) || 0).toLocaleString()}`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"bg-white rounded-lg shadow-lg p-6\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Student Management</h1>\n              <p className=\"text-gray-600 mt-2\">Manage all students across the system</p>\n            </div>\n            <Badge variant=\"outline\" className=\"text-lg px-4 py-2\">\n              {filteredStudents.length} Students\n            </Badge>\n          </div>\n        </div>\n\n        {/* Location Filters Section */}\n        <Card className=\"p-6\">\n          <div className=\"mb-4\">\n            <h3 className=\"text-lg font-semibold mb-4 text-gray-900 flex items-center\">\n              <MapPin className=\"h-5 w-5 mr-2 text-blue-600\" />\n              Location Filters\n            </h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              {/* State Filter */}\n              <Select onValueChange={handleStateChange} value={selectedState}>\n                <SelectTrigger className=\"bg-white border-2 border-gray-300 focus:border-blue-500\">\n                  <SelectValue placeholder=\"🏛️ Select State\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All States</SelectItem>\n                  {(states as any[]).map((state: any) => (\n                    <SelectItem key={state.id} value={state.id}>\n                      {state.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              {/* District Filter */}\n              <Select \n                onValueChange={handleDistrictChange} \n                value={selectedDistrict}\n                disabled={selectedState === 'all'}\n              >\n                <SelectTrigger className=\"bg-white border-2 border-gray-300 focus:border-blue-500\">\n                  <SelectValue placeholder=\"🏘️ Select District\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Districts</SelectItem>\n                  {filteredDistricts.map((district: any) => (\n                    <SelectItem key={district.id} value={district.id}>\n                      {district.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              {/* Mandal Filter */}\n              <Select \n                onValueChange={handleMandalChange} \n                value={selectedMandal}\n                disabled={selectedDistrict === 'all'}\n              >\n                <SelectTrigger className=\"bg-white border-2 border-gray-300 focus:border-blue-500\">\n                  <SelectValue placeholder=\"🏛️ Select Mandal\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Mandals</SelectItem>\n                  {filteredMandals.map((mandal: any) => (\n                    <SelectItem key={mandal.id} value={mandal.id}>\n                      {mandal.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              {/* Village Filter */}\n              <Select \n                onValueChange={handleVillageChange} \n                value={selectedVillage}\n                disabled={selectedMandal === 'all'}\n              >\n                <SelectTrigger className=\"bg-white border-2 border-gray-300 focus:border-blue-500\">\n                  <SelectValue placeholder=\"🏘️ Select Village\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Villages</SelectItem>\n                  {filteredVillages.map((village: any) => (\n                    <SelectItem key={village.id} value={village.id}>\n                      {village.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Clear Filters Button */}\n            <div className=\"mt-4 flex justify-end\">\n              <Button \n                variant=\"outline\" \n                onClick={clearFilters}\n                className=\"flex items-center gap-2\"\n              >\n                <Filter className=\"h-4 w-4\" />\n                Clear All Filters\n              </Button>\n            </div>\n          </div>\n        </Card>\n\n        {/* Search and Actions Bar */}\n        <Card className=\"p-6\">\n          <div className=\"flex flex-col md:flex-row gap-4 items-center justify-between\">\n            {/* Left side - Search */}\n            <div className=\"relative flex-1 max-w-md\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Search by name, student ID, phone, or father's name...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n\n            {/* Right side - Filters and Actions */}\n            <div className=\"flex gap-3 items-center\">\n              {/* SO Center Filter */}\n              <Select onValueChange={setSelectedCenter} value={selectedCenter}>\n                <SelectTrigger className=\"w-[180px]\">\n                  <SelectValue placeholder=\"All SO Centers\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All SO Centers</SelectItem>\n                  {filteredSoCenters.map((center: any) => (\n                    <SelectItem key={center.id} value={center.id}>\n                      {center.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              {/* Class Filter */}\n              <Select onValueChange={setSelectedClass} value={selectedClass}>\n                <SelectTrigger className=\"w-[150px]\">\n                  <SelectValue placeholder=\"All Classes\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Classes</SelectItem>\n                  {(classes as any[]).map((cls: any) => (\n                    <SelectItem key={cls.id} value={cls.id}>\n                      {cls.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              {/* Add Student Button */}\n              <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Student\n              </Button>\n\n              {/* Export CSV Button */}\n              <Button variant=\"outline\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export CSV\n              </Button>\n            </div>\n          </div>\n        </Card>\n\n        {/* Students Table */}\n        <Card>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b border-gray-200\">\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Student</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Contact</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Academic</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Status</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Actions</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y divide-gray-200\">\n                {filteredStudents.map((student: any) => {\n                  const studentClass = (classes as any[]).find(c => c.id === student.classId);\n                  const studentCenter = (soCenters as any[]).find(c => c.id === student.soCenterId);\n\n                  return (\n                    <tr key={student.id} className=\"hover:bg-gray-50\">\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"flex items-center\">\n                          <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full flex items-center justify-center text-white font-bold\">\n                            {student.name?.charAt(0)?.toUpperCase() || 'S'}\n                          </div>\n                          <div className=\"ml-4\">\n                            <div className=\"text-sm font-medium text-gray-900\">{student.name}</div>\n                            <div className=\"text-sm text-gray-500\">ID: {student.studentId}</div>\n                          </div>\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"text-sm text-gray-900\">{student.fatherName || student.motherName || 'N/A'}</div>\n                        <div className=\"text-sm text-gray-500\">{student.fatherMobile || student.motherMobile || 'N/A'}</div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"text-sm font-medium text-gray-900\">{studentClass?.name || 'N/A'}</div>\n                        <div className=\"text-sm text-gray-500\">\n                          {student.feeType === 'monthly' ? 'monthly' : 'yearly'} •\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <span className=\"inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800\">\n                          Active\n                        </span>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => setSelectedStudent(student)}\n                          className=\"flex items-center gap-2 text-blue-600 hover:text-blue-800\"\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                          View Details\n                        </Button>\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        </Card>\n\n        {filteredStudents.length === 0 && (\n          <Card className=\"p-12 text-center\">\n            <Users className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Students Found</h3>\n            <p className=\"text-gray-600\">Try adjusting your search criteria or filters.</p>\n          </Card>\n        )}\n      </div>\n\n      {/* Enhanced Student Details Modal */}\n      {selectedStudent && <StudentDetailsModal student={selectedStudent} onClose={() => setSelectedStudent(null)} />}\n    </div>\n  );\n}\n\n// Color scheme for charts\nconst CHART_COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\n\n// Student Details Modal Component\nfunction StudentDetailsModal({ student, onClose }: { student: any; onClose: () => void }) {\n  // Fetch detailed student data\n  const { data: studentDetails, isLoading: loadingDetails } = useQuery({\n    queryKey: [`/api/students/${student.id}`],\n    enabled: !!student.id,\n  });\n\n  const { data: progressData, isLoading: loadingProgress } = useQuery({\n    queryKey: [`/api/progress-tracking/student/${student.id}`],\n    enabled: !!student.id,\n  });\n\n  const { data: attendanceData, isLoading: loadingAttendance } = useQuery({\n    queryKey: [`/api/attendance/student/${student.id}`],\n    enabled: !!student.id,\n  });\n\n  const isLoading = loadingDetails || loadingProgress || loadingAttendance;\n\n  // Format date utility\n  const formatDate = (dateStr: string) => {\n    if (!dateStr) return 'N/A';\n    return new Date(dateStr).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  // Prepare attendance pie chart data\n  const attendancePieData = (attendanceData as any)?.presentDays ? [\n    { name: 'Present', value: (attendanceData as any).presentDays, color: '#00C49F' },\n    { name: 'Absent', value: (attendanceData as any).absentDays, color: '#FF8042' }\n  ] : [];\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2 text-xl\">\n            <User className=\"h-6 w-6\" />\n            {(studentDetails as any)?.name || student.name} - Detailed Profile\n          </DialogTitle>\n          <DialogDescription>\n            Comprehensive academic and personal information for student ID: {(studentDetails as any)?.studentCode || student.studentId}\n          </DialogDescription>\n        </DialogHeader>\n\n        {isLoading ? (\n          <div className=\"space-y-4\">\n            <Skeleton className=\"h-8 w-full\" />\n            <Skeleton className=\"h-32 w-full\" />\n            <Skeleton className=\"h-48 w-full\" />\n          </div>\n        ) : !studentDetails ? (\n          <div className=\"flex items-center justify-center py-12\">\n            <div className=\"text-center\">\n              <AlertTriangle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n              <p className=\"text-lg font-medium text-gray-900 mb-2\">Student details not available</p>\n              <p className=\"text-gray-600\">Unable to retrieve student information at this time.</p>\n            </div>\n          </div>\n        ) : (\n          <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"overview\" className=\"flex items-center gap-2\">\n                <User className=\"h-4 w-4\" />\n                Overview\n              </TabsTrigger>\n              <TabsTrigger value=\"progress\" className=\"flex items-center gap-2\">\n                <BarChart3 className=\"h-4 w-4\" />\n                Progress\n              </TabsTrigger>\n              <TabsTrigger value=\"activities\" className=\"flex items-center gap-2\">\n                <Activity className=\"h-4 w-4\" />\n                Activities\n              </TabsTrigger>\n            </TabsList>\n\n            {/* Overview Tab */}\n            <TabsContent value=\"overview\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Basic Information */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <User className=\"h-5 w-5\" />\n                      Basic Information\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <p className=\"font-medium text-gray-600 mb-1\">Full Name</p>\n                        <p className=\"text-gray-900\">{(studentDetails as any)?.name || 'N/A'}</p>\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-gray-600 mb-1\">Student ID</p>\n                        <p className=\"text-gray-900 font-mono\">{(studentDetails as any)?.studentCode || 'N/A'}</p>\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-gray-600 mb-1\">Date of Birth</p>\n                        <p className=\"text-gray-900\">{formatDate((studentDetails as any)?.dateOfBirth)}</p>\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-gray-600 mb-1\">Enrollment Date</p>\n                        <p className=\"text-gray-900\">{formatDate((studentDetails as any)?.enrollmentDate)}</p>\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-gray-600 mb-1\">Class</p>\n                        <p className=\"text-gray-900\">{(studentDetails as any)?.className || 'N/A'}</p>\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-gray-600 mb-1\">SO Center</p>\n                        <p className=\"text-gray-900\">{(studentDetails as any)?.soCenterName || 'N/A'}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Contact Information */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Phone className=\"h-5 w-5\" />\n                      Contact Information\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"space-y-3 text-sm\">\n                      <div>\n                        <p className=\"font-medium text-gray-600 mb-1\">Student Phone</p>\n                        <p className=\"text-gray-900\">{(studentDetails as any)?.phone || 'N/A'}</p>\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-gray-600 mb-1\">Parent/Guardian Phone</p>\n                        <p className=\"text-gray-900\">{(studentDetails as any)?.parentPhone || 'N/A'}</p>\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-gray-600 mb-1\">Email</p>\n                        <p className=\"text-gray-900\">{(studentDetails as any)?.email || 'N/A'}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Location Information */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <MapPin className=\"h-5 w-5\" />\n                      Location Details\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3 text-sm\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <p className=\"font-medium text-gray-600 mb-1\">State</p>\n                        <p className=\"text-gray-900\">{(studentDetails as any)?.location?.state || 'N/A'}</p>\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-gray-600 mb-1\">District</p>\n                        <p className=\"text-gray-900\">{(studentDetails as any)?.location?.district || 'N/A'}</p>\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-gray-600 mb-1\">Mandal</p>\n                        <p className=\"text-gray-900\">{(studentDetails as any)?.location?.mandal || 'N/A'}</p>\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-gray-600 mb-1\">Village</p>\n                        <p className=\"text-gray-900\">{(studentDetails as any)?.location?.village || 'N/A'}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Attendance Summary */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <ClipboardCheck className=\"h-5 w-5\" />\n                      Attendance Summary\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {(attendanceData as any)?.attendancePercentage !== undefined ? (\n                      <div className=\"space-y-4\">\n                        <div className=\"text-center\">\n                          <div className=\"text-3xl font-bold text-green-600\">\n                            {(attendanceData as any).attendancePercentage}%\n                          </div>\n                          <p className=\"text-sm text-gray-600\">Overall Attendance</p>\n                        </div>\n                        \n                        <div className=\"h-48 w-full\">\n                          <ResponsiveContainer width=\"100%\" height=\"100%\">\n                            <PieChart>\n                              <Pie\n                                data={attendancePieData}\n                                cx=\"50%\"\n                                cy=\"50%\"\n                                outerRadius={60}\n                                dataKey=\"value\"\n                                label={({ name, value, percent }) => `${name}: ${value} (${(percent * 100).toFixed(1)}%)`}\n                              >\n                                {attendancePieData.map((entry, index) => (\n                                  <Cell key={`cell-${index}`} fill={entry.color} />\n                                ))}\n                              </Pie>\n                              <Tooltip />\n                            </PieChart>\n                          </ResponsiveContainer>\n                        </div>\n\n                        <div className=\"grid grid-cols-3 gap-4 text-center text-sm\">\n                          <div>\n                            <p className=\"font-medium text-gray-600\">Total Days</p>\n                            <p className=\"text-lg font-bold text-blue-600\">{(attendanceData as any).totalDays || 0}</p>\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-gray-600\">Present</p>\n                            <p className=\"text-lg font-bold text-green-600\">{(attendanceData as any).presentDays || 0}</p>\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-gray-600\">Absent</p>\n                            <p className=\"text-lg font-bold text-red-600\">{(attendanceData as any).absentDays || 0}</p>\n                          </div>\n                        </div>\n                      </div>\n                    ) : (\n                      <p className=\"text-gray-500 text-center py-4\">No attendance data available</p>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            {/* Progress Tab */}\n            <TabsContent value=\"progress\" className=\"space-y-6\">\n              {(progressData as any)?.subjectData?.length > 0 ? (\n                <div className=\"space-y-6\">\n                  {/* Subject-wise Performance Bar Chart */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <BarChart3 className=\"h-5 w-5\" />\n                        Subject-wise Performance\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"h-80 w-full\">\n                        <ResponsiveContainer width=\"100%\" height=\"100%\">\n                          <BarChart data={(progressData as any).subjectData} margin={{ top: 20, right: 30, left: 20, bottom: 60 }}>\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis \n                              dataKey=\"subject\" \n                              angle={-45}\n                              textAnchor=\"end\"\n                              height={80}\n                              interval={0}\n                            />\n                            <YAxis domain={[0, 100]} />\n                            <Tooltip />\n                            <Bar dataKey=\"homeworkPercentage\" fill=\"#0088FE\" name=\"Homework %\" />\n                            <Bar dataKey=\"tuitionPercentage\" fill=\"#00C49F\" name=\"Tuition %\" />\n                            <Bar dataKey=\"averageScore\" fill=\"#FFBB28\" name=\"Average Score %\" />\n                          </BarChart>\n                        </ResponsiveContainer>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Performance Trend Line Chart */}\n                  {(attendanceData as any)?.monthlyTrend?.length > 0 && (\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <TrendingUp className=\"h-5 w-5\" />\n                          Attendance Trend (Last 6 Months)\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"h-64 w-full\">\n                          <ResponsiveContainer width=\"100%\" height=\"100%\">\n                            <LineChart data={(attendanceData as any).monthlyTrend} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n                              <CartesianGrid strokeDasharray=\"3 3\" />\n                              <XAxis dataKey=\"month\" />\n                              <YAxis domain={[0, 100]} />\n                              <Tooltip \n                                formatter={(value: any, name: string) => [\n                                  `${value}%`, \n                                  'Attendance %'\n                                ]}\n                              />\n                              <Line \n                                type=\"monotone\" \n                                dataKey=\"percentage\" \n                                stroke=\"#8884d8\" \n                                strokeWidth={2}\n                                dot={{ fill: '#8884d8', strokeWidth: 2, r: 4 }}\n                              />\n                            </LineChart>\n                          </ResponsiveContainer>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n\n                  {/* Subject Summary Cards */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    {(progressData as any).subjectData.map((subject: any, index: number) => (\n                      <Card key={subject.subject}>\n                        <CardContent className=\"pt-6\">\n                          <div className=\"text-center space-y-2\">\n                            <h3 className=\"font-semibold text-lg text-gray-900\">{subject.subject}</h3>\n                            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                              <div>\n                                <p className=\"text-gray-600\">Homework</p>\n                                <p className=\"text-xl font-bold text-blue-600\">{subject.homeworkPercentage}%</p>\n                              </div>\n                              <div>\n                                <p className=\"text-gray-600\">Tuition</p>\n                                <p className=\"text-xl font-bold text-green-600\">{subject.tuitionPercentage}%</p>\n                              </div>\n                            </div>\n                            <div className=\"pt-2 border-t\">\n                              <p className=\"text-gray-600\">Average Score</p>\n                              <p className=\"text-xl font-bold text-purple-600\">{subject.averageScore}%</p>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n              ) : (\n                <Card>\n                  <CardContent className=\"py-12 text-center\">\n                    <BookOpen className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-lg font-medium text-gray-900 mb-2\">No progress data available</p>\n                    <p className=\"text-gray-600\">Progress information will appear here once academic activities begin.</p>\n                  </CardContent>\n                </Card>\n              )}\n            </TabsContent>\n\n            {/* Activities Tab */}\n            <TabsContent value=\"activities\" className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {/* Recent Homework */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <FileText className=\"h-5 w-5\" />\n                      Recent Homework\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {(progressData as any)?.recentHomework?.length > 0 ? (\n                      <div className=\"space-y-3\">\n                        {(progressData as any).recentHomework.map((hw: any) => (\n                          <div key={hw.id} className=\"border rounded-lg p-3\">\n                            <div className=\"flex justify-between items-start mb-2\">\n                              <h4 className=\"font-medium text-gray-900\">{hw.subject}</h4>\n                              <Badge variant={hw.status === 'completed' ? 'default' : 'secondary'}>\n                                {hw.status}\n                              </Badge>\n                            </div>\n                            <p className=\"text-sm text-gray-600 mb-1\">{hw.topic}</p>\n                            <div className=\"flex justify-between text-xs text-gray-500\">\n                              <span>{formatDate(hw.date)}</span>\n                              {hw.score && <span>Score: {hw.score}</span>}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <p className=\"text-gray-500 text-center py-8\">No homework activities found</p>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* Recent Tuition Progress */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <GraduationCap className=\"h-5 w-5\" />\n                      Recent Tuition Progress\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {(progressData as any)?.recentTuition?.length > 0 ? (\n                      <div className=\"space-y-3\">\n                        {(progressData as any).recentTuition.map((tp: any) => (\n                          <div key={tp.id} className=\"border rounded-lg p-3\">\n                            <div className=\"flex justify-between items-start mb-2\">\n                              <h4 className=\"font-medium text-gray-900\">{tp.subject}</h4>\n                              <Badge variant={tp.status === 'learned' ? 'default' : 'secondary'}>\n                                {tp.status}\n                              </Badge>\n                            </div>\n                            <p className=\"text-sm text-gray-600 mb-1\">{tp.chapter} - {tp.topic}</p>\n                            <div className=\"text-xs text-gray-500\">\n                              {tp.completionDate ? formatDate(tp.completionDate) : 'In Progress'}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <p className=\"text-gray-500 text-center py-8\">No tuition progress found</p>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* Recent Attendance */}\n                <Card className=\"lg:col-span-2\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <ClipboardCheck className=\"h-5 w-5\" />\n                      Recent Attendance (Last 20 Days)\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {(attendanceData as any)?.recentAttendance?.length > 0 ? (\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3\">\n                        {(attendanceData as any).recentAttendance.map((record: any) => (\n                          <div key={record.id} className=\"border rounded-lg p-3 text-center\">\n                            <div className={`text-sm font-medium mb-1 ${\n                              record.status === 'present' \n                                ? 'text-green-600' \n                                : record.status === 'absent' \n                                ? 'text-red-600' \n                                : 'text-yellow-600'\n                            }`}>\n                              {record.status.toUpperCase()}\n                            </div>\n                            <div className=\"text-xs text-gray-600\">\n                              {formatDate(record.date)}\n                            </div>\n                            {record.remarks && (\n                              <div className=\"text-xs text-gray-500 mt-1\">\n                                {record.remarks}\n                              </div>\n                            )}\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <p className=\"text-gray-500 text-center py-8\">No attendance records found</p>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n          </Tabs>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":41920},"client/src/pages/admin/AcademicDashboard.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { CardDescription } from '@/components/ui/card';\nimport { \n  BookOpen, \n  Users, \n  TrendingUp, \n  Calendar,\n  MapPin,\n  GraduationCap,\n  FileText,\n  PlusCircle,\n  Edit,\n  Trash2,\n  BarChart3,\n  Target,\n  Award,\n  RotateCcw,\n  Filter,\n  Eye,\n  User,\n  Phone,\n  MapPin as MapPinIcon,\n  Building\n} from 'lucide-react';\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, BarChart, Bar, PieChart, Pie, Cell } from 'recharts';\n\n// Student Progress with SO Center and Location Filters\nfunction StudentProgressTab({ \n  selectedState, \n  selectedDistrict, \n  selectedMandal, \n  selectedVillage, \n  selectedSoCenter, \n  filteredSoCenters \n}: any) {\n  const [selectedStudent, setSelectedStudent] = useState<any>(null);\n\n  // Use filtered SO Centers from parent component\n\n  const { data: students = [] } = useQuery<any[]>({\n    queryKey: ['/api/students'],\n  });\n\n  // Filter students based on location and SO center\n  const filteredStudents = students.filter((student: any) => {\n    if (selectedSoCenter && student.soCenterId !== selectedSoCenter) return false;\n    // Add additional location filtering logic here\n    return true;\n  });\n\n  // Real performance data for selected student\n  const { data: performanceData = [] } = useQuery<any[]>({\n    queryKey: ['/api/analytics/student-performance', selectedStudent?.id],\n    enabled: !!selectedStudent?.id,\n  });\n\n  // Real academic progress data\n  const { data: academicProgress = [] } = useQuery<any[]>({\n    queryKey: ['/api/analytics/academic-progress'],\n    ...(selectedSoCenter && { \n      queryKey: ['/api/analytics/academic-progress', { soCenterId: selectedSoCenter }] \n    }),\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Location and SO Center Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <MapPin size={20} />\n            <span>Student Progress Filters</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Label>State</Label>\n              <div className=\"text-sm text-gray-600\">\n                {selectedState ? 'State filter applied from universal filter above' : 'Use universal location filter above'}\n              </div>\n            </div>\n\n            <div>\n              <Label>District</Label>\n              <div className=\"text-sm text-gray-600\">\n                {selectedDistrict ? 'District filter applied from universal filter above' : 'Use universal location filter above'}\n              </div>\n            </div>\n\n            <div>\n              <Label>SO Center (Filtered)</Label>\n              <div className=\"text-sm text-gray-600 mb-2\">\n                {selectedSoCenter ? filteredSoCenters.find((c: any) => c.id === selectedSoCenter)?.name || 'Selected center from universal filter' : 'Use universal location filter above to select SO center'}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Students List */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Users size={20} />\n            <span>Students Progress Overview</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4\">\n            {filteredStudents.map((student: any) => (\n              <div \n                key={student.id} \n                className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer\"\n                onClick={() => setSelectedStudent(student)}\n              >\n                <div>\n                  <h3 className=\"font-semibold text-gray-900\">{student.name}</h3>\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    <Badge variant=\"outline\">{student.studentId}</Badge>\n                    <Badge variant=\"secondary\">{student.soCenterName || 'Unknown Center'}</Badge>\n                    <Badge variant=\"outline\">{student.className || 'No Class'}</Badge>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"text-right\">\n                    <div className=\"text-sm text-gray-500\">Progress</div>\n                    <div className=\"font-semibold\">\n                      {academicProgress.filter((p: any) => p.status === 'learned').length > 0 \n                        ? Math.round((academicProgress.filter((p: any) => p.status === 'learned').length / academicProgress.length) * 100)\n                        : 0}%\n                    </div>\n                  </div>\n                  <Button variant=\"ghost\" size=\"sm\">\n                    <BarChart3 className=\"text-primary\" size={16} />\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Student Performance Modal */}\n      <Dialog open={!!selectedStudent} onOpenChange={() => setSelectedStudent(null)}>\n        <DialogContent className=\"max-w-4xl\">\n          <DialogHeader>\n            <DialogTitle>\n              Performance Analytics - {selectedStudent?.name} ({selectedStudent?.studentId})\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-6\">\n            {/* Performance Trends */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <TrendingUp size={20} />\n                  <span>Performance Trends</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={performanceData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Line type=\"monotone\" dataKey=\"percentage\" stroke=\"#8884d8\" strokeWidth={2} name=\"Completion %\" />\n                    <Line type=\"monotone\" dataKey=\"completedTopics\" stroke=\"#82ca9d\" strokeWidth={2} name=\"Topics Learned\" />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Subject-wise Progress */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Target size={20} />\n                  <span>Subject-wise Progress</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  {academicProgress\n                    .filter((item: any, index: number, self: any[]) => \n                      self.findIndex((i: any) => i.subject === item.subject) === index\n                    )\n                    .map((subject: any) => {\n                      const subjectData = academicProgress.filter((p: any) => p.subject === subject.subject);\n                      const totalTopics = subjectData.reduce((sum: number, p: any) => sum + p.count, 0);\n                      const learnedTopics = subjectData\n                        .filter((p: any) => p.status === 'learned')\n                        .reduce((sum: number, p: any) => sum + p.count, 0);\n                      const progress = totalTopics > 0 ? Math.round((learnedTopics / totalTopics) * 100) : 0;\n                      \n                      return (\n                        <div key={subject.subject} className=\"space-y-2\">\n                          <div className=\"flex justify-between\">\n                            <span className=\"font-medium\">{subject.subject}</span>\n                            <span className=\"font-semibold\">{progress}%</span>\n                          </div>\n                          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                            <div \n                              className=\"bg-primary h-2 rounded-full\" \n                              style={{ width: `${progress}%` }}\n                            />\n                          </div>\n                        </div>\n                      );\n                    })}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\n\n// Attendance Reports Tab\nfunction AttendanceReportsTab({ \n  selectedState, \n  selectedDistrict, \n  selectedMandal, \n  selectedVillage, \n  selectedSoCenter, \n  filteredSoCenters \n}: any) {\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\n\n  // Center-wise Month-wise Attendance Report (real data)\n  const { data: centerAttendanceReport = [] } = useQuery({\n    queryKey: ['/api/analytics/center-month-attendance', selectedMonth, selectedYear, selectedSoCenter],\n    queryFn: () => {\n      const params = new URLSearchParams();\n      params.append('month', selectedMonth.toString());\n      params.append('year', selectedYear.toString());\n      if (selectedSoCenter) params.append('soCenterId', selectedSoCenter);\n      \n      return apiRequest('GET', `/api/analytics/center-month-attendance?${params.toString()}`);\n    },\n  });\n\n  // Real attendance data from database\n  const { data: attendanceData = [] } = useQuery({\n    queryKey: ['/api/analytics/attendance-trends'],\n    queryFn: () => apiRequest('GET', `/api/analytics/attendance-trends?soCenterId=${selectedSoCenter}&month=${selectedYear}-${String(selectedMonth).padStart(2, '0')}`),\n    enabled: !!selectedSoCenter,\n  });\n\n  // Group attendance data by center for table display - ensure centerAttendanceReport is an array\n  const groupedAttendanceData = Array.isArray(centerAttendanceReport) ? centerAttendanceReport.reduce((acc: any, record: any) => {\n    const key = record.centerId;\n    if (!acc[key]) {\n      acc[key] = {\n        centerInfo: {\n          centerId: record.centerId,\n          centerName: record.centerName,\n          state: record.state,\n          district: record.district,\n          mandal: record.mandal,\n          totalStudents: record.totalStudents\n        },\n        dailyAttendance: []\n      };\n    }\n    acc[key].dailyAttendance.push({\n      date: record.date,\n      presentCount: record.presentCount,\n      attendancePercentage: record.attendancePercentage\n    });\n    return acc;\n  }, {}) : {};\n\n  const centerAttendanceArray = Object.values(groupedAttendanceData);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Calendar size={20} />\n            <span>Center-wise Month-wise Attendance Reports</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <Label>Month</Label>\n              <Select value={selectedMonth.toString()} onValueChange={(value) => setSelectedMonth(parseInt(value))}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select Month\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {Array.from({ length: 12 }, (_, i) => (\n                    <SelectItem key={i + 1} value={(i + 1).toString()}>\n                      {new Date(2024, i, 1).toLocaleString('default', { month: 'long' })}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label>Year</Label>\n              <Select value={selectedYear.toString()} onValueChange={(value) => setSelectedYear(parseInt(value))}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select Year\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {Array.from({ length: 6 }, (_, i) => (\n                    <SelectItem key={2020 + i} value={(2020 + i).toString()}>\n                      {2020 + i}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label>SO Center Filter</Label>\n              <div className=\"text-sm text-gray-600 mt-2\">\n                {selectedSoCenter ? filteredSoCenters.find((c: any) => c.id === selectedSoCenter)?.name || 'Selected from universal filter' : 'All centers (use filter above to select specific center)'}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Center-wise Attendance Report Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <Building size={20} />\n            <span>Center-wise Daily Attendance Report - {new Date(selectedYear, selectedMonth - 1).toLocaleString('default', { month: 'long', year: 'numeric' })}</span>\n          </CardTitle>\n          <CardDescription>\n            Detailed attendance data for each SO Center with daily breakdown\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-8\">\n            {centerAttendanceArray.map((centerData: any) => (\n              <div key={centerData.centerInfo.centerId} className=\"border rounded-lg p-6\">\n                {/* Center Header */}\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div>\n                    <h3 className=\"text-xl font-bold text-gray-900\">{centerData.centerInfo.centerName}</h3>\n                    <div className=\"flex items-center space-x-4 text-sm text-gray-600 mt-1\">\n                      <span className=\"flex items-center space-x-1\">\n                        <MapPinIcon size={14} />\n                        <span>{centerData.centerInfo.state}, {centerData.centerInfo.district}, {centerData.centerInfo.mandal}</span>\n                      </span>\n                      <span className=\"flex items-center space-x-1\">\n                        <Users size={14} />\n                        <span>{centerData.centerInfo.totalStudents} Total Students</span>\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-sm text-gray-500\">Average Attendance</div>\n                    <div className=\"text-2xl font-bold text-primary\">\n                      {centerData.dailyAttendance.length > 0 \n                        ? Math.round(centerData.dailyAttendance.reduce((sum: number, day: any) => sum + day.attendancePercentage, 0) / centerData.dailyAttendance.length)\n                        : 0}%\n                    </div>\n                  </div>\n                </div>\n\n                {/* Daily Attendance Table */}\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full border border-gray-200 rounded-lg\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-b\">Date</th>\n                        <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-b\">Day</th>\n                        <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-b\">Present</th>\n                        <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-b\">Total Students</th>\n                        <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-b\">Attendance %</th>\n                        <th className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-b\">Status</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {centerData.dailyAttendance.map((dayData: any, index: number) => {\n                        const attendanceDate = new Date(dayData.date);\n                        const dayName = attendanceDate.toLocaleDateString('en-US', { weekday: 'short' });\n                        const isWeekend = dayName === 'Sat' || dayName === 'Sun';\n                        \n                        return (\n                          <tr key={index} className={isWeekend ? 'bg-gray-50' : ''}>\n                            <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-900\">\n                              {attendanceDate.toLocaleDateString('en-IN')}\n                            </td>\n                            <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-900\">\n                              <Badge variant={isWeekend ? \"secondary\" : \"outline\"}>\n                                {dayName}\n                              </Badge>\n                            </td>\n                            <td className=\"px-4 py-3 whitespace-nowrap text-sm font-medium text-gray-900\">\n                              {dayData.presentCount}\n                            </td>\n                            <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-900\">\n                              {centerData.centerInfo.totalStudents}\n                            </td>\n                            <td className=\"px-4 py-3 whitespace-nowrap text-sm text-gray-900\">\n                              <div className=\"flex items-center space-x-2\">\n                                <span className=\"font-medium\">{dayData.attendancePercentage}%</span>\n                                <div className=\"w-16 bg-gray-200 rounded-full h-2\">\n                                  <div \n                                    className=\"h-2 rounded-full bg-primary\" \n                                    style={{ width: `${Math.min(dayData.attendancePercentage, 100)}%` }}\n                                  />\n                                </div>\n                              </div>\n                            </td>\n                            <td className=\"px-4 py-3 whitespace-nowrap\">\n                              {isWeekend ? (\n                                <Badge variant=\"secondary\">Weekend</Badge>\n                              ) : dayData.attendancePercentage >= 75 ? (\n                                <Badge className=\"bg-green-100 text-green-800\">Good</Badge>\n                              ) : dayData.attendancePercentage >= 50 ? (\n                                <Badge className=\"bg-yellow-100 text-yellow-800\">Average</Badge>\n                              ) : (\n                                <Badge className=\"bg-red-100 text-red-800\">Poor</Badge>\n                              )}\n                            </td>\n                          </tr>\n                        );\n                      })}\n                    </tbody>\n                  </table>\n                </div>\n\n                {/* Center Summary Stats */}\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mt-4 p-4 bg-gray-50 rounded-lg\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-primary\">\n                      {centerData.dailyAttendance.filter((d: any) => d.attendancePercentage >= 75).length}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">Good Days (≥75%)</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-yellow-600\">\n                      {centerData.dailyAttendance.filter((d: any) => d.attendancePercentage >= 50 && d.attendancePercentage < 75).length}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">Average Days (50-74%)</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-red-600\">\n                      {centerData.dailyAttendance.filter((d: any) => d.attendancePercentage < 50).length}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">Poor Days (&lt;50%)</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-gray-600\">\n                      {Math.round(centerData.dailyAttendance.reduce((sum: number, day: any) => sum + day.presentCount, 0) / centerData.dailyAttendance.length) || 0}\n                    </div>\n                    <div className=\"text-sm text-gray-600\">Avg Daily Present</div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          {centerAttendanceArray.length === 0 && (\n            <div className=\"text-center py-12\">\n              <Calendar className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Attendance Data</h3>\n              <p className=\"text-gray-600\">No attendance records found for the selected month and year.</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n\n\nexport default function AcademicDashboard() {\n  const [activeTab, setActiveTab] = useState('progress');\n  \n  // Universal location filters\n  const [selectedState, setSelectedState] = useState('');\n  const [selectedDistrict, setSelectedDistrict] = useState('');\n  const [selectedMandal, setSelectedMandal] = useState('');\n  const [selectedVillage, setSelectedVillage] = useState('');\n  const [selectedSoCenter, setSelectedSoCenter] = useState('');\n\n  // Location data queries\n  const { data: states = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/states'],\n  });\n\n  const { data: districts = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/districts'],\n    enabled: !!selectedState,\n  });\n\n  const { data: mandals = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/mandals'],\n    enabled: !!selectedDistrict,\n  });\n\n  const { data: villages = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/villages'],\n    enabled: !!selectedMandal,\n  });\n\n  const { data: soCenters = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/so-centers'],\n  });\n\n  // Filter SO Centers based on selected location\n  const filteredSoCenters = soCenters.filter((center: any) => {\n    if (selectedVillage && center.villageId !== selectedVillage) return false;\n    if (selectedMandal && !villages.some((v: any) => v.id === center.villageId && v.mandalId === selectedMandal)) return false;\n    if (selectedDistrict && !mandals.some((m: any) => villages.some((v: any) => v.mandalId === m.id && v.id === center.villageId) && m.districtId === selectedDistrict)) return false;\n    if (selectedState && !districts.some((d: any) => mandals.some((m: any) => villages.some((v: any) => v.mandalId === m.id && v.id === center.villageId) && m.districtId === d.id) && d.stateId === selectedState)) return false;\n    return true;\n  });\n\n  // Reset dependent filters when parent changes\n  const handleStateChange = (value: string) => {\n    setSelectedState(value === 'all' ? '' : value);\n    setSelectedDistrict('');\n    setSelectedMandal('');\n    setSelectedVillage('');\n    setSelectedSoCenter('');\n  };\n\n  const handleDistrictChange = (value: string) => {\n    setSelectedDistrict(value === 'all' ? '' : value);\n    setSelectedMandal('');\n    setSelectedVillage('');\n    setSelectedSoCenter('');\n  };\n\n  const handleMandalChange = (value: string) => {\n    setSelectedMandal(value === 'all' ? '' : value);\n    setSelectedVillage('');\n    setSelectedSoCenter('');\n  };\n\n  const handleVillageChange = (value: string) => {\n    setSelectedVillage(value === 'all' ? '' : value);\n    setSelectedSoCenter('');\n  };\n\n  return (\n    <DashboardLayout\n      title=\"Academic Admin Dashboard\"\n      subtitle=\"Comprehensive academic management and student progress tracking\"\n    >\n      <div className=\"space-y-6\">\n        {/* Universal Location Filter */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <MapPin size={20} />\n              <span>Location Filter</span>\n            </CardTitle>\n            <CardDescription>\n              Filter all dashboard data by geographic location. Changes apply to all tabs.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n              <div>\n                <Label htmlFor=\"state\">State</Label>\n                <Select value={selectedState} onValueChange={handleStateChange}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select State\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All States</SelectItem>\n                    {states.map((state: any) => (\n                      <SelectItem key={state.id} value={state.id}>\n                        {state.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"district\">District</Label>\n                <Select \n                  value={selectedDistrict} \n                  onValueChange={handleDistrictChange}\n                  disabled={!selectedState}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select District\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Districts</SelectItem>\n                    {districts\n                      .filter((district: any) => district.stateId === selectedState)\n                      .map((district: any) => (\n                        <SelectItem key={district.id} value={district.id}>\n                          {district.name}\n                        </SelectItem>\n                      ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"mandal\">Mandal</Label>\n                <Select \n                  value={selectedMandal} \n                  onValueChange={handleMandalChange}\n                  disabled={!selectedDistrict}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select Mandal\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Mandals</SelectItem>\n                    {mandals\n                      .filter((mandal: any) => mandal.districtId === selectedDistrict)\n                      .map((mandal: any) => (\n                        <SelectItem key={mandal.id} value={mandal.id}>\n                          {mandal.name}\n                        </SelectItem>\n                      ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"village\">Village</Label>\n                <Select \n                  value={selectedVillage} \n                  onValueChange={handleVillageChange}\n                  disabled={!selectedMandal}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select Village\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Villages</SelectItem>\n                    {villages\n                      .filter((village: any) => village.mandalId === selectedMandal)\n                      .map((village: any) => (\n                        <SelectItem key={village.id} value={village.id}>\n                          {village.name}\n                        </SelectItem>\n                      ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"soCenter\">SO Center</Label>\n                <Select value={selectedSoCenter} onValueChange={setSelectedSoCenter}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select SO Center\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All SO Centers</SelectItem>\n                    {filteredSoCenters.map((center: any) => (\n                      <SelectItem key={center.id} value={center.id}>\n                        {center.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"flex items-end\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => {\n                    setSelectedState('');\n                    setSelectedDistrict('');\n                    setSelectedMandal('');\n                    setSelectedVillage('');\n                    setSelectedSoCenter('');\n                  }}\n                  className=\"w-full\"\n                >\n                  <RotateCcw size={16} className=\"mr-2\" />\n                  Reset\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"progress\">Student Progress</TabsTrigger>\n            <TabsTrigger value=\"attendance\">Attendance Reports</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"progress\">\n            <StudentProgressTab \n              selectedState={selectedState}\n              selectedDistrict={selectedDistrict}\n              selectedMandal={selectedMandal}\n              selectedVillage={selectedVillage}\n              selectedSoCenter={selectedSoCenter}\n              filteredSoCenters={filteredSoCenters}\n            />\n          </TabsContent>\n\n\n\n          <TabsContent value=\"attendance\">\n            <AttendanceReportsTab \n              selectedState={selectedState}\n              selectedDistrict={selectedDistrict}\n              selectedMandal={selectedMandal}\n              selectedVillage={selectedVillage}\n              selectedSoCenter={selectedSoCenter}\n              filteredSoCenters={filteredSoCenters}\n            />\n          </TabsContent>\n        </Tabs>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":31645},"client/src/pages/admin/ExamManagement.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Plus, Edit, Trash2, FileText, Building, MapPin, RotateCcw, GraduationCap, PlusCircle } from 'lucide-react';\nimport { Label } from '@/components/ui/label';\n\n// Question schema for individual questions\nconst questionSchema = z.object({\n  questionNumber: z.number(),\n  marks: z.number().min(1, 'Marks must be at least 1'),\n  questionText: z.string().min(1, 'Question text is required'),\n});\n\n// Updated schema with questions support\nconst examSchema = z.object({\n  title: z.string().min(1, 'Exam title is required'),\n  description: z.string().min(1, 'Description is required'),\n  classId: z.string().min(1, 'Class selection is required'),\n  subjectId: z.string().min(1, 'Subject selection is required'),\n  chapterIds: z.array(z.string()).min(1, 'At least one chapter must be selected'),\n  soCenterIds: z.array(z.string()).min(1, 'At least one SO Center must be selected'),\n  examDate: z.string().min(1, 'Exam date is required'),\n  duration: z.string().min(1, 'Duration is required'),\n  totalQuestions: z.string().min(1, 'Total questions is required'),\n  totalMarks: z.string().min(1, 'Total marks is required'),\n  passingMarks: z.string().min(1, 'Passing marks is required'),\n  status: z.string().default('scheduled'),\n  questions: z.array(questionSchema).optional().default([]),\n});\n\ntype ExamFormData = z.infer<typeof examSchema>;\n\ninterface AddExamModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  editingExam?: any;\n}\n\nfunction AddExamModal({ isOpen, onClose, editingExam }: AddExamModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [questions, setQuestions] = useState<Array<{questionNumber: number, marks: number, questionText: string}>>([]);\n\n  // Helper functions for questions management\n  const addQuestion = () => {\n    const newQuestion = {\n      questionNumber: questions.length + 1,\n      marks: 1,\n      questionText: '',\n    };\n    setQuestions([...questions, newQuestion]);\n  };\n\n  const removeQuestion = (index: number) => {\n    const updatedQuestions = questions.filter((_, i) => i !== index)\n      .map((q, i) => ({ ...q, questionNumber: i + 1 }));\n    setQuestions(updatedQuestions);\n  };\n\n  const updateQuestion = (index: number, field: keyof typeof questions[0], value: string | number) => {\n    const updatedQuestions = [...questions];\n    updatedQuestions[index] = { ...updatedQuestions[index], [field]: value };\n    setQuestions(updatedQuestions);\n  };\n\n  // Fetch real data from Supabase\n  const { data: classes = [], isLoading: classesLoading } = useQuery<any[]>({\n    queryKey: ['/api/classes'],\n    enabled: isOpen,\n  });\n\n  const { data: subjects = [], isLoading: subjectsLoading } = useQuery<any[]>({\n    queryKey: ['/api/admin/subjects'],\n    enabled: isOpen,\n  });\n\n  const { data: chapters = [], isLoading: chaptersLoading } = useQuery<any[]>({\n    queryKey: ['/api/chapters'],\n    enabled: isOpen,\n  });\n\n  const { data: soCenters = [], isLoading: soCentersLoading } = useQuery<any[]>({\n    queryKey: ['/api/admin/so-centers'],\n    enabled: isOpen,\n  });\n\n  const form = useForm<ExamFormData>({\n    resolver: zodResolver(examSchema),\n    defaultValues: {\n      title: '',\n      description: '',\n      classId: '',\n      subjectId: '',\n      chapterIds: [],\n      soCenterIds: [],\n      examDate: '',\n      duration: '',\n      totalQuestions: '',\n      totalMarks: '',\n      passingMarks: '',\n      status: 'scheduled',\n      questions: [],\n    },\n  });\n\n  // Reset form when editingExam changes\n  React.useEffect(() => {\n    if (editingExam) {\n      form.reset({\n        title: editingExam.title || '',\n        description: editingExam.description || '',\n        classId: editingExam.classId || '',\n        subjectId: editingExam.subjectId || '',\n        chapterIds: editingExam.chapterIds || [],\n        soCenterIds: editingExam.soCenterIds || [],\n        examDate: editingExam.examDate ? new Date(editingExam.examDate).toISOString().split('T')[0] : '',\n        duration: editingExam.duration?.toString() || '',\n        totalQuestions: editingExam.totalQuestions?.toString() || '',\n        totalMarks: editingExam.totalMarks?.toString() || '',\n        passingMarks: editingExam.passingMarks?.toString() || '',\n        status: editingExam.status || 'scheduled',\n      });\n      // Load existing questions if editing - safely parse and ensure array\n      let parsedQuestions = [];\n      if (editingExam.questions) {\n        try {\n          parsedQuestions = typeof editingExam.questions === 'string' \n            ? JSON.parse(editingExam.questions) \n            : editingExam.questions;\n        } catch (error) {\n          console.warn('Failed to parse exam questions:', error);\n          parsedQuestions = [];\n        }\n      }\n      setQuestions(Array.isArray(parsedQuestions) ? parsedQuestions : []);\n    } else {\n      form.reset({\n        title: '',\n        description: '',\n        classId: '',\n        subjectId: '',\n        chapterIds: [],\n        soCenterIds: [],\n        examDate: '',\n        duration: '',\n        totalQuestions: '',\n        totalMarks: '',\n        passingMarks: '',\n        status: 'scheduled',\n        questions: [],\n      });\n      setQuestions([]);\n    }\n  }, [editingExam, form]);\n\n  // Auto-calculate total marks from questions\n  React.useEffect(() => {\n    const totalMarks = questions.reduce((sum, q) => sum + q.marks, 0);\n    if (totalMarks > 0) {\n      form.setValue('totalMarks', totalMarks.toString());\n      form.setValue('totalQuestions', questions.length.toString());\n    }\n  }, [questions, form]);\n\n  const selectedClassId = form.watch('classId');\n  const selectedSubjectId = form.watch('subjectId');\n  const selectedChapterIds = form.watch('chapterIds');\n  const selectedSoCenterIds = form.watch('soCenterIds');\n  \n  // Filter subjects by selected class\n  const filteredSubjects = subjects.filter((subject: any) => {\n    return selectedClassId ? subject.classId === selectedClassId : false;\n  });\n\n  // Filter chapters by selected subject\n  const filteredChapters = chapters.filter((chapter: any) => \n    selectedSubjectId ? chapter.subjectId === selectedSubjectId : false\n  );\n\n  const mutation = useMutation({\n    mutationFn: async (data: ExamFormData) => {\n      const submitData = {\n        ...data,\n        duration: parseInt(data.duration),\n        totalQuestions: parseInt(data.totalQuestions),\n        totalMarks: parseInt(data.totalMarks),\n        passingMarks: parseInt(data.passingMarks),\n        questions: JSON.stringify(data.questions || []),\n      };\n      const endpoint = editingExam ? `/api/admin/exams/${editingExam.id}` : '/api/admin/exams';\n      const method = editingExam ? 'PUT' : 'POST';\n      return apiRequest(method, endpoint, submitData);\n    },\n    onSuccess: () => {\n      toast({\n        title: editingExam ? 'Exam Updated' : 'Exam Created',\n        description: `Exam has been successfully ${editingExam ? 'updated' : 'created'}.`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/exams'] });\n      form.reset();\n      setQuestions([]);\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || `Failed to ${editingExam ? 'update' : 'create'} exam.`,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: ExamFormData) => {\n    const submitData = {\n      ...data,\n      questions: questions,\n    };\n    mutation.mutate(submitData);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold text-green-700\">\n            {editingExam ? 'Edit Exam' : 'Create New Exam'}\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Basic Info */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-gray-800\">Basic Information</h3>\n                \n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Exam Title</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter exam title\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Enter exam description\"\n                          className=\"min-h-[100px]\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"examDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Exam Date</FormLabel>\n                        <FormControl>\n                          <Input type=\"date\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"duration\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Duration (minutes)</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" placeholder=\"90\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"totalQuestions\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Total Questions</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" placeholder=\"50\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"totalMarks\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Total Marks</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" placeholder=\"100\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"passingMarks\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Passing Marks</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" placeholder=\"40\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              {/* Academic Structure */}\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold text-gray-800\">Academic Structure</h3>\n                \n                <FormField\n                  control={form.control}\n                  name=\"classId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Class</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select a class\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {classesLoading ? (\n                            <SelectItem value=\"loading\" disabled>Loading classes...</SelectItem>\n                          ) : classes.length > 0 ? (\n                            classes.map((cls: any) => (\n                              <SelectItem key={cls.id} value={cls.id}>\n                                {cls.name}\n                              </SelectItem>\n                            ))\n                          ) : (\n                            <SelectItem value=\"no-data\" disabled>No classes available</SelectItem>\n                          )}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"subjectId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Subject</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value} disabled={!selectedClassId}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select a subject\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {subjectsLoading ? (\n                            <SelectItem value=\"loading\" disabled>Loading subjects...</SelectItem>\n                          ) : filteredSubjects.length > 0 ? (\n                            filteredSubjects.map((subject: any) => (\n                              <SelectItem key={subject.id} value={subject.id}>\n                                {subject.name}\n                              </SelectItem>\n                            ))\n                          ) : (\n                            <SelectItem value=\"no-data\" disabled>\n                              {selectedClassId ? 'No subjects available for selected class' : 'Please select a class first'}\n                            </SelectItem>\n                          )}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Multi-Chapter Selection */}\n                <FormField\n                  control={form.control}\n                  name=\"chapterIds\"\n                  render={() => (\n                    <FormItem>\n                      <FormLabel>Chapters (Select Multiple)</FormLabel>\n                      <div className=\"max-h-40 overflow-y-auto border rounded-md p-3 space-y-2\">\n                        {chaptersLoading ? (\n                          <div className=\"text-sm text-gray-500\">Loading chapters...</div>\n                        ) : filteredChapters.length > 0 ? (\n                          filteredChapters.map((chapter: any) => (\n                            <FormField\n                              key={chapter.id}\n                              control={form.control}\n                              name=\"chapterIds\"\n                              render={({ field }) => {\n                                return (\n                                  <FormItem\n                                    key={chapter.id}\n                                    className=\"flex flex-row items-start space-x-3 space-y-0\"\n                                  >\n                                    <FormControl>\n                                      <Checkbox\n                                        checked={field.value?.includes(chapter.id)}\n                                        onCheckedChange={(checked) => {\n                                          return checked\n                                            ? field.onChange([...field.value, chapter.id])\n                                            : field.onChange(\n                                                field.value?.filter(\n                                                  (value) => value !== chapter.id\n                                                )\n                                              )\n                                        }}\n                                      />\n                                    </FormControl>\n                                    <FormLabel className=\"text-sm font-normal\">\n                                      {chapter.name}\n                                    </FormLabel>\n                                  </FormItem>\n                                )\n                              }}\n                            />\n                          ))\n                        ) : (\n                          <div className=\"text-sm text-gray-500\">\n                            {selectedSubjectId ? 'No chapters available for selected subject' : 'Please select a subject first'}\n                          </div>\n                        )}\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Multi-SO Center Selection */}\n                <FormField\n                  control={form.control}\n                  name=\"soCenterIds\"\n                  render={() => (\n                    <FormItem>\n                      <div className=\"flex items-center justify-between\">\n                        <FormLabel>SO Centers (Select Multiple)</FormLabel>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => {\n                            const currentIds = form.getValues('soCenterIds') || [];\n                            const allIds = soCenters.map((center: any) => center.id);\n                            \n                            if (currentIds.length === allIds.length) {\n                              form.setValue('soCenterIds', []);\n                            } else {\n                              form.setValue('soCenterIds', allIds);\n                            }\n                          }}\n                          className=\"text-xs\"\n                        >\n                          {selectedSoCenterIds.length === soCenters.length ? 'Unselect All' : 'Select All'}\n                        </Button>\n                      </div>\n                      <div className=\"max-h-40 overflow-y-auto border rounded-md p-3 space-y-2\">\n                        {soCentersLoading ? (\n                          <div className=\"text-sm text-gray-500\">Loading SO Centers...</div>\n                        ) : soCenters.length > 0 ? (\n                          soCenters.map((center: any) => (\n                            <FormField\n                              key={center.id}\n                              control={form.control}\n                              name=\"soCenterIds\"\n                              render={({ field }) => {\n                                return (\n                                  <FormItem\n                                    key={center.id}\n                                    className=\"flex flex-row items-start space-x-3 space-y-0\"\n                                  >\n                                    <FormControl>\n                                      <Checkbox\n                                        checked={field.value?.includes(center.id)}\n                                        onCheckedChange={(checked) => {\n                                          return checked\n                                            ? field.onChange([...field.value, center.id])\n                                            : field.onChange(\n                                                field.value?.filter(\n                                                  (value) => value !== center.id\n                                                )\n                                              )\n                                        }}\n                                      />\n                                    </FormControl>\n                                    <FormLabel className=\"text-sm font-normal\">\n                                      <div className=\"flex items-center gap-2\">\n                                        <Building className=\"h-4 w-4 text-green-600\" />\n                                        <span>{center.name}</span>\n                                        <Badge variant=\"outline\" className=\"text-xs\">\n                                          {center.centerId}\n                                        </Badge>\n                                      </div>\n                                    </FormLabel>\n                                  </FormItem>\n                                )\n                              }}\n                            />\n                          ))\n                        ) : (\n                          <div className=\"text-sm text-gray-500\">No SO Centers available</div>\n                        )}\n                      </div>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Questions Section */}\n            <div className=\"space-y-4 pt-6 border-t\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold text-gray-800\">Exam Questions</h3>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={addQuestion}\n                  className=\"flex items-center gap-2\"\n                >\n                  <Plus className=\"h-4 w-4\" />\n                  Add Question\n                </Button>\n              </div>\n\n              {Array.isArray(questions) && questions.length > 0 && (\n                <div className=\"space-y-3 max-h-60 overflow-y-auto border rounded-md p-4\">\n                  {questions.map((question, index) => (\n                    <div key={index} className=\"flex items-center gap-3 p-3 border rounded-md bg-gray-50\">\n                      <div className=\"flex items-center gap-2 min-w-0 flex-1\">\n                        <span className=\"text-sm font-medium text-gray-600 whitespace-nowrap\">\n                          Q{question.questionNumber}:\n                        </span>\n                        <Input\n                          placeholder=\"Enter question text\"\n                          value={question.questionText}\n                          onChange={(e) => updateQuestion(index, 'questionText', e.target.value)}\n                          className=\"flex-1\"\n                        />\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-sm text-gray-600\">Marks:</span>\n                        <Input\n                          type=\"number\"\n                          min=\"1\"\n                          value={question.marks}\n                          onChange={(e) => updateQuestion(index, 'marks', parseInt(e.target.value) || 1)}\n                          className=\"w-20\"\n                        />\n                      </div>\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeQuestion(index)}\n                        className=\"text-red-500 hover:text-red-700 hover:bg-red-50\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              )}\n\n              {questions.length === 0 && (\n                <div className=\"text-center py-8 text-gray-500 border-2 border-dashed border-gray-200 rounded-md\">\n                  <FileText className=\"h-8 w-8 mx-auto mb-2 text-gray-400\" />\n                  <p>No questions added yet. Click \"Add Question\" to start.</p>\n                </div>\n              )}\n\n              {questions.length > 0 && (\n                <div className=\"flex justify-between items-center p-3 bg-green-50 border border-green-200 rounded-md\">\n                  <div className=\"text-sm text-green-700\">\n                    <strong>Total Questions:</strong> {questions.length} | \n                    <strong> Total Marks:</strong> {questions.reduce((sum, q) => sum + q.marks, 0)}\n                  </div>\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex justify-end space-x-4 pt-6 border-t\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={onClose}\n                disabled={mutation.isPending}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                className=\"bg-green-600 hover:bg-green-700\"\n                disabled={mutation.isPending}\n              >\n                {mutation.isPending ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"animate-spin w-4 h-4 border-2 border-white/30 border-t-white rounded-full\" />\n                    {editingExam ? 'Updating...' : 'Creating...'}\n                  </div>\n                ) : (\n                  <>\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    {editingExam ? 'Update Exam' : 'Create Exam'}\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function ExamManagement() {\n  const [showExamModal, setShowExamModal] = useState(false);\n  const [editingExam, setEditingExam] = useState<any>(null);\n  const { toast } = useToast();\n\n  // Location filters\n  const [selectedState, setSelectedState] = useState('all-states');\n  const [selectedDistrict, setSelectedDistrict] = useState('all-districts');\n  const [selectedMandal, setSelectedMandal] = useState('all-mandals');\n  const [selectedVillage, setSelectedVillage] = useState('all-villages');\n\n  // Fetch real exams data from Supabase\n  const { data: exams = [], isLoading: examsLoading, refetch: refetchExams } = useQuery<any[]>({\n    queryKey: ['/api/admin/exams'],\n  });\n\n  // Delete exam mutation\n  const deleteExamMutation = useMutation({\n    mutationFn: async (examId: string) => {\n      await apiRequest('DELETE', `/api/admin/exams/${examId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Exam deleted successfully\",\n      });\n      refetchExams();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete exam\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Fetch real stats from Supabase\n  const { data: classes = [] } = useQuery<any[]>({\n    queryKey: ['/api/classes'],\n  });\n\n  const { data: subjects = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/subjects'],\n  });\n\n  const { data: soCenters = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/so-centers'],\n  });\n\n  // Location data queries\n  const { data: states = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/states'],\n  });\n\n  const { data: districts = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/districts'],\n  });\n\n  const { data: mandals = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/mandals'],\n  });\n\n  const { data: villages = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/villages'],\n  });\n\n  const handleEditExam = (exam: any) => {\n    setEditingExam(exam);\n    setShowExamModal(true);\n  };\n\n  const handleCreateExam = () => {\n    setEditingExam(null);\n    setShowExamModal(true);\n  };\n\n  const closeModal = () => {\n    setShowExamModal(false);\n    setEditingExam(null);\n  };\n\n  const handleDeleteExam = (examId: string) => {\n    if (confirm('Are you sure you want to delete this exam?')) {\n      deleteExamMutation.mutate(examId);\n    }\n  };\n\n  return (\n    <DashboardLayout\n      title=\"Exam Management\"\n      subtitle=\"Create and manage exams for SO Centers\"\n    >\n      <div className=\"space-y-8 p-6\">\n        {/* Header Section */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Exam Management</h1>\n            <p className=\"text-gray-600\">Create and manage exams for SO Centers with advanced question management</p>\n          </div>\n          <Button\n            onClick={handleCreateExam}\n            className=\"bg-green-600 hover:bg-green-700 text-white\"\n          >\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Create Exam\n          </Button>\n        </div>\n\n        {/* Location Filter Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <MapPin size={20} />\n                <span>Location Filter</span>\n              </div>\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => {\n                  setSelectedState('all-states');\n                  setSelectedDistrict('all-districts');\n                  setSelectedMandal('all-mandals');\n                  setSelectedVillage('all-villages');\n                }}\n              >\n                <RotateCcw size={16} className=\"mr-1\" />\n                Reset Filters\n              </Button>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-4 gap-4\">\n              <div>\n                <Label htmlFor=\"state\">State</Label>\n                <Select value={selectedState} onValueChange={setSelectedState}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select State\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all-states\">All States</SelectItem>\n                    {states.map((state: any) => (\n                      <SelectItem key={state.id} value={state.id}>\n                        {state.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"district\">District</Label>\n                <Select value={selectedDistrict} onValueChange={setSelectedDistrict} disabled={!selectedState}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select District\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all-districts\">All Districts</SelectItem>\n                    {districts.filter((d: any) => !selectedState || selectedState === 'all-states' || d.stateId === selectedState).map((district: any) => (\n                      <SelectItem key={district.id} value={district.id}>\n                        {district.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"mandal\">Mandal</Label>\n                <Select value={selectedMandal} onValueChange={setSelectedMandal} disabled={!selectedDistrict}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select Mandal\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all-mandals\">All Mandals</SelectItem>\n                    {mandals.filter((m: any) => !selectedDistrict || selectedDistrict === 'all-districts' || m.districtId === selectedDistrict).map((mandal: any) => (\n                      <SelectItem key={mandal.id} value={mandal.id}>\n                        {mandal.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"village\">Village</Label>\n                <Select value={selectedVillage} onValueChange={setSelectedVillage} disabled={!selectedMandal}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select Village\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all-villages\">All Villages</SelectItem>\n                    {villages.filter((v: any) => !selectedMandal || selectedMandal === 'all-mandals' || v.mandalId === selectedMandal).map((village: any) => (\n                      <SelectItem key={village.id} value={village.id}>\n                        {village.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Exams Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <GraduationCap className=\"h-5 w-5 text-green-600\" />\n              Exams ({exams.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {examsLoading ? (\n              <div className=\"flex justify-center py-8\">\n                <div className=\"animate-spin w-8 h-8 border-4 border-green-600/30 border-t-green-600 rounded-full\" />\n              </div>\n            ) : exams.length === 0 ? (\n              <div className=\"text-center py-8 text-gray-500\">\n                No exams found. Create your first exam to get started.\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Title</TableHead>\n                    <TableHead>Class</TableHead>\n                    <TableHead>Subject</TableHead>\n                    <TableHead>Date</TableHead>\n                    <TableHead>Duration</TableHead>\n                    <TableHead>Total Marks</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead className=\"text-right\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {exams.map((exam: any) => (\n                    <TableRow key={exam.id}>\n                      <TableCell className=\"font-medium\">{exam.title}</TableCell>\n                      <TableCell>\n                        {classes.find((c: any) => c.id === exam.classId)?.name || 'Unknown'}\n                      </TableCell>\n                      <TableCell>\n                        {subjects.find((s: any) => s.id === exam.subjectId)?.name || 'Unknown'}\n                      </TableCell>\n                      <TableCell>\n                        {new Date(exam.examDate).toLocaleDateString('en-GB')}\n                      </TableCell>\n                      <TableCell>{exam.duration} min</TableCell>\n                      <TableCell>{exam.totalMarks}</TableCell>\n                      <TableCell>\n                        <Badge \n                          variant={exam.status === 'completed' ? 'default' : \n                                  exam.status === 'ongoing' ? 'secondary' : 'outline'}\n                          className={exam.status === 'completed' ? 'bg-green-100 text-green-800 border-green-200' : \n                                    exam.status === 'ongoing' ? 'bg-blue-100 text-blue-800 border-blue-200' : \n                                    'bg-yellow-100 text-yellow-800 border-yellow-200'}\n                        >\n                          {exam.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <div className=\"flex justify-end gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleEditExam(exam)}\n                            className=\"h-8 w-8 p-0\"\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteExam(exam.id)}\n                            disabled={deleteExamMutation.isPending}\n                            className=\"h-8 w-8 p-0 text-red-600 hover:text-red-700 hover:bg-red-50\"\n                          >\n                            {deleteExamMutation.isPending ? (\n                              <div className=\"animate-spin w-4 h-4 border-2 border-red-600/30 border-t-red-600 rounded-full\" />\n                            ) : (\n                              <Trash2 className=\"h-4 w-4\" />\n                            )}\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Add Exam Modal */}\n        <AddExamModal\n          isOpen={showExamModal}\n          onClose={closeModal}\n          editingExam={editingExam}\n        />\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":39536},"client/src/pages/so-center/ExamManagement.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport IndividualStudentMarksModal from '@/components/exam/IndividualStudentMarksModal';\nimport { \n  GraduationCap, \n  Clock, \n  CheckCircle, \n  AlertCircle,\n  Users,\n  Plus,\n  Minus,\n  Edit3,\n  FileEdit,\n  Loader2\n} from 'lucide-react';\n\ninterface ExamResultStudent {\n  id: string;\n  name: string;\n  regId: string;\n  marksObtained: number;\n  answeredQuestions: 'not_answered' | 'partially_answered' | 'fully_answered';\n}\n\nexport default function SoCenterExamManagement() {\n  const [selectedExamId, setSelectedExamId] = useState('');\n  const [isResultsModalOpen, setIsResultsModalOpen] = useState(false);\n  const [examResults, setExamResults] = useState<ExamResultStudent[]>([]);\n  const [activeTab, setActiveTab] = useState('progress-tracking');\n\n  // Individual student marks modal state\n  const [isIndividualMarksModalOpen, setIsIndividualMarksModalOpen] = useState(false);\n  const [selectedStudent, setSelectedStudent] = useState<any>(null);\n  const [selectedExam, setSelectedExam] = useState<any>(null);\n\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Get SO Center ID from logged-in user (assuming user has soCenterId or similar field)\n  const soCenterId = user?.id; // Using user ID for now, will be mapped server-side\n\n  // Mark exam as completed mutation - moved to top\n  const markCompletedMutation = useMutation({\n    mutationFn: async (examId: string) => {\n      const response = await apiRequest('POST', `/api/so-center/exams/${examId}/complete`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Exam Marked Complete\",\n        description: \"The exam has been marked as completed successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/so-center/exams'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to mark exam as completed. ${error.message || ''}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Submit results mutation - moved to top\n  const submitResultsMutation = useMutation({\n    mutationFn: async ({ examId, results }: { examId: string; results: ExamResultStudent[] }) => {\n      const response = await apiRequest('POST', `/api/so-center/exams/${examId}/results`, {\n        results: results,\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Results Submitted\",\n        description: \"Exam results have been posted successfully.\",\n      });\n      setIsResultsModalOpen(false);\n      setExamResults([]);\n      queryClient.invalidateQueries({ queryKey: ['/api/so-center/exams'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to submit results. ${error.message || ''}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Get SO Center exams with optimized caching\n  const { data: exams = [], isLoading: isLoadingExams, error: examsError } = useQuery<any[]>({\n    queryKey: ['/api/so-center/exams'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/so-center/exams');\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const examsData = await response.json();\n      console.log('✅ SO Center exams fetched successfully:', examsData.length);\n      return Array.isArray(examsData) ? examsData : [];\n    },\n    retry: 2,\n    staleTime: 15 * 60 * 1000, // 15 minutes cache\n    refetchOnWindowFocus: false,\n    refetchOnReconnect: false,\n    refetchInterval: false,\n  });\n\n  // Get SO Center students with optimized caching\n  const { data: students = [], isLoading: isLoadingStudents, error: studentsError } = useQuery<any[]>({\n    queryKey: ['/api/so-center/students'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/so-center/students');\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const studentsData = await response.json();\n      console.log('✅ SO Center students fetched successfully:', studentsData.length);\n      return Array.isArray(studentsData) ? studentsData : [];\n    },\n    retry: 2,\n    staleTime: 10 * 60 * 1000, // 10 minutes cache\n    refetchOnWindowFocus: false,\n    refetchOnReconnect: false,\n    refetchInterval: false,\n  });\n\n  // Simplified loading state\n  if (isLoadingExams || isLoadingStudents) {\n    return (\n      <DashboardLayout title=\"Exam Management\" subtitle=\"Manage exams and post results for your center\">\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <div className=\"text-center\">\n            <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n            <p className=\"text-gray-600\">Loading exams and students...</p>\n          </div>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  // Handle error states\n  if (examsError) {\n    return (\n      <DashboardLayout title=\"Exam Management\" subtitle=\"Manage exams and post results for your center\">\n        <div className=\"flex flex-col items-center justify-center min-h-[400px] text-red-500\">\n          <AlertCircle className=\"h-12 w-12 mb-4\" />\n          <p className=\"text-lg font-semibold\">Failed to load exams</p>\n          <p className=\"text-gray-600\">Error: {examsError.message}</p>\n          <Button onClick={() => queryClient.invalidateQueries({ queryKey: ['/api/so-center/exams'] })} className=\"mt-4\">\n            Retry\n          </Button>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  if (studentsError) {\n    return (\n      <DashboardLayout title=\"Exam Management\" subtitle=\"Manage exams and post results for your center\">\n        <div className=\"flex flex-col items-center justify-center min-h-[400px] text-red-500\">\n          <AlertCircle className=\"h-12 w-12 mb-4\" />\n          <p className=\"text-lg font-semibold\">Failed to load students</p>\n          <p className=\"text-gray-600\">Error: {studentsError.message}</p>\n          <Button onClick={() => queryClient.invalidateQueries({ queryKey: ['/api/so-center/students'] })} className=\"mt-4\">\n            Retry\n          </Button>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n\n  \n\n  const openResultsModal = (exam: any) => {\n    setSelectedExamId(exam.id);\n    setSelectedExam(exam);\n    // Initialize results with class students\n    const classStudents = students.filter((student: any) => student.classId === exam.classId);\n    const initialResults = classStudents.map((student: any) => ({\n      id: student.id,\n      name: student.name,\n      regId: student.regId,\n      marksObtained: 0,\n      answeredQuestions: 'not_answered' as const,\n    }));\n    setExamResults(initialResults);\n    setIsResultsModalOpen(true);\n  };\n\n  const openIndividualMarksModal = (student: any, exam: any) => {\n    setSelectedStudent(student);\n    setSelectedExam(exam);\n    setIsIndividualMarksModalOpen(true);\n  };\n\n  const closeIndividualMarksModal = () => {\n    setIsIndividualMarksModalOpen(false);\n    setSelectedStudent(null);\n    setSelectedExam(null);\n  };\n\n  const updateStudentResult = (studentId: string, field: string, value: any) => {\n    setExamResults(prev => prev.map(result => \n      result.id === studentId \n        ? { ...result, [field]: value }\n        : result\n    ));\n  };\n\n  const addStudentToCategory = (category: 'not_answered' | 'partially_answered' | 'fully_answered') => {\n    const availableStudents = students.filter((student: any) => \n      !examResults.some(result => result.id === student.id)\n    );\n\n    if (availableStudents.length > 0) {\n      const newStudent = availableStudents[0];\n      setExamResults(prev => [...prev, {\n        id: newStudent.id,\n        name: newStudent.name,\n        regId: newStudent.regId,\n        marksObtained: 0,\n        answeredQuestions: category,\n      }]);\n    }\n  };\n\n  const removeStudentFromResults = (studentId: string) => {\n    setExamResults(prev => prev.filter(result => result.id !== studentId));\n  };\n\n  const getTimeRemaining = (examDate: string) => {\n    const now = new Date();\n    const exam = new Date(examDate);\n    const diff = exam.getTime() - now.getTime();\n\n    if (diff <= 0) {\n      return 'Exam date passed';\n    }\n\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n\n    if (days > 0) {\n      return `${days} days, ${hours} hours remaining`;\n    } else {\n      return `${hours} hours remaining`;\n    }\n  };\n\n  const getExamStatus = (exam: any) => {\n    const now = new Date();\n    const examDate = new Date(exam.examDate);\n\n    if (exam.status === 'completed') {\n      return { status: 'completed', color: 'bg-green-500', text: 'Completed' };\n    }\n\n    if (examDate < now) {\n      return { status: 'overdue', color: 'bg-red-500', text: 'Overdue' };\n    }\n\n    return { status: 'scheduled', color: 'bg-blue-500', text: 'Scheduled' };\n  };\n\n  const categorizedResults = {\n    not_answered: examResults.filter(r => r.answeredQuestions === 'not_answered'),\n    partially_answered: examResults.filter(r => r.answeredQuestions === 'partially_answered'),\n    fully_answered: examResults.filter(r => r.answeredQuestions === 'fully_answered'),\n  };\n\n  return (\n    <DashboardLayout title=\"Exam Management\">\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-green-800\">Exam Management</h1>\n            <p className=\"text-green-600 mt-1\">Manage exams and post results for your center</p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              onClick={() => {\n                queryClient.invalidateQueries({ queryKey: ['/api/so-center/exams'] });\n                queryClient.invalidateQueries({ queryKey: ['/api/so-center/students'] });\n              }}\n              variant=\"outline\"\n              size=\"sm\"\n              disabled={isLoadingExams || isLoadingStudents}\n            >\n              {isLoadingExams || isLoadingStudents ? (\n                <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n              ) : (\n                <GraduationCap className=\"h-4 w-4 mr-2\" />\n              )}\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"progress-tracking\">Progress Tracking</TabsTrigger>\n            <TabsTrigger value=\"exams\">Exams & Results</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"progress-tracking\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <GraduationCap size={20} />\n                  <span>Student Progress Overview</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600 mb-4\">Track student progress and exam performance</p>\n                {/* Existing progress tracking content can be integrated here */}\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <Card className=\"bg-blue-50\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm text-blue-600\">Total Students</p>\n                          <p className=\"text-2xl font-bold text-blue-800\">{students.length}</p>\n                        </div>\n                        <Users className=\"text-blue-500\" size={24} />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-green-50\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm text-green-600\">Completed Exams</p>\n                          <p className=\"text-2xl font-bold text-green-800\">\n                            {exams.filter(exam => exam.status === 'completed').length}\n                          </p>\n                        </div>\n                        <CheckCircle className=\"text-green-500\" size={24} />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-orange-50\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm text-orange-600\">Pending Exams</p>\n                          <p className=\"text-2xl font-bold text-orange-800\">\n                            {exams.filter(exam => exam.status !== 'completed').length}\n                          </p>\n                        </div>\n                        <AlertCircle className=\"text-orange-500\" size={24} />\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"exams\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <GraduationCap size={20} />\n                  <span>Exams for Your Center</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {exams.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <GraduationCap size={64} className=\"mx-auto text-gray-300 mb-6\" />\n                    <h3 className=\"text-xl font-semibold text-gray-700 mb-2\">No Exams Available</h3>\n                    <p className=\"text-gray-500 mb-4\">No exams have been assigned to your SO Center yet.</p>\n                    <div className=\"bg-blue-50 p-4 rounded-lg max-w-md mx-auto\">\n                      <p className=\"text-sm text-blue-700\">\n                        <strong>Note:</strong> Exams are created and assigned by the admin. \n                        Contact your administrator if you expect to see exams here.\n                      </p>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {exams.map((exam: any) => {\n                      const status = getExamStatus(exam);\n                      return (\n                        <Card key={exam.id} className=\"p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-3 mb-2\">\n                                <h3 className=\"text-lg font-semibold\">{exam.title}</h3>\n                                <Badge className={`${status.color} text-white text-xs`}>\n                                  {status.text}\n                                </Badge>\n                              </div>\n\n                              <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 text-sm\">\n                                <div>\n                                  <span className=\"text-gray-500\">Class:</span>\n                                  <span className=\"ml-1 font-medium\">{exam.className}</span>\n                                </div>\n                                <div>\n                                  <span className=\"text-gray-500\">Subject:</span>\n                                  <span className=\"ml-1 font-medium\">{exam.subjectName}</span>\n                                </div>\n                                <div>\n                                  <span className=\"text-gray-500\">Date:</span>\n                                  <span className=\"ml-1 font-medium\">{new Date(exam.examDate).toLocaleDateString('en-GB')}</span>\n                                </div>\n                                <div>\n                                  <span className=\"text-gray-500\">Marks:</span>\n                                  <span className=\"ml-1 font-medium\">{exam.totalMarks}</span>\n                                </div>\n                              </div>\n                            </div>\n\n                            <div className=\"flex gap-2 ml-4\">\n                              {exam.status !== 'completed' ? (\n                                <>\n                                  <Button\n                                    size=\"sm\"\n                                    onClick={() => markCompletedMutation.mutate(exam.id)}\n                                    disabled={markCompletedMutation.isPending}\n                                    className=\"bg-blue-600 hover:bg-blue-700\"\n                                  >\n                                    <CheckCircle size={14} className=\"mr-1\" />\n                                    Complete\n                                  </Button>\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    onClick={() => setLocation(`/post-exam-result/${exam.id}`)}\n                                  >\n                                    <FileEdit size={14} className=\"mr-1\" />\n                                    Results\n                                  </Button>\n                                </>\n                              ) : (\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"outline\"\n                                  onClick={() => setLocation(`/post-exam-result/${exam.id}`)}\n                                >\n                                  <Edit3 size={14} className=\"mr-1\" />\n                                  Update\n                                </Button>\n                              )}\n                            </div>\n                          </div>\n                        </Card>\n                      );\n                    })}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        \n\n        {/* Individual Student Marks Modal */}\n        <IndividualStudentMarksModal\n          isOpen={isIndividualMarksModalOpen}\n          onClose={closeIndividualMarksModal}\n          student={selectedStudent}\n          exam={selectedExam}\n        />\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":19915},"client/src/components/ExamCreationForm.tsx":{"content":"import React, { useState } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { MapPin } from \"lucide-react\";\n\ninterface ExamCreationFormProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (formData: FormData) => void;\n  classes: any[];\n  subjects: any[];\n  filteredSoCenters: any[];\n  selectedSoCenterIds: string[];\n  setSelectedSoCenterIds: (ids: string[]) => void;\n}\n\nexport function ExamCreationForm({\n  isOpen,\n  onClose,\n  onSubmit,\n  classes,\n  subjects,\n  filteredSoCenters,\n  selectedSoCenterIds,\n  setSelectedSoCenterIds\n}: ExamCreationFormProps) {\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget as HTMLFormElement);\n    onSubmit(formData);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Create New Exam</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* Basic Information */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"name\">Exam Name</Label>\n              <Input id=\"name\" name=\"name\" placeholder=\"Enter exam name\" required />\n            </div>\n            <div>\n              <Label htmlFor=\"examDate\">Exam Date</Label>\n              <Input id=\"examDate\" name=\"examDate\" type=\"date\" required />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea id=\"description\" name=\"description\" placeholder=\"Enter exam description\" />\n          </div>\n\n          {/* Academic Structure */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"classId\">Class</Label>\n              <Select name=\"classId\" required>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select class\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {classes.filter((cls: any) => cls.id && cls.id.trim() !== '').map((cls: any) => (\n                    <SelectItem key={cls.id} value={cls.id}>\n                      {cls.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"subjectId\">Subject</Label>\n              <Select name=\"subjectId\" required>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select subject\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {subjects.filter((subject: any) => subject.id && subject.id.trim() !== '').map((subject: any) => (\n                    <SelectItem key={subject.id} value={subject.id}>\n                      {subject.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Exam Configuration */}\n          <div className=\"grid grid-cols-3 gap-4\">\n            <div>\n              <Label htmlFor=\"duration\">Duration (minutes)</Label>\n              <Input id=\"duration\" name=\"duration\" type=\"number\" placeholder=\"120\" required />\n            </div>\n            <div>\n              <Label htmlFor=\"totalQuestions\">Total Questions</Label>\n              <Input id=\"totalQuestions\" name=\"totalQuestions\" type=\"number\" placeholder=\"50\" required />\n            </div>\n            <div>\n              <Label htmlFor=\"maxMarks\">Maximum Marks</Label>\n              <Input id=\"maxMarks\" name=\"maxMarks\" type=\"number\" placeholder=\"100\" required />\n            </div>\n          </div>\n\n          <div>\n            <Label htmlFor=\"passingMarks\">Passing Marks</Label>\n            <Input id=\"passingMarks\" name=\"passingMarks\" type=\"number\" placeholder=\"35\" required className=\"w-1/3\" />\n          </div>\n\n          {/* SO Centers Selection */}\n          <div>\n            <div className=\"flex items-center justify-between mb-3\">\n              <Label>SO Centers (Select Multiple)</Label>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => {\n                  if (selectedSoCenterIds.length === filteredSoCenters.length) {\n                    setSelectedSoCenterIds([]);\n                  } else {\n                    setSelectedSoCenterIds(filteredSoCenters.map((center: any) => center.id));\n                  }\n                }}\n                className=\"text-xs\"\n              >\n                {selectedSoCenterIds.length === filteredSoCenters.length ? 'Unselect All' : 'Select All'}\n              </Button>\n            </div>\n            <div className=\"grid grid-cols-2 gap-2 max-h-40 overflow-y-auto border rounded-lg p-3\">\n              {filteredSoCenters.length === 0 ? (\n                <div className=\"col-span-2 text-center text-gray-500 py-4\">\n                  <p>No SO Centers available</p>\n                  <p className=\"text-xs\">Try adjusting the location filters</p>\n                </div>\n              ) : (\n                filteredSoCenters.map((center: any) => (\n                  <div key={center.id} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={`center-${center.id}`}\n                      checked={selectedSoCenterIds.includes(center.id)}\n                      onCheckedChange={(checked) => {\n                        if (checked) {\n                          setSelectedSoCenterIds([...selectedSoCenterIds, center.id]);\n                        } else {\n                          setSelectedSoCenterIds(selectedSoCenterIds.filter(id => id !== center.id));\n                        }\n                      }}\n                    />\n                    <Label htmlFor={`center-${center.id}`} className=\"text-xs\">\n                      <div className=\"flex items-center space-x-1\">\n                        <MapPin size={12} />\n                        <span>{center.name || center.centerName || 'Unnamed Center'}</span>\n                        <span className=\"text-gray-500\">({center.code || center.id.slice(0, 8)})</span>\n                      </div>\n                    </Label>\n                  </div>\n                ))\n              )}\n            </div>\n            <p className=\"text-xs text-gray-500 mt-2\">\n              Selected: {selectedSoCenterIds.length} of {filteredSoCenters.length} centers\n            </p>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" className=\"bg-primary text-white\">\n              Create Exam\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7387},"client/src/pages/Settings.tsx":{"content":"import DashboardLayout from \"@/components/layout/DashboardLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Settings as SettingsIcon, Moon, Sun, Monitor } from \"lucide-react\";\nimport { useTheme } from \"@/components/theme/ThemeProvider\";\n\nexport default function Settings() {\n  const { theme, setTheme, toggleTheme } = useTheme();\n\n  return (\n    <DashboardLayout title=\"Settings\" subtitle=\"Manage your account and application preferences\">\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center gap-2\">\n          <SettingsIcon className=\"h-6 w-6\" />\n          <h1 className=\"text-2xl font-bold\">Settings</h1>\n        </div>\n\n        {/* Theme Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Monitor className=\"h-5 w-5\" />\n              Appearance\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Dark/Light Mode Toggle */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-1\">\n                <Label className=\"text-base font-medium\">Dark Mode</Label>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Switch between light and dark themes for better viewing experience\n                </p>\n              </div>\n              <div className=\"flex items-center gap-3\">\n                <Sun className=\"h-4 w-4 text-yellow-500\" />\n                <Switch\n                  checked={theme === 'dark'}\n                  onCheckedChange={toggleTheme}\n                  className=\"data-[state=checked]:bg-blue-600\"\n                />\n                <Moon className=\"h-4 w-4 text-blue-500\" />\n              </div>\n            </div>\n\n            {/* Theme Selection */}\n            <div className=\"space-y-3\">\n              <Label className=\"text-base font-medium\">Theme Preference</Label>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n                <button\n                  onClick={() => setTheme('light')}\n                  className={`p-4 border-2 rounded-lg flex items-center gap-3 transition-colors ${\n                    theme === 'light' \n                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-950' \n                      : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'\n                  }`}\n                >\n                  <Sun className=\"h-5 w-5 text-yellow-500\" />\n                  <div className=\"text-left\">\n                    <div className=\"font-medium\">Light</div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">Bright and clean</div>\n                  </div>\n                </button>\n\n                <button\n                  onClick={() => setTheme('dark')}\n                  className={`p-4 border-2 rounded-lg flex items-center gap-3 transition-colors ${\n                    theme === 'dark' \n                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-950' \n                      : 'border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'\n                  }`}\n                >\n                  <Moon className=\"h-5 w-5 text-blue-500\" />\n                  <div className=\"text-left\">\n                    <div className=\"font-medium\">Dark</div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">Easy on the eyes</div>\n                  </div>\n                </button>\n\n                <button\n                  onClick={() => setTheme(window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light')}\n                  className=\"p-4 border-2 rounded-lg flex items-center gap-3 transition-colors border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600\"\n                >\n                  <Monitor className=\"h-5 w-5 text-gray-500\" />\n                  <div className=\"text-left\">\n                    <div className=\"font-medium\">System</div>\n                    <div className=\"text-sm text-gray-600 dark:text-gray-400\">Match device</div>\n                  </div>\n                </button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Application Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Application Settings</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-1\">\n                <Label className=\"text-base font-medium\">Notifications</Label>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Receive notifications for important updates\n                </p>\n              </div>\n              <Switch defaultChecked />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-1\">\n                <Label className=\"text-base font-medium\">Auto-save</Label>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Automatically save changes as you work\n                </p>\n              </div>\n              <Switch defaultChecked />\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-1\">\n                <Label className=\"text-base font-medium\">Compact View</Label>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Show more data in less space\n                </p>\n              </div>\n              <Switch />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* About Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle>About</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span className=\"font-medium\">Application</span>\n                <span className=\"text-gray-600 dark:text-gray-400\">Navanidhi Academy Management</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"font-medium\">Version</span>\n                <span className=\"text-gray-600 dark:text-gray-400\">1.0.0</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"font-medium\">Last Updated</span>\n                <span className=\"text-gray-600 dark:text-gray-400\">August 2025</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":6862},"client/src/components/announcements/AnnouncementsPopup.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useAuth } from '@/hooks/useAuth';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\nimport { X, Megaphone, Calendar, Users, AlertCircle } from 'lucide-react';\n\ninterface Announcement {\n  id: string;\n  title: string;\n  description: string;\n  content?: string;\n  targetAudience: string[];\n  priority: 'low' | 'normal' | 'high' | 'urgent';\n  imageUrl?: string;\n  fromDate: string;\n  toDate: string;\n  isActive: boolean;\n  showOnQrCode: boolean;\n  createdAt: string;\n}\n\nexport function AnnouncementsPopup() {\n  const { user } = useAuth();\n  const [isOpen, setIsOpen] = useState(false);\n  const [dismissedAnnouncements, setDismissedAnnouncements] = useState<string[]>(() => {\n    const stored = localStorage.getItem('dismissedAnnouncements');\n    return stored ? JSON.parse(stored) : [];\n  });\n\n  // Get announcements based on user role\n  const getAnnouncementsEndpoint = () => {\n    if (!user?.role) return null;\n    \n    switch (user.role) {\n      case 'admin':\n        return '/api/admin/active-announcements';\n      case 'so_center':\n        return '/api/so-center/active-announcements';\n      case 'teacher':\n        return '/api/teacher/active-announcements';\n      default:\n        return `/api/announcements/${user.role}`;\n    }\n  };\n\n  const { data: announcements = [], isLoading } = useQuery({\n    queryKey: ['active-announcements', user?.role],\n    queryFn: async () => {\n      const endpoint = getAnnouncementsEndpoint();\n      if (!endpoint) return [];\n      \n      const response = await apiRequest('GET', endpoint);\n      return response.json();\n    },\n    enabled: !!user?.role,\n    refetchInterval: 5 * 60 * 1000, // Refetch every 5 minutes\n  });\n\n  // Filter out dismissed announcements and show only relevant ones\n  const activeAnnouncements = announcements.filter((announcement: Announcement) => \n    !dismissedAnnouncements.includes(announcement.id) &&\n    announcement.isActive &&\n    new Date(announcement.fromDate) <= new Date() &&\n    new Date(announcement.toDate) >= new Date() &&\n    (\n      announcement.targetAudience.includes('all') ||\n      announcement.targetAudience.includes(user?.role || '') ||\n      (user?.role === 'so_center' && announcement.targetAudience.includes('so_centers'))\n    )\n  );\n\n  // Auto-open popup when there are new announcements\n  useEffect(() => {\n    if (activeAnnouncements.length > 0 && !isOpen) {\n      setIsOpen(true);\n    }\n  }, [activeAnnouncements.length, isOpen]);\n\n  const handleDismiss = (announcementId: string) => {\n    const newDismissed = [...dismissedAnnouncements, announcementId];\n    setDismissedAnnouncements(newDismissed);\n    localStorage.setItem('dismissedAnnouncements', JSON.stringify(newDismissed));\n    \n    // Close popup if no more announcements\n    if (activeAnnouncements.length === 1) {\n      setIsOpen(false);\n    }\n  };\n\n  const handleCloseAll = () => {\n    const allIds = activeAnnouncements.map((a: Announcement) => a.id);\n    const newDismissed = [...dismissedAnnouncements, ...allIds];\n    setDismissedAnnouncements(newDismissed);\n    localStorage.setItem('dismissedAnnouncements', JSON.stringify(newDismissed));\n    setIsOpen(false);\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'urgent': return 'bg-red-100 text-red-800 border-red-200';\n      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200';\n      case 'normal': return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'low': return 'bg-green-100 text-green-800 border-green-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getPriorityIcon = (priority: string) => {\n    switch (priority) {\n      case 'urgent':\n      case 'high':\n        return <AlertCircle className=\"h-4 w-4\" />;\n      default:\n        return <Megaphone className=\"h-4 w-4\" />;\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  if (isLoading || activeAnnouncements.length === 0) {\n    return null;\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader className=\"flex flex-row items-center justify-between\">\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Megaphone className=\"h-5 w-5 text-blue-600\" />\n            Active Announcements ({activeAnnouncements.length})\n          </DialogTitle>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleCloseAll}\n            className=\"text-gray-500 hover:text-gray-700\"\n          >\n            <X className=\"h-4 w-4\" />\n            Close All\n          </Button>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {activeAnnouncements.map((announcement: Announcement, index: number) => (\n            <Card key={announcement.id} className=\"relative\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center gap-2 flex-1\">\n                    <div className={`p-1 rounded ${getPriorityColor(announcement.priority)} flex items-center gap-1`}>\n                      {getPriorityIcon(announcement.priority)}\n                      <span className=\"text-xs font-medium capitalize\">\n                        {announcement.priority}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center gap-1 text-xs text-gray-500\">\n                      <Calendar className=\"h-3 w-3\" />\n                      {formatDate(announcement.fromDate)} - {formatDate(announcement.toDate)}\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleDismiss(announcement.id)}\n                    className=\"h-6 w-6 p-0 text-gray-400 hover:text-gray-600\"\n                  >\n                    <X className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n                <CardTitle className=\"text-lg font-semibold text-gray-900\">\n                  {announcement.title}\n                </CardTitle>\n              </CardHeader>\n\n              <CardContent className=\"space-y-3\">\n                <p className=\"text-gray-700 leading-relaxed\">\n                  {announcement.description}\n                </p>\n\n                {announcement.content && (\n                  <div className=\"bg-gray-50 p-3 rounded-md\">\n                    <p className=\"text-sm text-gray-600 whitespace-pre-wrap\">\n                      {announcement.content}\n                    </p>\n                  </div>\n                )}\n\n                {announcement.imageUrl && (\n                  <div className=\"rounded-md overflow-hidden\">\n                    <img\n                      src={announcement.imageUrl}\n                      alt=\"Announcement banner\"\n                      className=\"w-full h-auto max-h-48 object-cover\"\n                      onError={(e) => {\n                        e.currentTarget.style.display = 'none';\n                      }}\n                    />\n                  </div>\n                )}\n\n                <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                  <div className=\"flex items-center gap-1\">\n                    <Users className=\"h-3 w-3\" />\n                    <span>For: {announcement.targetAudience.join(', ')}</span>\n                  </div>\n                  <span>Posted: {formatDate(announcement.createdAt)}</span>\n                </div>\n              </CardContent>\n\n              {index < activeAnnouncements.length - 1 && (\n                <Separator className=\"my-4\" />\n              )}\n            </Card>\n          ))}\n        </div>\n\n        <div className=\"flex justify-end gap-2 pt-4 border-t\">\n          <Button variant=\"outline\" onClick={() => setIsOpen(false)}>\n            Close\n          </Button>\n          <Button onClick={handleCloseAll}>\n            Dismiss All\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8659},"client/src/components/InvoiceGenerator.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Receipt, Copy, Share, Download } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface CourseInvoiceData {\n  transactionId: string;\n  productName: string;\n  studentName: string;\n  coursePrice: number;\n  commissionAmount: number;\n  purchaseDate: string;\n  agentEmail: string;\n}\n\ninterface WithdrawalInvoiceData {\n  transactionId: string;\n  withdrawalId: string;\n  amount: number;\n  paymentMode: string;\n  paymentDetails: string;\n  userEmail: string;\n  userName: string;\n  processedAt: string;\n  type: 'withdrawal';\n}\n\ntype InvoiceData = CourseInvoiceData | WithdrawalInvoiceData;\n\ninterface InvoiceGeneratorProps {\n  invoiceData: InvoiceData | null;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function InvoiceGenerator({ invoiceData, isOpen, onClose }: InvoiceGeneratorProps) {\n  const { toast } = useToast();\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  if (!invoiceData) return null;\n\n  const formatCurrency = (amount: number) => {\n    if (typeof amount !== 'number' || isNaN(amount)) {\n      return '₹0';\n    }\n    return `₹${amount.toLocaleString('en-IN')}`;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const generateInvoiceText = () => {\n    if ('type' in invoiceData && invoiceData.type === 'withdrawal') {\n      return `\n🧾 NAVANIDHI ACADEMY WITHDRAWAL RECEIPT\n=====================================\n\n📋 TRANSACTION DETAILS\nTransaction ID: ${invoiceData.transactionId}\nWithdrawal ID: ${invoiceData.withdrawalId}\nDate & Time: ${formatDate(invoiceData.processedAt)}\n\n💰 PAYMENT INFORMATION\nAmount: ${formatCurrency(invoiceData.amount)}\nPayment Mode: ${invoiceData.paymentMode.toUpperCase()}\nPayment Details: ${invoiceData.paymentDetails}\n\n👤 RECIPIENT DETAILS\nName: ${invoiceData.userName}\nEmail: ${invoiceData.userEmail}\n\n✅ STATUS: APPROVED & PROCESSED\n`;\n    } else {\n      const courseData = invoiceData as CourseInvoiceData;\n      return `\n🧾 NAVANIDHI ACADEMY INVOICE\n================================\n\n📋 TRANSACTION DETAILS\nTransaction ID: ${courseData.transactionId}\nDate & Time: ${formatDate(courseData.purchaseDate)}\n\n👨‍🎓 COURSE INFORMATION\nCourse Name: ${courseData.productName}\nStudent Name: ${courseData.studentName}\nCourse Fee: ${formatCurrency(courseData.coursePrice)}\n\n💰 COMMISSION DETAILS\nAgent Email: ${courseData.agentEmail}\nCommission Rate: ${((courseData.commissionAmount / courseData.coursePrice) * 100).toFixed(1)}%\nCommission Amount: ${formatCurrency(courseData.commissionAmount)}\n\n📊 PAYMENT SUMMARY\nTotal Course Fee: ${formatCurrency(courseData.coursePrice)}\nCommission Earned: ${formatCurrency(courseData.commissionAmount)}\n\n================================\nThank you for your business!\nNavanidhi Academy Management System\n`;\n    }\n  };\n\n  const handleCopyInvoice = async () => {\n    try {\n      const invoiceText = generateInvoiceText();\n      await navigator.clipboard.writeText(invoiceText);\n      toast({\n        title: \"Invoice Copied!\",\n        description: \"Invoice details have been copied to clipboard.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Copy Failed\",\n        description: \"Failed to copy invoice to clipboard.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleShareInvoice = async () => {\n    try {\n      const invoiceText = generateInvoiceText();\n      if (navigator.share) {\n        await navigator.share({\n          title: 'Course Purchase Invoice',\n          text: invoiceText,\n        });\n      } else {\n        // Fallback to copy\n        await navigator.clipboard.writeText(invoiceText);\n        toast({\n          title: \"Invoice Copied!\",\n          description: \"Invoice details copied to clipboard (sharing not supported).\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Share Failed\",\n        description: \"Failed to share invoice.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDownloadInvoice = () => {\n    setIsGenerating(true);\n    try {\n      const invoiceText = generateInvoiceText();\n      const blob = new Blob([invoiceText], { type: 'text/plain' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `Invoice_${invoiceData.transactionId}.txt`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n      \n      toast({\n        title: \"Invoice Downloaded!\",\n        description: \"Invoice has been saved to your device.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Download Failed\",\n        description: \"Failed to download invoice.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Receipt className=\"h-5 w-5\" />\n            Course Purchase Invoice\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Invoice Display */}\n          <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4 font-mono text-sm\">\n            <pre className=\"whitespace-pre-wrap text-gray-800\">\n              {generateInvoiceText()}\n            </pre>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"grid grid-cols-3 gap-3\">\n            <Button\n              variant=\"outline\"\n              onClick={handleCopyInvoice}\n              className=\"flex items-center gap-2\"\n            >\n              <Copy className=\"h-4 w-4\" />\n              Copy\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={handleShareInvoice}\n              className=\"flex items-center gap-2\"\n            >\n              <Share className=\"h-4 w-4\" />\n              Share\n            </Button>\n            \n            <Button\n              onClick={handleDownloadInvoice}\n              disabled={isGenerating}\n              className=\"flex items-center gap-2 bg-blue-600 hover:bg-blue-700\"\n            >\n              <Download className=\"h-4 w-4\" />\n              {isGenerating ? 'Saving...' : 'Download'}\n            </Button>\n          </div>\n\n          <div className=\"text-center\">\n            <Button\n              variant=\"ghost\"\n              onClick={onClose}\n              className=\"w-full\"\n            >\n              Close\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6974},"client/src/components/exam/IndividualStudentMarksModal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  User, \n  GraduationCap, \n  CheckCircle2, \n  AlertCircle, \n  XCircle, \n  CircleX,\n  Save,\n  Plus,\n  Trash2\n} from 'lucide-react';\n\ninterface StudentQuestion {\n  questionId: string;\n  questionText: string;\n  maxMarks: number;\n  marksObtained: number;\n  answerStatus: 'not_answered' | 'partial_answered' | 'wrong_answer' | 'full_answer';\n}\n\ninterface StudentDetailedResult {\n  studentId: string;\n  totalMarks: number;\n  questions: StudentQuestion[];\n}\n\ninterface IndividualStudentMarksModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  student: {\n    id: string;\n    name: string;\n    studentId: string;\n    className: string;\n  } | null;\n  exam: {\n    id: string;\n    title: string;\n    totalMarks: number;\n    totalQuestions: number;\n    className: string;\n    subjectName: string;\n  } | null;\n}\n\nconst answerStatusOptions = [\n  { value: 'not_answered', label: 'Not Answered', color: 'bg-red-100 text-red-800', icon: XCircle },\n  { value: 'partial_answered', label: 'Partial Answered', color: 'bg-yellow-100 text-yellow-800', icon: AlertCircle },\n  { value: 'wrong_answer', label: 'Wrong Answer', color: 'bg-orange-100 text-orange-800', icon: CircleX },\n  { value: 'full_answer', label: 'Full Answer', color: 'bg-green-100 text-green-800', icon: CheckCircle2 },\n];\n\nexport default function IndividualStudentMarksModal({ \n  isOpen, \n  onClose, \n  student, \n  exam \n}: IndividualStudentMarksModalProps) {\n  const [studentResult, setStudentResult] = useState<StudentDetailedResult | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch exam questions\n  const { data: examQuestions = [] } = useQuery({\n    queryKey: ['/api/exams', exam?.id, 'questions'],\n    queryFn: async () => {\n      if (!exam?.id) return [];\n      const response = await apiRequest('GET', `/api/exams/${exam.id}/questions`);\n      return await response.json();\n    },\n    enabled: !!exam?.id && isOpen,\n  });\n\n  // Fetch existing student results for this exam\n  const { data: existingResult } = useQuery({\n    queryKey: ['/api/exams', exam?.id, 'student-results', student?.id],\n    queryFn: async () => {\n      if (!exam?.id || !student?.id) return null;\n      const response = await apiRequest('GET', `/api/exams/${exam.id}/student-results/${student.id}`);\n      if (response.status === 404) return null;\n      return await response.json();\n    },\n    enabled: !!exam?.id && !!student?.id && isOpen,\n  });\n\n  // Initialize student result when modal opens\n  useEffect(() => {\n    if (isOpen && examQuestions.length > 0 && student && exam) {\n      if (existingResult) {\n        // Load existing results\n        setStudentResult(existingResult);\n      } else {\n        // Initialize new result\n        const initialQuestions = examQuestions.map((question: any) => ({\n          questionId: question.id,\n          questionText: question.text,\n          maxMarks: question.marks,\n          marksObtained: 0,\n          answerStatus: 'not_answered' as const,\n        }));\n\n        setStudentResult({\n          studentId: student.id,\n          totalMarks: 0,\n          questions: initialQuestions,\n        });\n      }\n    }\n  }, [isOpen, examQuestions, student, exam, existingResult]);\n\n  // Calculate total marks when individual question marks change\n  useEffect(() => {\n    if (studentResult) {\n      const total = studentResult.questions.reduce((sum, q) => sum + q.marksObtained, 0);\n      setStudentResult(prev => prev ? { ...prev, totalMarks: total } : null);\n    }\n  }, [studentResult?.questions]);\n\n  // Save student result mutation\n  const saveResultMutation = useMutation({\n    mutationFn: async (resultData: StudentDetailedResult) => {\n      if (!exam?.id) throw new Error('No exam selected');\n      const response = await apiRequest('POST', `/api/exams/${exam.id}/student-results`, resultData);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Marks Saved Successfully',\n        description: `${student?.name}'s exam results have been saved.`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/so-center/exams'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/exams', exam?.id, 'student-results'] });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error Saving Marks',\n        description: 'Failed to save student marks. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const updateQuestionResult = (questionId: string, field: keyof StudentQuestion, value: any) => {\n    if (!studentResult) return;\n\n    setStudentResult(prev => {\n      if (!prev) return null;\n      return {\n        ...prev,\n        questions: prev.questions.map(q =>\n          q.questionId === questionId\n            ? { ...q, [field]: value }\n            : q\n        ),\n      };\n    });\n  };\n\n  const addQuestion = () => {\n    if (!studentResult || !examQuestions.length) return;\n\n    // Find questions not yet added\n    const availableQuestions = examQuestions.filter((q: any) => \n      !studentResult.questions.some(sq => sq.questionId === q.id)\n    );\n\n    if (availableQuestions.length > 0) {\n      const newQuestion = availableQuestions[0];\n      setStudentResult(prev => {\n        if (!prev) return null;\n        return {\n          ...prev,\n          questions: [...prev.questions, {\n            questionId: newQuestion.id,\n            questionText: newQuestion.text,\n            maxMarks: newQuestion.marks,\n            marksObtained: 0,\n            answerStatus: 'not_answered' as const,\n          }],\n        };\n      });\n    }\n  };\n\n  const removeQuestion = (questionId: string) => {\n    if (!studentResult) return;\n\n    setStudentResult(prev => {\n      if (!prev) return null;\n      return {\n        ...prev,\n        questions: prev.questions.filter(q => q.questionId !== questionId),\n      };\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    const option = answerStatusOptions.find(opt => opt.value === status);\n    return option?.color || 'bg-gray-100 text-gray-800';\n  };\n\n  const getStatusIcon = (status: string) => {\n    const option = answerStatusOptions.find(opt => opt.value === status);\n    return option?.icon || XCircle;\n  };\n\n  if (!student || !exam || !isOpen) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            Individual Marks Entry - {student.name}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Student and Exam Info */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm flex items-center gap-2\">\n                  <User className=\"h-4 w-4\" />\n                  Student Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <div>\n                  <Label className=\"text-xs text-gray-500\">Student Name</Label>\n                  <p className=\"font-medium\">{student.name}</p>\n                </div>\n                <div>\n                  <Label className=\"text-xs text-gray-500\">Student ID</Label>\n                  <p className=\"font-medium\">{student.studentId}</p>\n                </div>\n                <div>\n                  <Label className=\"text-xs text-gray-500\">Class</Label>\n                  <p className=\"font-medium\">{student.className}</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm flex items-center gap-2\">\n                  <GraduationCap className=\"h-4 w-4\" />\n                  Exam Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <div>\n                  <Label className=\"text-xs text-gray-500\">Exam Title</Label>\n                  <p className=\"font-medium\">{exam.title}</p>\n                </div>\n                <div>\n                  <Label className=\"text-xs text-gray-500\">Subject</Label>\n                  <p className=\"font-medium\">{exam.subjectName}</p>\n                </div>\n                <div>\n                  <Label className=\"text-xs text-gray-500\">Total Marks</Label>\n                  <p className=\"font-medium\">{exam.totalMarks}</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Total Score Display */}\n          {studentResult && (\n            <Card className=\"bg-blue-50 border-blue-200\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label className=\"text-sm text-blue-600\">Total Marks Obtained</Label>\n                    <p className=\"text-2xl font-bold text-blue-800\">\n                      {studentResult.totalMarks} / {exam.totalMarks}\n                    </p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm text-blue-600\">Percentage</Label>\n                    <p className=\"text-xl font-semibold text-blue-800\">\n                      {exam.totalMarks > 0 ? Math.round((studentResult.totalMarks / exam.totalMarks) * 100) : 0}%\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Questions Section */}\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle className=\"text-lg\">Question-wise Marks Entry</CardTitle>\n              <Button\n                onClick={addQuestion}\n                size=\"sm\"\n                variant=\"outline\"\n                disabled={!studentResult || studentResult.questions.length >= examQuestions.length}\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Question\n              </Button>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {studentResult?.questions.map((question, index) => {\n                const StatusIcon = getStatusIcon(question.answerStatus);\n                return (\n                  <div key={question.questionId} className=\"border border-gray-200 rounded-lg p-4\">\n                    <div className=\"flex items-start justify-between mb-3\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <Label className=\"text-sm font-medium\">Question {index + 1}</Label>\n                          <Badge className={getStatusColor(question.answerStatus)}>\n                            <StatusIcon className=\"h-3 w-3 mr-1\" />\n                            {answerStatusOptions.find(opt => opt.value === question.answerStatus)?.label}\n                          </Badge>\n                        </div>\n                        \n                        {/* Question Selection Dropdown */}\n                        <div className=\"mb-3\">\n                          <Label className=\"text-xs text-gray-500\">Select Question</Label>\n                          <Select \n                            value={question.questionId} \n                            onValueChange={(value) => {\n                              const selectedQuestion = examQuestions.find((q: any) => q.id === value);\n                              if (selectedQuestion) {\n                                updateQuestionResult(question.questionId, 'questionId', value);\n                                updateQuestionResult(question.questionId, 'questionText', selectedQuestion.text);\n                                updateQuestionResult(question.questionId, 'maxMarks', selectedQuestion.marks);\n                              }\n                            }}\n                          >\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select a question\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {examQuestions.map((q: any) => (\n                                <SelectItem key={q.id} value={q.id}>\n                                  Q{q.questionNumber}: {q.text.substring(0, 60)}...\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n\n                        <p className=\"text-sm text-gray-600 mb-3\">{question.questionText}</p>\n                      </div>\n\n                      <Button\n                        onClick={() => removeQuestion(question.questionId)}\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        className=\"text-red-500 hover:text-red-700\"\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      {/* Marks Input */}\n                      <div>\n                        <Label className=\"text-sm\">Marks Obtained</Label>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <Input\n                            type=\"number\"\n                            min=\"0\"\n                            max={question.maxMarks}\n                            value={question.marksObtained}\n                            onChange={(e) => updateQuestionResult(\n                              question.questionId, \n                              'marksObtained', \n                              Math.min(parseInt(e.target.value) || 0, question.maxMarks)\n                            )}\n                            className=\"flex-1\"\n                          />\n                          <span className=\"text-sm text-gray-500\">/ {question.maxMarks}</span>\n                        </div>\n                      </div>\n\n                      {/* Answer Status */}\n                      <div>\n                        <Label className=\"text-sm\">Answer Status</Label>\n                        <Select \n                          value={question.answerStatus} \n                          onValueChange={(value) => updateQuestionResult(question.questionId, 'answerStatus', value)}\n                        >\n                          <SelectTrigger className=\"mt-1\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {answerStatusOptions.map((option) => {\n                              const Icon = option.icon;\n                              return (\n                                <SelectItem key={option.value} value={option.value}>\n                                  <div className=\"flex items-center gap-2\">\n                                    <Icon className=\"h-4 w-4\" />\n                                    {option.label}\n                                  </div>\n                                </SelectItem>\n                              );\n                            })}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n\n              {studentResult?.questions.length === 0 && (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <GraduationCap className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                  <p>No questions added yet. Click \"Add Question\" to start entering marks.</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end gap-3 pt-4 border-t\">\n            <Button variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button \n              onClick={() => studentResult && saveResultMutation.mutate(studentResult)}\n              disabled={!studentResult || saveResultMutation.isPending}\n              className=\"bg-green-600 hover:bg-green-700\"\n            >\n              <Save className=\"h-4 w-4 mr-2\" />\n              {saveResultMutation.isPending ? 'Saving...' : 'Save Marks'}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":17340},"client/src/pages/admin/DropoutRequestsManagement.tsx":{"content":"\nimport { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, Search, FileText, Clock, CheckCircle, XCircle, Eye } from \"lucide-react\";\nimport DashboardLayout from \"@/components/layout/DashboardLayout\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n\ninterface DropoutRequest {\n  id: string;\n  studentId: string;\n  studentName: string;\n  studentStudentId: string;\n  reason: string;\n  status: 'pending' | 'approved' | 'rejected';\n  requestDate: string;\n  processedDate?: string;\n  adminNotes?: string;\n  soCenterName: string;\n}\n\nexport default function DropoutRequestsManagement() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedRequest, setSelectedRequest] = useState<DropoutRequest | null>(null);\n  const [isProcessDialogOpen, setIsProcessDialogOpen] = useState(false);\n  const [adminNotes, setAdminNotes] = useState(\"\");\n  const [processingStatus, setProcessingStatus] = useState<'approved' | 'rejected'>('approved');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: requestsResponse = [], isLoading } = useQuery({\n    queryKey: [\"/api/dropout-requests\"],\n    queryFn: () => apiRequest(\"GET\", \"/api/dropout-requests\"),\n  });\n  \n  // Ensure requests is always an array\n  const requests = Array.isArray(requestsResponse) ? requestsResponse : [];\n\n  const processRequestMutation = useMutation({\n    mutationFn: async ({ requestId, status, adminNotes }: { \n      requestId: string; \n      status: 'approved' | 'rejected'; \n      adminNotes?: string; \n    }) => {\n      return apiRequest(\"PATCH\", `/api/dropout-requests/${requestId}`, { status, adminNotes });\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/dropout-requests\"] });\n      toast({\n        title: \"Success\",\n        description: `Dropout request ${variables.status} successfully`,\n      });\n      setIsProcessDialogOpen(false);\n      setSelectedRequest(null);\n      setAdminNotes(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to process dropout request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleProcessRequest = () => {\n    if (!selectedRequest) return;\n\n    processRequestMutation.mutate({\n      requestId: selectedRequest.id,\n      status: processingStatus,\n      adminNotes: adminNotes.trim() || undefined,\n    });\n  };\n\n  const openProcessDialog = (request: DropoutRequest, status: 'approved' | 'rejected') => {\n    setSelectedRequest(request);\n    setProcessingStatus(status);\n    setAdminNotes(\"\");\n    setIsProcessDialogOpen(true);\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return (\n          <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-700\">\n            <Clock className=\"h-3 w-3 mr-1\" />\n            Pending\n          </Badge>\n        );\n      case 'approved':\n        return (\n          <Badge variant=\"secondary\" className=\"bg-green-100 text-green-700\">\n            <CheckCircle className=\"h-3 w-3 mr-1\" />\n            Approved\n          </Badge>\n        );\n      case 'rejected':\n        return (\n          <Badge variant=\"secondary\" className=\"bg-red-100 text-red-700\">\n            <XCircle className=\"h-3 w-3 mr-1\" />\n            Rejected\n          </Badge>\n        );\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const filteredRequests = requests.length > 0 ? requests.filter((request: DropoutRequest) => {\n    const searchLower = searchTerm.toLowerCase();\n    return (\n      request.studentName.toLowerCase().includes(searchLower) ||\n      request.studentStudentId.toLowerCase().includes(searchLower) ||\n      request.soCenterName.toLowerCase().includes(searchLower) ||\n      request.reason.toLowerCase().includes(searchLower)\n    );\n  }) : [];\n\n  const pendingCount = requests.length > 0 ? requests.filter((r: DropoutRequest) => r.status === 'pending').length : 0;\n  const approvedCount = requests.length > 0 ? requests.filter((r: DropoutRequest) => r.status === 'approved').length : 0;\n  const rejectedCount = requests.length > 0 ? requests.filter((r: DropoutRequest) => r.status === 'rejected').length : 0;\n\n  if (isLoading) {\n    return (\n      <DashboardLayout title=\"Dropout Requests Management\" subtitle=\"Review and process student dropout requests from SO Centers\">\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <Loader2 className=\"h-8 w-8 animate-spin\" />\n          <span className=\"ml-2\">Loading dropout requests...</span>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout title=\"Dropout Requests Management\" subtitle=\"Review and process student dropout requests from SO Centers\">\n      <div className=\"space-y-6\">\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Requests</CardTitle>\n              <FileText className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{requests.length}</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Pending Review</CardTitle>\n              <Clock className=\"h-4 w-4 text-yellow-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-yellow-600\">{pendingCount}</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Approved</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-green-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">{approvedCount}</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Rejected</CardTitle>\n              <XCircle className=\"h-4 w-4 text-red-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600\">{rejectedCount}</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search Filter */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Search Requests</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"relative\">\n              <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search by student name, ID, SO Center, or reason...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-8\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Requests Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Dropout Requests ({filteredRequests.length})</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"rounded-md border\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Student</TableHead>\n                    <TableHead>Student ID</TableHead>\n                    <TableHead>SO Center</TableHead>\n                    <TableHead>Reason</TableHead>\n                    <TableHead>Request Date</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredRequests.map((request: DropoutRequest) => (\n                    <TableRow key={request.id}>\n                      <TableCell className=\"font-medium\">\n                        {request.studentName}\n                      </TableCell>\n                      <TableCell>{request.studentStudentId}</TableCell>\n                      <TableCell>{request.soCenterName}</TableCell>\n                      <TableCell className=\"max-w-xs\">\n                        <div className=\"truncate\" title={request.reason}>\n                          {request.reason}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {new Date(request.requestDate).toLocaleDateString()}\n                      </TableCell>\n                      <TableCell>\n                        {getStatusBadge(request.status)}\n                      </TableCell>\n                      <TableCell>\n                        {request.status === 'pending' ? (\n                          <div className=\"flex gap-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"default\"\n                              onClick={() => openProcessDialog(request, 'approved')}\n                            >\n                              <CheckCircle className=\"h-4 w-4 mr-1\" />\n                              Approve\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"destructive\"\n                              onClick={() => openProcessDialog(request, 'rejected')}\n                            >\n                              <XCircle className=\"h-4 w-4 mr-1\" />\n                              Reject\n                            </Button>\n                          </div>\n                        ) : (\n                          <div className=\"text-sm text-muted-foreground\">\n                            {request.processedDate && (\n                              <div>Processed: {new Date(request.processedDate).toLocaleDateString()}</div>\n                            )}\n                            {request.adminNotes && (\n                              <div className=\"mt-1 max-w-xs truncate\" title={request.adminNotes}>\n                                Notes: {request.adminNotes}\n                              </div>\n                            )}\n                          </div>\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n            \n            {filteredRequests.length === 0 && (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <FileText className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p>No dropout requests found.</p>\n                {searchTerm && (\n                  <p className=\"text-sm\">Try adjusting your search criteria.</p>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Process Request Dialog */}\n        <Dialog open={isProcessDialogOpen} onOpenChange={setIsProcessDialogOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>\n                {processingStatus === 'approved' ? 'Approve' : 'Reject'} Dropout Request\n              </DialogTitle>\n              <DialogDescription>\n                {selectedRequest && (\n                  <>\n                    Student: {selectedRequest.studentName} ({selectedRequest.studentStudentId})\n                    <br />\n                    SO Center: {selectedRequest.soCenterName}\n                    <br />\n                    Reason: {selectedRequest.reason}\n                  </>\n                )}\n              </DialogDescription>\n            </DialogHeader>\n            \n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"admin-notes\">Admin Notes (Optional)</Label>\n                <Textarea\n                  id=\"admin-notes\"\n                  placeholder=\"Add any additional notes about this decision...\"\n                  value={adminNotes}\n                  onChange={(e) => setAdminNotes(e.target.value)}\n                  rows={3}\n                />\n              </div>\n            </div>\n            \n            <DialogFooter>\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsProcessDialogOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                variant={processingStatus === 'approved' ? 'default' : 'destructive'}\n                onClick={handleProcessRequest}\n                disabled={processRequestMutation.isPending}\n              >\n                {processRequestMutation.isPending && (\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                )}\n                {processingStatus === 'approved' ? 'Approve Request' : 'Reject Request'}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":14043},"client/src/pages/admin/TopicsManagement.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Separator } from '@/components/ui/separator';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Plus, Edit, Trash2, BookOpen, FileText, Target, Flag, Star } from 'lucide-react';\n\n// Schemas\nconst chapterSchema = z.object({\n  name: z.string().min(1, 'Chapter name is required'),\n  description: z.string().optional(),\n  subjectId: z.string().min(1, 'Subject selection is required'),\n  order: z.string().optional(),\n});\n\nconst topicSchema = z.object({\n  name: z.string().min(1, 'Topic name is required'),\n  description: z.string().optional(),\n  chapterId: z.string().min(1, 'Chapter selection is required'),\n  isImportant: z.boolean().default(false),\n  isModerate: z.boolean().default(false),\n  order: z.string().optional(),\n}).refine((data) => !(data.isImportant && data.isModerate), {\n  message: \"A topic cannot be both Important and Moderate\",\n  path: [\"isImportant\"],\n});\n\ntype ChapterFormData = z.infer<typeof chapterSchema>;\ntype TopicFormData = z.infer<typeof topicSchema>;\n\n// Interfaces\ninterface Chapter {\n  id: string;\n  name: string;\n  description?: string;\n  subjectId: string;\n  subjectName: string;\n  className: string;\n  order?: number;\n  topicCount?: number;\n}\n\ninterface Topic {\n  id: string;\n  name: string;\n  description?: string;\n  chapterId: string;\n  chapterName: string;\n  subjectId: string;\n  subjectName: string;\n  className: string;\n  isImportant: boolean;\n  isModerate: boolean;\n  order?: number;\n  isActive: boolean;\n}\n\ninterface Subject {\n  id: string;\n  name: string;\n  classId: string;\n  className: string;\n}\n\ninterface Class {\n  id: string;\n  name: string;\n}\n\n// Add Chapter Modal\nfunction AddChapterModal({ \n  isOpen, \n  onClose, \n  editingChapter,\n  onChapterAdded \n}: {\n  isOpen: boolean;\n  onClose: () => void;\n  editingChapter?: Chapter;\n  onChapterAdded: () => void;\n}) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedClass, setSelectedClass] = useState<string>('');\n\n  const { data: classes = [] } = useQuery<Class[]>({\n    queryKey: ['/api/classes'],\n    enabled: isOpen,\n  });\n\n  const { data: subjects = [] } = useQuery<Subject[]>({\n    queryKey: ['/api/admin/subjects'],\n    enabled: isOpen,\n  });\n\n  const form = useForm<ChapterFormData>({\n    resolver: zodResolver(chapterSchema),\n    defaultValues: {\n      name: editingChapter?.name || '',\n      description: editingChapter?.description || '',\n      subjectId: editingChapter?.subjectId || '',\n      order: editingChapter?.order?.toString() || '',\n    },\n  });\n\n  // Filter subjects based on selected class\n  const filteredSubjects = subjects.filter(subject => \n    selectedClass ? subject.classId === selectedClass : true\n  );\n\n  React.useEffect(() => {\n    if (editingChapter) {\n      form.reset({\n        name: editingChapter.name,\n        description: editingChapter.description || '',\n        subjectId: editingChapter.subjectId,\n        order: editingChapter.order?.toString() || '',\n      });\n      // Find the class for this chapter's subject\n      const subject = subjects.find(s => s.id === editingChapter.subjectId);\n      if (subject) {\n        setSelectedClass(subject.classId);\n      }\n    } else {\n      form.reset({\n        name: '',\n        description: '',\n        subjectId: '',\n        order: '',\n      });\n      setSelectedClass('');\n    }\n  }, [editingChapter, isOpen]);\n\n  const mutation = useMutation({\n    mutationFn: async (data: ChapterFormData) => {\n      const submitData = {\n        ...data,\n        order: data.order ? parseInt(data.order) : undefined,\n      };\n      const endpoint = editingChapter ? `/api/admin/chapters/${editingChapter.id}` : '/api/admin/chapters';\n      const method = editingChapter ? 'PUT' : 'POST';\n      return apiRequest(method, endpoint, submitData);\n    },\n    onSuccess: () => {\n      toast({\n        title: editingChapter ? 'Chapter Updated' : 'Chapter Added',\n        description: `Chapter has been successfully ${editingChapter ? 'updated' : 'added'}.`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/chapters'] });\n      onChapterAdded();\n      form.reset();\n      setSelectedClass('');\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || `Failed to ${editingChapter ? 'update' : 'add'} chapter.`,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: ChapterFormData) => {\n    mutation.mutate(data);\n  };\n\n  const handleClassChange = (classId: string) => {\n    setSelectedClass(classId);\n    form.setValue('subjectId', ''); // Reset subject when class changes\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[85vh] flex flex-col\">\n        <DialogHeader className=\"shrink-0\">\n          <DialogTitle className=\"text-xl font-bold text-green-700 flex items-center gap-2\">\n            <BookOpen className=\"h-5 w-5\" />\n            {editingChapter ? 'Edit Chapter' : 'Add New Chapter'}\n          </DialogTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            {editingChapter ? 'Update chapter information' : 'Create a new chapter for your subject'}\n          </p>\n        </DialogHeader>\n\n        <ScrollArea className=\"flex-1 px-1\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6 pr-4\">\n              {/* Class and Subject Selection */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"h-4 w-1 bg-green-600 rounded-full\"></div>\n                  <h3 className=\"font-semibold text-gray-900\">Academic Classification</h3>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium text-gray-700\">Class</label>\n                    <Select value={selectedClass} onValueChange={handleClassChange}>\n                      <SelectTrigger className=\"h-11\">\n                        <SelectValue placeholder=\"Select a class\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {classes.map((cls) => (\n                          <SelectItem key={cls.id} value={cls.id}>\n                            {cls.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"subjectId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-sm font-medium text-gray-700\">Subject</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger className=\"h-11\">\n                              <SelectValue placeholder=\"Select a subject\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {filteredSubjects.map((subject) => (\n                              <SelectItem key={subject.id} value={subject.id}>\n                                {subject.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Chapter Details */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"h-4 w-1 bg-blue-600 rounded-full\"></div>\n                  <h3 className=\"font-semibold text-gray-900\">Chapter Details</h3>\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium text-gray-700\">Chapter Name</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Enter chapter name\" \n                          className=\"h-11\" \n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium text-gray-700\">Description (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Enter chapter description\"\n                          className=\"min-h-[100px] resize-none\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"order\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium text-gray-700\">Chapter Order</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          placeholder=\"Enter chapter order (1, 2, 3...)\" \n                          className=\"h-11\" \n                          {...field} \n                        />\n                      </FormControl>\n                      <p className=\"text-xs text-muted-foreground\">Optional: Set the sequence order for this chapter</p>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n            </form>\n          </Form>\n        </ScrollArea>\n        \n        <Separator />\n        <div className=\"flex justify-end gap-3 pt-4 shrink-0\">\n          <Button type=\"button\" variant=\"outline\" onClick={onClose} className=\"px-6\">\n            Cancel\n          </Button>\n          <Button \n            type=\"submit\" \n            disabled={mutation.isPending}\n            className=\"px-6 bg-green-600 hover:bg-green-700\"\n            onClick={form.handleSubmit(onSubmit)}\n          >\n            {mutation.isPending ? (\n              <>\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                Saving...\n              </>\n            ) : (\n              <>\n                {editingChapter ? 'Update Chapter' : 'Add Chapter'}\n              </>\n            )}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Add Topic Modal\nfunction AddTopicModal({ \n  isOpen, \n  onClose, \n  editingTopic,\n  onTopicAdded,\n  selectedChapterId \n}: {\n  isOpen: boolean;\n  onClose: () => void;\n  editingTopic?: Topic;\n  onTopicAdded: () => void;\n  selectedChapterId?: string;\n}) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedClass, setSelectedClass] = useState<string>('');\n  const [selectedSubject, setSelectedSubject] = useState<string>('');\n\n  const { data: classes = [] } = useQuery<Class[]>({\n    queryKey: ['/api/classes'],\n    enabled: isOpen,\n  });\n\n  const { data: subjects = [] } = useQuery<Subject[]>({\n    queryKey: ['/api/admin/subjects'],\n    enabled: isOpen,\n  });\n\n  const { data: chapters = [] } = useQuery<Chapter[]>({\n    queryKey: ['/api/admin/chapters'],\n    enabled: isOpen,\n  });\n\n  const form = useForm<TopicFormData>({\n    resolver: zodResolver(topicSchema),\n    defaultValues: {\n      name: editingTopic?.name || '',\n      description: editingTopic?.description || '',\n      chapterId: editingTopic?.chapterId || '',\n      isImportant: editingTopic?.isImportant || false,\n      isModerate: editingTopic?.isModerate || false,\n      order: editingTopic?.order?.toString() || '',\n    },\n  });\n\n  // Filter subjects and chapters based on selections\n  const filteredSubjects = subjects.filter(subject => \n    selectedClass ? subject.classId === selectedClass : true\n  );\n\n  const filteredChapters = chapters.filter(chapter => \n    selectedSubject ? chapter.subjectId === selectedSubject : true\n  );\n\n  React.useEffect(() => {\n    if (editingTopic) {\n      form.reset({\n        name: editingTopic.name,\n        description: editingTopic.description || '',\n        chapterId: editingTopic.chapterId,\n        isImportant: editingTopic.isImportant,\n        isModerate: editingTopic.isModerate,\n        order: editingTopic.order?.toString() || '',\n      });\n      // Find the class and subject for this topic's chapter\n      const chapter = chapters.find(c => c.id === editingTopic.chapterId);\n      if (chapter) {\n        setSelectedSubject(chapter.subjectId);\n        const subject = subjects.find(s => s.id === chapter.subjectId);\n        if (subject) {\n          setSelectedClass(subject.classId);\n        }\n      }\n    } else if (selectedChapterId) {\n      // Pre-populate with selected chapter\n      const selectedChapter = chapters.find(c => c.id === selectedChapterId);\n      if (selectedChapter) {\n        form.reset({\n          name: '',\n          description: '',\n          chapterId: selectedChapterId,\n          isImportant: false,\n          isModerate: false,\n          order: '',\n        });\n        setSelectedSubject(selectedChapter.subjectId);\n        const subject = subjects.find(s => s.id === selectedChapter.subjectId);\n        if (subject) {\n          setSelectedClass(subject.classId);\n        }\n      }\n    } else {\n      form.reset({\n        name: '',\n        description: '',\n        chapterId: '',\n        isImportant: false,\n        isModerate: false,\n        order: '',\n      });\n      setSelectedClass('');\n      setSelectedSubject('');\n    }\n  }, [editingTopic, selectedChapterId, isOpen, chapters, subjects]);\n\n  const mutation = useMutation({\n    mutationFn: async (data: TopicFormData) => {\n      const submitData = {\n        ...data,\n        order: data.order ? parseInt(data.order) : undefined,\n      };\n      const endpoint = editingTopic ? `/api/admin/topics/${editingTopic.id}` : '/api/admin/topics';\n      const method = editingTopic ? 'PUT' : 'POST';\n      return apiRequest(method, endpoint, submitData);\n    },\n    onSuccess: () => {\n      toast({\n        title: editingTopic ? 'Topic Updated' : 'Topic Added',\n        description: `Topic has been successfully ${editingTopic ? 'updated' : 'added'}.`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/topics'] });\n      onTopicAdded();\n      form.reset();\n      setSelectedClass('');\n      setSelectedSubject('');\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || `Failed to ${editingTopic ? 'update' : 'add'} topic.`,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: TopicFormData) => {\n    mutation.mutate(data);\n  };\n\n  const handleClassChange = (classId: string) => {\n    setSelectedClass(classId);\n    setSelectedSubject(''); // Reset subject when class changes\n    form.setValue('chapterId', ''); // Reset chapter when class changes\n  };\n\n  const handleSubjectChange = (subjectId: string) => {\n    setSelectedSubject(subjectId);\n    form.setValue('chapterId', ''); // Reset chapter when subject changes\n  };\n\n  // Handle mutual exclusivity for Important/Moderate flags\n  const handleImportantChange = (checked: boolean) => {\n    form.setValue('isImportant', checked);\n    if (checked) {\n      form.setValue('isModerate', false);\n    }\n  };\n\n  const handleModerateChange = (checked: boolean) => {\n    form.setValue('isModerate', checked);\n    if (checked) {\n      form.setValue('isImportant', false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-3xl max-h-[90vh] flex flex-col\">\n        <DialogHeader className=\"shrink-0\">\n          <DialogTitle className=\"text-xl font-bold text-green-700 flex items-center gap-2\">\n            <Target className=\"h-5 w-5\" />\n            {editingTopic ? 'Edit Topic' : 'Add New Topic'}\n          </DialogTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            {editingTopic ? 'Update topic information and settings' : 'Create a new topic for your chapter'}\n          </p>\n        </DialogHeader>\n\n        <ScrollArea className=\"flex-1 px-1\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6 pr-4\">\n              {/* Chapter Selection */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"h-4 w-1 bg-green-600 rounded-full\"></div>\n                  <h3 className=\"font-semibold text-gray-900\">Academic Classification</h3>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium text-gray-700\">\n                      Class {selectedChapterId ? '(Auto-filled)' : ''}\n                    </label>\n                    <Select \n                      value={selectedClass} \n                      onValueChange={handleClassChange}\n                      disabled={!!selectedChapterId && !editingTopic}\n                    >\n                      <SelectTrigger className=\"h-11\">\n                        <SelectValue placeholder=\"Select a class\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {classes.map((cls) => (\n                          <SelectItem key={cls.id} value={cls.id}>\n                            {cls.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium text-gray-700\">\n                      Subject {selectedChapterId ? '(Auto-filled)' : ''}\n                    </label>\n                    <Select \n                      value={selectedSubject} \n                      onValueChange={handleSubjectChange}\n                      disabled={!!selectedChapterId && !editingTopic}\n                    >\n                      <SelectTrigger className=\"h-11\">\n                        <SelectValue placeholder=\"Select a subject\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {filteredSubjects.map((subject) => (\n                          <SelectItem key={subject.id} value={subject.id}>\n                            {subject.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"chapterId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel className=\"text-sm font-medium text-gray-700\">\n                          Chapter {selectedChapterId ? '(Pre-selected)' : ''}\n                        </FormLabel>\n                        <Select \n                          onValueChange={field.onChange} \n                          value={field.value}\n                          disabled={!!selectedChapterId && !editingTopic}\n                        >\n                          <FormControl>\n                            <SelectTrigger className=\"h-11\">\n                              <SelectValue placeholder=\"Select a chapter\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {filteredChapters.map((chapter) => (\n                              <SelectItem key={chapter.id} value={chapter.id}>\n                                {chapter.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        {selectedChapterId && !editingTopic && (\n                          <div className=\"flex items-center gap-2 mt-2 p-2 bg-green-50 rounded-md\">\n                            <div className=\"h-2 w-2 bg-green-500 rounded-full\"></div>\n                            <p className=\"text-xs text-green-700\">\n                              Chapter pre-selected from your selection\n                            </p>\n                          </div>\n                        )}\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Topic Details */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"h-4 w-1 bg-blue-600 rounded-full\"></div>\n                  <h3 className=\"font-semibold text-gray-900\">Topic Information</h3>\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium text-gray-700\">Topic Name</FormLabel>\n                      <FormControl>\n                        <Input \n                          placeholder=\"Enter topic name\" \n                          className=\"h-11\" \n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium text-gray-700\">Description (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Enter topic description\"\n                          className=\"min-h-[100px] resize-none\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <Separator />\n\n              {/* Priority Settings */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"h-4 w-1 bg-orange-600 rounded-full\"></div>\n                  <h3 className=\"font-semibold text-gray-900\">Priority Settings</h3>\n                  <Badge variant=\"outline\" className=\"text-xs\">Mutually Exclusive</Badge>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"isImportant\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 p-4 border border-red-200 rounded-lg bg-red-50\">\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value}\n                            onCheckedChange={handleImportantChange}\n                            className=\"mt-1\"\n                          />\n                        </FormControl>\n                        <div className=\"space-y-1 leading-none\">\n                          <FormLabel className=\"text-sm font-medium text-red-700 flex items-center gap-2\">\n                            <Star className=\"h-4 w-4\" />\n                            Important Topic\n                          </FormLabel>\n                          <div className=\"text-xs text-red-600\">\n                            Shows red \"IMP\" badge - for critical topics\n                          </div>\n                        </div>\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"isModerate\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 p-4 border border-orange-200 rounded-lg bg-orange-50\">\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value}\n                            onCheckedChange={handleModerateChange}\n                            className=\"mt-1\"\n                          />\n                        </FormControl>\n                        <div className=\"space-y-1 leading-none\">\n                          <FormLabel className=\"text-sm font-medium text-orange-700 flex items-center gap-2\">\n                            <Flag className=\"h-4 w-4\" />\n                            Moderate Topic\n                          </FormLabel>\n                          <div className=\"text-xs text-orange-600\">\n                            Shows orange \"Moderate\" badge - for medium priority\n                          </div>\n                        </div>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Additional Settings */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"h-4 w-1 bg-purple-600 rounded-full\"></div>\n                  <h3 className=\"font-semibold text-gray-900\">Additional Settings</h3>\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"order\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium text-gray-700\">Topic Order</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          placeholder=\"Enter topic order (1, 2, 3...)\" \n                          className=\"h-11\" \n                          {...field} \n                        />\n                      </FormControl>\n                      <p className=\"text-xs text-muted-foreground\">Optional: Set the sequence order for this topic within the chapter</p>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n            </form>\n          </Form>\n        </ScrollArea>\n        \n        <Separator />\n        <div className=\"flex justify-end gap-3 pt-4 shrink-0\">\n          <Button type=\"button\" variant=\"outline\" onClick={onClose} className=\"px-6\">\n            Cancel\n          </Button>\n          <Button \n            type=\"submit\" \n            disabled={mutation.isPending}\n            className=\"px-6 bg-blue-600 hover:bg-blue-700\"\n            onClick={form.handleSubmit(onSubmit)}\n          >\n            {mutation.isPending ? (\n              <>\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                Saving...\n              </>\n            ) : (\n              <>\n                {editingTopic ? 'Update Topic' : 'Add Topic'}\n              </>\n            )}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function TopicsManagement() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState('chapters');\n  const [showAddChapterModal, setShowAddChapterModal] = useState(false);\n  const [showAddTopicModal, setShowAddTopicModal] = useState(false);\n  const [editingChapter, setEditingChapter] = useState<Chapter | undefined>();\n  const [editingTopic, setEditingTopic] = useState<Topic | undefined>();\n\n  // Filtering states\n  const [selectedClassFilter, setSelectedClassFilter] = useState<string>('');\n  const [selectedSubjectFilter, setSelectedSubjectFilter] = useState<string>('');\n  const [selectedChapterFilter, setSelectedChapterFilter] = useState<string>('');\n\n  // Chapter selection for topic creation\n  const [selectedChapterForTopic, setSelectedChapterForTopic] = useState<string>('');\n\n  // Fetch all data\n  const { data: classes = [] } = useQuery<Class[]>({\n    queryKey: ['/api/classes'],\n  });\n\n  const { data: subjects = [] } = useQuery<Subject[]>({\n    queryKey: ['/api/admin/subjects'],\n  });\n\n  // Fetch chapters\n  const { data: chapters = [], isLoading: chaptersLoading } = useQuery<Chapter[]>({\n    queryKey: ['/api/admin/chapters'],\n  });\n\n  // Fetch topics\n  const { data: topics = [], isLoading: topicsLoading } = useQuery<Topic[]>({\n    queryKey: ['/api/admin/topics'],\n  });\n\n  // Calculate statistics\n  const totalChapters = chapters.length;\n  const totalTopics = topics.length;\n  const moderateTopics = topics.filter(topic => topic.isModerate).length;\n  const importantTopics = topics.filter(topic => topic.isImportant).length;\n\n  // Delete chapter mutation\n  const deleteChapterMutation = useMutation({\n    mutationFn: async (chapterId: string) => {\n      return apiRequest('DELETE', `/api/admin/chapters/${chapterId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Chapter Deleted',\n        description: 'Chapter and all its topics have been successfully deleted.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/chapters'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/topics'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to delete chapter.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Delete topic mutation\n  const deleteTopicMutation = useMutation({\n    mutationFn: async (topicId: string) => {\n      return apiRequest('DELETE', `/api/admin/topics/${topicId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Topic Deleted',\n        description: 'Topic has been successfully deleted.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/topics'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to delete topic.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleEditChapter = (chapter: Chapter) => {\n    setEditingChapter(chapter);\n    setShowAddChapterModal(true);\n  };\n\n  const handleEditTopic = (topic: Topic) => {\n    setEditingTopic(topic);\n    setShowAddTopicModal(true);\n  };\n\n  const handleCloseChapterModal = () => {\n    setShowAddChapterModal(false);\n    setEditingChapter(undefined);\n  };\n\n  const handleCloseTopicModal = () => {\n    setShowAddTopicModal(false);\n    setEditingTopic(undefined);\n  };\n\n  // Filtering logic\n  const filteredSubjects = subjects.filter(subject => \n    selectedClassFilter ? subject.classId === selectedClassFilter : true\n  );\n\n  const filteredChapters = chapters.filter(chapter => {\n    const subjectMatch = selectedSubjectFilter ? chapter.subjectId === selectedSubjectFilter : true;\n    \n    if (selectedClassFilter && !selectedSubjectFilter) {\n      // If class selected but no subject, show chapters from subjects of that class\n      const classSubjects = subjects.filter(s => s.classId === selectedClassFilter).map(s => s.id);\n      return classSubjects.includes(chapter.subjectId);\n    }\n    \n    return subjectMatch;\n  });\n\n  const filteredTopics = topics.filter(topic => {\n    const chapterMatch = selectedChapterFilter ? topic.chapterId === selectedChapterFilter : true;\n    \n    if (selectedSubjectFilter && !selectedChapterFilter) {\n      // If subject selected but no chapter, show topics from chapters of that subject\n      const subjectChapters = chapters.filter(c => c.subjectId === selectedSubjectFilter).map(c => c.id);\n      return subjectChapters.includes(topic.chapterId);\n    }\n    \n    if (selectedClassFilter && !selectedSubjectFilter && !selectedChapterFilter) {\n      // If only class selected, show topics from all chapters of that class\n      const classSubjects = subjects.filter(s => s.classId === selectedClassFilter).map(s => s.id);\n      const classChapters = chapters.filter(c => classSubjects.includes(c.subjectId)).map(c => c.id);\n      return classChapters.includes(topic.chapterId);\n    }\n    \n    return chapterMatch;\n  });\n\n  // Handle filter changes with cascade reset\n  const handleClassFilterChange = (classId: string) => {\n    const actualClassId = classId === 'all-classes' ? '' : classId;\n    setSelectedClassFilter(actualClassId);\n    setSelectedSubjectFilter(''); // Reset downstream filters\n    setSelectedChapterFilter('');\n    setSelectedChapterForTopic(''); // Reset chapter selection\n  };\n\n  const handleSubjectFilterChange = (subjectId: string) => {\n    const actualSubjectId = subjectId === 'all-subjects' ? '' : subjectId;\n    setSelectedSubjectFilter(actualSubjectId);\n    setSelectedChapterFilter(''); // Reset downstream filter\n    setSelectedChapterForTopic(''); // Reset chapter selection\n  };\n\n  const handleChapterFilterChange = (chapterId: string) => {\n    const actualChapterId = chapterId === 'all-chapters' ? '' : chapterId;\n    setSelectedChapterFilter(actualChapterId);\n    setSelectedChapterForTopic(''); // Reset chapter selection\n  };\n\n  // Chapter selection for topic creation\n  const handleChapterSelection = (chapterId: string) => {\n    setSelectedChapterForTopic(chapterId);\n  };\n\n  // Check if Add Topic button should be enabled\n  const addTopicButtonEnabled = selectedChapterForTopic !== '';\n\n  // Get selected chapter details for topic modal\n  const selectedChapterDetails = chapters.find(c => c.id === selectedChapterForTopic);\n\n  const getPriorityBadge = (topic: Topic) => {\n    if (topic.isImportant) {\n      return (\n        <Badge variant=\"destructive\" className=\"bg-red-600\">\n          <Star className=\"h-3 w-3 mr-1\" />\n          IMP\n        </Badge>\n      );\n    }\n    if (topic.isModerate) {\n      return (\n        <Badge variant=\"secondary\" className=\"bg-orange-500 text-white\">\n          <Flag className=\"h-3 w-3 mr-1\" />\n          Moderate\n        </Badge>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <DashboardLayout\n      title=\"Topics Management\"\n      subtitle=\"Manage educational content hierarchy - Classes, Subjects, Chapters, and Topics\"\n    >\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Chapters</CardTitle>\n            <BookOpen className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalChapters}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Topics</CardTitle>\n            <Target className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{totalTopics}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Moderate Topics</CardTitle>\n            <Flag className=\"h-4 w-4 text-orange-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-600\">{moderateTopics}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Important Topics</CardTitle>\n            <Star className=\"h-4 w-4 text-red-500\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-red-600\">{importantTopics}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <TabsList className=\"grid w-fit grid-cols-2\">\n            <TabsTrigger value=\"chapters\" className=\"flex items-center gap-2\">\n              <BookOpen className=\"h-4 w-4\" />\n              Chapters\n            </TabsTrigger>\n            <TabsTrigger value=\"topics\" className=\"flex items-center gap-2\">\n              <Target className=\"h-4 w-4\" />\n              Topics\n            </TabsTrigger>\n          </TabsList>\n\n          <div className=\"flex gap-3\">\n            <Button \n              onClick={() => setShowAddChapterModal(true)}\n              className=\"bg-green-600 hover:bg-green-700\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Chapter\n            </Button>\n            <Button \n              onClick={() => setShowAddTopicModal(true)}\n              disabled={!addTopicButtonEnabled}\n              className={addTopicButtonEnabled \n                ? \"bg-blue-600 hover:bg-blue-700\" \n                : \"bg-gray-400 cursor-not-allowed\"\n              }\n              title={!addTopicButtonEnabled ? \"Select a chapter first to add a topic\" : \"\"}\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Topic\n            </Button>\n          </div>\n        </div>\n\n        {/* Chapters Tab */}\n        <TabsContent value=\"chapters\" className=\"space-y-6\">\n          {/* Chapter Filters */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold\">Filter Chapters</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Class</label>\n                  <Select value={selectedClassFilter || 'all-classes'} onValueChange={handleClassFilterChange}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"All Classes\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all-classes\">All Classes</SelectItem>\n                      {classes.map((cls) => (\n                        <SelectItem key={cls.id} value={cls.id}>\n                          {cls.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Subject</label>\n                  <Select value={selectedSubjectFilter || 'all-subjects'} onValueChange={handleSubjectFilterChange}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"All Subjects\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all-subjects\">All Subjects</SelectItem>\n                      {filteredSubjects.map((subject) => (\n                        <SelectItem key={subject.id} value={subject.id}>\n                          {subject.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <BookOpen className=\"h-5 w-5\" />\n                Chapters ({filteredChapters.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {chaptersLoading ? (\n                <div className=\"text-center py-8\">Loading chapters...</div>\n              ) : filteredChapters.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <BookOpen className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                  <p>No chapters found</p>\n                  <p className=\"text-sm\">{chapters.length === 0 ? \"Add your first chapter to get started\" : \"Adjust filters to view chapters\"}</p>\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Chapter Name</TableHead>\n                      <TableHead>Subject</TableHead>\n                      <TableHead>Class</TableHead>\n                      <TableHead>Topics</TableHead>\n                      <TableHead>Order</TableHead>\n                      <TableHead className=\"text-right\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredChapters.map((chapter) => (\n                      <TableRow key={chapter.id}>\n                        <TableCell className=\"font-medium\">{chapter.name}</TableCell>\n                        <TableCell>{chapter.subjectName}</TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\">{chapter.className}</Badge>\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant=\"secondary\">{chapter.topicCount || 0} topics</Badge>\n                        </TableCell>\n                        <TableCell>{chapter.order || '-'}</TableCell>\n                        <TableCell className=\"text-right\">\n                          <div className=\"flex gap-2 justify-end\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleEditChapter(chapter)}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => deleteChapterMutation.mutate(chapter.id)}\n                              disabled={deleteChapterMutation.isPending}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Topics Tab */}\n        <TabsContent value=\"topics\" className=\"space-y-6\">\n          {/* Topic Filters */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg font-semibold\">Filter Topics</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Class</label>\n                  <Select value={selectedClassFilter || 'all-classes'} onValueChange={handleClassFilterChange}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"All Classes\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all-classes\">All Classes</SelectItem>\n                      {classes.map((cls) => (\n                        <SelectItem key={cls.id} value={cls.id}>\n                          {cls.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Subject</label>\n                  <Select value={selectedSubjectFilter || 'all-subjects'} onValueChange={handleSubjectFilterChange}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"All Subjects\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all-subjects\">All Subjects</SelectItem>\n                      {filteredSubjects.map((subject) => (\n                        <SelectItem key={subject.id} value={subject.id}>\n                          {subject.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium\">Chapter</label>\n                  <Select value={selectedChapterFilter || 'all-chapters'} onValueChange={handleChapterFilterChange}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"All Chapters\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all-chapters\">All Chapters</SelectItem>\n                      {filteredChapters.map((chapter) => (\n                        <SelectItem key={chapter.id} value={chapter.id}>\n                          {chapter.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Chapter Selection for Topic Creation */}\n          {activeTab === 'topics' && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <BookOpen className=\"h-5 w-5\" />\n                  Select Chapter for Topic Creation\n                </CardTitle>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Click on a chapter below to enable topic creation for that chapter\n                </p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n                  {filteredChapters.map((chapter) => (\n                    <Card \n                      key={chapter.id} \n                      className={`cursor-pointer transition-all hover:shadow-md ${\n                        selectedChapterForTopic === chapter.id \n                          ? 'ring-2 ring-blue-500 bg-blue-50' \n                          : 'hover:bg-gray-50'\n                      }`}\n                      onClick={() => handleChapterSelection(chapter.id)}\n                    >\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <h4 className=\"font-medium text-sm\">{chapter.name}</h4>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {chapter.className} - {chapter.subjectName}\n                            </p>\n                          </div>\n                          {selectedChapterForTopic === chapter.id && (\n                            <div className=\"text-blue-600\">\n                              <Target className=\"h-4 w-4\" />\n                            </div>\n                          )}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n\n                {selectedChapterForTopic && (\n                  <div className=\"mt-4 p-3 bg-green-50 border border-green-200 rounded-md\">\n                    <p className=\"text-sm text-green-800\">\n                      ✓ Chapter \"{selectedChapterDetails?.name}\" selected. You can now add topics to this chapter.\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Target className=\"h-5 w-5\" />\n                Topics ({filteredTopics.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {topicsLoading ? (\n                <div className=\"text-center py-8\">Loading topics...</div>\n              ) : filteredTopics.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <Target className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                  <p>No topics found</p>\n                  <p className=\"text-sm\">{topics.length === 0 ? \"Add your first topic to get started\" : \"Adjust filters or select a chapter to view topics\"}</p>\n                </div>\n              ) : (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Topic Name</TableHead>\n                      <TableHead>Chapter</TableHead>\n                      <TableHead>Subject</TableHead>\n                      <TableHead>Class</TableHead>\n                      <TableHead>Priority</TableHead>\n                      <TableHead>Order</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead className=\"text-right\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredTopics.map((topic) => (\n                      <TableRow key={topic.id}>\n                        <TableCell className=\"font-medium\">{topic.name}</TableCell>\n                        <TableCell>{topic.chapterName}</TableCell>\n                        <TableCell>{topic.subjectName}</TableCell>\n                        <TableCell>\n                          <Badge variant=\"outline\">{topic.className}</Badge>\n                        </TableCell>\n                        <TableCell>\n                          {getPriorityBadge(topic) || (\n                            <Badge variant=\"secondary\" className=\"bg-gray-100 text-gray-600\">\n                              Normal\n                            </Badge>\n                          )}\n                        </TableCell>\n                        <TableCell>{topic.order || '-'}</TableCell>\n                        <TableCell>\n                          <Badge variant={topic.isActive ? \"default\" : \"secondary\"}>\n                            {topic.isActive ? \"Active\" : \"Inactive\"}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"text-right\">\n                          <div className=\"flex gap-2 justify-end\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleEditTopic(topic)}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => deleteTopicMutation.mutate(topic.id)}\n                              disabled={deleteTopicMutation.isPending}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Modals */}\n      <AddChapterModal\n        isOpen={showAddChapterModal}\n        onClose={handleCloseChapterModal}\n        editingChapter={editingChapter}\n        onChapterAdded={() => {}}\n      />\n\n      <AddTopicModal\n        isOpen={showAddTopicModal}\n        onClose={handleCloseTopicModal}\n        editingTopic={editingTopic}\n        onTopicAdded={() => {}}\n        selectedChapterId={selectedChapterForTopic}\n      />\n    </DashboardLayout>\n  );\n}","size_bytes":54173},"client/src/pages/so-center/StudentDropoutRequests.tsx":{"content":"\nimport { useState, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, Plus, UserMinus, FileText, Clock, CheckCircle, XCircle } from \"lucide-react\";\nimport DashboardLayout from \"@/components/layout/DashboardLayout\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n\ninterface DropoutRequest {\n  id: string;\n  studentId: string;\n  studentName: string;\n  studentStudentId: string;\n  reason: string;\n  status: 'pending' | 'approved' | 'rejected';\n  requestDate: string;\n  processedDate?: string;\n  adminNotes?: string;\n  soCenterName: string;\n}\n\ninterface Student {\n  id: string;\n  name: string;\n  studentId: string;\n  classId: string;\n  className: string;\n  totalFeeAmount?: string;\n  paidAmount?: string;\n  pendingAmount?: string;\n  isActive?: boolean;\n  paymentStatus?: string;\n  progress?: number;\n  // Additional properties that might be present in the API response\n  [key: string]: any;\n}\n\ninterface Class {\n  id: string;\n  name: string;\n  description?: string;\n}\n\nexport default function StudentDropoutRequests() {\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [selectedClassId, setSelectedClassId] = useState(\"\");\n  const [selectedStudentId, setSelectedStudentId] = useState(\"\");\n  const [reason, setReason] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch dropout requests\n  const { data: requestsResponse = [], isLoading: isLoadingRequests } = useQuery({\n    queryKey: [\"/api/dropout-requests\"],\n    queryFn: () => apiRequest(\"GET\", \"/api/dropout-requests\"),\n  });\n  \n  // Ensure requests is always an array\n  const requests = Array.isArray(requestsResponse) ? requestsResponse : [];\n\n  // Fetch classes for dropdown - use manual fetch to avoid caching issues\n  const { data: classesResponse = [], isLoading: isLoadingClasses } = useQuery({\n    queryKey: [\"/api/classes\", \"dropout-manual\"],\n    queryFn: async () => {\n      const response = await fetch('/api/classes', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          'Content-Type': 'application/json',\n          'Cache-Control': 'no-cache'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    },\n    staleTime: 0,\n    cacheTime: 0,\n  });\n\n  // Ensure classes is always an array\n  const classes: Class[] = Array.isArray(classesResponse) ? classesResponse : [];\n\n  // Fetch students for dropdown - use manual fetch to avoid caching issues\n  const { data: studentsResponse = [], isLoading: isLoadingStudents, error: studentsError } = useQuery({\n    queryKey: [\"/api/students\", \"dropout-manual\"],\n    queryFn: async () => {\n      const response = await fetch('/api/students', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          'Content-Type': 'application/json',\n          'Cache-Control': 'no-cache'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    },\n    retry: 3,\n    refetchOnWindowFocus: false,\n    staleTime: 0,\n    cacheTime: 0,\n  });\n  \n  // Ensure students is always an array and filter out invalid entries\n  const allStudents = useMemo(() => {\n    if (!studentsResponse || !Array.isArray(studentsResponse)) {\n      return [];\n    }\n    \n    return studentsResponse.filter((student: any) => \n      student && \n      typeof student === 'object' && \n      student.id && \n      student.name && \n      student.studentId &&\n      student.isActive !== false\n    );\n  }, [studentsResponse]);\n\n  // Filter students by selected class\n  const filteredStudents = useMemo(() => {\n    if (!selectedClassId) return allStudents;\n    return allStudents.filter((student: any) => student.classId === selectedClassId);\n  }, [allStudents, selectedClassId]);\n\n  const createRequestMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/dropout-requests\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/dropout-requests\"] });\n      toast({\n        title: \"Success\",\n        description: \"Dropout request submitted successfully\",\n      });\n      handleDialogClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to submit dropout request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmitRequest = () => {\n    if (!selectedStudentId || !reason.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a student and provide a reason\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createRequestMutation.mutate({\n      studentId: selectedStudentId,\n      reason: reason.trim(),\n    });\n  };\n\n  const handleDialogClose = () => {\n    setIsCreateDialogOpen(false);\n    setSelectedClassId(\"\");\n    setSelectedStudentId(\"\");\n    setReason(\"\");\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'pending':\n        return (\n          <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-700\">\n            <Clock className=\"h-3 w-3 mr-1\" />\n            Pending\n          </Badge>\n        );\n      case 'approved':\n        return (\n          <Badge variant=\"secondary\" className=\"bg-green-100 text-green-700\">\n            <CheckCircle className=\"h-3 w-3 mr-1\" />\n            Approved\n          </Badge>\n        );\n      case 'rejected':\n        return (\n          <Badge variant=\"secondary\" className=\"bg-red-100 text-red-700\">\n            <XCircle className=\"h-3 w-3 mr-1\" />\n            Rejected\n          </Badge>\n        );\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const pendingCount = requests.filter((r: DropoutRequest) => r.status === 'pending').length;\n  const approvedCount = requests.filter((r: DropoutRequest) => r.status === 'approved').length;\n  const rejectedCount = requests.filter((r: DropoutRequest) => r.status === 'rejected').length;\n\n  if (isLoadingRequests) {\n    return (\n      <DashboardLayout title=\"Student Dropout Requests\" subtitle=\"Manage student dropout requests and track their status\">\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <Loader2 className=\"h-8 w-8 animate-spin\" />\n          <span className=\"ml-2\">Loading dropout requests...</span>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout \n      title=\"Student Dropout Requests\" \n      subtitle=\"Manage student dropout requests and track their status\"\n      showAddButton={true}\n      onAddClick={() => setIsCreateDialogOpen(true)}\n    >\n      <div className=\"space-y-6\">\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Requests</CardTitle>\n              <FileText className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{requests.length}</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n              <Clock className=\"h-4 w-4 text-yellow-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-yellow-600\">{pendingCount}</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Approved</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-green-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\">{approvedCount}</div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Rejected</CardTitle>\n              <XCircle className=\"h-4 w-4 text-red-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600\">{rejectedCount}</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Requests Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Dropout Requests</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"rounded-md border\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Student</TableHead>\n                    <TableHead>Student ID</TableHead>\n                    <TableHead>Reason</TableHead>\n                    <TableHead>Request Date</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Processed Date</TableHead>\n                    <TableHead>Admin Notes</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {requests.map((request: DropoutRequest) => (\n                    <TableRow key={request.id}>\n                      <TableCell className=\"font-medium\">\n                        {request.studentName}\n                      </TableCell>\n                      <TableCell>{request.studentStudentId}</TableCell>\n                      <TableCell className=\"max-w-xs\">\n                        <div className=\"truncate\" title={request.reason}>\n                          {request.reason}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {new Date(request.requestDate).toLocaleDateString()}\n                      </TableCell>\n                      <TableCell>\n                        {getStatusBadge(request.status)}\n                      </TableCell>\n                      <TableCell>\n                        {request.processedDate \n                          ? new Date(request.processedDate).toLocaleDateString()\n                          : '-'\n                        }\n                      </TableCell>\n                      <TableCell>\n                        {request.adminNotes ? (\n                          <div className=\"max-w-xs truncate\" title={request.adminNotes}>\n                            {request.adminNotes}\n                          </div>\n                        ) : (\n                          '-'\n                        )}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n            \n            {requests.length === 0 && (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <UserMinus className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p>No dropout requests found.</p>\n                <p className=\"text-sm\">Submit your first dropout request to get started.</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Create Request Dialog */}\n        <Dialog open={isCreateDialogOpen} onOpenChange={(open) => {\n          if (!open) handleDialogClose();\n        }}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Submit Dropout Request</DialogTitle>\n              <DialogDescription>\n                Submit a request to drop out a student from the SO Center\n              </DialogDescription>\n            </DialogHeader>\n            \n            <div className=\"space-y-4\">\n              {/* Class Selection */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"class\">Select Class *</Label>\n                <Select \n                  value={selectedClassId} \n                  onValueChange={(value) => {\n                    console.log(\"🎯 Class selected:\", value);\n                    setSelectedClassId(value);\n                    setSelectedStudentId(\"\"); // Reset student selection when class changes\n                  }}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Choose a class first\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {isLoadingClasses ? (\n                      <SelectItem value=\"loading\" disabled>\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        Loading classes...\n                      </SelectItem>\n                    ) : classes.length === 0 ? (\n                      <SelectItem value=\"no-classes-available\" disabled>\n                        No classes available\n                      </SelectItem>\n                    ) : (\n                      classes\n                        .filter((classItem: Class) => classItem.id && classItem.id.trim() !== '')\n                        .map((classItem: Class) => (\n                        <SelectItem key={classItem.id} value={classItem.id}>\n                          {classItem.name}\n                        </SelectItem>\n                      ))\n                    )}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Student Selection */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"student\">Select Student *</Label>\n                <Select \n                  value={selectedStudentId} \n                  onValueChange={(value) => {\n                    console.log(\"👨‍🎓 Student selected:\", value);\n                    setSelectedStudentId(value);\n                  }}\n                  disabled={!selectedClassId}\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder={\n                      !selectedClassId \n                        ? \"Please select a class first\" \n                        : isLoadingStudents \n                        ? \"Loading students...\" \n                        : \"Choose a student\"\n                    } />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {isLoadingStudents ? (\n                      <SelectItem value=\"loading\" disabled>\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        Loading students...\n                      </SelectItem>\n                    ) : studentsError ? (\n                      <SelectItem value=\"error\" disabled>\n                        Error loading students\n                      </SelectItem>\n                    ) : !selectedClassId ? (\n                      <SelectItem value=\"no-class\" disabled>\n                        Please select a class first\n                      </SelectItem>\n                    ) : filteredStudents.length === 0 ? (\n                      <SelectItem value=\"no-students\" disabled>\n                        No students found in this class\n                      </SelectItem>\n                    ) : (\n                      filteredStudents.map((student: Student) => {\n                        const totalAmount = parseFloat(student.totalFeeAmount || '0');\n                        const paidAmount = parseFloat(student.paidAmount || '0');\n                        const pendingAmount = totalAmount - paidAmount;\n                        const hasBalance = pendingAmount > 0;\n                        \n                        return (\n                          <SelectItem \n                            key={student.id} \n                            value={student.id}\n                            disabled={hasBalance}\n                          >\n                            <div className=\"flex flex-col w-full\">\n                              <div className=\"font-medium\">\n                                {student.name} ({student.studentId})\n                              </div>\n                              <div className=\"text-sm text-muted-foreground\">\n                                Class: {student.className}\n                              </div>\n                              {hasBalance && (\n                                <div className=\"text-xs text-red-500 font-medium\">\n                                  ₹{pendingAmount.toFixed(2)} pending - Clear dues first\n                                </div>\n                              )}\n                            </div>\n                          </SelectItem>\n                        );\n                      })\n                    )}\n                  </SelectContent>\n                </Select>\n                \n                {/* Student Balance Warning/Success */}\n                {selectedStudentId && filteredStudents.length > 0 && (() => {\n                  const selectedStudent = filteredStudents.find((s: Student) => s.id === selectedStudentId);\n                  if (selectedStudent) {\n                    const totalAmount = parseFloat(selectedStudent.totalFeeAmount || '0');\n                    const paidAmount = parseFloat(selectedStudent.paidAmount || '0');\n                    const pendingAmount = totalAmount - paidAmount;\n                    \n                    if (pendingAmount > 0) {\n                      return (\n                        <div className=\"p-3 bg-red-50 border border-red-200 rounded-md\">\n                          <p className=\"text-red-700 text-sm font-medium\">\n                            ⚠️ This student has a pending balance of ₹{pendingAmount.toFixed(2)}\n                          </p>\n                          <p className=\"text-red-600 text-xs mt-1\">\n                            Please clear all dues before submitting a dropout request.\n                          </p>\n                        </div>\n                      );\n                    } else {\n                      return (\n                        <div className=\"p-3 bg-green-50 border border-green-200 rounded-md\">\n                          <p className=\"text-green-700 text-sm font-medium\">\n                            ✅ This student has no pending balance and is eligible for dropout.\n                          </p>\n                        </div>\n                      );\n                    }\n                  }\n                  return null;\n                })()}\n              </div>\n              \n              {/* Reason Input */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"reason\">Reason for Dropout *</Label>\n                <Textarea\n                  id=\"reason\"\n                  placeholder=\"Please provide a detailed reason for the dropout request...\"\n                  value={reason}\n                  onChange={(e) => setReason(e.target.value)}\n                  rows={4}\n                  className=\"resize-none\"\n                />\n              </div>\n            </div>\n            \n            <DialogFooter>\n              <Button\n                variant=\"outline\"\n                onClick={handleDialogClose}\n                disabled={createRequestMutation.isPending}\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleSubmitRequest}\n                disabled={createRequestMutation.isPending || !selectedStudentId || !reason.trim()}\n              >\n                {createRequestMutation.isPending && (\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                )}\n                Submit Request\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":20717},"client/src/components/students/AdminStudentsList.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { \n  Search, \n  Edit, \n  Trash2, \n  Eye,\n  UserPlus,\n  Download,\n  Filter,\n  MoreVertical,\n  MapPin\n} from 'lucide-react';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\nimport { AddStudentModal } from './AddStudentModal';\nimport { EditStudentModal } from './EditStudentModal';\n// import { ViewStudentModal } from './ViewStudentModal';\nimport type { Student } from '@shared/schema';\n\nexport function AdminStudentsList() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [classFilter, setClassFilter] = useState('all');\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [isViewModalOpen, setIsViewModalOpen] = useState(false);\n  const [selectedStudent, setSelectedStudent] = useState<Student | null>(null);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [studentToDelete, setStudentToDelete] = useState<Student | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const studentsPerPage = 10;\n\n  // Fetch students\n  const { data: students = [], isLoading } = useQuery<Student[]>({\n    queryKey: ['/api/students'],\n  });\n\n  // Fetch classes for filter\n  const { data: classesData = [] } = useQuery<any[]>({\n    queryKey: ['/api/classes'],\n  });\n\n  // Location filter states\n  const [selectedState, setSelectedState] = useState('all');\n  const [selectedDistrict, setSelectedDistrict] = useState('all');\n  const [selectedMandal, setSelectedMandal] = useState('all');\n  const [selectedVillage, setSelectedVillage] = useState('all');\n  const [selectedCenter, setSelectedCenter] = useState('all');\n\n  // Fetch location data for filters\n  const { data: states = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/states'],\n  });\n\n  const { data: districts = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/districts'],\n  });\n\n  const { data: mandals = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/mandals'],\n  });\n\n  const { data: villages = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/villages'],\n  });\n\n  const { data: soCenters = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/so-centers'],\n  });\n\n  // Delete student mutation\n  const deleteStudentMutation = useMutation({\n    mutationFn: (studentId: string) => {\n      return apiRequest('DELETE', `/api/students/${studentId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Student Deleted',\n        description: 'Student has been successfully deleted.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/students'] });\n      setDeleteDialogOpen(false);\n      setStudentToDelete(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Delete Failed',\n        description: error.message || 'Failed to delete student. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Filter location data based on selections\n  const filteredDistricts = (districts as any[]).filter((district: any) => \n    selectedState === 'all' || district.stateId === selectedState\n  );\n\n  const filteredMandals = (mandals as any[]).filter((mandal: any) => \n    selectedDistrict === 'all' || mandal.districtId === selectedDistrict\n  );\n\n  const filteredVillages = (villages as any[]).filter((village: any) => \n    selectedMandal === 'all' || village.mandalId === selectedMandal\n  );\n\n  const filteredSoCenters = (soCenters as any[]).filter((center: any) => {\n    if (selectedState === 'all' && selectedDistrict === 'all' && selectedMandal === 'all' && selectedVillage === 'all') {\n      return true;\n    }\n    \n    // Use the joined location data from the center\n    const stateMatch = selectedState === 'all' || center.stateName === (states as any[]).find(s => s.id === selectedState)?.name;\n    const districtMatch = selectedDistrict === 'all' || center.districtName === (districts as any[]).find(d => d.id === selectedDistrict)?.name;\n    const mandalMatch = selectedMandal === 'all' || center.mandalName === (mandals as any[]).find(m => m.id === selectedMandal)?.name;\n    const villageMatch = selectedVillage === 'all' || center.villageName === (villages as any[]).find(v => v.id === selectedVillage)?.name;\n\n    return stateMatch && districtMatch && mandalMatch && villageMatch;\n  });\n\n  // Filter students\n  const filteredStudents = students.filter((student: Student) => {\n    const matchesSearch = student.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         student.studentId?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         student.parentPhone.includes(searchTerm) ||\n                         student.fatherName.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesClass = classFilter === 'all' || student.classId === classFilter;\n    const matchesCenter = selectedCenter === 'all' || student.soCenterId === selectedCenter;\n\n    // Location-based filtering through student's SO center\n    let matchesLocation = true;\n    if (selectedState !== 'all' || selectedDistrict !== 'all' || selectedMandal !== 'all' || selectedVillage !== 'all') {\n      const studentCenter = (soCenters as any[]).find(c => c.id === student.soCenterId);\n      if (studentCenter) {\n        const stateMatch = selectedState === 'all' || studentCenter.stateName === (states as any[]).find(s => s.id === selectedState)?.name;\n        const districtMatch = selectedDistrict === 'all' || studentCenter.districtName === (districts as any[]).find(d => d.id === selectedDistrict)?.name;\n        const mandalMatch = selectedMandal === 'all' || studentCenter.mandalName === (mandals as any[]).find(m => m.id === selectedMandal)?.name;\n        const villageMatch = selectedVillage === 'all' || studentCenter.villageName === (villages as any[]).find(v => v.id === selectedVillage)?.name;\n        matchesLocation = stateMatch && districtMatch && mandalMatch && villageMatch;\n      } else {\n        matchesLocation = false;\n      }\n    }\n\n    return matchesSearch && matchesClass && matchesCenter && matchesLocation;\n  });\n\n  // Pagination\n  const totalPages = Math.ceil(filteredStudents.length / studentsPerPage);\n  const paginatedStudents = filteredStudents.slice(\n    (currentPage - 1) * studentsPerPage,\n    currentPage * studentsPerPage\n  );\n\n  const handleEdit = (student: Student) => {\n    setSelectedStudent(student);\n    setIsEditModalOpen(true);\n  };\n\n  const handleView = (student: Student) => {\n    setSelectedStudent(student);\n    setIsViewModalOpen(true);\n  };\n\n  const handleDelete = (student: Student) => {\n    setStudentToDelete(student);\n    setDeleteDialogOpen(true);\n  };\n\n  const confirmDelete = () => {\n    if (studentToDelete) {\n      deleteStudentMutation.mutate(studentToDelete.id);\n    }\n  };\n\n  const handleStateChange = (stateId: string) => {\n    setSelectedState(stateId);\n    setSelectedDistrict('all');\n    setSelectedMandal('all');\n    setSelectedVillage('all');\n    setSelectedCenter('all');\n  };\n\n  const handleDistrictChange = (districtId: string) => {\n    setSelectedDistrict(districtId);\n    setSelectedMandal('all');\n    setSelectedVillage('all');\n    setSelectedCenter('all');\n  };\n\n  const handleMandalChange = (mandalId: string) => {\n    setSelectedMandal(mandalId);\n    setSelectedVillage('all');\n    setSelectedCenter('all');\n  };\n\n  const handleVillageChange = (villageId: string) => {\n    setSelectedVillage(villageId);\n    setSelectedCenter('all');\n  };\n\n  const clearAllFilters = () => {\n    setSearchTerm('');\n    setClassFilter('all');\n    setSelectedState('all');\n    setSelectedDistrict('all');\n    setSelectedMandal('all');\n    setSelectedVillage('all');\n    setSelectedCenter('all');\n  };\n\n  const handleExport = () => {\n    // Create CSV content\n    const headers = ['Student ID', 'Name', 'Father Name', 'Phone', 'Class', 'School', 'Address', 'Created Date'];\n    const csvContent = [\n      headers.join(','),\n      ...filteredStudents.map(student => [\n        student.studentId || '',\n        student.name,\n        student.fatherName,\n        student.parentPhone,\n        student.classId,\n        student.presentSchoolName,\n        student.address,\n        new Date(student.createdAt || '').toLocaleDateString()\n      ].map(field => `\"${field}\"`).join(','))\n    ].join('\\n');\n\n    // Download CSV\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `students_${new Date().toISOString().split('T')[0]}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n\n    toast({\n      title: 'Export Successful',\n      description: `Exported ${filteredStudents.length} students to CSV.`,\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\"></div>\n            <p className=\"text-gray-600\">Loading students...</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <>\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-xl font-semibold text-gray-900\">\n              Student Management ({filteredStudents.length} students)\n            </CardTitle>\n            <div className=\"flex items-center space-x-3\">\n              <Button onClick={() => setIsAddModalOpen(true)} className=\"bg-primary\">\n                <UserPlus className=\"h-4 w-4 mr-2\" />\n                Add Student\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={handleExport}\n                disabled={filteredStudents.length === 0}\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export CSV\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          {/* Location Filters Section */}\n          <div className=\"bg-gray-50 p-4 rounded-lg border-b pb-6 mb-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900 flex items-center\">\n                <MapPin className=\"h-5 w-5 mr-2 text-blue-600\" />\n                Location Filters\n              </h3>\n              <Button variant=\"outline\" onClick={clearAllFilters} size=\"sm\">\n                <Filter className=\"h-4 w-4 mr-2\" />\n                Clear All\n              </Button>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n              {/* State Filter */}\n              <Select onValueChange={handleStateChange} value={selectedState}>\n                <SelectTrigger className=\"bg-white border-2 border-gray-300 focus:border-blue-500\">\n                  <SelectValue placeholder=\"🏛️ Select State\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All States</SelectItem>\n                  {(states as any[]).map((state: any) => (\n                    <SelectItem key={state.id} value={state.id}>\n                      {state.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              {/* District Filter */}\n              <Select \n                onValueChange={handleDistrictChange} \n                value={selectedDistrict}\n                disabled={selectedState === 'all'}\n              >\n                <SelectTrigger className=\"bg-white border-2 border-gray-300 focus:border-blue-500\">\n                  <SelectValue placeholder=\"🏘️ Select District\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Districts</SelectItem>\n                  {filteredDistricts.map((district: any) => (\n                    <SelectItem key={district.id} value={district.id}>\n                      {district.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              {/* Mandal Filter */}\n              <Select \n                onValueChange={handleMandalChange} \n                value={selectedMandal}\n                disabled={selectedDistrict === 'all'}\n              >\n                <SelectTrigger className=\"bg-white border-2 border-gray-300 focus:border-blue-500\">\n                  <SelectValue placeholder=\"🏛️ Select Mandal\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Mandals</SelectItem>\n                  {filteredMandals.map((mandal: any) => (\n                    <SelectItem key={mandal.id} value={mandal.id}>\n                      {mandal.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              {/* Village Filter */}\n              <Select \n                onValueChange={handleVillageChange} \n                value={selectedVillage}\n                disabled={selectedMandal === 'all'}\n              >\n                <SelectTrigger className=\"bg-white border-2 border-gray-300 focus:border-blue-500\">\n                  <SelectValue placeholder=\"🏘️ Select Village\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Villages</SelectItem>\n                  {filteredVillages.map((village: any) => (\n                    <SelectItem key={village.id} value={village.id}>\n                      {village.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              {/* SO Center Filter */}\n              <Select \n                onValueChange={setSelectedCenter} \n                value={selectedCenter}\n              >\n                <SelectTrigger className=\"bg-white border-2 border-gray-300 focus:border-blue-500\">\n                  <SelectValue placeholder=\"🏢 Select SO Center\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All SO Centers</SelectItem>\n                  {filteredSoCenters.map((center: any) => (\n                    <SelectItem key={center.id} value={center.id}>\n                      {center.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Basic Filters */}\n          <div className=\"flex items-center space-x-4 mb-6\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-3 text-gray-400\" size={16} />\n              <Input\n                placeholder=\"Search by name, student ID, phone, or father's name...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            \n            <Select value={classFilter} onValueChange={setClassFilter}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"All Classes\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Classes</SelectItem>\n                {classesData.map((cls: any) => (\n                  <SelectItem key={cls.id} value={cls.id}>\n                    {cls.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Students Table */}\n          <div className=\"overflow-x-auto\">\n            {paginatedStudents.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-gray-500\">No students found</p>\n              </div>\n            ) : (\n              <table className=\"w-full\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                    <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                      Student\n                    </th>\n                    <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                      Contact\n                    </th>\n                    <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                      Academic\n                    </th>\n                    <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                      Status\n                    </th>\n                    <th className=\"px-6 py-4 text-left text-sm font-medium text-gray-500 uppercase tracking-wider\">\n                      Actions\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {paginatedStudents.map((student: Student) => (\n                    <tr key={student.id} className=\"hover:bg-gray-50\">\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"flex items-center\">\n                          <div className=\"flex-shrink-0 h-10 w-10\">\n                            <div className=\"h-10 w-10 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center text-white font-medium\">\n                              {student.name.charAt(0).toUpperCase()}\n                            </div>\n                          </div>\n                          <div className=\"ml-4\">\n                            <div className=\"text-sm font-medium text-gray-900\">\n                              {student.name}\n                            </div>\n                            <div className=\"text-sm text-gray-500\">\n                              ID: {student.studentId || 'N/A'}\n                            </div>\n                          </div>\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"text-sm text-gray-900\">{student.fatherName}</div>\n                        <div className=\"text-sm text-gray-500\">{student.parentPhone}</div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"text-sm text-gray-900\">\n                          {classesData.find((c: any) => c.id === student.classId)?.name || 'Unknown Class'}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">\n                          {student.courseType} • {student.schoolType}\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <Badge \n                          variant={student.isActive ? \"default\" : \"secondary\"}\n                          className={student.isActive ? \"bg-green-100 text-green-800\" : \"bg-gray-100 text-gray-800\"}\n                        >\n                          {student.isActive ? 'Active' : 'Inactive'}\n                        </Badge>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                              <MoreVertical className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem onClick={() => handleView(student)}>\n                              <Eye className=\"h-4 w-4 mr-2\" />\n                              View Details\n                            </DropdownMenuItem>\n                            <DropdownMenuItem onClick={() => handleEdit(student)}>\n                              <Edit className=\"h-4 w-4 mr-2\" />\n                              Edit\n                            </DropdownMenuItem>\n                            <DropdownMenuItem \n                              onClick={() => handleDelete(student)}\n                              className=\"text-red-600\"\n                            >\n                              <Trash2 className=\"h-4 w-4 mr-2\" />\n                              Delete\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            )}\n          </div>\n\n          {/* Pagination */}\n          {totalPages > 1 && (\n            <div className=\"flex items-center justify-between mt-6\">\n              <div className=\"text-sm text-gray-500\">\n                Showing {((currentPage - 1) * studentsPerPage) + 1} to {Math.min(currentPage * studentsPerPage, filteredStudents.length)} of {filteredStudents.length} students\n              </div>\n              <div className=\"flex space-x-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n                  disabled={currentPage === 1}\n                >\n                  Previous\n                </Button>\n                <span className=\"px-3 py-2 text-sm text-gray-700\">\n                  Page {currentPage} of {totalPages}\n                </span>\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n                  disabled={currentPage === totalPages}\n                >\n                  Next\n                </Button>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Modals */}\n      <AddStudentModal \n        isOpen={isAddModalOpen} \n        onClose={() => setIsAddModalOpen(false)} \n      />\n      \n      <EditStudentModal \n        isOpen={isEditModalOpen} \n        onClose={() => setIsEditModalOpen(false)}\n        student={selectedStudent}\n      />\n      \n      {/* <ViewStudentModal \n        isOpen={isViewModalOpen} \n        onClose={() => setIsViewModalOpen(false)}\n        student={selectedStudent}\n      /> */}\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Student</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete {studentToDelete?.name}? This action cannot be undone.\n              All student data including progress and payment records will be permanently removed.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={() => setDeleteDialogOpen(false)}>\n              Cancel\n            </AlertDialogCancel>\n            <AlertDialogAction \n              onClick={confirmDelete}\n              className=\"bg-red-600 hover:bg-red-700\"\n              disabled={deleteStudentMutation.isPending}\n            >\n              {deleteStudentMutation.isPending ? 'Deleting...' : 'Delete Student'}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}","size_bytes":24565},"client/src/pages/so-center/ExamResults.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft, Save, FileText, Users, Calculator } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\ninterface Exam {\n  id: string;\n  name: string;\n  className: string;\n  date: string;\n  totalQuestions: number;\n  totalMarks: number;\n  status: string;\n}\n\ninterface Student {\n  id: string;\n  name: string;\n  studentId: string;\n  fatherName: string;\n  parentPhone: string;\n}\n\ninterface ExamQuestion {\n  questionNumber: number;\n  marks: number;\n}\n\ninterface StudentResult {\n  studentId: string;\n  questionResults: {\n    questionNumber: number;\n    marks: number;\n    status: 'not_written' | 'poorly_written' | 'well_written';\n  }[];\n  totalMarks: number;\n  percentage: number;\n  remarks?: string;\n}\n\nexport default function ExamResults() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedExamId, setSelectedExamId] = useState<string>(\"\");\n  const [selectedExam, setSelectedExam] = useState<Exam | null>(null);\n  const [students, setStudents] = useState<Student[]>([]);\n  const [examQuestions, setExamQuestions] = useState<ExamQuestion[]>([]);\n  const [studentResults, setStudentResults] = useState<Record<string, StudentResult>>({});\n  const [currentStudentIndex, setCurrentStudentIndex] = useState(0);\n\n  // Fetch SO Center's exams\n  const { data: examsData, isLoading: examsLoading } = useQuery({\n    queryKey: [\"/api/so-center/exams\"],\n    queryFn: () => apiRequest(\"GET\", \"/api/so-center/exams\"),\n  });\n\n  // Ensure exams is always an array\n  const exams = Array.isArray(examsData) ? examsData : [];\n\n  // Fetch students for selected exam\n  const fetchStudentsForExam = async (examId: string) => {\n    try {\n      const response = await apiRequest(\"GET\", `/api/so-center/exams/${examId}/students`);\n      setStudents(response || []);\n    } catch (error) {\n      console.error(\"Error fetching students:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch students for exam\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Fetch exam questions\n  const fetchExamQuestions = async (examId: string) => {\n    try {\n      const response = await apiRequest(\"GET\", `/api/so-center/exams/${examId}/questions`);\n      // Handle the new API response format\n      const questions = response?.questions || response || [];\n      setExamQuestions(questions);\n    } catch (error) {\n      console.error(\"Error fetching exam questions:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch exam questions\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Handle exam selection\n  const handleExamSelect = async (examId: string) => {\n    setSelectedExamId(examId);\n    const exam = exams.find((e: Exam) => e.id === examId);\n    setSelectedExam(exam || null);\n    \n    if (examId) {\n      await Promise.all([\n        fetchStudentsForExam(examId),\n        fetchExamQuestions(examId)\n      ]);\n      \n      // Initialize results for all students\n      const initialResults: Record<string, StudentResult> = {};\n      const studentsArray = Array.isArray(students) ? students : [];\n      studentsArray.forEach(student => {\n        initialResults[student.id] = {\n          studentId: student.id,\n          questionResults: examQuestions.map(q => ({\n            questionNumber: q.questionNumber,\n            marks: 0,\n            status: 'not_written' as const\n          })),\n          totalMarks: 0,\n          percentage: 0,\n          remarks: ''\n        };\n      });\n      setStudentResults(initialResults);\n    }\n  };\n\n  // Update question result\n  const updateQuestionResult = (\n    studentId: string, \n    questionNumber: number, \n    status: 'not_written' | 'poorly_written' | 'well_written'\n  ) => {\n    setStudentResults(prev => {\n      const updated = { ...prev };\n      if (!updated[studentId]) {\n        updated[studentId] = {\n          studentId,\n          questionResults: [],\n          totalMarks: 0,\n          percentage: 0\n        };\n      }\n\n      const questionIndex = updated[studentId].questionResults.findIndex(\n        qr => qr.questionNumber === questionNumber\n      );\n      \n      if (questionIndex >= 0) {\n        updated[studentId].questionResults[questionIndex].status = status;\n        \n        // Calculate marks based on status\n        const question = examQuestions.find(q => q.questionNumber === questionNumber);\n        const maxMarks = question?.marks || 0;\n        \n        let marks = 0;\n        switch (status) {\n          case 'not_written':\n            marks = 0;\n            break;\n          case 'poorly_written':\n            marks = Math.floor(maxMarks * 0.3); // 30% marks\n            break;\n          case 'well_written':\n            marks = maxMarks; // Full marks\n            break;\n        }\n        \n        updated[studentId].questionResults[questionIndex].marks = marks;\n        \n        // Recalculate total\n        const totalMarks = updated[studentId].questionResults.reduce((sum, qr) => sum + qr.marks, 0);\n        const maxTotalMarks = examQuestions.reduce((sum, q) => sum + q.marks, 0);\n        const percentage = maxTotalMarks > 0 ? Math.round((totalMarks / maxTotalMarks) * 100) : 0;\n        \n        updated[studentId].totalMarks = totalMarks;\n        updated[studentId].percentage = percentage;\n      }\n\n      return updated;\n    });\n  };\n\n  // Save results mutation\n  const saveResultsMutation = useMutation({\n    mutationFn: async (data: { examId: string; results: StudentResult[] }) => {\n      return apiRequest(\"POST\", \"/api/so-center/exam-results\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Exam results saved successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/so-center/exams\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save exam results\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Save all results\n  const handleSaveResults = () => {\n    if (!selectedExamId || !selectedExam) {\n      toast({\n        title: \"Error\",\n        description: \"Please select an exam first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const results = Object.values(studentResults);\n    saveResultsMutation.mutate({\n      examId: selectedExamId,\n      results\n    });\n  };\n\n  // Get current student and result\n  const studentsArray = Array.isArray(students) ? students : [];\n  const currentStudent = studentsArray[currentStudentIndex];\n  const currentResult = currentStudent ? studentResults[currentStudent.id] : null;\n\n  if (examsLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-4\">\n          <Button variant=\"outline\" onClick={() => setLocation(\"/so-center/exams\")}>\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Exams\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-bold\">Exam Results Update</h1>\n            <p className=\"text-muted-foreground\">Update student marks for exam questions</p>\n          </div>\n        </div>\n        \n        {selectedExam && (\n          <Button onClick={handleSaveResults} disabled={saveResultsMutation.isPending}>\n            <Save className=\"h-4 w-4 mr-2\" />\n            {saveResultsMutation.isPending ? \"Saving...\" : \"Save All Results\"}\n          </Button>\n        )}\n      </div>\n\n      {/* Exam Selection */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileText className=\"h-5 w-5\" />\n            Select Exam\n          </CardTitle>\n          <CardDescription>Choose an exam to update results</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-4\">\n            <div>\n              <Label htmlFor=\"exam-select\">Exam</Label>\n              <Select value={selectedExamId} onValueChange={handleExamSelect}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select an exam\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {exams?.map((exam: Exam) => (\n                    <SelectItem key={exam.id} value={exam.id}>\n                      {exam.name} - {exam.className} ({new Date(exam.date).toLocaleDateString()})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            {selectedExam && (\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-muted rounded-lg\">\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Total Questions</Label>\n                  <p className=\"font-semibold\">{selectedExam.totalQuestions}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Total Marks</Label>\n                  <p className=\"font-semibold\">{selectedExam.totalMarks}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Students</Label>\n                  <p className=\"font-semibold\">{students.length}</p>\n                </div>\n                <div>\n                  <Label className=\"text-sm text-muted-foreground\">Date</Label>\n                  <p className=\"font-semibold\">{new Date(selectedExam.date).toLocaleDateString()}</p>\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Student Results Entry */}\n      {selectedExam && students.length > 0 && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Student List */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                Students ({Array.isArray(students) ? students.length : 0})\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              {Array.isArray(students) ? students.map((student, index) => (\n                <div\n                  key={student.id}\n                  className={`p-3 rounded-lg border cursor-pointer transition-colors ${\n                    index === currentStudentIndex\n                      ? \"bg-primary text-primary-foreground\"\n                      : \"hover:bg-muted\"\n                  }`}\n                  onClick={() => setCurrentStudentIndex(index)}\n                >\n                  <p className=\"font-medium\">{student.name}</p>\n                  <p className=\"text-sm opacity-70\">{student.studentId}</p>\n                  {studentResults[student.id] && (\n                    <div className=\"flex justify-between items-center mt-1\">\n                      <Badge variant={index === currentStudentIndex ? \"secondary\" : \"outline\"}>\n                        {studentResults[student.id].totalMarks}/{selectedExam.totalMarks}\n                      </Badge>\n                      <span className=\"text-sm\">\n                        {studentResults[student.id].percentage}%\n                      </span>\n                    </div>\n                  )}\n                </div>\n              )) : (\n                <p className=\"text-center text-muted-foreground\">No students found</p>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Question Results Entry */}\n          {currentStudent && currentResult && (\n            <Card className=\"lg:col-span-2\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Calculator className=\"h-5 w-5\" />\n                  {currentStudent.name} - Results Entry\n                </CardTitle>\n                <CardDescription>\n                  Student ID: {currentStudent.studentId} | Father: {currentStudent.fatherName}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Questions */}\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-medium\">Questions</h4>\n                  {examQuestions.map((question) => {\n                    const questionResult = currentResult.questionResults.find(\n                      qr => qr.questionNumber === question.questionNumber\n                    );\n                    \n                    return (\n                      <div key={question.questionNumber} className=\"p-4 border rounded-lg\">\n                        <div className=\"flex justify-between items-center mb-3\">\n                          <Label className=\"font-medium\">\n                            Question {question.questionNumber}\n                          </Label>\n                          <Badge variant=\"outline\">\n                            {questionResult?.marks || 0}/{question.marks} marks\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-3 gap-2\">\n                          {(['not_written', 'poorly_written', 'well_written'] as const).map((status) => (\n                            <Button\n                              key={status}\n                              variant={questionResult?.status === status ? \"default\" : \"outline\"}\n                              size=\"sm\"\n                              onClick={() => updateQuestionResult(\n                                currentStudent.id,\n                                question.questionNumber,\n                                status\n                              )}\n                              className=\"text-xs\"\n                            >\n                              {status === 'not_written' && \"Not Written (0%)\"}\n                              {status === 'poorly_written' && \"Poorly Written (30%)\"}\n                              {status === 'well_written' && \"Well Written (100%)\"}\n                            </Button>\n                          ))}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n\n                {/* Summary */}\n                <div className=\"p-4 bg-muted rounded-lg\">\n                  <h4 className=\"font-medium mb-2\">Summary</h4>\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <Label className=\"text-muted-foreground\">Total Marks</Label>\n                      <p className=\"font-semibold text-lg\">\n                        {currentResult.totalMarks}/{selectedExam.totalMarks}\n                      </p>\n                    </div>\n                    <div>\n                      <Label className=\"text-muted-foreground\">Percentage</Label>\n                      <p className=\"font-semibold text-lg\">\n                        {currentResult.percentage}%\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Remarks */}\n                <div>\n                  <Label htmlFor=\"remarks\">Remarks (Optional)</Label>\n                  <Textarea\n                    id=\"remarks\"\n                    value={currentResult.remarks || \"\"}\n                    onChange={(e) => {\n                      setStudentResults(prev => ({\n                        ...prev,\n                        [currentStudent.id]: {\n                          ...prev[currentStudent.id],\n                          remarks: e.target.value\n                        }\n                      }));\n                    }}\n                    placeholder=\"Add any remarks about the student's performance...\"\n                    rows={3}\n                  />\n                </div>\n\n                {/* Navigation */}\n                <div className=\"flex justify-between pt-4\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setCurrentStudentIndex(Math.max(0, currentStudentIndex - 1))}\n                    disabled={currentStudentIndex === 0}\n                  >\n                    Previous Student\n                  </Button>\n                  <Button\n                    onClick={() => setCurrentStudentIndex(Math.min(Array.isArray(students) ? students.length - 1 : 0, currentStudentIndex + 1))}\n                    disabled={currentStudentIndex === (Array.isArray(students) ? students.length - 1 : 0)}\n                  >\n                    Next Student\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      )}\n\n      {selectedExam && (!Array.isArray(students) || students.length === 0) && (\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No students found for this exam.</p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":17859},"client/src/pages/so-center/SoCenterExams.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { Calendar, Clock, Users, BookOpen, FileText, ArrowRight, Edit, Save, X } from \"lucide-react\";\n\ninterface Exam {\n  id: string;\n  name: string;\n  title: string;\n  className: string;\n  date: string;\n  totalQuestions: number;\n  totalMarks: number;\n  status: string;\n  description?: string;\n}\n\ninterface Student {\n  id: string;\n  name: string;\n  studentId: string;\n  fatherName: string;\n  parentPhone: string;\n}\n\ninterface ExamQuestion {\n  id: string;\n  questionNumber: number;\n  text: string;\n  marks: number;\n  type: string;\n}\n\ninterface StudentMarks {\n  studentId: string;\n  marks: Array<{\n    questionNo: number;\n    score: number;\n    maxMarks: number;\n  }>;\n  performance: string[];\n  totalScore: number;\n}\n\nexport default function SoCenterExams() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Modal state\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedExam, setSelectedExam] = useState<Exam | null>(null);\n  const [students, setStudents] = useState<Student[]>([]);\n  const [examQuestions, setExamQuestions] = useState<ExamQuestion[]>([]);\n  const [studentMarks, setStudentMarks] = useState<Record<string, StudentMarks>>({});\n\n  // Fetch SO Center's exams\n  const { data: examsData, isLoading, error } = useQuery({\n    queryKey: [\"/api/so-center/exams\"],\n    queryFn: () => apiRequest(\"GET\", \"/api/so-center/exams\"),\n  });\n\n  // Ensure exams is always an array\n  const exams = Array.isArray(examsData) ? examsData : [];\n\n  // Fetch students and questions for modal\n  const fetchExamData = async (examId: string) => {\n    try {\n      console.log('🔍 Fetching exam data for:', examId);\n      \n      const [studentsResponse, questionsResponse] = await Promise.all([\n        apiRequest(\"GET\", `/api/so-center/exams/${examId}/students`),\n        apiRequest(\"GET\", `/api/exams/${examId}/questions`)\n      ]);\n      \n      console.log('📊 Students response:', studentsResponse);\n      console.log('📊 Questions response:', questionsResponse);\n      \n      const studentsData = Array.isArray(studentsResponse) ? studentsResponse : [];\n      const questionsData = Array.isArray(questionsResponse) ? questionsResponse : [];\n      \n      console.log('📊 Processed students:', studentsData.length);\n      console.log('📊 Processed questions:', questionsData.length);\n      \n      setStudents(studentsData);\n      setExamQuestions(questionsData);\n      \n      // Initialize marks for each student\n      const initialMarks: Record<string, StudentMarks> = {};\n      studentsData.forEach((student: Student) => {\n        initialMarks[student.id] = {\n          studentId: student.id,\n          marks: questionsData.map((q: ExamQuestion, index: number) => ({\n            questionNo: q.questionNumber || (index + 1),\n            score: 0,\n            maxMarks: q.marks || 1\n          })),\n          performance: questionsData.map(() => 'not_attempted'),\n          totalScore: 0\n        };\n      });\n      setStudentMarks(initialMarks);\n      \n      console.log('✅ Exam data loaded successfully');\n    } catch (error) {\n      console.error('❌ Error fetching exam data:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch exam data\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleUpdateResults = async (exam: Exam) => {\n    setSelectedExam(exam);\n    setIsModalOpen(true);\n    await fetchExamData(exam.id);\n  };\n\n  // Update student marks\n  const updateStudentMark = (studentId: string, questionIndex: number, score: number) => {\n    setStudentMarks(prev => {\n      const updated = { ...prev };\n      if (updated[studentId]) {\n        updated[studentId].marks[questionIndex].score = score;\n        // Auto-calculate total\n        updated[studentId].totalScore = updated[studentId].marks.reduce((sum, mark) => sum + mark.score, 0);\n      }\n      return updated;\n    });\n  };\n\n  // Update performance level\n  const updatePerformance = (studentId: string, questionIndex: number, performance: string) => {\n    setStudentMarks(prev => {\n      const updated = { ...prev };\n      if (updated[studentId]) {\n        updated[studentId].performance[questionIndex] = performance;\n        \n        // Auto-calculate score based on performance\n        const maxMarks = updated[studentId].marks[questionIndex].maxMarks;\n        let score = 0;\n        switch (performance) {\n          case 'not_attempted':\n            score = 0;\n            break;\n          case 'poor':\n            score = Math.ceil(maxMarks * 0.3); // 30% of max marks\n            break;\n          case 'good':\n            score = maxMarks; // Full marks\n            break;\n        }\n        updated[studentId].marks[questionIndex].score = score;\n        updated[studentId].totalScore = updated[studentId].marks.reduce((sum, mark) => sum + mark.score, 0);\n      }\n      return updated;\n    });\n  };\n\n  // Save results mutation\n  const saveResultsMutation = useMutation({\n    mutationFn: async (data: { examId: string; students: StudentMarks[] }) => {\n      return apiRequest(\"POST\", `/api/exams/${data.examId}/results/update`, { students: data.students });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Exam results updated successfully\",\n      });\n      setIsModalOpen(false);\n      setSelectedExam(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/so-center/exams\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update exam results\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSaveResults = () => {\n    if (!selectedExam) return;\n    \n    const studentsData = Object.values(studentMarks);\n    saveResultsMutation.mutate({\n      examId: selectedExam.id,\n      students: studentsData\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'active':\n      case 'ongoing':\n        return 'bg-green-100 text-green-800';\n      case 'completed':\n        return 'bg-blue-100 text-blue-800';\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-[400px]\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"container mx-auto py-6\">\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <p className=\"text-destructive\">Error loading exams. Please try again.</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Your Exams</h1>\n          <p className=\"text-muted-foreground\">View and manage exam results</p>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <BookOpen className=\"h-4 w-4 text-blue-500\" />\n              <div>\n                <p className=\"text-sm font-medium\">Total Exams</p>\n                <p className=\"text-2xl font-bold\">{exams.length}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Calendar className=\"h-4 w-4 text-green-500\" />\n              <div>\n                <p className=\"text-sm font-medium\">Completed</p>\n                <p className=\"text-2xl font-bold\">\n                  {exams.filter((exam: Exam) => exam.status === 'completed').length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Clock className=\"h-4 w-4 text-yellow-500\" />\n              <div>\n                <p className=\"text-sm font-medium\">Ongoing</p>\n                <p className=\"text-2xl font-bold\">\n                  {exams.filter((exam: Exam) => exam.status === 'ongoing' || exam.status === 'active').length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Users className=\"h-4 w-4 text-purple-500\" />\n              <div>\n                <p className=\"text-sm font-medium\">This Month</p>\n                <p className=\"text-2xl font-bold\">\n                  {exams.filter((exam: Exam) => {\n                    const examDate = new Date(exam.date);\n                    const now = new Date();\n                    return examDate.getMonth() === now.getMonth() && examDate.getFullYear() === now.getFullYear();\n                  }).length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Exams Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileText className=\"h-5 w-5\" />\n            Exam List\n          </CardTitle>\n          <CardDescription>View and update exam results</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {exams.length > 0 ? (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Exam Name</TableHead>\n                  <TableHead>Class</TableHead>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Questions</TableHead>\n                  <TableHead>Total Marks</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {exams.map((exam: Exam) => (\n                  <TableRow key={exam.id}>\n                    <TableCell>\n                      <div>\n                        <p className=\"font-medium\">{exam.title || exam.name}</p>\n                        {exam.description && (\n                          <p className=\"text-sm text-muted-foreground\">{exam.description}</p>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge variant=\"outline\">{exam.className}</Badge>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <Calendar className=\"h-3 w-3\" />\n                        {new Date(exam.date).toLocaleDateString()}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <FileText className=\"h-3 w-3\" />\n                        {exam.totalQuestions}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-1\">\n                        <span className=\"font-medium\">{exam.totalMarks}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={getStatusColor(exam.status)}>\n                        {exam.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        size=\"sm\"\n                        onClick={() => handleUpdateResults(exam)}\n                        className=\"flex items-center gap-1\"\n                      >\n                        <Edit className=\"h-3 w-3\" />\n                        Update Results\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          ) : (\n            <div className=\"text-center py-8\">\n              <BookOpen className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">No exams found</p>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Exams will appear here once they are assigned to your SO Center\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Marks Entry Modal */}\n      <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n        <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-hidden\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Edit className=\"h-5 w-5\" />\n              Update Exam Results: {selectedExam?.title || selectedExam?.name}\n            </DialogTitle>\n            <DialogDescription>\n              Enter marks and performance levels for each student. Auto-calculation is enabled.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <ScrollArea className=\"max-h-[70vh] w-full\">\n            <div className=\"space-y-6 p-4\">\n              {students.length > 0 && examQuestions.length > 0 ? (\n                students.map((student) => {\n                  const marks = studentMarks[student.id];\n                  if (!marks) return null;\n                  \n                  return (\n                    <Card key={student.id} className=\"p-4\">\n                      <div className=\"space-y-4\">\n                        {/* Student Header */}\n                        <div className=\"flex justify-between items-center border-b pb-2\">\n                          <div>\n                            <h4 className=\"font-semibold\">{student.name}</h4>\n                            <p className=\"text-sm text-muted-foreground\">ID: {student.studentId} | Father: {student.fatherName}</p>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"text-lg font-bold\">Total: {marks.totalScore}/{selectedExam?.totalMarks}</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {selectedExam?.totalMarks ? Math.round((marks.totalScore / selectedExam.totalMarks) * 100) : 0}%\n                            </p>\n                          </div>\n                        </div>\n                        \n                        {/* Questions Grid */}\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                          {examQuestions.map((question, qIndex) => (\n                            <div key={question.id} className=\"border rounded-lg p-3 space-y-2\">\n                              <div className=\"flex justify-between items-center\">\n                                <Label className=\"font-medium\">Q{question.questionNumber}</Label>\n                                <Badge variant=\"outline\">{question.marks} marks</Badge>\n                              </div>\n                              \n                              <div className=\"space-y-2\">\n                                <div>\n                                  <Label htmlFor={`score-${student.id}-${qIndex}`} className=\"text-xs\">Score</Label>\n                                  <Input\n                                    id={`score-${student.id}-${qIndex}`}\n                                    type=\"number\"\n                                    min=\"0\"\n                                    max={question.marks}\n                                    value={marks.marks[qIndex]?.score || 0}\n                                    onChange={(e) => {\n                                      const score = Math.min(Number(e.target.value), question.marks);\n                                      updateStudentMark(student.id, qIndex, score);\n                                    }}\n                                    className=\"h-8\"\n                                  />\n                                </div>\n                                \n                                <div>\n                                  <Label htmlFor={`performance-${student.id}-${qIndex}`} className=\"text-xs\">Performance</Label>\n                                  <Select\n                                    value={marks.performance[qIndex] || 'not_attempted'}\n                                    onValueChange={(value) => updatePerformance(student.id, qIndex, value)}\n                                  >\n                                    <SelectTrigger className=\"h-8\">\n                                      <SelectValue />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      <SelectItem value=\"not_attempted\">Not Attempted</SelectItem>\n                                      <SelectItem value=\"poor\">Poor</SelectItem>\n                                      <SelectItem value=\"good\">Good</SelectItem>\n                                    </SelectContent>\n                                  </Select>\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    </Card>\n                  );\n                })\n              ) : (\n                <div className=\"text-center py-8\">\n                  <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">Loading exam data...</p>\n                </div>\n              )}\n            </div>\n          </ScrollArea>\n          \n          <div className=\"flex justify-end gap-2 pt-4 border-t\">\n            <Button variant=\"outline\" onClick={() => setIsModalOpen(false)}>\n              <X className=\"h-4 w-4 mr-2\" />\n              Cancel\n            </Button>\n            <Button \n              onClick={handleSaveResults}\n              disabled={saveResultsMutation.isPending}\n            >\n              {saveResultsMutation.isPending ? (\n                <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n              ) : (\n                <Save className=\"h-4 w-4 mr-2\" />\n              )}\n              Save Results\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":19767},"server/cleanData.js":{"content":"import { createClient } from '@supabase/supabase-js';\n\n// Initialize Supabase Admin client with correct environment variables\n// NOTE: Environment variables are swapped - NEXT_PUBLIC_SUPABASE_ANON_KEY contains URL\nconst supabaseAdmin = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY, // This actually contains the URL\n  process.env.SUPABASE_SERVICE_ROLE_KEY,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  }\n);\n\nasync function cleanAllSupabaseData() {\n  console.log('🧹 Starting complete Supabase data cleanup...');\n  \n  try {\n    // Step 1: Delete all users from Supabase Auth\n    console.log('🔥 Deleting all users from Supabase Auth...');\n    \n    // Get all users from Supabase Auth\n    const { data: users, error: listError } = await supabaseAdmin.auth.admin.listUsers();\n    \n    if (listError) {\n      console.error('❌ Error listing Supabase Auth users:', listError);\n      throw listError;\n    }\n    \n    console.log(`📊 Found ${users.users.length} users in Supabase Auth`);\n    \n    // Delete each user from Supabase Auth\n    for (const user of users.users) {\n      const { error: deleteError } = await supabaseAdmin.auth.admin.deleteUser(user.id);\n      if (deleteError) {\n        console.error(`❌ Error deleting user ${user.email}:`, deleteError);\n      } else {\n        console.log(`✅ Deleted Supabase Auth user: ${user.email || user.id}`);\n      }\n    }\n    \n    console.log('🎉 Complete Supabase Auth cleanup successful!');\n    console.log('📝 All Supabase Auth users removed');\n    console.log('🔑 Ready for fresh setup');\n    \n    return {\n      success: true,\n      message: 'All Supabase Auth data cleaned successfully',\n      usersDeleted: users.users.length\n    };\n    \n  } catch (error) {\n    console.error('❌ Supabase data cleanup failed:', error);\n    throw error;\n  }\n}\n\n// Run the cleanup\ncleanAllSupabaseData()\n  .then(result => {\n    console.log('Cleanup completed:', result);\n    process.exit(0);\n  })\n  .catch(error => {\n    console.error('Cleanup failed:', error);\n    process.exit(1);\n  });","size_bytes":2088},"server/cleanSupabaseData.ts":{"content":"import { supabaseAdmin } from './supabaseClient.js';\nimport { db } from './db.js';\n\n/**\n * Clean all dummy data from Supabase Auth and PostgreSQL database\n * Preserves table structures and logic, removes only data\n * Keeps admin user for system functionality\n */\nexport async function cleanAllSupabaseData() {\n  console.log('🧹 Starting complete Supabase dummy data cleanup...');\n  \n  try {\n    // Step 1: Delete all non-admin users from Supabase Auth\n    console.log('🔥 Deleting all non-admin users from Supabase Auth...');\n    \n    // Get all users from Supabase Auth\n    const { data: users, error: listError } = await supabaseAdmin.auth.admin.listUsers();\n    \n    if (listError) {\n      console.error('❌ Error listing Supabase Auth users:', listError);\n      throw listError;\n    }\n    \n    console.log(`📊 Found ${users.users.length} users in Supabase Auth`);\n    \n    const adminEmail = 'navanidhi.care@gmail.com';\n    let deletedCount = 0;\n    \n    // Delete each non-admin user from Supabase Auth\n    for (const user of users.users) {\n      if (user.email !== adminEmail) {\n        const { error: deleteError } = await supabaseAdmin.auth.admin.deleteUser(user.id);\n        if (deleteError) {\n          console.error(`❌ Error deleting user ${user.email}:`, deleteError);\n        } else {\n          console.log(`✅ Deleted Supabase Auth user: ${user.email}`);\n          deletedCount++;\n        }\n      } else {\n        console.log(`🔒 Preserved admin user: ${user.email}`);\n      }\n    }\n    \n    // Step 2: Clean all PostgreSQL tables\n    console.log('🗑️ Cleaning all PostgreSQL tables...');\n    \n    await db.transaction(async (tx) => {\n      console.log('🗑️ Cleaning PostgreSQL tables while preserving admin data...');\n      \n      // Delete in reverse dependency order to avoid foreign key constraints\n      \n      // Student and academic related data (all dummy data)\n      await tx.execute({ sql: 'DELETE FROM topic_progress' });\n      await tx.execute({ sql: 'DELETE FROM tuition_progress' });  \n      await tx.execute({ sql: 'DELETE FROM homework_activities' });\n      await tx.execute({ sql: 'DELETE FROM attendance' });\n      await tx.execute({ sql: 'DELETE FROM student_siblings' });\n      await tx.execute({ sql: 'DELETE FROM students' });\n      console.log('🔥 Student data cleaned');\n      \n      // Teaching and academic data (all dummy data)\n      await tx.execute({ sql: 'DELETE FROM teacher_daily_records' });\n      await tx.execute({ sql: 'DELETE FROM teacher_classes' });\n      await tx.execute({ sql: 'DELETE FROM teacher_subjects' });\n      await tx.execute({ sql: 'DELETE FROM teachers' });\n      console.log('🔥 Teacher data cleaned');\n      \n      // Payment and transaction data (all dummy data)\n      await tx.execute({ sql: 'DELETE FROM payments' });\n      await tx.execute({ sql: 'DELETE FROM wallet_transactions' });\n      await tx.execute({ sql: 'DELETE FROM withdrawal_requests' });\n      await tx.execute({ sql: 'DELETE FROM commission_transactions' });\n      await tx.execute({ sql: 'DELETE FROM commission_wallets' });\n      await tx.execute({ sql: 'DELETE FROM product_orders' });\n      console.log('🔥 Payment data cleaned');\n      \n      // Fee management data (all dummy data)\n      await tx.execute({ sql: 'DELETE FROM class_fees' });\n      await tx.execute({ sql: 'DELETE FROM monthly_fee_schedule' });\n      await tx.execute({ sql: 'DELETE FROM fee_calculation_history' });\n      console.log('🔥 Fee data cleaned');\n      \n      // SO Centers (all dummy data)\n      await tx.execute({ sql: 'DELETE FROM so_centers' });\n      console.log('🔥 SO Centers cleaned');\n      \n      // Delete non-admin users only\n      const adminEmail = 'navanidhi.care@gmail.com';\n      await tx.execute({ \n        sql: `DELETE FROM users WHERE email != '${adminEmail}'` \n      });\n      console.log('🔥 Non-admin users cleaned');\n      \n      // Academic structure (keep some basic structure for admin functionality)\n      await tx.execute({ sql: 'DELETE FROM topics' });\n      await tx.execute({ sql: 'DELETE FROM chapters' });\n      await tx.execute({ sql: 'DELETE FROM subjects' });\n      await tx.execute({ sql: 'DELETE FROM classes' });\n      console.log('🔥 Academic structure cleaned');\n      \n      // Address hierarchy (can be rebuilt from UI)\n      await tx.execute({ sql: 'DELETE FROM villages' });\n      await tx.execute({ sql: 'DELETE FROM mandals' });\n      await tx.execute({ sql: 'DELETE FROM districts' });\n      await tx.execute({ sql: 'DELETE FROM states' });\n      console.log('🔥 Address data cleaned');\n      \n      // Products and settings (keep system settings)\n      await tx.execute({ sql: 'DELETE FROM products' });\n      await tx.execute({ sql: 'DELETE FROM student_counter' });\n      await tx.execute({ sql: 'DELETE FROM nearby_schools' });\n      await tx.execute({ sql: 'DELETE FROM nearby_tuitions' });\n      console.log('🔥 Product data cleaned');\n      \n      console.log('✅ All dummy data cleaned from PostgreSQL tables');\n    });\n    \n    console.log('🎉 Complete Supabase dummy data cleanup successful!');\n    console.log('📝 All table structures and logic preserved');\n    console.log('🔒 Admin user preserved for system access');\n    console.log('🔑 Ready for fresh data entry');\n    \n    return {\n      success: true,\n      message: 'All Supabase dummy data cleaned successfully',\n      usersDeleted: deletedCount,\n      adminPreserved: true\n    };\n    \n  } catch (error) {\n    console.error('❌ Supabase data cleanup failed:', error);\n    throw error;\n  }\n}","size_bytes":5579},"server/createAdminUser.ts":{"content":"import { supabaseAdmin } from './supabaseClient';\nimport { storage } from './storage';\n\nexport async function createAdminUser() {\n  try {\n    console.log('🔧 Creating admin user in Supabase Auth...');\n    \n    const adminEmail = 'navanidhi.care@gmail.com';\n    const adminPassword = 'Psd@1986';\n    \n    // Check if user already exists in Supabase Auth\n    const { data: existingUsers } = await supabaseAdmin.auth.admin.listUsers();\n    const existingUser = existingUsers.users?.find(user => user.email === adminEmail);\n    \n    let supabaseUser;\n    \n    if (existingUser) {\n      console.log('✅ Admin user already exists in Supabase Auth:', existingUser.id);\n      supabaseUser = existingUser;\n    } else {\n      // Create user in Supabase Auth\n      const { data: authUser, error: authError } = await supabaseAdmin.auth.admin.createUser({\n        email: adminEmail,\n        password: adminPassword,\n        email_confirm: true,\n        user_metadata: {\n          name: 'Admin User',\n          role: 'admin'\n        }\n      });\n      \n      if (authError) {\n        console.error('❌ Error creating admin user in Supabase Auth:', authError);\n        throw authError;\n      }\n      \n      supabaseUser = authUser.user;\n      console.log('✅ Admin user created in Supabase Auth:', supabaseUser?.id);\n    }\n    \n    if (!supabaseUser?.id) {\n      throw new Error('Failed to get Supabase user ID');\n    }\n    \n    // Check if user exists in our database\n    const existingDbUser = await storage.getUserByEmail(adminEmail);\n    \n    if (!existingDbUser) {\n      console.log('🔧 Creating admin user in database...');\n      \n      // Create user in our database\n      const adminUser = await storage.createUser({\n        email: adminEmail,\n        role: 'admin',\n        name: 'Admin User',\n        isActive: true,\n        password: 'supabase_auth' // Placeholder since we use Supabase Auth\n      });\n      \n      console.log('✅ Admin user created in database:', adminUser.id);\n      \n      // Update the Supabase user with our database user ID in metadata\n      await supabaseAdmin.auth.admin.updateUserById(supabaseUser.id, {\n        user_metadata: {\n          database_user_id: adminUser.id,\n          role: 'admin',\n          name: 'Admin User'\n        }\n      });\n      \n      console.log('✅ Supabase user metadata updated with database ID');\n    } else {\n      console.log('✅ Admin user already exists in database:', existingDbUser.id);\n    }\n    \n    console.log('🎉 Admin user setup complete!');\n    console.log('📧 Email:', adminEmail);\n    console.log('🔑 Password:', adminPassword);\n    \n  } catch (error) {\n    console.error('❌ Error creating admin user:', error);\n    throw error;\n  }\n}","size_bytes":2716},"server/monthlyFeeScheduler.ts":{"content":"import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport { students, classFees } from '@shared/schema';\nimport { eq, and, sql } from 'drizzle-orm';\nimport * as schema from \"@shared/schema\";\n\nconst sqlConn = postgres(process.env.DATABASE_URL!, { max: 1 });\nconst db = drizzle(sqlConn, { schema });\n\n/**\n * Monthly Fee Scheduler\n * \n * This service automatically adds monthly fees to student pending amounts\n * Should be run every month at midnight (via cron job or scheduled task)\n */\nexport class MonthlyFeeScheduler {\n\n  /**\n   * Add monthly fees to all active students' pending amounts\n   * Run this function every month at midnight\n   */\n  static async addMonthlyFeesToAllStudents(): Promise<void> {\n    try {\n      console.log('🕛 Starting monthly fee update process...');\n      \n      // Get all active students with their class information\n      const activeStudents = await db\n        .select({\n          id: students.id,\n          name: students.name,\n          studentId: students.studentId,\n          classId: students.classId,\n          courseType: students.courseType,\n          pendingAmount: students.pendingAmount,\n          isActive: students.isActive\n        })\n        .from(students)\n        .where(eq(students.isActive, true));\n\n      console.log(`📊 Found ${activeStudents.length} active students to process`);\n\n      let updatedCount = 0;\n      let totalFeesAdded = 0;\n\n      for (const student of activeStudents) {\n        try {\n          // Get monthly fee for this student's class and course type\n          const [classFee] = await db\n            .select()\n            .from(classFees)\n            .where(\n              and(\n                eq(classFees.classId, student.classId),\n                eq(classFees.courseType, student.courseType)\n              )\n            )\n            .limit(1);\n\n          if (!classFee) {\n            console.warn(`⚠️ No fee structure found for student ${student.studentId} (Class: ${student.classId}, Type: ${student.courseType})`);\n            continue;\n          }\n\n          const monthlyFee = parseFloat(classFee.monthlyFee);\n          const currentPending = parseFloat(student.pendingAmount || '0');\n          const newPendingAmount = currentPending + monthlyFee;\n\n          // Update student's pending amount\n          await db\n            .update(students)\n            .set({\n              pendingAmount: newPendingAmount.toString(),\n              paymentStatus: newPendingAmount > 0 ? 'pending' : 'paid'\n            })\n            .where(eq(students.id, student.id));\n\n          console.log(`✅ Updated ${student.studentId} (${student.name}): Added ₹${monthlyFee}, New pending: ₹${newPendingAmount}`);\n          \n          updatedCount++;\n          totalFeesAdded += monthlyFee;\n\n        } catch (studentError) {\n          console.error(`❌ Error updating student ${student.studentId}:`, studentError);\n        }\n      }\n\n      console.log(`🎉 Monthly fee update completed!`);\n      console.log(`📈 Summary: ${updatedCount} students updated, ₹${totalFeesAdded.toLocaleString()} total fees added`);\n\n    } catch (error) {\n      console.error('❌ Monthly fee update failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Preview what the monthly fee update would do (without actually updating)\n   * Useful for testing and verification\n   */\n  static async previewMonthlyFeeUpdate(): Promise<{\n    studentsToUpdate: number;\n    totalFeesToAdd: number;\n    studentDetails: Array<{\n      studentId: string;\n      name: string;\n      currentPending: number;\n      monthlyFee: number;\n      newPending: number;\n    }>;\n  }> {\n    try {\n      console.log('👀 Previewing monthly fee update...');\n      \n      const activeStudents = await db\n        .select({\n          id: students.id,\n          name: students.name,\n          studentId: students.studentId,\n          classId: students.classId,\n          courseType: students.courseType,\n          pendingAmount: students.pendingAmount\n        })\n        .from(students)\n        .where(eq(students.isActive, true));\n\n      const preview = {\n        studentsToUpdate: 0,\n        totalFeesToAdd: 0,\n        studentDetails: [] as Array<{\n          studentId: string;\n          name: string;\n          currentPending: number;\n          monthlyFee: number;\n          newPending: number;\n        }>\n      };\n\n      for (const student of activeStudents) {\n        const [classFee] = await db\n          .select()\n          .from(classFees)\n          .where(\n            and(\n              eq(classFees.classId, student.classId),\n              eq(classFees.courseType, student.courseType)\n            )\n          )\n          .limit(1);\n\n        if (classFee) {\n          const monthlyFee = parseFloat(classFee.monthlyFee);\n          const currentPending = parseFloat(student.pendingAmount || '0');\n          const newPending = currentPending + monthlyFee;\n\n          preview.studentsToUpdate++;\n          preview.totalFeesToAdd += monthlyFee;\n          preview.studentDetails.push({\n            studentId: student.studentId,\n            name: student.name,\n            currentPending,\n            monthlyFee,\n            newPending\n          });\n        }\n      }\n\n      console.log(`📋 Preview complete: ${preview.studentsToUpdate} students, ₹${preview.totalFeesToAdd.toLocaleString()} total fees`);\n      return preview;\n\n    } catch (error) {\n      console.error('❌ Preview failed:', error);\n      throw error;\n    }\n  }\n}\n\n/**\n * Cron job function - call this from your scheduling system\n * Example usage in production:\n * \n * // Using node-cron\n * cron.schedule('0 0 1 * *', async () => {\n *   console.log('Running monthly fee update...');\n *   await MonthlyFeeScheduler.addMonthlyFeesToAllStudents();\n * });\n * \n * // Or using a scheduled task service\n * export const monthlyFeeUpdateHandler = async () => {\n *   await MonthlyFeeScheduler.addMonthlyFeesToAllStudents();\n * };\n */\nexport const runMonthlyFeeUpdate = async () => {\n  return await MonthlyFeeScheduler.addMonthlyFeesToAllStudents();\n};\n\nexport const previewMonthlyFeeUpdate = async () => {\n  return await MonthlyFeeScheduler.previewMonthlyFeeUpdate();\n};","size_bytes":6189},"client/src/hooks/useAuth.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\n\ninterface User {\n  id: string;\n  email: string;\n  role: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string;\n}\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: ['auth', 'user'],\n    queryFn: async () => {\n      try {\n        const response = await apiRequest('GET', '/api/auth/me');\n        if (response.ok) {\n          return await response.json() as User;\n        }\n        throw new Error('Not authenticated');\n      } catch (error) {\n        return null;\n      }\n    },\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    error,\n  };\n}","size_bytes":797},"client/src/hooks/useSupabaseAuth.ts":{"content":"import { useState, useEffect } from 'react';\nimport { supabaseAuthService, type User } from '@/lib/supabaseAuth';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { useToast } from '@/hooks/use-toast';\n\nexport function useSupabaseAuth() {\n  const [user, setUser] = useState<User | null>(supabaseAuthService.getCurrentUser());\n  const [isLoading, setIsLoading] = useState(true);\n  const queryClient = useQueryClient();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n\n  const loginMutation = useMutation({\n    mutationFn: ({ email, password }: { email: string; password: string }) =>\n      supabaseAuthService.login(email, password),\n    onSuccess: (data) => {\n      setUser(data.user);\n      queryClient.invalidateQueries({ queryKey: ['/api'] });\n      toast({\n        title: 'Welcome back!',\n        description: `Logged in as ${data.user.name}`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Login Failed',\n        description: error.message || 'Please check your credentials and try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: (userData: {\n      email: string;\n      password: string;\n      name: string;\n      role: string;\n      phone?: string;\n      villageId?: string;\n    }) => supabaseAuthService.register(userData),\n    onSuccess: (user) => {\n      toast({\n        title: 'Account Created',\n        description: `Welcome ${user.name}! Please check your email to verify your account.`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Registration Failed',\n        description: error.message || 'Failed to create account. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: () => supabaseAuthService.logout(),\n    onSuccess: () => {\n      setUser(null);\n      queryClient.clear();\n      navigate('/login');\n      toast({\n        title: 'Logged Out',\n        description: 'You have been successfully logged out.',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Logout Error',\n        description: error.message || 'Failed to logout properly.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        // Sync user data with Supabase\n        await supabaseAuthService.syncUserData();\n        const currentUser = supabaseAuthService.getCurrentUser();\n        setUser(currentUser);\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initializeAuth();\n\n    // Listen for auth state changes\n    const interval = setInterval(() => {\n      const currentUser = supabaseAuthService.getCurrentUser();\n      if (currentUser !== user) {\n        setUser(currentUser);\n      }\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [user]);\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user && supabaseAuthService.isAuthenticated(),\n    login: async (email: string, password: string) => {\n      return await loginMutation.mutateAsync({ email, password });\n    },\n    register: async (userData: {\n      email: string;\n      password: string;\n      name: string;\n      role: string;\n      phone?: string;\n      villageId?: string;\n    }) => {\n      return await registerMutation.mutateAsync(userData);\n    },\n    logout: () => logoutMutation.mutate(),\n    isLoginLoading: loginMutation.isPending,\n    isRegisterLoading: registerMutation.isPending,\n    isLogoutLoading: logoutMutation.isPending,\n    loginError: loginMutation.error,\n    registerError: registerMutation.error,\n    getAccessToken: () => supabaseAuthService.getAccessToken(),\n  };\n}","size_bytes":3875},"client/src/lib/supabaseAuth.ts":{"content":"import { supabase, signInWithEmail, signUpWithEmail, signOut, getCurrentUser } from './supabase';\nimport { User as SupabaseUser, Session } from '@supabase/supabase-js';\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  role: string;\n}\n\nexport interface AuthResponse {\n  user: User;\n  session: Session;\n}\n\nclass SupabaseAuthService {\n  private currentUser: User | null = null;\n  private session: Session | null = null;\n\n  constructor() {\n    this.initializeAuth();\n  }\n\n  private async initializeAuth() {\n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      this.session = session;\n      \n      if (session?.user) {\n        // Fetch user profile from our database\n        await this.fetchUserProfile(session.user.id);\n      }\n\n      // Listen for auth changes\n      supabase.auth.onAuthStateChange((event, session) => {\n        this.session = session;\n        if (session?.user) {\n          this.fetchUserProfile(session.user.id);\n        } else {\n          this.currentUser = null;\n        }\n      });\n    } catch (error) {\n      console.error('Auth initialization error:', error);\n    }\n  }\n\n  private async fetchUserProfile(userId: string): Promise<void> {\n    try {\n      // Get user profile from our users table\n      const { data, error } = await supabase\n        .from('users')\n        .select('id, email, name, role')\n        .eq('id', userId)\n        .single();\n\n      if (error) {\n        console.error('Error fetching user profile:', error);\n        return;\n      }\n\n      this.currentUser = {\n        id: data.id,\n        email: data.email,\n        name: data.name,\n        role: data.role,\n      };\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n    }\n  }\n\n  async login(email: string, password: string): Promise<AuthResponse> {\n    try {\n      const { data, error } = await signInWithEmail(email, password);\n\n      if (error) {\n        throw new Error(error.message);\n      }\n\n      if (!data.user || !data.session) {\n        throw new Error('Login failed: No user or session returned');\n      }\n\n      this.session = data.session;\n      await this.fetchUserProfile(data.user.id);\n\n      if (!this.currentUser) {\n        throw new Error('User profile not found in database');\n      }\n\n      return {\n        user: this.currentUser,\n        session: data.session,\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  async register(userData: {\n    email: string;\n    password: string;\n    name: string;\n    role: string;\n    phone?: string;\n    villageId?: string;\n  }): Promise<User> {\n    try {\n      // First, create the auth user\n      const { data, error } = await signUpWithEmail(userData.email, userData.password, {\n        data: {\n          name: userData.name,\n        }\n      });\n\n      if (error) {\n        throw new Error(error.message);\n      }\n\n      if (!data.user) {\n        throw new Error('Registration failed: No user returned');\n      }\n\n      // Create user profile in our database\n      const { data: userProfile, error: profileError } = await supabase\n        .from('users')\n        .insert({\n          id: data.user.id,\n          email: userData.email,\n          name: userData.name,\n          role: userData.role,\n          phone: userData.phone,\n          village_id: userData.villageId,\n          password: 'supabase_managed', // Placeholder since Supabase manages auth\n          is_active: true,\n        })\n        .select()\n        .single();\n\n      if (profileError) {\n        // If profile creation fails, we should clean up the auth user\n        await supabase.auth.signOut();\n        throw new Error(`Profile creation failed: ${profileError.message}`);\n      }\n\n      return {\n        id: userProfile.id,\n        email: userProfile.email,\n        name: userProfile.name,\n        role: userProfile.role,\n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  }\n\n  async logout(): Promise<void> {\n    try {\n      const { error } = await signOut();\n      if (error) {\n        throw new Error(error.message);\n      }\n      \n      this.currentUser = null;\n      this.session = null;\n    } catch (error) {\n      console.error('Logout error:', error);\n      throw error;\n    }\n  }\n\n  getCurrentUser(): User | null {\n    return this.currentUser;\n  }\n\n  getSession(): Session | null {\n    return this.session;\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.session && !!this.currentUser;\n  }\n\n  getAccessToken(): string | null {\n    return this.session?.access_token || null;\n  }\n\n  // Method to sync user data if needed\n  async syncUserData(): Promise<void> {\n    const supabaseUser = await getCurrentUser();\n    if (supabaseUser) {\n      await this.fetchUserProfile(supabaseUser.id);\n    }\n  }\n}\n\nexport const supabaseAuthService = new SupabaseAuthService();","size_bytes":4903},"client/src/pages/Products.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Package, DollarSign, Percent, FileText, ShoppingCart, User, GraduationCap, MapPin, Phone, Receipt } from 'lucide-react';\nimport { InvoiceGenerator } from '@/components/InvoiceGenerator';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/hooks/useAuth';\nimport confetti from 'canvas-confetti';\n\ninterface Product {\n  id: string;\n  name: string;\n  description: string | null;\n  requirements: string | null;\n  price: string;\n  commission_percentage: string;\n  is_active: boolean;\n  created_at: string;\n}\n\nconst purchaseFormSchema = z.object({\n  studentName: z.string().min(1, \"Student name is required\"),\n  class: z.string().min(1, \"Class is required\"),\n  education: z.string().min(1, \"Education level is required\"),\n  address: z.string().min(1, \"Address is required\"),\n  mobileNumber: z.string().min(10, \"Valid mobile number is required\").max(10, \"Mobile number must be 10 digits\"),\n});\n\ntype PurchaseFormData = z.infer<typeof purchaseFormSchema>;\n\nfunction Products() {\n  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\n  const [showPurchaseForm, setShowPurchaseForm] = useState(false);\n  const [invoiceData, setInvoiceData] = useState<any>(null);\n  const [showInvoice, setShowInvoice] = useState(false);\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  const form = useForm<PurchaseFormData>({\n    resolver: zodResolver(purchaseFormSchema),\n    defaultValues: {\n      studentName: \"\",\n      class: \"\",\n      education: \"\",\n      address: \"\",\n      mobileNumber: \"\",\n    },\n  });\n\n  // Fetch products based on user role\n  const apiEndpoint = user?.role === 'agent' ? '/api/agent/products' : '/api/so_center/products';\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: [apiEndpoint],\n  });\n\n  // Purchase product mutation\n  const purchaseProductMutation = useMutation({\n    mutationFn: async (data: PurchaseFormData & { productId: string }) => {\n      const response = await apiRequest('POST', '/api/products/purchase', data);\n      return response;\n    },\n    onSuccess: (result: any) => {\n      console.log('Purchase success result:', result);\n      \n      // Play success sound\n      const audio = new Audio('/phone_pe_notification.mp3');\n      audio.play().catch(() => {\n        // Fallback if audio fails\n        console.log('Audio playback failed');\n      });\n\n      // Trigger confetti\n      confetti({\n        particleCount: 100,\n        spread: 70,\n        origin: { y: 0.6 }\n      });\n\n      // Set invoice data and show invoice\n      setInvoiceData({\n        transactionId: result.transactionId || 'N/A',\n        productName: selectedProduct?.name || '',\n        studentName: form.getValues('studentName'),\n        coursePrice: Number(selectedProduct?.price || 0),\n        commissionAmount: Number(selectedProduct?.price || 0) * Number(selectedProduct?.commission_percentage || 0) / 100,\n        purchaseDate: new Date().toISOString(),\n        agentEmail: result.agentEmail || 'N/A'\n      });\n\n      toast({\n        title: \"Course Successfully Purchased!\",\n        description: `${selectedProduct?.name} purchased. Transaction ID: ${result.transactionId || 'Processing...'}`,\n      });\n\n      // Reset form and close dialog\n      form.reset();\n      setShowPurchaseForm(false);\n      setSelectedProduct(null);\n      \n      // Show invoice\n      setShowInvoice(true);\n\n      // Invalidate relevant queries\n      queryClient.invalidateQueries({ queryKey: ['/api/wallet/balance'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Purchase Failed\",\n        description: error.message || \"Failed to complete purchase\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleBuyNow = (product: Product) => {\n    setSelectedProduct(product);\n    setShowPurchaseForm(true);\n  };\n\n  const handleSubmitPurchase = (data: PurchaseFormData) => {\n    if (!selectedProduct) return;\n    \n    purchaseProductMutation.mutate({\n      ...data,\n      productId: selectedProduct.id,\n    });\n  };\n\n  const calculateCommission = (price: string, commissionPercentage: string) => {\n    const priceNum = Number(price) || 0;\n    const commissionNum = Number(commissionPercentage) || 0;\n    return (priceNum * commissionNum / 100);\n  };\n\n  const formatCurrency = (amount: number) => {\n    return `₹${amount.toLocaleString('en-IN')}`;\n  };\n\n  if (isLoading) {\n    return (\n      <DashboardLayout title=\"Products\" subtitle=\"Browse and purchase available products\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {Array.from({ length: 6 }).map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardHeader>\n                <div className=\"h-6 bg-gray-200 rounded\"></div>\n                <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"h-4 bg-gray-200 rounded\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  if (products.length === 0) {\n    return (\n      <DashboardLayout title=\"Products\" subtitle=\"Browse and purchase available products\">\n        <div className=\"text-center py-16\">\n          <Package className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Products Available</h3>\n          <p className=\"text-gray-600\">\n            No products are currently available for purchase.\n          </p>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout title=\"Products\" subtitle=\"Browse and purchase available products\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {products.map((product) => {\n          const commission = calculateCommission(product.price, product.commission_percentage);\n          \n          return (\n            <Card key={product.id} className=\"group hover:shadow-lg transition-all duration-200 border-l-4 border-l-blue-500\">\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg text-gray-900 group-hover:text-blue-600 transition-colors\">\n                      {product.name}\n                    </CardTitle>\n                    {product.description && (\n                      <p className=\"text-sm text-gray-600 mt-1 line-clamp-2\">{product.description}</p>\n                    )}\n                  </div>\n                  <Badge variant=\"default\" className=\"ml-2\">\n                    Active\n                  </Badge>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-4\">\n                {/* Price and Commission */}\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div className=\"bg-blue-50 rounded-lg p-3 border border-blue-100\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <DollarSign className=\"h-4 w-4 text-blue-600\" />\n                      <span className=\"text-xs font-medium text-blue-600 uppercase tracking-wide\">Price</span>\n                    </div>\n                    <div className=\"font-bold text-blue-700\">{formatCurrency(Number(product.price))}</div>\n                  </div>\n                  \n                  <div className=\"bg-green-50 rounded-lg p-3 border border-green-100\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <Percent className=\"h-4 w-4 text-green-600\" />\n                      <span className=\"text-xs font-medium text-green-600 uppercase tracking-wide\">Commission</span>\n                    </div>\n                    <div className=\"font-bold text-green-700\">{product.commission_percentage}%</div>\n                  </div>\n                </div>\n\n                {/* Requirements */}\n                {product.requirements && (\n                  <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <FileText className=\"h-4 w-4 text-yellow-600\" />\n                      <span className=\"text-xs font-medium text-yellow-700 uppercase tracking-wide\">Requirements</span>\n                    </div>\n                    <p className=\"text-sm text-yellow-800 line-clamp-2\">{product.requirements}</p>\n                  </div>\n                )}\n\n                {/* Commission Earnings */}\n                <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-3\">\n                  <div className=\"text-xs text-purple-600 font-medium uppercase tracking-wide mb-1\">\n                    Commission Earnings\n                  </div>\n                  <div className=\"font-bold text-purple-700\">\n                    {formatCurrency(commission)} per sale\n                  </div>\n                </div>\n\n                {/* Buy Now Button */}\n                <Button \n                  className=\"w-full bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white\"\n                  onClick={() => handleBuyNow(product)}\n                >\n                  <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                  Buy Now\n                </Button>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Purchase Form Dialog */}\n      <Dialog open={showPurchaseForm} onOpenChange={setShowPurchaseForm}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle>Purchase Course - {selectedProduct?.name}</DialogTitle>\n          </DialogHeader>\n          \n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleSubmitPurchase)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"studentName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"flex items-center gap-2\">\n                      <User className=\"h-4 w-4\" />\n                      Student Name\n                    </FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter student's full name\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"class\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"flex items-center gap-2\">\n                      <GraduationCap className=\"h-4 w-4\" />\n                      Class\n                    </FormLabel>\n                    <FormControl>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select class\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"1st\">1st Grade</SelectItem>\n                          <SelectItem value=\"2nd\">2nd Grade</SelectItem>\n                          <SelectItem value=\"3rd\">3rd Grade</SelectItem>\n                          <SelectItem value=\"4th\">4th Grade</SelectItem>\n                          <SelectItem value=\"5th\">5th Grade</SelectItem>\n                          <SelectItem value=\"6th\">6th Grade</SelectItem>\n                          <SelectItem value=\"7th\">7th Grade</SelectItem>\n                          <SelectItem value=\"8th\">8th Grade</SelectItem>\n                          <SelectItem value=\"9th\">9th Grade</SelectItem>\n                          <SelectItem value=\"10th\">10th Grade</SelectItem>\n                          <SelectItem value=\"11th\">11th Grade</SelectItem>\n                          <SelectItem value=\"12th\">12th Grade</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"education\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Education Level</FormLabel>\n                    <FormControl>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select education level\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"primary\">Primary Education</SelectItem>\n                          <SelectItem value=\"secondary\">Secondary Education</SelectItem>\n                          <SelectItem value=\"higher-secondary\">Higher Secondary</SelectItem>\n                          <SelectItem value=\"undergraduate\">Undergraduate</SelectItem>\n                          <SelectItem value=\"postgraduate\">Postgraduate</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"flex items-center gap-2\">\n                      <MapPin className=\"h-4 w-4\" />\n                      Address\n                    </FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Enter complete address\" \n                        className=\"min-h-[80px]\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"mobileNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"flex items-center gap-2\">\n                      <Phone className=\"h-4 w-4\" />\n                      Mobile Number\n                    </FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Enter 10-digit mobile number\" \n                        maxLength={10}\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {selectedProduct && (\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                  <div className=\"text-sm font-medium text-blue-900 mb-2\">Purchase Summary</div>\n                  <div className=\"space-y-1 text-sm text-blue-800\">\n                    <div className=\"flex justify-between\">\n                      <span>Course Price:</span>\n                      <span className=\"font-medium\">{formatCurrency(Number(selectedProduct.price))}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Your Commission:</span>\n                      <span className=\"font-medium text-green-700\">\n                        {formatCurrency(calculateCommission(selectedProduct.price, selectedProduct.commission_percentage))}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              <div className=\"flex gap-3 pt-4\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setShowPurchaseForm(false)}\n                  className=\"flex-1\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\"\n                  disabled={purchaseProductMutation.isPending}\n                  className=\"flex-1 bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700\"\n                >\n                  {purchaseProductMutation.isPending ? 'Processing...' : 'Confirm Purchase'}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Invoice Generator */}\n      <InvoiceGenerator \n        invoiceData={invoiceData}\n        isOpen={showInvoice}\n        onClose={() => setShowInvoice(false)}\n      />\n    </DashboardLayout>\n  );\n}\n\nexport default Products;","size_bytes":18041},"client/src/components/admin/EditUserModal.tsx":{"content":"\nimport { useState, useEffect } from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { X, Save } from 'lucide-react';\n\ninterface EditUserModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  user: any;\n}\n\nexport function EditUserModal({ isOpen, onClose, user }: EditUserModalProps) {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    role: '',\n    phone: '',\n    address: '',\n    salary: '',\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    if (user) {\n      setFormData({\n        name: user.name || '',\n        email: user.email || '',\n        role: user.role || '',\n        phone: user.phone || '',\n        address: user.address || '',\n        salary: user.salary || '',\n      });\n    }\n  }, [user]);\n\n  const updateUserMutation = useMutation({\n    mutationFn: async (userData: any) => {\n      return apiRequest('PUT', `/api/admin/users/${user.id}`, userData);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'User Updated',\n        description: 'User has been successfully updated.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to update user.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name || !formData.email || !formData.role) {\n      toast({\n        title: 'Validation Error',\n        description: 'Please fill in all required fields.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    // Email validation\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(formData.email)) {\n      toast({\n        title: 'Validation Error',\n        description: 'Please enter a valid email address.',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    updateUserMutation.mutate(formData);\n  };\n\n  const handleClose = () => {\n    if (updateUserMutation.isPending) return;\n    onClose();\n  };\n\n  if (!user) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-md mx-auto\">\n        <DialogHeader className=\"flex flex-row items-center justify-between\">\n          <DialogTitle>Edit User</DialogTitle>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleClose}\n            disabled={updateUserMutation.isPending}\n          >\n            <X size={16} />\n          </Button>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"name\">Full Name *</Label>\n            <Input\n              id=\"name\"\n              value={formData.name}\n              onChange={(e) => handleInputChange('name', e.target.value)}\n              placeholder=\"Enter full name\"\n              required\n              disabled={updateUserMutation.isPending}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email Address *</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={formData.email}\n              onChange={(e) => handleInputChange('email', e.target.value)}\n              placeholder=\"Enter email address\"\n              required\n              disabled={updateUserMutation.isPending}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"role\">Role *</Label>\n            <Select\n              value={formData.role}\n              onValueChange={(value) => handleInputChange('role', value)}\n              disabled={updateUserMutation.isPending}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select a role\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"admin\">Admin</SelectItem>\n                <SelectItem value=\"so_center\">SO Center</SelectItem>\n                <SelectItem value=\"teacher\">Teacher</SelectItem>\n                <SelectItem value=\"academic_admin\">Academic Admin</SelectItem>\n                <SelectItem value=\"agent\">Agent</SelectItem>\n                <SelectItem value=\"office_staff\">Office Staff</SelectItem>\n                <SelectItem value=\"collection_agent\">Collection Agent</SelectItem>\n                <SelectItem value=\"marketing_staff\">Marketing Staff</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"phone\">Phone Number</Label>\n            <Input\n              id=\"phone\"\n              value={formData.phone}\n              onChange={(e) => handleInputChange('phone', e.target.value)}\n              placeholder=\"Enter phone number\"\n              disabled={updateUserMutation.isPending}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"address\">Address</Label>\n            <Input\n              id=\"address\"\n              value={formData.address}\n              onChange={(e) => handleInputChange('address', e.target.value)}\n              placeholder=\"Enter address\"\n              disabled={updateUserMutation.isPending}\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"salary\">Salary</Label>\n            <Input\n              id=\"salary\"\n              type=\"number\"\n              value={formData.salary}\n              onChange={(e) => handleInputChange('salary', e.target.value)}\n              placeholder=\"Enter salary amount\"\n              disabled={updateUserMutation.isPending}\n            />\n          </div>\n\n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleClose}\n              disabled={updateUserMutation.isPending}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={updateUserMutation.isPending}\n              className=\"bg-primary text-white hover:bg-primary/90\"\n            >\n              {updateUserMutation.isPending ? (\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                  <span>Updating...</span>\n                </div>\n              ) : (\n                <div className=\"flex items-center space-x-2\">\n                  <Save size={16} />\n                  <span>Update User</span>\n                </div>\n              )}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7451},"client/src/components/admin/SimpleSoCenterModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { CreditCard, MapPin, Building2, Phone, Users, Home } from \"lucide-react\";\n\ninterface SimpleSoCenterModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess: () => void;\n}\n\nconst formSchema = z.object({\n  name: z.string().min(1, \"Center name is required\"),\n  phone: z.string().min(10, \"Valid phone number required\"),\n  capacity: z.string().min(1, \"Capacity is required\"),\n  villageId: z.string().min(1, \"Village selection is required\"),\n  address: z.string().min(1, \"Address is required\"),\n  admissionFeeApplicable: z.enum([\"applicable\", \"not_applicable\"]),\n  ownerName: z.string().min(1, \"Owner name is required\"),\n  ownerPhone: z.string().min(10, \"Owner phone is required\"),\n  roomSize: z.string().optional(),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\nexport function SimpleSoCenterModal({ isOpen, onClose, onSuccess }: SimpleSoCenterModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // Hardcoded center ID for now to bypass database issues\n  const [nextCenterId, setNextCenterId] = useState(\"\");\n  \n  useEffect(() => {\n    if (isOpen) {\n      // Generate a simple sequential ID\n      const timestamp = Date.now().toString().slice(-5);\n      setNextCenterId(`NNASOC${timestamp}`);\n    }\n  }, [isOpen]);\n\n  // Location data\n  const { data: states = [] } = useQuery({ queryKey: ['/api/admin/addresses/states'] });\n  const { data: districts = [] } = useQuery({ queryKey: ['/api/admin/addresses/districts'] });\n  const { data: mandals = [] } = useQuery({ queryKey: ['/api/admin/addresses/mandals'] });\n  const { data: villages = [] } = useQuery({ queryKey: ['/api/admin/addresses/villages'] });\n\n  const [selectedState, setSelectedState] = useState('');\n  const [selectedDistrict, setSelectedDistrict] = useState('');\n  const [selectedMandal, setSelectedMandal] = useState('');\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: '',\n      phone: '',\n      capacity: '',\n      villageId: '',\n      address: '',\n      admissionFeeApplicable: 'applicable',\n      ownerName: '',\n      ownerPhone: '',\n      roomSize: '',\n    },\n  });\n\n  const createSoCenterMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      const soCenterData = {\n        ...data,\n        centerId: nextCenterId,\n        email: `${nextCenterId.toLowerCase()}@navanidhi.org`,\n        admissionFeeApplicable: data.admissionFeeApplicable === 'applicable',\n      };\n      \n      return apiRequest('POST', '/api/admin/so-centers', soCenterData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"SO Center created successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/so-centers'] });\n      onSuccess();\n      onClose();\n      form.reset();\n    },\n    onError: (error: any) => {\n      console.error('SO Center creation error:', error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create SO Center\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    createSoCenterMutation.mutate(data);\n  };\n\n  // Filter locations based on selections\n  const filteredDistricts = districts.filter((d: any) => d.stateId === selectedState);\n  const filteredMandals = mandals.filter((m: any) => m.districtId === selectedDistrict);\n  const filteredVillages = villages.filter((v: any) => v.mandalId === selectedMandal);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[500px] max-h-[85vh] overflow-y-auto bg-gradient-to-br from-green-50 to-emerald-50 border-green-200\">\n        <DialogHeader className=\"text-center pb-4\">\n          <DialogTitle className=\"text-xl font-bold text-green-800 flex items-center justify-center gap-2\">\n            <Building2 className=\"h-5 w-5 text-green-600\" />\n            New SO Center\n          </DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            \n            {/* Center ID Display */}\n            <div className=\"bg-gradient-to-r from-green-100 to-emerald-100 p-3 rounded-lg border border-green-200 text-center\">\n              <p className=\"text-sm text-green-700 mb-1\">Generated Center ID</p>\n              <p className=\"text-lg font-bold text-green-800\">{nextCenterId || 'Loading...'}</p>\n              <p className=\"text-xs text-green-600\">Email: {nextCenterId ? `${nextCenterId.toLowerCase()}@navanidhi.org` : ''}</p>\n            </div>\n\n            {/* Admission Fee Policy */}\n            <div className=\"bg-green-50 border border-green-200 p-3 rounded-lg\">\n              <FormField\n                control={form.control}\n                name=\"admissionFeeApplicable\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm font-semibold text-green-800 flex items-center gap-2\">\n                      <CreditCard className=\"h-4 w-4\" />\n                      Admission Fee Policy\n                    </FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <SelectTrigger className=\"h-9 border-green-300\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"applicable\">✅ Applicable</SelectItem>\n                        <SelectItem value=\"not_applicable\">❌ Not Applicable</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Basic Information */}\n            <div className=\"grid grid-cols-2 gap-3\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm text-green-700\">Center Name</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Center name\" \n                        className=\"h-9 border-green-200 focus:border-green-400 text-sm\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm text-green-700 flex items-center gap-1\">\n                      <Phone className=\"h-3 w-3\" />\n                      Phone\n                    </FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Phone number\" \n                        className=\"h-9 border-green-200 focus:border-green-400 text-sm\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-3\">\n              <FormField\n                control={form.control}\n                name=\"capacity\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm text-green-700 flex items-center gap-1\">\n                      <Users className=\"h-3 w-3\" />\n                      Capacity\n                    </FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        placeholder=\"50\" \n                        className=\"h-9 border-green-200 focus:border-green-400 text-sm\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"roomSize\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm text-green-700 flex items-center gap-1\">\n                      <Home className=\"h-3 w-3\" />\n                      Room Size\n                    </FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"20x15 feet\" \n                        className=\"h-9 border-green-200 focus:border-green-400 text-sm\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Owner Information */}\n            <div className=\"grid grid-cols-2 gap-3\">\n              <FormField\n                control={form.control}\n                name=\"ownerName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm text-green-700\">Owner Name</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Owner full name\" \n                        className=\"h-9 border-green-200 focus:border-green-400 text-sm\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"ownerPhone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-sm text-green-700\">Owner Phone</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Owner phone\" \n                        className=\"h-9 border-green-200 focus:border-green-400 text-sm\"\n                        {...field} \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Location Selection */}\n            <div className=\"space-y-3\">\n              <Label className=\"text-sm font-semibold text-green-700 flex items-center gap-1\">\n                <MapPin className=\"h-3 w-3\" />\n                Location\n              </Label>\n              \n              <div className=\"grid grid-cols-2 gap-3\">\n                <div>\n                  <Select onValueChange={setSelectedState} value={selectedState}>\n                    <SelectTrigger className=\"h-9 border-green-200 text-xs\">\n                      <SelectValue placeholder=\"State\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {states.map((state: any) => (\n                        <SelectItem key={state.id} value={state.id}>\n                          {state.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Select onValueChange={setSelectedDistrict} value={selectedDistrict} disabled={!selectedState}>\n                    <SelectTrigger className=\"h-9 border-green-200 text-xs\">\n                      <SelectValue placeholder=\"District\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {filteredDistricts.map((district: any) => (\n                        <SelectItem key={district.id} value={district.id}>\n                          {district.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-3\">\n                <div>\n                  <Select onValueChange={setSelectedMandal} value={selectedMandal} disabled={!selectedDistrict}>\n                    <SelectTrigger className=\"h-9 border-green-200 text-xs\">\n                      <SelectValue placeholder=\"Mandal\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {filteredMandals.map((mandal: any) => (\n                        <SelectItem key={mandal.id} value={mandal.id}>\n                          {mandal.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"villageId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormControl>\n                        <Select onValueChange={field.onChange} value={field.value} disabled={!selectedMandal}>\n                          <SelectTrigger className=\"h-9 border-green-200 text-xs\">\n                            <SelectValue placeholder=\"Village\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {filteredVillages.map((village: any) => (\n                              <SelectItem key={village.id} value={village.id}>\n                                {village.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Address */}\n            <FormField\n              control={form.control}\n              name=\"address\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-sm text-green-700\">Full Address</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Complete address with landmarks\" \n                      className=\"h-9 border-green-200 focus:border-green-400 text-sm\"\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Submit Buttons */}\n            <div className=\"flex justify-end gap-3 pt-4 border-t border-green-100\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={onClose}\n                className=\"border-green-200 text-green-700 hover:bg-green-50\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createSoCenterMutation.isPending}\n                className=\"bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white\"\n              >\n                {createSoCenterMutation.isPending ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"animate-spin w-4 h-4 border-2 border-white/30 border-t-white rounded-full\" />\n                    Creating...\n                  </div>\n                ) : (\n                  'Create SO Center'\n                )}\n              </Button>\n            </div>\n\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":16481},"client/src/components/products/ProductsList.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Package, DollarSign, Percent, FileText } from 'lucide-react';\n\ninterface Product {\n  id: string;\n  name: string;\n  description: string | null;\n  requirements: string | null;\n  price: string;\n  commissionPercentage: string;\n  isActive: boolean;\n  createdAt: string;\n}\n\ninterface ProductsListProps {\n  userRole: 'so_center' | 'agent';\n}\n\nexport function ProductsList({ userRole }: ProductsListProps) {\n  // Fetch active products\n  const { data: products = [], isLoading } = useQuery<Product[]>({\n    queryKey: [`/api/${userRole}/products`],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {Array.from({ length: 3 }).map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardHeader>\n              <div className=\"h-6 bg-gray-200 rounded\"></div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"h-4 bg-gray-200 rounded\"></div>\n                <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (products.length === 0) {\n    return (\n      <div className=\"text-center py-8\">\n        <Package className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Products Available</h3>\n        <p className=\"text-gray-600\">\n          {userRole === 'so_center' \n            ? 'No products are currently available for sale at your center.'\n            : 'No products are currently available for commission-based sales.'\n          }\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n      {products.map((product) => (\n        <Card key={product.id} className=\"group hover:shadow-md transition-shadow\">\n          <CardHeader>\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex-1\">\n                <CardTitle className=\"text-lg text-gray-900 group-hover:text-blue-600 transition-colors\">\n                  {product.name}\n                </CardTitle>\n                {product.description && (\n                  <p className=\"text-sm text-gray-600 mt-1 line-clamp-2\">{product.description}</p>\n                )}\n              </div>\n              <Badge variant=\"secondary\" className=\"ml-2\">\n                Active\n              </Badge>\n            </div>\n          </CardHeader>\n          \n          <CardContent>\n            <div className=\"space-y-4\">\n              {/* Price and Commission */}\n              <div className=\"grid grid-cols-2 gap-3\">\n                <div className=\"bg-blue-50 rounded-lg p-3 border border-blue-100\">\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <DollarSign className=\"h-4 w-4 text-blue-600\" />\n                    <span className=\"text-xs font-medium text-blue-600 uppercase tracking-wide\">Price</span>\n                  </div>\n                  <div className=\"font-bold text-blue-700\">₹{Number(product.price).toLocaleString()}</div>\n                </div>\n                \n                <div className=\"bg-green-50 rounded-lg p-3 border border-green-100\">\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <Percent className=\"h-4 w-4 text-green-600\" />\n                    <span className=\"text-xs font-medium text-green-600 uppercase tracking-wide\">\n                      {userRole === 'agent' ? 'Commission' : 'Margin'}\n                    </span>\n                  </div>\n                  <div className=\"font-bold text-green-700\">{product.commissionPercentage}%</div>\n                </div>\n              </div>\n\n              {/* Requirements */}\n              {product.requirements && (\n                <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <FileText className=\"h-4 w-4 text-yellow-600\" />\n                    <span className=\"text-xs font-medium text-yellow-700 uppercase tracking-wide\">Requirements</span>\n                  </div>\n                  <p className=\"text-sm text-yellow-800 line-clamp-2\">{product.requirements}</p>\n                </div>\n              )}\n\n              {/* Earnings Potential (for agents) */}\n              {userRole === 'agent' && (\n                <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-3\">\n                  <div className=\"text-xs text-purple-600 font-medium uppercase tracking-wide mb-1\">\n                    Commission Earnings\n                  </div>\n                  <div className=\"font-bold text-purple-700\">\n                    ₹{(Number(product.price) * Number(product.commissionPercentage) / 100).toLocaleString()} per sale\n                  </div>\n                </div>\n              )}\n\n              {/* Action Button */}\n              <Button \n                className=\"w-full mt-4\" \n                variant={userRole === 'agent' ? 'default' : 'outline'}\n              >\n                {userRole === 'agent' ? 'Promote Product' : 'View Details'}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}","size_bytes":5567},"client/src/components/students/EditStudentModal.tsx":{"content":"import { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { z } from 'zod';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { useState, useEffect } from 'react';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { User, GraduationCap, MapPin, Users } from 'lucide-react';\nimport type { Student } from '@shared/schema';\n\n// Edit student schema - simplified version of the main schema\nconst editStudentSchema = z.object({\n  name: z.string().min(1, 'Student name is required'),\n  fatherName: z.string().min(1, 'Father name is required'),\n  motherName: z.string().min(1, 'Mother name is required'),\n  fatherMobile: z.string().min(10, 'Valid father mobile number required'),\n  motherMobile: z.string().optional(),\n  fatherQualification: z.string().optional(),\n  motherQualification: z.string().optional(),\n  gender: z.enum(['male', 'female', 'other']),\n  dateOfBirth: z.string().min(1, 'Date of birth is required'),\n  presentSchoolName: z.string().min(1, 'Present school name is required'),\n  schoolType: z.enum(['government', 'private']),\n  villageId: z.string().min(1, 'Village selection is required'),\n  address: z.string().min(1, 'Complete address is required'),\n  landmark: z.string().optional(),\n  classId: z.string().min(1, 'Class is required'),\n  courseType: z.enum(['monthly', 'yearly']),\n  parentPhone: z.string().min(10, 'Parent phone is required'),\n  parentName: z.string().optional(),\n});\n\ntype EditStudentFormData = z.infer<typeof editStudentSchema>;\n\ninterface EditStudentModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  student: Student | null;\n}\n\nexport function EditStudentModal({ isOpen, onClose, student }: EditStudentModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedState, setSelectedState] = useState('');\n  const [selectedDistrict, setSelectedDistrict] = useState('');\n  const [selectedMandal, setSelectedMandal] = useState('');\n\n  // Fetch data for dropdowns\n  const { data: classesData = [] } = useQuery({\n    queryKey: ['/api/classes'],\n    enabled: isOpen,\n  });\n  \n  const { data: states = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/states'],\n    enabled: isOpen,\n  });\n\n  const { data: districts = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/districts', selectedState],\n    queryFn: async () => {\n      if (!selectedState) return [];\n      const response = await apiRequest('GET', `/api/admin/addresses/districts/${selectedState}`);\n      return await response.json();\n    },\n    enabled: !!selectedState && isOpen,\n  });\n\n  const { data: mandals = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/mandals', selectedDistrict],\n    queryFn: async () => {\n      if (!selectedDistrict) return [];\n      const response = await apiRequest('GET', `/api/admin/addresses/mandals/${selectedDistrict}`);\n      return await response.json();\n    },\n    enabled: !!selectedDistrict && isOpen,\n  });\n\n  const { data: villages = [] } = useQuery<any[]>({\n    queryKey: ['/api/admin/addresses/villages', selectedMandal],\n    queryFn: async () => {\n      if (!selectedMandal) return [];\n      const response = await apiRequest('GET', `/api/admin/addresses/villages/${selectedMandal}`);\n      return await response.json();\n    },\n    enabled: !!selectedMandal && isOpen,\n  });\n\n  const form = useForm<EditStudentFormData>({\n    resolver: zodResolver(editStudentSchema),\n    defaultValues: {\n      name: '',\n      fatherName: '',\n      motherName: '',\n      fatherMobile: '',\n      motherMobile: '',\n      fatherQualification: '',\n      motherQualification: '',\n      gender: 'male',\n      dateOfBirth: '',\n      presentSchoolName: '',\n      schoolType: 'government',\n      villageId: '',\n      address: '',\n      landmark: '',\n      classId: '',\n      courseType: 'monthly',\n      parentPhone: '',\n      parentName: '',\n    },\n  });\n\n  // Populate form when student data changes\n  useEffect(() => {\n    if (student && isOpen) {\n      form.reset({\n        name: student.name || '',\n        fatherName: student.fatherName || '',\n        motherName: student.motherName || '',\n        fatherMobile: student.fatherMobile || '',\n        motherMobile: student.motherMobile || '',\n        fatherQualification: student.fatherQualification || '',\n        motherQualification: student.motherQualification || '',\n        gender: student.gender || 'male',\n        dateOfBirth: student.dateOfBirth || '',\n        presentSchoolName: student.presentSchoolName || '',\n        schoolType: student.schoolType || 'government',\n        villageId: student.villageId || '',\n        address: student.address || '',\n        landmark: student.landmark || '',\n        classId: student.classId || '',\n        courseType: student.courseType || 'monthly',\n        parentPhone: student.parentPhone || '',\n        parentName: student.parentName || '',\n      });\n    }\n  }, [student, isOpen, form]);\n\n  const updateStudentMutation = useMutation({\n    mutationFn: (data: EditStudentFormData) => {\n      return apiRequest('PUT', `/api/students/${student?.id}`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Student Updated Successfully',\n        description: 'Student information has been updated.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/students'] });\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Update Failed',\n        description: error.message || 'Failed to update student. Please try again.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: EditStudentFormData) => {\n    updateStudentMutation.mutate(data);\n  };\n\n  const classes = Array.isArray(classesData) && classesData.length > 0 ? classesData.map((cls: any) => ({\n    value: cls.id,\n    label: cls.name\n  })) : [];\n  \n  const qualificationOptions = [\n    'Illiterate',\n    'Primary School',\n    'Middle School', \n    '10th Class',\n    '12th Class',\n    'Diploma',\n    'Graduation',\n    'Post Graduation',\n    'PhD',\n    'Other'\n  ];\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[800px] max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            Edit Student Information\n          </DialogTitle>\n        </DialogHeader>\n        \n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            \n            {/* Basic Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <User className=\"h-4 w-4\" />\n                  Basic Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Student Full Name *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter student full name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"gender\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Gender *</FormLabel>\n                        <FormControl>\n                          <RadioGroup\n                            onValueChange={field.onChange}\n                            value={field.value}\n                            className=\"flex space-x-6\"\n                          >\n                            <div className=\"flex items-center space-x-2\">\n                              <RadioGroupItem value=\"male\" id=\"male\" />\n                              <Label htmlFor=\"male\">Male</Label>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <RadioGroupItem value=\"female\" id=\"female\" />\n                              <Label htmlFor=\"female\">Female</Label>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <RadioGroupItem value=\"other\" id=\"other\" />\n                              <Label htmlFor=\"other\">Other</Label>\n                            </div>\n                          </RadioGroup>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <FormField\n                  control={form.control}\n                  name=\"dateOfBirth\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Date of Birth *</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n            \n            {/* Family Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"h-4 w-4\" />\n                  Family Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"fatherName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Father's Name *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter father's full name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"motherName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Mother's Name *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter mother's full name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"fatherMobile\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Father's Mobile Number *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"+91 98765 43210\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"motherMobile\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Mother's Mobile Number</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"+91 98765 43210 (Optional)\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Academic Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <GraduationCap className=\"h-4 w-4\" />\n                  Academic Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"classId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Class *</FormLabel>\n                        <FormControl>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select class\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {classes.map((cls) => (\n                                <SelectItem key={cls.value} value={cls.value}>\n                                  {cls.label}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"courseType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Course Type *</FormLabel>\n                        <FormControl>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select course type\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"monthly\">Monthly Fee</SelectItem>\n                              <SelectItem value=\"yearly\">Yearly Fee</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"presentSchoolName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Present School Name *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter current school name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"schoolType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>School Type *</FormLabel>\n                        <FormControl>\n                          <RadioGroup\n                            onValueChange={field.onChange}\n                            value={field.value}\n                            className=\"flex space-x-6\"\n                          >\n                            <div className=\"flex items-center space-x-2\">\n                              <RadioGroupItem value=\"government\" id=\"government\" />\n                              <Label htmlFor=\"government\">Government</Label>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <RadioGroupItem value=\"private\" id=\"private\" />\n                              <Label htmlFor=\"private\">Private</Label>\n                            </div>\n                          </RadioGroup>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n            \n            <div className=\"flex justify-end space-x-3 pt-6\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={updateStudentMutation.isPending}\n                className=\"bg-primary text-white hover:bg-blue-700\"\n              >\n                {updateStudentMutation.isPending ? (\n                  'Updating...'\n                ) : (\n                  'Update Student'\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":18078},"client/src/components/students/SuccessScreen.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { Dialog, DialogContent } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { CheckCircle, Download, User, CreditCard, Building2 } from 'lucide-react';\nimport confetti from 'canvas-confetti';\n\ninterface RegistrationResult {\n  studentId: string;\n  name: string;\n  transactionId?: string;\n  admissionFeePaid?: boolean;\n  amount?: number;\n}\n\ninterface SuccessScreenProps {\n  isOpen: boolean;\n  onClose: () => void;\n  studentData: RegistrationResult | null;\n}\n\nexport function SuccessScreen({ isOpen, onClose, studentData }: SuccessScreenProps) {\n  const [showCelebration, setShowCelebration] = useState(false);\n\n  useEffect(() => {\n    if (isOpen && studentData) {\n      // Trigger confetti animation\n      setShowCelebration(true);\n      \n      // Fire confetti\n      const duration = 3000;\n      const animationEnd = Date.now() + duration;\n      const defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };\n\n      const randomInRange = (min: number, max: number) => {\n        return Math.random() * (max - min) + min;\n      };\n\n      const interval = setInterval(() => {\n        const timeLeft = animationEnd - Date.now();\n\n        if (timeLeft <= 0) {\n          return clearInterval(interval);\n        }\n\n        const particleCount = 50 * (timeLeft / duration);\n        \n        confetti({\n          ...defaults,\n          particleCount,\n          origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 }\n        });\n        confetti({\n          ...defaults,\n          particleCount,\n          origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 }\n        });\n      }, 250);\n\n      // Play success sound (optional)\n      try {\n        const audio = new Audio('data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmwhBjOH0fPTgjMGHm7A7uGVSQwNVKzd8bllHgg2jdXzzn0vBSF+zPLaizsIGGS57OihUgwOUarm7bl2JQUta7Xpvpw8CyOJzN9rYB0IImS48+WNQLl+BRgUWwAcAAoAAcAAgAt0jHgAbAGfArYHGQ0tECsI8g0oLMgHIgJrAKYJUQ3UE5QX9Cl+IfgrjgOmCHINnBGHNLgIKAy9DbcHYAosEWcDnRHgGAgfOwS6D0gXsQbkAGcJaAjyC8sMQwZ+A0oIWRLdGCQOsA1EHjMP+xCSFOgKzgFIGbEOdQl6BSUF5Q2XCOwXdQqcEYsPnRa+BB0DjQIcBi4HDwHQAhQRZw+aEnEMVBLsEMgMzQHxB6sP8Q4FGUYRBhDMCzYG5AOYCD4BygeoBUAMhAbwB10H2Q0YDNsLiAhfCQYJzQhIDE8NBQ+2CqcLGQ7GCJAPiQ3XDJ4HuQvuC2ALOg0aD28NlArkCGgNLw3wDDALmw5bDN0K4wzQDfEJngnhCXkLGg2xCAQNRQ8NEX0P6Q5UEosOBw80DREPewzlC1kKvQvNDWkNnwzqC5YO7Q6+DYwIYA35DQ4NyQwdDesL1Q1pDU8MYQvIB2EJfA0WGGgcJhFPC5gM1AzJCl0LWQc2DK8MjA+3Eowk7iAiGtoOyBKYEREOgAy2D+AMEwl+Ce8KXwsJCyYKxQfDCEUKkQhWCGsHkQi8C3UI6QlGC5sJKwy7CYQLJQnHCS0KAgoOC5oIZwtDCtEJagZ1B6MJawj+B+QGxghpBYcGmQYCBnwFggXWBSEGjQSKAw0FugQ8BMoENgKIAWECtgE+AFMB0QCK/zX+2P/6/xj/k/7l/q3+cv7M/UD9ff7Y/gP/xf4n/vr9Sf7//Y7+IP+Z/1H/k/9X/kn+6P2s/jX/Kf9h/in+SP4u/i/+Rv5G/W/95/0h/tX9L/4s/kj+If5b/rn9cf7t/SH+o/3t/Xj+Af8Y/x//kv8h/zH/n/+x/77/2v/M/z7+sv7l/qv+0f6K/p3+vP6p/s3+n/7D/mv+Ev7F/s7+Xf5N/nn+kP7E/cX9/f0F/jj+bf4h/lj+hf5H/sX9cP2k/e/9J/4n/gT+zP3O/Zf9s/3I/Zb9r/2h/Tf9SP2K/Y/9gv2L/W/9cf1d/U/9H/0N/fb8xvzA/Lr80fzS/Of8+vzO/QD+Cv4G/jr+Rf4//jX+JP4q/kb+TP5L/lX+a/6F/rv+yf7p/wIAsAAOAUoC0gGdAcUBWgIaAgwCNwIIAgYCGAIyAnQCuALTAtQC1gLJApcCYwJHAjACOwJSAlwCaQKAAooCkAKBAoECgwKCAngCfwJvAm0CZgJNAj4CNgIWAuoBwAGJAVABCwG3AJAAbgBEABcA5f/D/5T/ev9m/0j/Rf9g/4j/tv/k/yMAYwCOALEAzgDaAMQAwQDKAMkAwQC3ALEAogCUAIgAewBnAFAALAAOAPP/1//G/7j/pv+W/4f/dv9g/1v/Wf9a/2L/a/+E/5z/tv/T//j/FAAvAD8AVABlAHIAfwCLAJgAowCrAKMAoACkAJ8AmwCXAJMAjACCAHYAagBdAE4APwAwACUAGQAQAP3/7v/j/9T/xf/A/7r/s/+m/5b/hv94/2r/X/9Y/0//Sv9G/0X/Qv9D/0b/Sv9Q/1f/Yf9t/3v/iv+X/6f/t//H/9n/7P/+/w8AIgA2AEoAWwBrAHgAhwCTAJ8AqgC0ALgAuwC6ALUAsACqAKAAkwCLAIIAeABsAGAAUgBJAD8AOAA3ADcAMQAsACcAIQAcABYAEgANAAcABAADAP7/+v/1//L/7P/o/+X/3//Z/9T/z//K/8X/v/+6/7X/sf+t/6n/pf+j/6H/nv+c/5z/m/+c/53/nv+f/6P/pv+p/6z/sP+0/7j/vP/B/8X/yf/O/9H/1f/Z/93/4f/k/+j/6//t//D/8//1//b/+P/6//v//P/9//7//f/9//3//P/8//v/+v/5//j/9//1//T/8v/w/+7/7P/p/+f/5P/i/9//3P/Z/9b/0//Q/83/yv/H/8T/wf++/7v/uP+1/7L/r/+s/6j/pf+h/57/m/+Y/5X/kf+O/4v/iP+E/4H/fv+a/5r/5//v//z/CgAeAC8APQBIAF4AcwCDAI0AlQCgAK0AtQC6ALwAuwC7ALgAtACyAK8AqQCjAJwAlwCQAIcAfgB3AGoAWQBMAEEANgAtACIAGwASAAkA/v/1/+v/4f/Z/9D/xf+9/7b/sv+t/6f/of+e/5r/lf+P/4r/hP+B/37/fP96/3j/dv9z/3L/cP9u/27/bv9u/2//cP9y/3P/dv95/3z/gP+F/4r/kP+V/5v/ov+o/6//t/+//8f/z//Y/+D/6f/z//z/BgARABsAJQAvADkAQgBKAFEAVwBcAGEAZQBoAGsAaQBqAGsAawBqAGcAZgBkAGAAXABXAFEASwBDAD0ANgAtACUAHAARAAgA///1/+v/4f/X/87/xf+8/7P/qv+i/5v/lP+N/4j/g/9//3v/eP92/3T/cv9w/3D/cP9w/3D/cf9z/3X/d/98/4H/hv+M/5H/l/+e/6X/rf+1/77/xv/P/9j/4f/r//X///8IABIAHAAkAC0ANQBAAEoAUwBaAGIAaQBvAHQAdgB4AHkAeQB4AHcAdABxAG0AaABiAFwAVABLAEIAOQAvACUAGwARAAgA///1/+v/4v/Z/9H/yP/A/7n/sv+s/6X/oP+b/5b/kv+O/4r/hv+D/4D/fv98/3v/ev96/3v/fP98/37/gP+C/4X/iP+M/5H/lf+a/6D/pv+s/7P/uf/A/8j/0P/Y/+D/6f/x//n/AQAJABEAGQAhACgALwA2ADwAQQBGAEsATgBQAFEAUgBSAFEATwBNAEsARAA+ADgAMgArACMAGwATAAsAAwD8//T/7f/l/97/1v/O/8b/vv+3/7D/qv+k/5//mv+V/5H/jv+L/4j/hv+E/4L/gf+A/4D/gP+A/4H/gv+D/4X/h/+J/4z/jv+R/5T/mP+c/6D/pP+o/6z/sP+1/7n/vf/C/8f/zP/R/9b/2//g/+X/6v/v//P/+P/8////AQAEAAcACgAMAA4AEAARABIAEgASABIAEQAQAA8ADgAMAAsACAAFAAIAAP/9//r/9//0//H/7f/q/+b/4v/e/9r/1v/S/87/yv/G/8L/vv+6/7b/sv+u/6r/pv+i/5//nP+Z/5b/k/+Q/43/i/+I/4b/g/+B/3//fv98/3v/ev95/3n/ef95/3n/ef96/3v/fP99/3//gP+C/4T/hv+I/4r/jP+P/5H/lP+X/5r/nf+g/6P/pv+p/6z/r/+y/7X/uP+7/77/wf/E/8f/yv/N/9D/0//W/9n/3P/f/+L/5f/o/+v/7v/x//T/9//6//3/AAACAAUABwAKAA0AEAARABMAFAAWABcAGAAZABoAGgAaABoAGQAYABcAFQATABEADwANAAsACAAFAAMA//z/+f/2//L/7v/q/+f/4//f/9v/1//T/8//y//H/8P/v/+7/7f/s/+v/6v/p/+j/6D/nP+Z/5b/k/+Q/43/iv+H/4X/gv+A/33/e/95/3f/df9z/3L/cf9w/3D/b/9v/2//b/9v/3D/cf9y/3P/dP92/3j/ev98/37/gP+C/4T/hv+I/4r/jP+O/5H/k/+V/5j/m/+e/6H/pP+n/6r/rf+w/7P/tv+5/7z/v//C/8X/yP/L/87/0f/U/9f/2v/d/+D/4//m/+n/7P/v//L/9f/4//v//f8AAAIABQAHAA==');\n        audio.volume = 0.3;\n        audio.play().catch(() => {\n          // Ignore audio play errors\n        });\n      } catch (error) {\n        // Ignore audio errors\n      }\n\n      // Stop celebration after animation completes\n      setTimeout(() => {\n        setShowCelebration(false);\n      }, 3000);\n    }\n  }, [isOpen, studentData]);\n\n  const handleDownloadReceipt = () => {\n    if (!studentData) return;\n\n    // Create receipt content\n    const receiptContent = `\nNAVANIDHI ACADEMY\nStudent Registration Receipt\n\nRegistration Successful!\n------------------------\nStudent Name: ${studentData.name}\nStudent ID: ${studentData.studentId}\nRegistration Date: ${new Date().toLocaleDateString()}\n${studentData.admissionFeePaid ? `Transaction ID: ${studentData.transactionId}` : ''}\n${studentData.admissionFeePaid ? `Admission Fee: ₹${studentData.amount}` : ''}\n\nThank you for choosing Navanidhi Academy!\nContact: support@navanidhi.com\n    `.trim();\n\n    // Create and download text file\n    const blob = new Blob([receiptContent], { type: 'text/plain' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `receipt_${studentData.studentId}_${new Date().toISOString().split('T')[0]}.txt`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n  };\n\n  if (!studentData) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\" aria-describedby=\"success-description\">\n        <div className=\"text-center space-y-6\">\n          {/* Success Icon */}\n          <div className=\"relative\">\n            <div className=\"w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto\">\n              <CheckCircle className=\"h-12 w-12 text-green-600\" />\n            </div>\n            {showCelebration && (\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <div className=\"animate-ping w-20 h-20 bg-green-200 rounded-full opacity-75\"></div>\n              </div>\n            )}\n          </div>\n\n          {/* Success Message */}\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n              Registration Successful!\n            </h2>\n            <p id=\"success-description\" className=\"text-gray-600\">\n              Student has been successfully registered with Navanidhi Academy\n            </p>\n          </div>\n\n          {/* Student Details */}\n          <Card className=\"bg-blue-50 border-blue-200\">\n            <CardContent className=\"p-4 space-y-3\">\n              <div className=\"flex items-center justify-center mb-3\">\n                <Building2 className=\"h-5 w-5 text-blue-600 mr-2\" />\n                <span className=\"font-semibold text-blue-900\">Navanidhi Academy</span>\n              </div>\n              \n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"flex items-center text-gray-600\">\n                    <User className=\"h-4 w-4 mr-2\" />\n                    Student Name:\n                  </span>\n                  <span className=\"font-medium text-gray-900\">{studentData.name}</span>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-gray-600\">Student ID:</span>\n                  <span className=\"font-medium text-gray-900\">{studentData.studentId}</span>\n                </div>\n                \n                {studentData.admissionFeePaid && studentData.transactionId && (\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"flex items-center text-gray-600\">\n                      <CreditCard className=\"h-4 w-4 mr-2\" />\n                      Transaction ID:\n                    </span>\n                    <span className=\"font-medium text-gray-900\">{studentData.transactionId}</span>\n                  </div>\n                )}\n                \n                {studentData.admissionFeePaid && studentData.amount && (\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-600\">Admission Fee:</span>\n                    <span className=\"font-medium text-green-600\">₹{studentData.amount}</span>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Actions */}\n          <div className=\"flex space-x-3\">\n            <Button \n              variant=\"outline\" \n              onClick={handleDownloadReceipt}\n              className=\"flex-1\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Download Receipt\n            </Button>\n            <Button \n              onClick={onClose}\n              className=\"flex-1 bg-primary hover:bg-blue-700\"\n            >\n              Continue\n            </Button>\n          </div>\n\n          {/* Footer Note */}\n          <p className=\"text-xs text-gray-500\">\n            A QR code has been generated for this student to track academic progress\n          </p>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":11085},"client/src/components/students/ViewStudentModal.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  User, \n  Phone, \n  MapPin, \n  GraduationCap, \n  Calendar,\n  School,\n  Users,\n  CreditCard,\n  QrCode,\n  Edit\n} from 'lucide-react';\nimport type { Student } from '@shared/schema';\n\ninterface ViewStudentModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  student: Student | null;\n}\n\nexport function ViewStudentModal({ isOpen, onClose, student }: ViewStudentModalProps) {\n  // Fetch class name\n  const { data: classData } = useQuery({\n    queryKey: ['/api/classes', student?.classId],\n    queryFn: async () => {\n      if (!student?.classId) return null;\n      const response = await fetch(`/api/classes/${student.classId}`);\n      return response.json();\n    },\n    enabled: !!student?.classId && isOpen,\n  });\n\n  // Fetch village/address info\n  const { data: villageData } = useQuery({\n    queryKey: ['/api/admin/addresses/village', student?.villageId],\n    queryFn: async () => {\n      if (!student?.villageId) return null;\n      const response = await fetch(`/api/admin/addresses/village/${student.villageId}`);\n      return response.json();\n    },\n    enabled: !!student?.villageId && isOpen,\n  });\n\n  if (!student) return null;\n\n  const formatDate = (dateString: string | null | undefined) => {\n    if (!dateString) return 'N/A';\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[900px] max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            Student Details - {student.name}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-6\">\n          {/* Header Info */}\n          <div className=\"flex items-center space-x-4 p-4 bg-blue-50 rounded-lg\">\n            <div className=\"flex-shrink-0\">\n              <div className=\"h-16 w-16 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center text-white text-2xl font-bold\">\n                {student.name.charAt(0).toUpperCase()}\n              </div>\n            </div>\n            <div className=\"flex-1\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">{student.name}</h2>\n              <p className=\"text-sm text-gray-600\">Student ID: {student.studentId || 'Not assigned'}</p>\n              <div className=\"flex items-center space-x-3 mt-2\">\n                <Badge variant={student.isActive ? \"default\" : \"secondary\"}>\n                  {student.isActive ? 'Active' : 'Inactive'}\n                </Badge>\n                <Badge variant=\"outline\">\n                  {student.gender}\n                </Badge>\n                <Badge variant=\"outline\">\n                  {student.courseType}\n                </Badge>\n              </div>\n            </div>\n          </div>\n\n          {/* Personal Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"h-4 w-4\" />\n                Personal Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Full Name</p>\n                  <p className=\"text-sm text-gray-900\">{student.name}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Gender</p>\n                  <p className=\"text-sm text-gray-900 capitalize\">{student.gender}</p>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Date of Birth</p>\n                  <p className=\"text-sm text-gray-900\">{formatDate(student.dateOfBirth)}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Aadhar Number</p>\n                  <p className=\"text-sm text-gray-900\">{student.aadharNumber}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Family Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-4 w-4\" />\n                Family Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Father's Name</p>\n                  <p className=\"text-sm text-gray-900\">{student.fatherName}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Mother's Name</p>\n                  <p className=\"text-sm text-gray-900\">{student.motherName}</p>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Father's Mobile</p>\n                  <p className=\"text-sm text-gray-900 flex items-center gap-1\">\n                    <Phone className=\"h-3 w-3\" />\n                    {student.fatherMobile}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Mother's Mobile</p>\n                  <p className=\"text-sm text-gray-900 flex items-center gap-1\">\n                    <Phone className=\"h-3 w-3\" />\n                    {student.motherMobile || 'Not provided'}\n                  </p>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Father's Qualification</p>\n                  <p className=\"text-sm text-gray-900\">{student.fatherQualification || 'Not specified'}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Mother's Qualification</p>\n                  <p className=\"text-sm text-gray-900\">{student.motherQualification || 'Not specified'}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Academic Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <GraduationCap className=\"h-4 w-4\" />\n                Academic Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Class</p>\n                  <p className=\"text-sm text-gray-900\">{classData?.name || 'Loading...'}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Course Type</p>\n                  <p className=\"text-sm text-gray-900 capitalize\">{student.courseType}</p>\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Present School</p>\n                  <p className=\"text-sm text-gray-900 flex items-center gap-1\">\n                    <School className=\"h-3 w-3\" />\n                    {student.presentSchoolName}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">School Type</p>\n                  <p className=\"text-sm text-gray-900 capitalize\">{student.schoolType}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Address Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MapPin className=\"h-4 w-4\" />\n                Address Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-500\">Complete Address</p>\n                <p className=\"text-sm text-gray-900\">{student.address}</p>\n              </div>\n              {student.landmark && (\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Landmark</p>\n                  <p className=\"text-sm text-gray-900\">{student.landmark}</p>\n                </div>\n              )}\n              <div>\n                <p className=\"text-sm font-medium text-gray-500\">Village</p>\n                <p className=\"text-sm text-gray-900\">{villageData?.name || 'Loading...'}</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Contact Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Phone className=\"h-4 w-4\" />\n                Contact Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Primary Contact</p>\n                  <p className=\"text-sm text-gray-900\">{student.parentPhone}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Parent Name</p>\n                  <p className=\"text-sm text-gray-900\">{student.parentName || student.fatherName}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* System Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"h-4 w-4\" />\n                System Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Registration Date</p>\n                  <p className=\"text-sm text-gray-900\">{formatDate(student.createdAt)}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">QR Code</p>\n                  <p className=\"text-sm text-gray-900 flex items-center gap-1\">\n                    <QrCode className=\"h-3 w-3\" />\n                    {student.qrCode || 'Not generated'}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Actions */}\n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button variant=\"outline\" onClick={onClose}>\n              Close\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":11583},"client/src/components/theme/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    // Get theme from localStorage or default to light\n    const savedTheme = localStorage.getItem('theme') as Theme;\n    return savedTheme || 'light';\n  });\n\n  useEffect(() => {\n    // Apply theme to document element\n    const root = document.documentElement;\n    root.classList.remove('light', 'dark');\n    root.classList.add(theme);\n    \n    // Save theme to localStorage\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}","size_bytes":1268},"client/src/pages/admin/CoursePurchases.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { ShoppingCart, User, BookOpen, Calendar, DollarSign, Check } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface CoursePurchase {\n  id: string;\n  type: string;\n  title: string;\n  message: string;\n  data: {\n    agentId: string;\n    agentEmail: string;\n    productId: string;\n    productName: string;\n    studentName: string;\n    coursePrice: number;\n    commissionAmount: number;\n    transactionId: string;\n  };\n  is_read: boolean;\n  created_at: string;\n}\n\nfunction CoursePurchases() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch course purchase notifications\n  const { data: purchases = [], isLoading } = useQuery<CoursePurchase[]>({\n    queryKey: ['/api/admin/course-purchases'],\n  });\n\n  // Mark as read mutation\n  const markAsReadMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest('PATCH', `/api/admin/notifications/${id}/read`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/course-purchases'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to mark as read\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const formatCurrency = (amount: number) => {\n    return `₹${amount.toLocaleString('en-IN')}`;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const handleMarkAsRead = (id: string) => {\n    markAsReadMutation.mutate(id);\n  };\n\n  if (isLoading) {\n    return (\n      <DashboardLayout title=\"Course Purchases\" subtitle=\"Monitor new course purchases by agents and SO centers\">\n        <div className=\"space-y-4\">\n          {Array.from({ length: 5 }).map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardHeader>\n                <div className=\"h-6 bg-gray-200 rounded\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"h-4 bg-gray-200 rounded\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout title=\"Course Purchases\" subtitle=\"Monitor new course purchases by agents and SO centers\">\n      <div className=\"space-y-6\">\n        {/* Summary Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card className=\"border-l-4 border-l-blue-500\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Purchases</CardTitle>\n              <ShoppingCart className=\"h-4 w-4 text-blue-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-700\">{purchases.length}</div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-l-4 border-l-green-500\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Revenue</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-green-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-700\">\n                {formatCurrency(purchases.reduce((sum, p) => sum + (p.data?.coursePrice || 0), 0))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-l-4 border-l-purple-500\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Commissions</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-purple-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-purple-700\">\n                {formatCurrency(purchases.reduce((sum, p) => sum + (p.data?.commissionAmount || 0), 0))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-l-4 border-l-orange-500\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Unread</CardTitle>\n              <Check className=\"h-4 w-4 text-orange-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-orange-700\">\n                {purchases.filter(p => !p.is_read).length}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Purchase List */}\n        <div className=\"space-y-4\">\n          {purchases.length === 0 ? (\n            <Card>\n              <CardContent className=\"text-center py-16\">\n                <ShoppingCart className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Course Purchases</h3>\n                <p className=\"text-gray-600\">Course purchases by agents and SO centers will appear here.</p>\n              </CardContent>\n            </Card>\n          ) : (\n            purchases.map((purchase) => (\n              <Card \n                key={purchase.id} \n                className={`transition-all duration-200 ${\n                  !purchase.is_read ? 'border-l-4 border-l-blue-500 bg-blue-50/30' : 'border-l-4 border-l-gray-300'\n                }`}\n              >\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <ShoppingCart className=\"h-5 w-5 text-blue-600\" />\n                        <CardTitle className=\"text-lg text-gray-900\">{purchase.title}</CardTitle>\n                        {!purchase.is_read && (\n                          <Badge variant=\"default\" className=\"bg-blue-100 text-blue-800\">New</Badge>\n                        )}\n                      </div>\n                      <p className=\"text-gray-600 mb-3\">{purchase.message}</p>\n                      <div className=\"text-sm text-gray-500\">\n                        {formatDate(purchase.created_at)}\n                      </div>\n                    </div>\n                    {!purchase.is_read && (\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleMarkAsRead(purchase.id)}\n                        disabled={markAsReadMutation.isPending}\n                      >\n                        Mark as Read\n                      </Button>\n                    )}\n                  </div>\n                </CardHeader>\n                \n                {purchase.data && (\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                      <div className=\"bg-gray-50 rounded-lg p-3\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <User className=\"h-4 w-4 text-gray-600\" />\n                          <span className=\"text-xs font-medium text-gray-600 uppercase tracking-wide\">Agent</span>\n                        </div>\n                        <div className=\"font-medium text-gray-900\">{purchase.data.agentEmail}</div>\n                      </div>\n\n                      <div className=\"bg-blue-50 rounded-lg p-3\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <BookOpen className=\"h-4 w-4 text-blue-600\" />\n                          <span className=\"text-xs font-medium text-blue-600 uppercase tracking-wide\">Course</span>\n                        </div>\n                        <div className=\"font-medium text-blue-900\">{purchase.data.productName}</div>\n                      </div>\n\n                      <div className=\"bg-green-50 rounded-lg p-3\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <DollarSign className=\"h-4 w-4 text-green-600\" />\n                          <span className=\"text-xs font-medium text-green-600 uppercase tracking-wide\">Price</span>\n                        </div>\n                        <div className=\"font-bold text-green-700\">{formatCurrency(purchase.data.coursePrice)}</div>\n                      </div>\n\n                      <div className=\"bg-purple-50 rounded-lg p-3\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <DollarSign className=\"h-4 w-4 text-purple-600\" />\n                          <span className=\"text-xs font-medium text-purple-600 uppercase tracking-wide\">Commission</span>\n                        </div>\n                        <div className=\"font-bold text-purple-700\">{formatCurrency(purchase.data.commissionAmount)}</div>\n                      </div>\n                    </div>\n\n                    <div className=\"mt-4 pt-4 border-t border-gray-200\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                        <div>\n                          <span className=\"font-medium text-gray-700\">Student Name:</span>\n                          <span className=\"ml-2 text-gray-900\">{purchase.data.studentName}</span>\n                        </div>\n                        <div>\n                          <span className=\"font-medium text-gray-700\">Transaction ID:</span>\n                          <span className=\"ml-2 text-gray-900 font-mono\">{purchase.data.transactionId}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                )}\n              </Card>\n            ))\n          )}\n        </div>\n      </div>\n    </DashboardLayout>\n  );\n}\n\nexport default CoursePurchases;","size_bytes":10551},"client/src/pages/so-center/PostExamResult.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useParams, useLocation } from 'wouter';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Separator } from '@/components/ui/separator';\nimport {\n  ArrowLeft,\n  Users,\n  FileText,\n  CheckCircle,\n  Save,\n  Calculator,\n  Eye // Import Eye icon\n} from 'lucide-react';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'; // Import RadioGroup and RadioGroupItem\n\ninterface QuestionResult {\n  questionText: string;\n  maxMarks: number;\n  obtainedMarks: number;\n  assessment: 'did_not_write' | 'did_not_write_well' | 'wrote_no_marks' | 'wrote_well';\n}\n\ninterface StudentExamResult {\n  studentId: string;\n  examId: string;\n  questionResults: QuestionResult[];\n  totalMarks: number;\n}\n\nexport default function PostExamResult() {\n  const params = useParams();\n  const [, setLocation] = useLocation();\n  const examId = params.examId;\n\n  const [selectedStudent, setSelectedStudent] = useState<any>(null);\n  const [isMarkingModalOpen, setIsMarkingModalOpen] = useState(false);\n  const [questionResults, setQuestionResults] = useState<QuestionResult[]>([]);\n  const [totalMarks, setTotalMarks] = useState(0);\n  const [marksData, setMarksData] = useState({}); // State to manage marks for non-modal view\n\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Data queries with proper error handling\n  const { data: exam, isLoading: isExamLoading } = useQuery({\n    queryKey: ['/api/so-center/exams', examId],\n    queryFn: async () => {\n      console.log('🔍 Fetching exam data for:', examId);\n      const response = await apiRequest('GET', `/api/so-center/exams`);\n      const examsData = await response.json();\n      console.log('📊 Exams response:', examsData);\n\n      // Find the specific exam\n      if (Array.isArray(examsData)) {\n        const foundExam = examsData.find((e: any) => e.id === examId);\n        console.log('📊 Found exam:', foundExam);\n        return foundExam;\n      }\n      return null;\n    },\n    enabled: !!examId,\n  });\n\n  const { data: students = [], isLoading: isStudentsLoading } = useQuery({\n    queryKey: ['/api/so-center/exams', examId, 'students'],\n    queryFn: async () => {\n      if (!examId) return [];\n      console.log('🔍 Fetching students for exam:', examId);\n      const response = await apiRequest('GET', `/api/so-center/exams/${examId}/students`);\n      if (!response.ok) {\n        console.error('❌ Failed to fetch students');\n        return [];\n      }\n      const studentsData = await response.json();\n      console.log('📊 Students response:', studentsData);\n      return Array.isArray(studentsData) ? studentsData : [];\n    },\n    enabled: !!examId,\n    staleTime: 5 * 60 * 1000, // 5 minutes cache\n    cacheTime: 10 * 60 * 1000, // 10 minutes cache\n  });\n\n  const { data: examQuestions = [], isLoading: isQuestionsLoading } = useQuery({\n    queryKey: ['/api/exams', examId, 'questions'],\n    queryFn: async () => {\n      if (!examId) return [];\n      console.log('🔍 Fetching questions for exam:', examId);\n      const response = await apiRequest('GET', `/api/exams/${examId}/questions`);\n      if (!response.ok) {\n        console.error('❌ Failed to fetch questions');\n        return [];\n      }\n      const questionsData = await response.json();\n      console.log('📊 Questions response:', questionsData);\n      return Array.isArray(questionsData) ? questionsData : [];\n    },\n    enabled: !!examId,\n    staleTime: 10 * 60 * 1000, // 10 minutes cache - questions rarely change\n    cacheTime: 30 * 60 * 1000, // 30 minutes cache\n  });\n\n  // Fetch existing results for all students\n  const { data: existingResults = [], isLoading: resultsLoading } = useQuery({\n    queryKey: ['/api/exams', examId, 'results'],\n    queryFn: async () => {\n      if (!examId) return [];\n      console.log('🔍 Fetching results for exam:', examId);\n      const response = await apiRequest('GET', `/api/exams/${examId}/results`);\n      if (!response.ok) {\n        console.error('❌ Failed to fetch results');\n        return [];\n      }\n      const resultsData = await response.json();\n      // Results loaded successfully\n      return Array.isArray(resultsData) ? resultsData : [];\n    },\n    enabled: !!examId,\n    staleTime: 30 * 1000, // 30 seconds cache - results change frequently\n    cacheTime: 2 * 60 * 1000, // 2 minutes cache\n    refetchOnWindowFocus: true // Refetch when window gains focus\n  });\n\n  const isLoading = isExamLoading || isStudentsLoading || isQuestionsLoading || resultsLoading;\n\n  // Mock handleViewDetails and handleMarksChange for the context of this component\n  const handleViewDetails = (studentId: string) => {\n    const student = students.find((s: any) => s.id === studentId);\n    if (student) {\n      openMarkingModal(student);\n    }\n  };\n\n  const handleMarksChange = (studentId: string, questionIndex: number, marks: number) => {\n    setMarksData(prev => ({\n      ...prev,\n      [`${studentId}-${questionIndex}`]: { marks }\n    }));\n  };\n\n  // Save student result mutation\n  const saveResultMutation = useMutation({\n    mutationFn: async (resultData: StudentExamResult) => {\n      // Prepare the data with proper format for the bulk update API\n      const studentResult = {\n        studentId: resultData.studentId,\n        marks: resultData.questionResults.map((qr, index) => ({\n          questionNumber: index + 1,\n          questionText: qr.questionText,\n          maxMarks: qr.maxMarks,\n          marks: qr.obtainedMarks,\n          answerStatus: qr.assessment === 'wrote_well' ? 'full_answer' :\n                       qr.assessment === 'wrote_no_marks' ? 'partial_answered' :\n                       qr.assessment === 'did_not_write_well' ? 'partial_answered' : 'not_answered'\n        })),\n        totalScore: resultData.totalMarks,\n        performance: resultData.questionResults.map((qr) => qr.assessment)\n      };\n\n      const requestData = {\n        results: [studentResult]\n      };\n\n      console.log('🔄 Sending exam result data:', requestData);\n\n      const response = await apiRequest('POST', `/api/exams/${examId}/results/update`, requestData);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to save results');\n      }\n      return response.json();\n    },\n    onSuccess: (data, variables) => {\n      toast({\n        title: \"Result Saved\",\n        description: \"Student exam result has been saved successfully.\",\n      });\n      setIsMarkingModalOpen(false);\n\n      // Immediately update the UI with the returned data\n      if (data.results && data.results.length > 0) {\n        const updatedResult = data.results[0];\n        console.log('🔄 Processing response data:', updatedResult);\n\n        // Invalidate cache to refresh results\n        queryClient.invalidateQueries({ queryKey: ['/api/exams', examId, 'results'] });\n      }\n\n      // Force immediate refresh of results data\n      console.log('🔄 Force invalidating results cache...');\n      queryClient.invalidateQueries({ queryKey: ['/api/exams', examId, 'results'] });\n\n      // Also manually trigger a refetch to ensure immediate UI update\n      setTimeout(() => {\n        console.log('🔄 Manual refetch triggered');\n        queryClient.refetchQueries({ queryKey: ['/api/exams', examId, 'results'] });\n      }, 100);\n\n      // Reset the selected student\n      setSelectedStudent(null);\n      setQuestionResults([]);\n      setTotalMarks(0);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save result. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Filter students for this exam's class\n  const classStudents = (students as any[]).filter((student: any) =>\n    student.classId === exam?.classId\n  );\n\n  const openMarkingModal = (student: any) => {\n    setSelectedStudent(student);\n\n    // Check if student already has results\n    const existingResult = (existingResults as any[]).find((result: any) =>\n      result.studentId === student.id\n    );\n\n    if (existingResult && existingResult.detailedResults && existingResult.marksObtained > 0) {\n      try {\n        const parsedResults = JSON.parse(existingResult.detailedResults);\n        if (parsedResults.questions && Array.isArray(parsedResults.questions)) {\n          // Use existing detailed results\n          setQuestionResults(parsedResults.questions.map((q: any) => ({\n            questionText: q.questionText || '',\n            maxMarks: q.maxMarks || 0,\n            obtainedMarks: q.marks || 0,\n            assessment: q.answerStatus === 'full_answer' ? 'wrote_well' :\n                       q.answerStatus === 'partial_answered' ? 'wrote_no_marks' :\n                       q.answerStatus === 'not_answered' ? 'did_not_write' : 'did_not_write'\n          })));\n          setTotalMarks(existingResult.marksObtained);\n        } else {\n          // Initialize with exam questions but preserve existing total marks\n          initializeQuestionResultsWithExistingMarks(existingResult.marksObtained);\n        }\n      } catch (error) {\n        // Initialize with default values if parsing fails\n        initializeQuestionResults();\n      }\n    } else {\n      // Initialize with default values for new result\n      initializeQuestionResults();\n    }\n\n    setIsMarkingModalOpen(true);\n  };\n\n  const initializeQuestionResultsWithExistingMarks = (existingTotal: number) => {\n    const initialResults = (examQuestions as any[]).map((question: any, index: number) => ({\n      questionText: question.questionText,\n      maxMarks: question.marks,\n      obtainedMarks: index === 0 ? existingTotal : 0, // Put all marks in first question as fallback\n      assessment: index === 0 && existingTotal > 0 ? 'wrote_well' : 'did_not_write' as const,\n    }));\n    setQuestionResults(initialResults);\n    setTotalMarks(existingTotal);\n  };\n\n  const initializeQuestionResults = () => {\n    const initialResults = (examQuestions as any[]).map((question: any) => ({\n      questionText: question.questionText,\n      maxMarks: question.marks,\n      obtainedMarks: 0,\n      assessment: 'did_not_write' as const,\n    }));\n    setQuestionResults(initialResults);\n    setTotalMarks(0);\n  };\n\n  const updateQuestionResult = (index: number, field: string, value: any) => {\n    const updated = [...questionResults];\n    updated[index] = { ...updated[index], [field]: value };\n\n    // Auto-calculate marks based on assessment\n    if (field === 'assessment') {\n      const maxMarks = updated[index].maxMarks;\n      switch (value) {\n        case 'did_not_write':\n          updated[index].obtainedMarks = 0;\n          break;\n        case 'did_not_write_well':\n          updated[index].obtainedMarks = Math.round(maxMarks * 0.25);\n          break;\n        case 'wrote_no_marks':\n          updated[index].obtainedMarks = Math.round(maxMarks * 0.5);\n          break;\n        case 'wrote_well':\n          updated[index].obtainedMarks = maxMarks;\n          break;\n      }\n    }\n\n    setQuestionResults(updated);\n\n    // Recalculate total marks\n    const newTotal = updated.reduce((sum, result) => sum + result.obtainedMarks, 0);\n    setTotalMarks(newTotal);\n  };\n\n  const updateMarksDirectly = (index: number, marks: number) => {\n    const updated = [...questionResults];\n    const maxMarks = updated[index].maxMarks;\n    const validMarks = Math.min(Math.max(0, marks), maxMarks);\n    updated[index].obtainedMarks = validMarks;\n    setQuestionResults(updated);\n\n    // Recalculate total marks\n    const newTotal = updated.reduce((sum, result) => sum + result.obtainedMarks, 0);\n    setTotalMarks(newTotal);\n  };\n\n  const saveResult = () => {\n    if (!selectedStudent) return;\n\n    const resultData: StudentExamResult = {\n      studentId: selectedStudent.id,\n      examId: examId!,\n      questionResults,\n      totalMarks,\n    };\n\n    saveResultMutation.mutate(resultData);\n  };\n\n  const getStudentResult = (studentId: string) => {\n    if (!existingResults || !Array.isArray(existingResults)) {\n      return null;\n    }\n    const result = existingResults.find((result: any) => result.studentId === studentId);\n    return result;\n  };\n\n  const getStudentStatus = (studentId: string) => {\n    const result = getStudentResult(studentId);\n    if (result && result.marksObtained !== undefined && result.marksObtained !== null && result.marksObtained >= 0) {\n      return 'Completed';\n    }\n    return 'Pending';\n  };\n\n  const isStudentCompleted = (studentId: string) => {\n    return getStudentStatus(studentId) === 'Completed';\n  };\n\n  const getStudentMarks = (studentId: string) => {\n    const result = getStudentResult(studentId);\n    if (result && result.marksObtained !== undefined && result.marksObtained !== null && result.marksObtained >= 0) {\n      const percentage = result.percentage || 0;\n      return `${result.marksObtained}/${(exam as any)?.totalMarks} (${percentage}%)`;\n    }\n    return 'Not entered';\n  };\n\n  if (isLoading) {\n    return (\n      <DashboardLayout title=\"Post Exam Result\">\n        <div className=\"p-4 sm:p-6 space-y-6\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setLocation('/exam-management')}\n              >\n                <ArrowLeft size={16} className=\"mr-2\" />\n                Back to Exams\n              </Button>\n              <div>\n                <h1 className=\"text-2xl sm:text-3xl font-bold text-green-800\">Post Exam Result</h1>\n                <p className=\"text-sm sm:text-base text-green-600 mt-1\">Update individual student results for {(exam as any)?.title}</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Exam Details Card Skeleton */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <FileText size={20} />\n                <span>Exam Details</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                {[1, 2, 3, 4, 5, 6].map((i) => (\n                  <div key={i}>\n                    <div className=\"w-20 h-4 bg-gray-100 animate-pulse rounded mb-1\" />\n                    <div className=\"w-24 h-5 bg-gray-200 animate-pulse rounded\" />\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Students Table Skeleton */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Users size={20} />\n                <span>Class Students</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {[1, 2, 3, 4, 5].map((i) => (\n                  <div key={i} className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between p-4 border border-gray-200 rounded gap-3\">\n                    <div className=\"space-y-1\">\n                      <div className=\"w-32 h-4 bg-gray-200 animate-pulse rounded\" />\n                      <div className=\"w-24 h-3 bg-gray-100 animate-pulse rounded\" />\n                    </div>\n                    <div className=\"w-20 h-8 bg-gray-200 animate-pulse rounded self-end sm:self-auto\" />\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"text-center text-sm text-gray-500 mt-4\">\n            Loading exam data...\n          </div>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  if (!exam) {\n    return (\n      <DashboardLayout title=\"Post Exam Result\">\n        <div className=\"p-4 sm:p-6 text-center py-8\">\n          <p className=\"text-red-600\">Exam not found or access denied.</p>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout title=\"Post Exam Result\">\n      <div className=\"p-4 sm:p-6 space-y-6\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setLocation('/exam-management')}\n            >\n              <ArrowLeft size={16} className=\"mr-2\" />\n              Back to Exams\n            </Button>\n            <div>\n              <h1 className=\"text-2xl sm:text-3xl font-bold text-green-800\">Post Exam Result</h1>\n              <p className=\"text-sm sm:text-base text-green-600 mt-1\">Update individual student results for {(exam as any)?.title}</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Exam Details Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <FileText size={20} />\n              <span>Exam Details</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div>\n                <p className=\"text-sm text-gray-500\">Exam Title</p>\n                <p className=\"font-medium\">{(exam as any)?.title}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-500\">Class</p>\n                <p className=\"font-medium\">{(exam as any)?.className}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-500\">Subject</p>\n                <p className=\"font-medium\">{(exam as any)?.subjectName}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-500\">Total Questions</p>\n                <p className=\"font-medium\">{(examQuestions as any[])?.length || 0}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-500\">Total Marks</p>\n                <p className=\"font-medium\">{(exam as any)?.totalMarks}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-gray-500\">Date</p>\n                <p className=\"font-medium\">{new Date((exam as any)?.examDate).toLocaleDateString('en-GB')}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Students Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Users size={20} />\n              <span>Class Students ({classStudents.length})</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {classStudents.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Users size={48} className=\"mx-auto text-gray-400 mb-4\" />\n                <p className=\"text-gray-500\">No students found for this class.</p>\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Student Name</TableHead>\n                    <TableHead>Registration ID</TableHead>\n                    <TableHead>Current Status</TableHead>\n                    <TableHead>Marks Obtained</TableHead>\n                    <TableHead>Action</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {classStudents.map((student: any) => {\n                    const result = getStudentResult(student.id);\n                    return (\n                      <TableRow key={student.id}>\n                        <TableCell className=\"font-medium\">{student.name}</TableCell>\n                        <TableCell>{student.regId}</TableCell>\n                        <TableCell>\n                          {getStudentStatus(student.id) === 'Completed' ? (\n                            <Badge className=\"bg-green-100 text-green-800\">\n                              <CheckCircle size={14} className=\"mr-1\" />\n                              Completed\n                            </Badge>\n                          ) : (\n                            <Badge variant=\"outline\" className=\"bg-yellow-50 text-yellow-700 border-yellow-200\">\n                              Pending\n                            </Badge>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          {getStudentMarks(student.id)}\n                        </TableCell>\n                        <TableCell>\n                          <Button\n                            size=\"sm\"\n                            onClick={() => {\n                              if (isStudentCompleted(student.id)) {\n                                // Show alert - cannot edit completed results\n                                alert('This student has already completed the exam. Results cannot be modified.');\n                                return;\n                              }\n                              openMarkingModal(student);\n                            }}\n                            className={`${\n                              isStudentCompleted(student.id)\n                                ? \"bg-gray-400 cursor-not-allowed text-white\"\n                                : \"bg-blue-600 hover:bg-blue-700 text-white\"\n                            } touch-target`}\n                            disabled={isStudentCompleted(student.id)}\n                          >\n                            {isStudentCompleted(student.id) ? 'Completed' : (result ? 'Update' : 'Enter Marks')}\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Individual Student Marking Modal */}\n        <Dialog open={isMarkingModalOpen} onOpenChange={setIsMarkingModalOpen}>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center space-x-2\">\n                <CheckCircle size={20} />\n                <span>Enter Marks - {selectedStudent?.name}</span>\n              </DialogTitle>\n            </DialogHeader>\n\n            {selectedStudent && (\n              <div className=\"space-y-6\">\n                <div className=\"bg-gray-50 p-4 rounded-lg\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <p className=\"text-sm text-gray-500\">Student Name</p>\n                      <p className=\"font-medium\">{selectedStudent.name}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-gray-500\">Registration ID</p>\n                      <p className=\"font-medium\">{selectedStudent.regId}</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold\">Question-wise Marking</h3>\n\n                  {examQuestions.length === 0 ? (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <p>No questions found for this exam.</p>\n                    </div>\n                  ) : questionResults.length === 0 ? (\n                    <div className=\"text-center py-8\">\n                      <Button\n                        onClick={initializeQuestionResults}\n                        className=\"bg-blue-600 hover:bg-blue-700 touch-target\"\n                      >\n                        Load Questions\n                      </Button>\n                    </div>\n                  ) : (\n                    questionResults.map((result, index) => (\n                      <div key={index} className=\"border border-gray-200 rounded-lg p-3 md:p-4 bg-gray-50\">\n                        <div className=\"flex flex-col sm:flex-row sm:items-start sm:justify-between mb-3 gap-2\">\n                          <div className=\"flex-1 min-w-0\">\n                            <p className=\"font-medium text-gray-900 text-sm md:text-base\">\n                              Q{index + 1}: {result.questionText}\n                            </p>\n                            <p className=\"text-xs md:text-sm text-gray-600 mt-1\">\n                              Maximum Marks: {result.maxMarks}\n                            </p>\n                          </div>\n                          <div className=\"text-right min-w-[120px]\">\n                            <Label htmlFor={`marks-${index}`} className=\"text-sm font-medium\">\n                              Marks Obtained\n                            </Label>\n                            <Input\n                              id={`marks-${index}`}\n                              type=\"number\"\n                              min=\"0\"\n                              max={result.maxMarks}\n                              value={result.obtainedMarks}\n                              onChange={(e) => updateMarksDirectly(index, parseInt(e.target.value) || 0)}\n                              className=\"w-20 mt-1 text-center font-semibold touch-target\"\n                            />\n                          </div>\n                        </div>\n\n                        <div>\n                          <Label className=\"text-sm font-medium mb-2 block\">Assessment Options</Label>\n                          <RadioGroup\n                            value={result.assessment}\n                            onValueChange={(value) => updateQuestionResult(index, 'assessment', value)}\n                            className=\"grid grid-cols-1 gap-2\"\n                          >\n                            {[\n                              { value: 'did_not_write', label: 'Did not write', marks: 0 },\n                              { value: 'did_not_write_well', label: 'Did not write well', marks: Math.round(result.maxMarks * 0.25) },\n                              { value: 'wrote_no_marks', label: 'Wrote but incomplete', marks: Math.round(result.maxMarks * 0.5) },\n                              { value: 'wrote_well', label: 'Wrote well', marks: result.maxMarks },\n                            ].map((option) => (\n                              <div key={option.value} className=\"flex items-center space-x-3 p-2 rounded border hover:bg-gray-50 touch-target\">\n                                <RadioGroupItem\n                                  value={option.value}\n                                  id={`${index}-${option.value}`}\n                                  className=\"shrink-0\"\n                                />\n                                <div className=\"flex-1 min-w-0\">\n                                  <Label\n                                    htmlFor={`${index}-${option.value}`}\n                                    className=\"text-sm cursor-pointer block\"\n                                  >\n                                    {option.label}\n                                  </Label>\n                                  <span className=\"text-xs text-gray-500 font-medium block\">\n                                    ({option.marks} marks)\n                                  </span>\n                                </div>\n                              </div>\n                            ))}\n                          </RadioGroup>\n                        </div>\n                      </div>\n                    ))\n                  )}\n                </div>\n\n                <Separator />\n\n                <div className=\"bg-green-50 p-4 rounded-lg\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Calculator size={20} className=\"text-green-600\" />\n                      <span className=\"text-lg font-semibold text-green-800\">\n                        Total Marks: {totalMarks}/{(exam as any)?.totalMarks}\n                      </span>\n                    </div>\n                    <div className=\"text-sm text-green-600\">\n                      Percentage: {(((totalMarks / ((exam as any)?.totalMarks || 1)) * 100).toFixed(1))}%\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-3\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setIsMarkingModalOpen(false)}\n                    className=\"touch-target\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={saveResult}\n                    disabled={saveResultMutation.isPending}\n                    className=\"bg-green-600 hover:bg-green-700 text-white touch-target\"\n                  >\n                    {saveResultMutation.isPending ? (\n                      <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2\" />\n                    ) : (\n                      <Save size={16} className=\"mr-2\" />\n                    )}\n                    Save Result\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":30009},"client/src/components/progress/EnhancedProgressTracker.tsx":{"content":"import { useState, useEffect, useMemo } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport {\n  BookOpen,\n  CheckCircle2,\n  Clock,\n  Users,\n  Target,\n  Award,\n  Calendar,\n  PlusCircle,\n  Loader2,\n  User,\n  GraduationCap,\n  Book,\n  FileText,\n  Brain\n} from 'lucide-react';\n\ninterface Class {\n  id: string;\n  name: string;\n  description?: string;\n}\n\ninterface Student {\n  id: string;\n  name: string;\n  studentId: string;\n  classId: string;\n  className?: string;\n}\n\ninterface Subject {\n  id: string;\n  name: string;\n  classId?: string;\n}\n\ninterface Chapter {\n  id: string;\n  name: string;\n  subjectId: string;\n}\n\ninterface Topic {\n  id: string;\n  name: string;\n  chapterId: string;\n}\n\nexport function EnhancedProgressTracker() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Homework Activity States\n  const [selectedClassHomework, setSelectedClassHomework] = useState('');\n  const [selectedStudentHomework, setSelectedStudentHomework] = useState('');\n  const [homeworkDate, setHomeworkDate] = useState(new Date().toISOString().split('T')[0]);\n  const [homeworkStatus, setHomeworkStatus] = useState(''); // 'completed', 'not_completed', 'not_given'\n  const [completionMethod, setCompletionMethod] = useState(''); // 'alone', 'so_help'\n  const [notCompletedReason, setNotCompletedReason] = useState('');\n  const [homeworkActivities, setHomeworkActivities] = useState<any[]>([]);\n\n  // Topic Completion States\n  const [selectedClassTopic, setSelectedClassTopic] = useState('');\n  const [selectedStudentTopic, setSelectedStudentTopic] = useState('');\n  const [selectedSubject, setSelectedSubject] = useState('');\n  const [selectedChapter, setSelectedChapter] = useState('');\n  const [selectedTopic, setSelectedTopic] = useState('');\n  const [completedTopics, setCompletedTopics] = useState<string[]>([]);\n\n  // Fetch classes - use manual API call to avoid caching issues with TanStack Query default queryFn\n  const { data: classesResponse = [], isLoading: isLoadingClasses, error: classesError } = useQuery({\n    queryKey: [\"/api/classes\", \"progress-manual\"],\n    queryFn: async () => {\n      const response = await fetch('/api/classes', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          'Content-Type': 'application/json',\n          'Cache-Control': 'no-cache'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    },\n    staleTime: 0,\n    cacheTime: 0,\n  });\n\n  const classes = Array.isArray(classesResponse) ? classesResponse : [];\n\n\n\n  // Fetch students for homework activity - use manual fetch to avoid caching issues\n  const { data: studentsHomeworkResponse = [], isLoading: isLoadingStudentsHomework } = useQuery({\n    queryKey: [\"/api/students\", \"homework-manual\"],\n    queryFn: async () => {\n      const response = await fetch('/api/students', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          'Content-Type': 'application/json',\n          'Cache-Control': 'no-cache'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    },\n    enabled: true,\n    staleTime: 0,\n    cacheTime: 0,\n  });\n\n  const allStudentsHomework = Array.isArray(studentsHomeworkResponse) ? studentsHomeworkResponse : [];\n\n\n\n  // Filter students by selected class for homework\n  const filteredStudentsHomework = useMemo(() => {\n    if (!selectedClassHomework || !allStudentsHomework.length) return [];\n    return allStudentsHomework.filter((student: Student) => student.classId === selectedClassHomework);\n  }, [allStudentsHomework, selectedClassHomework]);\n\n  // Fetch students for topic completion - use manual fetch to avoid caching issues\n  const { data: studentsTopicResponse = [], isLoading: isLoadingStudentsTopic } = useQuery({\n    queryKey: [\"/api/students\", \"topic-manual\"],\n    queryFn: async () => {\n      const response = await fetch('/api/students', {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          'Content-Type': 'application/json',\n          'Cache-Control': 'no-cache'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    },\n    enabled: true,\n    staleTime: 0,\n    cacheTime: 0,\n  });\n\n  const allStudentsTopic = Array.isArray(studentsTopicResponse) ? studentsTopicResponse : [];\n\n  // Filter students by selected class for topics\n  const filteredStudentsTopic = useMemo(() => {\n    if (!selectedClassTopic || !allStudentsTopic.length) return [];\n    return allStudentsTopic.filter((student: Student) => student.classId === selectedClassTopic);\n  }, [allStudentsTopic, selectedClassTopic]);\n\n  // Fetch subjects based on selected class for topics\n  const { data: subjectsResponse = [], isLoading: isLoadingSubjects, error: subjectsError } = useQuery({\n    queryKey: [\"/api/subjects\", selectedClassTopic],\n    queryFn: async () => {\n      if (!selectedClassTopic) return [];\n      console.log('🔍 Fetching subjects for class:', selectedClassTopic);\n      const response = await apiRequest(\"GET\", `/api/subjects/${selectedClassTopic}`);\n      const data = await response.json();\n      console.log('📚 Subjects response:', data);\n      return Array.isArray(data) ? data : [];\n    },\n    enabled: !!selectedClassTopic,\n    staleTime: 5 * 60 * 1000, // 5 minutes cache\n    cacheTime: 10 * 60 * 1000, // 10 minutes cache\n  });\n\n  const subjects = Array.isArray(subjectsResponse) ? subjectsResponse : [];\n\n  // Fetch chapters based on selected subject\n  const { data: chaptersResponse = [], isLoading: isLoadingChapters, error: chaptersError } = useQuery({\n    queryKey: [\"/api/chapters\", selectedSubject],\n    queryFn: async () => {\n      if (!selectedSubject) return [];\n      console.log('🔍 Fetching chapters for subject:', selectedSubject);\n      const response = await apiRequest(\"GET\", `/api/chapters/${selectedSubject}`);\n      const data = await response.json();\n      console.log('📚 Chapters response:', data);\n      return Array.isArray(data) ? data : [];\n    },\n    enabled: !!selectedSubject,\n    staleTime: 5 * 60 * 1000, // 5 minutes cache\n    cacheTime: 10 * 60 * 1000, // 10 minutes cache\n  });\n\n  const chapters = Array.isArray(chaptersResponse) ? chaptersResponse : [];\n\n  // Fetch topics based on selected chapter\n  const { data: topicsResponse = [], isLoading: isLoadingTopics, error: topicsError } = useQuery({\n    queryKey: [\"/api/topics\", selectedChapter],\n    queryFn: async () => {\n      if (!selectedChapter) return [];\n      console.log('🔍 Fetching topics for chapter:', selectedChapter);\n      const response = await apiRequest(\"GET\", `/api/topics/${selectedChapter}`);\n      const data = await response.json();\n      console.log('📝 Topics response:', data);\n      return Array.isArray(data) ? data : [];\n    },\n    enabled: !!selectedChapter,\n    staleTime: 5 * 60 * 1000, // 5 minutes cache\n    cacheTime: 10 * 60 * 1000, // 10 minutes cache\n  });\n\n  const topics = Array.isArray(topicsResponse) ? topicsResponse : [];\n\n  // Reset dependent dropdowns when parent changes\n  useEffect(() => {\n    setSelectedStudentHomework('');\n  }, [selectedClassHomework]);\n\n  useEffect(() => {\n    setSelectedStudentTopic('');\n    setSelectedSubject('');\n    setSelectedChapter('');\n    setSelectedTopic('');\n    setCompletedTopics([]);\n  }, [selectedClassTopic]);\n\n  useEffect(() => {\n    setSelectedChapter('');\n    setSelectedTopic('');\n    setCompletedTopics([]);\n  }, [selectedSubject]);\n\n  // Debug logging for class selection\n  useEffect(() => {\n    if (selectedClassTopic) {\n      console.log('🏫 Class selected for topics:', selectedClassTopic);\n      console.log('📚 Will fetch subjects for class:', selectedClassTopic);\n    }\n  }, [selectedClassTopic]);\n\n  // Debug logging for subject selection\n  useEffect(() => {\n    if (selectedSubject) {\n      console.log('📖 Subject selected for topics:', selectedSubject);\n      console.log('📑 Will fetch chapters for subject:', selectedSubject);\n    }\n  }, [selectedSubject]);\n\n  useEffect(() => {\n    setSelectedTopic('');\n    setCompletedTopics([]);\n  }, [selectedChapter]);\n\n  // Debug logging for chapter selection\n  useEffect(() => {\n    if (selectedChapter) {\n      console.log('📖 Chapter selected for topics:', selectedChapter);\n      console.log('📝 Will fetch topics for chapter:', selectedChapter);\n    }\n  }, [selectedChapter]);\n\n  // Fetch topic completion status when student and chapter are selected\n  const { data: topicStatusResponse } = useQuery({\n    queryKey: [\"/api/progress-tracking/topics/status\", selectedStudentTopic, selectedChapter],\n    queryFn: () => apiRequest(\"GET\", `/api/progress-tracking/topics/status?studentId=${selectedStudentTopic}&chapterId=${selectedChapter}`),\n    enabled: !!selectedStudentTopic && !!selectedChapter,\n  });\n\n  useEffect(() => {\n    if (topicStatusResponse?.completed) {\n      setCompletedTopics(topicStatusResponse.completed);\n    }\n  }, [topicStatusResponse]);\n\n  // Homework Activity Submission\n  const homeworkMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/progress-tracking/homework\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Homework activities saved successfully\",\n      });\n      setHomeworkActivities([]);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save homework activities\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Topic Completion Submission\n  const topicCompletionMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/progress-tracking/topics/complete\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Topic marked as completed\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/progress-tracking/topics/status\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to mark topic as completed\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddHomeworkActivity = () => {\n    if (!selectedStudentHomework || !homeworkStatus) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a student and homework status\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate required fields based on status\n    if (homeworkStatus === 'completed' && !completionMethod) {\n      toast({\n        title: \"Error\",\n        description: \"Please specify how the student completed the homework\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (homeworkStatus === 'not_completed' && !notCompletedReason.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please provide a reason for not completing homework\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const newActivity = {\n      studentId: selectedStudentHomework,\n      date: homeworkDate,\n      status: homeworkStatus,\n      completionType: homeworkStatus === 'completed' ? completionMethod : undefined,\n      reason: homeworkStatus === 'not_completed' ? notCompletedReason.trim() : undefined,\n    };\n\n    setHomeworkActivities([...homeworkActivities, newActivity]);\n\n    // Reset form after adding\n    setSelectedStudentHomework('');\n    setHomeworkStatus('');\n    setCompletionMethod('');\n    setNotCompletedReason('');\n  };\n\n  const handleSubmitHomework = () => {\n    if (homeworkActivities.length === 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please add at least one homework activity\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    homeworkMutation.mutate({ activities: homeworkActivities });\n  };\n\n  const handleCompleteTopics = () => {\n    if (!selectedStudentTopic || !selectedTopic) {\n      toast({\n        title: \"Error\",\n        description: \"Please select student and topic\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    topicCompletionMutation.mutate({\n      studentId: selectedStudentTopic,\n      topicId: selectedTopic,\n      chapterId: selectedChapter,\n    });\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">Progress Tracking</h1>\n          <p className=\"text-muted-foreground\">Track homework activities and topic completion for your students</p>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"homework\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"homework\" className=\"flex items-center gap-2\">\n            <FileText className=\"h-4 w-4\" />\n            School Homework Activity\n          </TabsTrigger>\n          <TabsTrigger value=\"topics\" className=\"flex items-center gap-2\">\n            <Brain className=\"h-4 w-4\" />\n            Topic Completion Tracking\n          </TabsTrigger>\n        </TabsList>\n\n        {/* School Homework Activity */}\n        <TabsContent value=\"homework\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileText className=\"h-5 w-5 text-blue-600\" />\n                School Homework Activity Tracking\n              </CardTitle>\n              <CardDescription>\n                Track daily homework completion status for students\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Step 1: Class Selection */}\n              <div className=\"space-y-4\">\n                <div className=\"p-4 border rounded-lg bg-blue-50/50\">\n                  <h3 className=\"font-medium text-blue-900 mb-3\">Step 1: Select Class</h3>\n                  <div className=\"space-y-2\">\n                    <Label>Class *</Label>\n                    <Select\n                      value={selectedClassHomework}\n                      onValueChange={(value) => {\n                        setSelectedClassHomework(value);\n                        setSelectedStudentHomework(''); // Reset student when class changes\n                        setHomeworkStatus(''); // Reset status\n                        setCompletionMethod('');\n                        setNotCompletedReason('');\n                      }}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder={isLoadingClasses ? \"Loading classes...\" : \"First, select the class\"} />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {isLoadingClasses ? (\n                          <SelectItem value=\"loading\" disabled>\n                            <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                            Loading classes...\n                          </SelectItem>\n                        ) : classes.length === 0 ? (\n                          <SelectItem value=\"no-classes-available\" disabled>\n                            No classes available\n                          </SelectItem>\n                        ) : (\n                          classes\n                            .filter((classItem: Class) => classItem.id && classItem.id.trim() !== '')\n                            .map((classItem: Class) => (\n                            <SelectItem key={classItem.id} value={classItem.id}>\n                              <div className=\"flex items-center gap-2\">\n                                <GraduationCap className=\"h-4 w-4\" />\n                                {classItem.name}\n                              </div>\n                            </SelectItem>\n                          ))\n                        )}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                {/* Step 2: Student Selection */}\n                {selectedClassHomework && (\n                  <div className=\"p-4 border rounded-lg bg-green-50/50\">\n                    <h3 className=\"font-medium text-green-900 mb-3\">Step 2: Select Student from that Class</h3>\n                    <div className=\"space-y-2\">\n                      <Label>Student *</Label>\n                      <Select\n                        value={selectedStudentHomework}\n                        onValueChange={(value) => {\n                          setSelectedStudentHomework(value);\n                          setHomeworkStatus(''); // Reset status when student changes\n                          setCompletionMethod('');\n                          setNotCompletedReason('');\n                        }}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder={\n                            isLoadingStudentsHomework\n                              ? \"Loading students...\"\n                              : \"Then, select the student from that class\"\n                          } />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {isLoadingStudentsHomework ? (\n                            <SelectItem value=\"loading\" disabled>\n                              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                              Loading students...\n                            </SelectItem>\n                          ) : filteredStudentsHomework.length === 0 ? (\n                            <SelectItem value=\"no-students\" disabled>\n                              No students found in this class\n                            </SelectItem>\n                          ) : (\n                            filteredStudentsHomework.map((student: Student) => (\n                              <SelectItem key={student.id} value={student.id}>\n                                <div className=\"flex items-center gap-2\">\n                                  <User className=\"h-4 w-4\" />\n                                  {student.name} ({student.studentId})\n                                </div>\n                              </SelectItem>\n                            ))\n                          )}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                )}\n\n                {/* Step 3: Homework Status Selection */}\n                {selectedStudentHomework && (\n                  <div className=\"p-4 border rounded-lg bg-purple-50/50\">\n                    <h3 className=\"font-medium text-purple-900 mb-3\">Step 3: Select Homework Status</h3>\n                    <div className=\"space-y-3\">\n                      <Label>Homework Status *</Label>\n                      <Select\n                        value={homeworkStatus}\n                        onValueChange={(value) => {\n                          setHomeworkStatus(value);\n                          setCompletionMethod(''); // Reset completion method\n                          setNotCompletedReason(''); // Reset reason\n                        }}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select the homework status with these 3 options\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"completed\">\n                            <div className=\"flex items-center gap-2\">\n                              <CheckCircle2 className=\"h-4 w-4 text-green-600\" />\n                              Completed\n                            </div>\n                          </SelectItem>\n                          <SelectItem value=\"not_completed\">\n                            <div className=\"flex items-center gap-2\">\n                              <Clock className=\"h-4 w-4 text-red-600\" />\n                              Not Completed\n                            </div>\n                          </SelectItem>\n                          <SelectItem value=\"not_given\">\n                            <div className=\"flex items-center gap-2\">\n                              <FileText className=\"h-4 w-4 text-gray-600\" />\n                              Not Given (by school)\n                            </div>\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                )}\n\n                {/* Step 4a: If Completed - Ask completion method */}\n                {homeworkStatus === 'completed' && (\n                  <div className=\"p-4 border rounded-lg bg-yellow-50/50\">\n                    <h3 className=\"font-medium text-yellow-900 mb-3\">Step 4: How did the student complete it?</h3>\n                    <div className=\"space-y-3\">\n                      <Label>Completion Method *</Label>\n                      <Select value={completionMethod} onValueChange={setCompletionMethod}>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Did the student complete it on their own?\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"self\">\n                            <div className=\"flex items-center gap-2\">\n                              <User className=\"h-4 w-4 text-blue-600\" />\n                              Did the student complete it on their own?\n                            </div>\n                          </SelectItem>\n                          <SelectItem value=\"helped_by_so\">\n                            <div className=\"flex items-center gap-2\">\n                              <Users className=\"h-4 w-4 text-orange-600\" />\n                              Did SO help the student to complete it?\n                            </div>\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                )}\n\n                {/* Step 4b: If Not Completed - Ask for reason */}\n                {homeworkStatus === 'not_completed' && (\n                  <div className=\"p-4 border rounded-lg bg-red-50/50\">\n                    <h3 className=\"font-medium text-red-900 mb-3\">Step 4: Provide a reason</h3>\n                    <div className=\"space-y-3\">\n                      <Label>Reason for not completing homework *</Label>\n                      <Textarea\n                        placeholder=\"Please provide a reason for not completing homework...\"\n                        value={notCompletedReason}\n                        onChange={(e) => setNotCompletedReason(e.target.value)}\n                        rows={3}\n                      />\n                    </div>\n                  </div>\n                )}\n\n                {/* Step 4c: If Not Given - No further input needed */}\n                {homeworkStatus === 'not_given' && (\n                  <div className=\"p-4 border rounded-lg bg-gray-50/50\">\n                    <h3 className=\"font-medium text-gray-900 mb-3\">Step 4: No further input needed</h3>\n                    <p className=\"text-gray-600\">Since homework was not given by school, no additional information is required.</p>\n                  </div>\n                )}\n\n                {/* Date Selection */}\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label>Date</Label>\n                    <Input\n                      type=\"date\"\n                      value={homeworkDate}\n                      onChange={(e) => setHomeworkDate(e.target.value)}\n                      className=\"w-auto\"\n                    />\n                  </div>\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"flex items-center gap-4 pt-4\">\n                  <Button\n                    onClick={handleAddHomeworkActivity}\n                    disabled={\n                      !selectedStudentHomework ||\n                      !homeworkStatus ||\n                      (homeworkStatus === 'completed' && !completionMethod) ||\n                      (homeworkStatus === 'not_completed' && !notCompletedReason.trim())\n                    }\n                    variant=\"outline\"\n                  >\n                    <PlusCircle className=\"h-4 w-4 mr-2\" />\n                    Add Homework Activity\n                  </Button>\n\n                  <Button\n                    onClick={handleSubmitHomework}\n                    disabled={homeworkActivities.length === 0 || homeworkMutation.isPending}\n                  >\n                    {homeworkMutation.isPending && <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />}\n                    Save Activities ({homeworkActivities.length})\n                  </Button>\n                </div>\n\n                {/* Pending Activities */}\n                {homeworkActivities.length > 0 && (\n                  <div className=\"border rounded-lg p-4\">\n                    <h3 className=\"font-medium mb-3\">Pending Activities</h3>\n                    <div className=\"space-y-2\">\n                      {homeworkActivities.map((activity, index) => {\n                        const student = filteredStudentsHomework.find(s => s.id === activity.studentId);\n\n                        return (\n                          <div key={index} className=\"flex items-center justify-between p-3 bg-muted rounded border\">\n                            <div className=\"flex items-center gap-3\">\n                              <User className=\"h-4 w-4\" />\n                              <div>\n                                <div className=\"font-medium\">{student?.name} ({student?.studentId})</div>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  Status: {activity.status === 'completed' ? 'Completed' : activity.status === 'not_completed' ? 'Not Completed' : 'Not Given'}\n                                  {activity.completionType && ` - ${activity.completionType === 'self' ? 'On their own' : 'With SO help'}`}\n                                  {activity.reason && ` - Reason: ${activity.reason}`}\n                                </div>\n                              </div>\n                              <Badge variant=\"outline\">{activity.date}</Badge>\n                            </div>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => setHomeworkActivities(activities =>\n                                activities.filter((_, i) => i !== index)\n                              )}\n                            >\n                              Remove\n                            </Button>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Topic Completion Tracking */}\n        <TabsContent value=\"topics\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Brain className=\"h-5 w-5 text-purple-600\" />\n                Topic Completion Tracking\n              </CardTitle>\n              <CardDescription>\n                Mark topics as completed for students with automatic date capture\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Auto-Date Display */}\n              <div className=\"p-4 border rounded-lg bg-gray-50/50\">\n                <h3 className=\"font-medium text-gray-900 mb-2\">Date Automatically Captured</h3>\n                <div className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-4 w-4 text-blue-600\" />\n                  <span className=\"text-lg font-medium text-blue-900\">\n                    {new Date().toLocaleDateString('en-GB', {\n                      day: '2-digit',\n                      month: '2-digit',\n                      year: 'numeric'\n                    })}\n                  </span>\n                </div>\n              </div>\n\n              {/* Step-by-Step Workflow */}\n              <div className=\"space-y-4\">\n                {/* Step 1: Class Selection */}\n                <div className=\"p-4 border rounded-lg bg-blue-50/50\">\n                  <h3 className=\"font-medium text-blue-900 mb-3\">Step 1: Select Class</h3>\n                  <div className=\"space-y-2\">\n                    <Label>Class *</Label>\n                    <Select\n                      value={selectedClassTopic}\n                      onValueChange={(value) => {\n                        setSelectedClassTopic(value);\n                        setSelectedStudentTopic(''); // Reset dependent selections\n                        setSelectedSubject('');\n                        setSelectedChapter('');\n                        setSelectedTopic('');\n                      }}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder={isLoadingClasses ? \"Loading classes...\" : \"First, select the class\"} />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {isLoadingClasses ? (\n                          <SelectItem value=\"loading\" disabled>\n                            <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                            Loading classes...\n                          </SelectItem>\n                        ) : classes.length === 0 ? (\n                          <SelectItem value=\"no-classes-available\" disabled>\n                            No classes available\n                          </SelectItem>\n                        ) : (\n                          classes\n                            .filter((classItem: Class) => classItem.id && classItem.id.trim() !== '')\n                            .map((classItem: Class) => (\n                            <SelectItem key={classItem.id} value={classItem.id}>\n                              <div className=\"flex items-center gap-2\">\n                                <GraduationCap className=\"h-4 w-4\" />\n                                {classItem.name}\n                              </div>\n                            </SelectItem>\n                          ))\n                        )}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                {/* Step 2: Student Selection */}\n                {selectedClassTopic && (\n                  <div className=\"p-4 border rounded-lg bg-green-50/50\">\n                    <h3 className=\"font-medium text-green-900 mb-3\">Step 2: Select Student from that Class</h3>\n                    <div className=\"space-y-2\">\n                      <Label>Student *</Label>\n                      <Select\n                        value={selectedStudentTopic}\n                        onValueChange={setSelectedStudentTopic}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder={\n                            isLoadingStudentsTopic\n                              ? \"Loading students...\"\n                              : \"Then, select the student from that class\"\n                          } />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {isLoadingStudentsTopic ? (\n                            <SelectItem value=\"loading\" disabled>\n                              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                              Loading students...\n                            </SelectItem>\n                          ) : filteredStudentsTopic.length === 0 ? (\n                            <SelectItem value=\"no-students\" disabled>\n                              No students found in this class\n                            </SelectItem>\n                          ) : (\n                            filteredStudentsTopic.map((student: Student) => (\n                              <SelectItem key={student.id} value={student.id}>\n                                <div className=\"flex items-center gap-2\">\n                                  <User className=\"h-4 w-4\" />\n                                  {student.name} ({student.studentId})\n                                </div>\n                              </SelectItem>\n                            ))\n                          )}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                )}\n\n                {/* Step 3: Subject Selection */}\n                {selectedClassTopic && (\n                  <div className=\"p-4 border rounded-lg bg-purple-50/50\">\n                    <h3 className=\"font-medium text-purple-900 mb-3\">Step 3: Select Subject for that Class</h3>\n                    <div className=\"space-y-2\">\n                      <Label>Subject *</Label>\n                      <Select\n                        value={selectedSubject}\n                        onValueChange={(value) => {\n                          setSelectedSubject(value);\n                          setSelectedChapter(''); // Reset dependent selections\n                          setSelectedTopic('');\n                        }}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder={\n                            isLoadingSubjects\n                              ? \"Loading subjects...\"\n                              : \"Then, select the subject assigned to that class\"\n                          } />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {isLoadingSubjects ? (\n                            <SelectItem value=\"loading\" disabled>\n                              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                              Loading subjects...\n                            </SelectItem>\n                          ) : subjects.length === 0 ? (\n                            <SelectItem value=\"no-subjects\" disabled>\n                              {subjectsError ? 'Error loading subjects' : 'No subjects found for this class'}\n                            </SelectItem>\n                          ) : (\n                            subjects.map((subject: Subject) => (\n                              <SelectItem key={subject.id} value={subject.id}>\n                                <div className=\"flex items-center gap-2\">\n                                  <Book className=\"h-4 w-4\" />\n                                  {subject.name}\n                                </div>\n                              </SelectItem>\n                            ))\n                          )}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                )}\n\n                {/* Step 4: Chapter Selection */}\n                {selectedSubject && (\n                  <div className=\"p-4 border rounded-lg bg-yellow-50/50\">\n                    <h3 className=\"font-medium text-yellow-900 mb-3\">Step 4: Select Chapter for that Subject</h3>\n                    <div className=\"space-y-2\">\n                      <Label>Chapter *</Label>\n                      <Select\n                        value={selectedChapter}\n                        onValueChange={(value) => {\n                          setSelectedChapter(value);\n                          setSelectedTopic(''); // Reset dependent selection\n                        }}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder={\n                            isLoadingChapters\n                              ? \"Loading chapters...\"\n                              : \"Then, select the chapter for that subject\"\n                          } />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {isLoadingChapters ? (\n                            <SelectItem value=\"loading\" disabled>\n                              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                              Loading chapters...\n                            </SelectItem>\n                          ) : chapters.length === 0 ? (\n                            <SelectItem value=\"no-chapters\" disabled>\n                              {chaptersError ? 'Error loading chapters' : 'No chapters found for this subject'}\n                            </SelectItem>\n                          ) : (\n                            chapters.map((chapter: Chapter) => (\n                              <SelectItem key={chapter.id} value={chapter.id}>\n                                <div className=\"flex items-center gap-2\">\n                                  <BookOpen className=\"h-4 w-4\" />\n                                  {chapter.name}\n                                </div>\n                              </SelectItem>\n                            ))\n                          )}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                )}\n\n                {/* Step 5: Topic Selection */}\n                {selectedChapter && (\n                  <div className=\"p-4 border rounded-lg bg-orange-50/50\">\n                    <h3 className=\"font-medium text-orange-900 mb-3\">Step 5: Select Topic for that Chapter</h3>\n                    <div className=\"space-y-2\">\n                      <Label>Topic *</Label>\n                      <Select\n                        value={selectedTopic}\n                        onValueChange={setSelectedTopic}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder={\n                            isLoadingTopics\n                              ? \"Loading topics...\"\n                              : \"Finally, select the topic for that chapter\"\n                          } />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {isLoadingTopics ? (\n                            <SelectItem value=\"loading\" disabled>\n                              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                              Loading topics...\n                            </SelectItem>\n                          ) : topics.length === 0 ? (\n                            <SelectItem value=\"no-topics\" disabled>\n                              {topicsError ? 'Error loading topics' : 'No topics found for this chapter'}\n                            </SelectItem>\n                          ) : (\n                            topics.map((topic: Topic) => {\n                              const isCompleted = completedTopics.includes(topic.id);\n                              return (\n                                <SelectItem key={topic.id} value={topic.id}>\n                                  <div className=\"flex items-center gap-2\">\n                                    {isCompleted ? (\n                                      <CheckCircle2 className=\"h-4 w-4 text-green-600\" />\n                                    ) : (\n                                      <Clock className=\"h-4 w-4 text-gray-400\" />\n                                    )}\n                                    <span className={isCompleted ? \"text-green-600\" : \"\"}>\n                                      {topic.name}\n                                    </span>\n                                    {isCompleted && (\n                                      <Badge variant=\"secondary\" className=\"ml-2 text-xs\">\n                                        Completed\n                                      </Badge>\n                                    )}\n                                  </div>\n                                </SelectItem>\n                              );\n                            })\n                          )}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                )}\n\n                {/* Action Button */}\n                {selectedTopic && (\n                  <div className=\"flex items-center justify-between pt-4\">\n                    <Button\n                      onClick={handleCompleteTopics}\n                      disabled={\n                        !selectedStudentTopic ||\n                        !selectedTopic ||\n                        completedTopics.includes(selectedTopic) ||\n                        topicCompletionMutation.isPending\n                      }\n                      className=\"bg-green-600 hover:bg-green-700\"\n                    >\n                      {topicCompletionMutation.isPending && <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />}\n                      <CheckCircle2 className=\"h-4 w-4 mr-2\" />\n                      Mark Topic as Completed\n                    </Button>\n\n                    {completedTopics.includes(selectedTopic) && selectedTopic && (\n                      <Badge variant=\"secondary\" className=\"bg-green-100 text-green-700\">\n                        <CheckCircle2 className=\"h-3 w-3 mr-1\" />\n                        Already Completed\n                      </Badge>\n                    )}\n                  </div>\n                )}\n              </div>\n\n              {/* Progress Summary */}\n              {selectedStudentTopic && selectedChapter && topicStatusResponse && (\n                <Card className=\"bg-muted/50\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-sm\">Progress Summary</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <div className=\"flex items-center gap-4 text-sm\">\n                      <div className=\"flex items-center gap-2\">\n                        <CheckCircle2 className=\"h-4 w-4 text-green-600\" />\n                        <span>Completed: {topicStatusResponse.completed?.length || 0}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Clock className=\"h-4 w-4 text-gray-400\" />\n                        <span>Remaining: {topicStatusResponse.remaining?.length || 0}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Target className=\"h-4 w-4 text-blue-600\" />\n                        <span>Total: {topicStatusResponse.total || 0}</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":43885},"server/cleanSoCenterIds.ts":{"content":"\nimport { db, storage } from './storage';\nimport { sql } from 'drizzle-orm';\nimport * as schema from '@shared/schema';\n\nasync function cleanAndReorganizeSoCenterIds() {\n  console.log('🧹 Starting SO Center ID cleanup and reorganization...');\n  \n  try {\n    // Get all SO Centers ordered by creation date\n    const allSoCenters = await db.select()\n      .from(schema.soCenters)\n      .orderBy(schema.soCenters.createdAt);\n    \n    console.log(`📋 Found ${allSoCenters.length} SO Centers to reorganize`);\n    \n    // Get all users with so_center role\n    const soCenterUsers = await db.select()\n      .from(schema.users)\n      .where(sql`role = 'so_center'`);\n    \n    console.log(`👥 Found ${soCenterUsers.length} SO Center users`);\n    \n    const updates = [];\n    \n    // Process each SO Center and assign new sequential IDs\n    for (let i = 0; i < allSoCenters.length; i++) {\n      const center = allSoCenters[i];\n      const newNumber = i + 1;\n      const newCenterId = `NNASOC${String(newNumber).padStart(5, '0')}`;\n      const newEmail = `nnasoc${String(newNumber).padStart(5, '0')}@navanidhi.org`;\n      \n      updates.push({\n        oldId: center.id,\n        oldCenterId: center.centerId,\n        oldEmail: center.email,\n        newCenterId: newCenterId,\n        newEmail: newEmail,\n        centerName: center.name\n      });\n      \n      console.log(`🔄 Planning update: ${center.centerId} → ${newCenterId}`);\n    }\n    \n    // Confirm before proceeding\n    console.log('\\n⚠️  IMPORTANT: This will update all SO Center IDs and emails!');\n    console.log('📋 Planned updates:');\n    updates.forEach(update => {\n      console.log(`   ${update.oldCenterId} → ${update.newCenterId} (${update.centerName})`);\n    });\n    \n    // Perform the updates\n    console.log('\\n🚀 Starting database updates...');\n    \n    for (const update of updates) {\n      console.log(`\\n📝 Updating ${update.oldCenterId} to ${update.newCenterId}...`);\n      \n      // Update SO Center record\n      await db.update(schema.soCenters)\n        .set({\n          centerId: update.newCenterId,\n          email: update.newEmail\n        })\n        .where(sql`id = ${update.oldId}`);\n      \n      console.log(`✅ SO Center updated: ${update.newCenterId}`);\n      \n      // Update corresponding user record if exists\n      if (update.oldEmail) {\n        const userUpdateResult = await db.update(schema.users)\n          .set({\n            email: update.newEmail\n          })\n          .where(sql`email = ${update.oldEmail}`);\n        \n        console.log(`✅ User email updated: ${update.oldEmail} → ${update.newEmail}`);\n      }\n      \n      // Update any students linked to this SO Center (no ID change needed, just referential)\n      const linkedStudentsCount = await db.select({ count: sql`count(*)` })\n        .from(schema.students)\n        .where(sql`so_center_id = ${update.oldId}`);\n      \n      console.log(`📊 Found ${linkedStudentsCount[0]?.count || 0} students linked to this center`);\n    }\n    \n    console.log('\\n🎉 SO Center ID cleanup completed successfully!');\n    console.log('📊 Summary:');\n    console.log(`   - Updated ${updates.length} SO Centers`);\n    console.log(`   - New ID range: NNASOC00001 to NNASOC${String(updates.length).padStart(5, '0')}`);\n    console.log(`   - New email range: nnasoc00001@navanidhi.org to nnasoc${String(updates.length).padStart(5, '0')}@navanidhi.org`);\n    \n    // Verify the cleanup\n    console.log('\\n🔍 Verifying cleanup...');\n    const updatedCenters = await db.select()\n      .from(schema.soCenters)\n      .orderBy(schema.soCenters.centerId);\n    \n    console.log('✅ Current SO Center IDs after cleanup:');\n    updatedCenters.forEach((center, index) => {\n      console.log(`   ${index + 1}. ${center.centerId} - ${center.name}`);\n    });\n    \n  } catch (error) {\n    console.error('❌ Error during SO Center ID cleanup:', error);\n    throw error;\n  }\n}\n\n// Run the cleanup if this file is executed directly\nif (require.main === module) {\n  cleanAndReorganizeSoCenterIds()\n    .then(() => {\n      console.log('🎯 Cleanup process completed successfully!');\n      process.exit(0);\n    })\n    .catch((error) => {\n      console.error('💥 Cleanup process failed:', error);\n      process.exit(1);\n    });\n}\n\nexport { cleanAndReorganizeSoCenterIds };\n","size_bytes":4314},"server/runCleanup.ts":{"content":"\nimport { cleanAllSupabaseData } from './cleanSupabaseData';\n\nasync function runCompleteCleanup() {\n  try {\n    console.log('🚀 Starting complete system cleanup...');\n    console.log('⚠️  This will remove ALL dummy data from Supabase!');\n    console.log('🔒 Admin user will be preserved');\n    \n    const result = await cleanAllSupabaseData();\n    \n    console.log('\\n🎉 CLEANUP COMPLETED SUCCESSFULLY!');\n    console.log('📊 Summary:');\n    console.log(`   - Users deleted: ${result.usersDeleted}`);\n    console.log(`   - Admin preserved: ${result.adminPreserved}`);\n    console.log('   - All student data removed');\n    console.log('   - All SO Centers removed');\n    console.log('   - All payment data removed');\n    console.log('   - All academic structure removed');\n    console.log('   - All address data removed');\n    console.log('\\n✅ System is now clean and ready for fresh data!');\n    console.log('🔑 Login with: navanidhi.care@gmail.com / Psd@1986');\n    \n    process.exit(0);\n  } catch (error) {\n    console.error('❌ Cleanup failed:', error);\n    process.exit(1);\n  }\n}\n\n// Run cleanup\nrunCompleteCleanup();\n","size_bytes":1139},"client/src/pages/admin/ClassSubjectManagement.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Plus, BookOpen, FileText, Edit2, ArrowRightLeft } from 'lucide-react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';\n\nexport default function ClassSubjectManagement() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // States for adding class\n  const [newClassName, setNewClassName] = useState('');\n  const [newClassDescription, setNewClassDescription] = useState('');\n\n  // States for adding subject\n  const [newSubjectName, setNewSubjectName] = useState('');\n  const [selectedClassesForSubject, setSelectedClassesForSubject] = useState<string[]>([]);\n  const [selectedClassForView, setSelectedClassForView] = useState('');\n\n  // States for editing subject\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [editingSubject, setEditingSubject] = useState<any>(null);\n  const [editSubjectName, setEditSubjectName] = useState('');\n  const [editSelectedClass, setEditSelectedClass] = useState('');\n\n  // States for editing class\n  const [isEditClassModalOpen, setIsEditClassModalOpen] = useState(false);\n  const [editingClass, setEditingClass] = useState<any>(null);\n  const [editClassName, setEditClassName] = useState('');\n  const [editClassDescription, setEditClassDescription] = useState('');\n\n  // Fetch classes and subjects\n  const { data: classes = [], isLoading: classesLoading } = useQuery({\n    queryKey: ['/api/classes'],\n  });\n\n  const { data: allSubjects = [], isLoading: subjectsLoading } = useQuery({\n    queryKey: ['/api/admin/subjects'],\n  });\n\n  // Filter subjects based on selected class for viewing\n  const filteredSubjects = selectedClassForView && selectedClassForView !== 'all'\n    ? allSubjects.filter((subject: any) => subject.classId === selectedClassForView)\n    : allSubjects;\n\n  // Add class mutation\n  const addClassMutation = useMutation({\n    mutationFn: async (classData: { name: string; description: string }) => {\n      return apiRequest('POST', '/api/admin/classes', classData);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Class added successfully',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/classes'] });\n      setNewClassName('');\n      setNewClassDescription('');\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to add class',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Add subject mutation\n  const addSubjectMutation = useMutation({\n    mutationFn: async (subjectData: { name: string; classIds: string[] }) => {\n      return apiRequest('POST', '/api/admin/subjects', subjectData);\n    },\n    onSuccess: () => {\n      const classNames = selectedClassesForSubject.map(classId => getClassName(classId)).join(', ');\n      toast({\n        title: 'Success',\n        description: `Subject \"${newSubjectName}\" successfully connected to: ${classNames}`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/subjects'] });\n      setNewSubjectName('');\n      setSelectedClassesForSubject([]);\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to add subject',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Edit subject mutation\n  const editSubjectMutation = useMutation({\n    mutationFn: async (subjectData: { id: string; name: string; classId: string }) => {\n      return apiRequest('PUT', `/api/admin/subjects/${subjectData.id}`, {\n        name: subjectData.name,\n        classId: subjectData.classId\n      });\n    },\n    onSuccess: () => {\n      const className = getClassName(editSelectedClass);\n      toast({\n        title: 'Success',\n        description: `Subject \"${editSubjectName}\" successfully reassigned to ${className}`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/subjects'] });\n      setIsEditModalOpen(false);\n      setEditingSubject(null);\n      setEditSubjectName('');\n      setEditSelectedClass('');\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to update subject',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Edit class mutation\n  const editClassMutation = useMutation({\n    mutationFn: async (classData: { id: string; name: string; description: string }) => {\n      return apiRequest('PUT', `/api/admin/classes/${classData.id}`, {\n        name: classData.name,\n        description: classData.description\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: `Class \"${editClassName}\" updated successfully`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/classes'] });\n      setIsEditClassModalOpen(false);\n      setEditingClass(null);\n      setEditClassName('');\n      setEditClassDescription('');\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to update class',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Delete class mutation\n  const deleteClassMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest('DELETE', `/api/admin/classes/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Class deleted successfully',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/classes'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to delete class',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  // Delete subject mutation\n  const deleteSubjectMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest('DELETE', `/api/admin/subjects/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Subject deleted successfully',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/subjects'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to delete subject',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleAddClass = () => {\n    if (!newClassName.trim()) {\n      toast({\n        title: 'Error',\n        description: 'Please enter a class name',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    addClassMutation.mutate({\n      name: newClassName.trim(),\n      description: newClassDescription.trim(),\n    });\n  };\n\n  const handleAddSubject = () => {\n    if (!newSubjectName.trim() || selectedClassesForSubject.length === 0) {\n      toast({\n        title: 'Error',\n        description: 'Please enter subject name and select at least one class',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    addSubjectMutation.mutate({\n      name: newSubjectName.trim(),\n      classIds: selectedClassesForSubject,\n    });\n  };\n\n  const handleEditSubject = (subject: any) => {\n    setEditingSubject(subject);\n    setEditSubjectName(subject.name);\n    setEditSelectedClass(subject.classId);\n    setIsEditModalOpen(true);\n  };\n\n  const handleUpdateSubject = () => {\n    if (!editSubjectName.trim() || !editSelectedClass) {\n      toast({\n        title: 'Error',\n        description: 'Please enter subject name and select a class',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    editSubjectMutation.mutate({\n      id: editingSubject.id,\n      name: editSubjectName.trim(),\n      classId: editSelectedClass,\n    });\n  };\n\n  const handleEditClass = (cls: any) => {\n    setEditingClass(cls);\n    setEditClassName(cls.name);\n    setEditClassDescription(cls.description || '');\n    setIsEditClassModalOpen(true);\n  };\n\n  const handleUpdateClass = () => {\n    if (!editClassName.trim()) {\n      toast({\n        title: 'Error',\n        description: 'Please enter class name',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    editClassMutation.mutate({\n      id: editingClass.id,\n      name: editClassName.trim(),\n      description: editClassDescription.trim(),\n    });\n  };\n\n  const getClassName = (classId: string) => {\n    return classes.find((c: any) => c.id === classId)?.name || 'Unknown';\n  };\n\n  return (\n    <DashboardLayout\n      title=\"Class & Subject Management\"\n      subtitle=\"Add new classes and subjects to the academic structure\"\n    >\n      <Tabs defaultValue=\"classes\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"classes\">Add Classes</TabsTrigger>\n          <TabsTrigger value=\"subjects\">Add Subjects</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"classes\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            {/* Add Class Form */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <BookOpen size={20} />\n                  <span>Add New Class</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"className\">Class Name *</Label>\n                  <Input\n                    id=\"className\"\n                    placeholder=\"e.g., Class 10, Grade 5\"\n                    value={newClassName}\n                    onChange={(e) => setNewClassName(e.target.value)}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"classDescription\">Description</Label>\n                  <Input\n                    id=\"classDescription\"\n                    placeholder=\"Optional description\"\n                    value={newClassDescription}\n                    onChange={(e) => setNewClassDescription(e.target.value)}\n                  />\n                </div>\n                <Button\n                  onClick={handleAddClass}\n                  disabled={addClassMutation.isPending}\n                  className=\"w-full\"\n                >\n                  <Plus className=\"mr-2\" size={16} />\n                  {addClassMutation.isPending ? 'Adding...' : 'Add Class'}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Existing Classes List */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Existing Classes</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {classesLoading ? (\n                  <div className=\"text-center py-4\">Loading classes...</div>\n                ) : classes.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <BookOpen className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                    <p>No classes found. Add your first class!</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                    {classes.map((cls: any) => (\n                      <div key={cls.id} className=\"p-3 border rounded-lg flex items-center justify-between\">\n                        <div>\n                          <h3 className=\"font-semibold\">{cls.name}</h3>\n                          {cls.description && (\n                            <p className=\"text-sm text-gray-600\">{cls.description}</p>\n                          )}\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEditClass(cls)}\n                          >\n                            <Edit2 className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              if (confirm('Are you sure you want to delete this class?')) {\n                                deleteClassMutation.mutate(cls.id);\n                              }\n                            }}\n                            disabled={deleteClassMutation.isPending}\n                          >\n                            <ArrowRightLeft className=\"w-4 h-4 text-red-500\" />\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"subjects\">\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            {/* Add Subject Form */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <FileText size={20} />\n                  <span>Add New Subject</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"subjectName\">Subject Name *</Label>\n                  <Input\n                    id=\"subjectName\"\n                    placeholder=\"e.g., Mathematics, Science\"\n                    value={newSubjectName}\n                    onChange={(e) => setNewSubjectName(e.target.value)}\n                  />\n                </div>\n                <div>\n                  <Label>Select Classes * (Choose multiple classes for this subject)</Label>\n                  <div className=\"border rounded-md p-3 space-y-2 max-h-40 overflow-y-auto\">\n                    {classes.map((cls: any) => (\n                      <div key={cls.id} className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"checkbox\"\n                          id={`class-${cls.id}`}\n                          checked={selectedClassesForSubject.includes(cls.id)}\n                          onChange={(e) => {\n                            if (e.target.checked) {\n                              setSelectedClassesForSubject([...selectedClassesForSubject, cls.id]);\n                            } else {\n                              setSelectedClassesForSubject(selectedClassesForSubject.filter(id => id !== cls.id));\n                            }\n                          }}\n                          className=\"rounded\"\n                        />\n                        <Label htmlFor={`class-${cls.id}`} className=\"text-sm\">\n                          {cls.name}\n                        </Label>\n                      </div>\n                    ))}\n                  </div>\n                  <div className=\"text-xs text-gray-500 mt-1\">\n                    Selected: {selectedClassesForSubject.length} class{selectedClassesForSubject.length !== 1 ? 'es' : ''}\n                  </div>\n                </div>\n                <Button\n                  onClick={handleAddSubject}\n                  disabled={addSubjectMutation.isPending || classes.length === 0}\n                  className=\"w-full\"\n                >\n                  <Plus className=\"mr-2\" size={16} />\n                  {addSubjectMutation.isPending ? 'Adding...' : 'Add Subject'}\n                </Button>\n                {classes.length === 0 && (\n                  <p className=\"text-sm text-amber-600 text-center\">\n                    Please add classes first before adding subjects\n                  </p>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Existing Subjects List - Grouped by Class */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span>Existing Subjects (Grouped by Class)</span>\n                  <div className=\"text-sm text-gray-600\">\n                    Total: {allSubjects.length} subjects across {classes.length} classes\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {subjectsLoading ? (\n                  <div className=\"text-center py-4\">Loading subjects...</div>\n                ) : classes.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <BookOpen className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                    <p>No classes found. Please add classes first!</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-6\">\n                    {classes.map((cls: any) => {\n                      const classSubjects = allSubjects.filter((subject: any) => subject.classId === cls.id);\n                      return (\n                        <div key={cls.id} className=\"border rounded-lg bg-gradient-to-r from-gray-50 to-blue-50 p-4\">\n                          <div className=\"flex items-center justify-between mb-4\">\n                            <div className=\"flex items-center gap-3\">\n                              <BookOpen className=\"w-5 h-5 text-blue-600\" />\n                              <h3 className=\"text-lg font-semibold text-gray-800\">{cls.name}</h3>\n                              <span className=\"text-sm bg-blue-100 text-blue-700 px-2 py-1 rounded-full\">\n                                {classSubjects.length} subjects\n                              </span>\n                            </div>\n                            {cls.description && (\n                              <p className=\"text-sm text-gray-600 italic\">{cls.description}</p>\n                            )}\n                          </div>\n                          \n                          {classSubjects.length === 0 ? (\n                            <div className=\"text-center py-6 text-gray-500 border-2 border-dashed border-gray-200 rounded-lg\">\n                              <FileText className=\"mx-auto h-8 w-8 text-gray-400 mb-2\" />\n                              <p className=\"text-sm\">No subjects added to this class yet</p>\n                              <p className=\"text-xs text-gray-400 mt-1\">Use the form above to add subjects</p>\n                            </div>\n                          ) : (\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                              {classSubjects.map((subject: any) => (\n                                <div key={subject.id} \n                                     className=\"p-3 border rounded-lg bg-white hover:shadow-md transition-all duration-200 cursor-pointer hover:border-blue-300\"\n                                     onClick={() => handleEditSubject(subject)}>\n                                  <div className=\"flex items-center justify-between\">\n                                    <div className=\"flex-1\">\n                                      <h4 className=\"font-medium text-gray-800 mb-1\">{subject.name}</h4>\n                                      <div className=\"flex items-center text-xs text-gray-500\">\n                                        <span className=\"bg-green-100 text-green-700 px-2 py-1 rounded-full\">\n                                          Active\n                                        </span>\n                                      </div>\n                                    </div>\n                                    <div className=\"flex items-center space-x-2\">\n                                      <Button\n                                        variant=\"ghost\"\n                                        size=\"sm\"\n                                        onClick={(e) => {\n                                          e.stopPropagation();\n                                          handleEditSubject(subject);\n                                        }}\n                                        className=\"text-blue-600 hover:text-blue-800 hover:bg-blue-50\"\n                                      >\n                                        <Edit2 className=\"w-4 h-4\" />\n                                      </Button>\n                                      <Button\n                                        variant=\"ghost\"\n                                        size=\"sm\"\n                                        onClick={(e) => {\n                                          e.stopPropagation();\n                                          if (confirm(`Are you sure you want to delete \"${subject.name}\" from ${cls.name}?`)) {\n                                            deleteSubjectMutation.mutate(subject.id);\n                                          }\n                                        }}\n                                        disabled={deleteSubjectMutation.isPending}\n                                        className=\"text-red-500 hover:text-red-700 hover:bg-red-50\"\n                                      >\n                                        <ArrowRightLeft className=\"w-4 h-4\" />\n                                      </Button>\n                                    </div>\n                                  </div>\n                                  <div className=\"mt-2 text-xs text-blue-600 bg-blue-50 px-2 py-1 rounded flex items-center\">\n                                    <Edit2 className=\"w-3 h-3 mr-1\" />\n                                    Click to edit or reassign to another class\n                                  </div>\n                                </div>\n                              ))}\n                            </div>\n                          )}\n                        </div>\n                      );\n                    })}\n                    \n                    {allSubjects.length === 0 && (\n                      <div className=\"text-center py-12 text-gray-500\">\n                        <FileText className=\"mx-auto h-16 w-16 text-gray-400 mb-4\" />\n                        <h3 className=\"text-xl font-semibold mb-2\">No Subjects Added Yet</h3>\n                        <p className=\"text-gray-600 max-w-md mx-auto leading-relaxed\">\n                          Start building your academic structure by adding subjects to your classes using the form above.\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      {/* Edit Subject Modal */}\n      <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit Subject: {editingSubject?.name}</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4 py-2\">\n            <div>\n              <Label htmlFor=\"editSubjectName\">Subject Name *</Label>\n              <Input\n                id=\"editSubjectName\"\n                value={editSubjectName}\n                onChange={(e) => setEditSubjectName(e.target.value)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"editClassSelect\">Select Class *</Label>\n              <Select value={editSelectedClass} onValueChange={setEditSelectedClass}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Choose a class\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {classes.map((cls: any) => (\n                    <SelectItem key={cls.id} value={cls.id}>\n                      {cls.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsEditModalOpen(false)}>Cancel</Button>\n            <Button onClick={handleUpdateSubject} disabled={editSubjectMutation.isPending}>\n              {editSubjectMutation.isPending ? 'Updating...' : 'Update Subject'}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Class Modal */}\n      <Dialog open={isEditClassModalOpen} onOpenChange={setIsEditClassModalOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit Class: {editingClass?.name}</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4 py-2\">\n            <div>\n              <Label htmlFor=\"editClassName\">Class Name *</Label>\n              <Input\n                id=\"editClassName\"\n                value={editClassName}\n                onChange={(e) => setEditClassName(e.target.value)}\n                placeholder=\"e.g., Class 10, Grade 5\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"editClassDescription\">Description</Label>\n              <Input\n                id=\"editClassDescription\"\n                value={editClassDescription}\n                onChange={(e) => setEditClassDescription(e.target.value)}\n                placeholder=\"Optional description\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsEditClassModalOpen(false)}>Cancel</Button>\n            <Button onClick={handleUpdateClass} disabled={editClassMutation.isPending}>\n              {editClassMutation.isPending ? 'Updating...' : 'Update Class'}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </DashboardLayout>\n  );\n}","size_bytes":26042},"client/src/pages/admin/WalletBalances.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { \n  Building2, \n  Users, \n  Wallet, \n  TrendingUp, \n  TrendingDown, \n  Search,\n  DollarSign,\n  Calendar,\n  ArrowUpRight,\n  ArrowDownLeft\n} from 'lucide-react';\n\ninterface SOCenter {\n  id: string;\n  name: string;\n  centerId: string;\n  walletBalance: string;\n  email: string;\n  phone: string;\n  isActive: boolean;\n}\n\ninterface Agent {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  phone: string;\n  isActive: boolean;\n}\n\ninterface WalletMetrics {\n  lastMonthCollections: number;\n  lastMonthPending: number;\n  presentWalletBalance: number;\n  thisMonthCollection: number;\n  thisMonthPending: number;\n  todayCollections: number;\n}\n\ninterface WalletTransaction {\n  id: string;\n  amount: string;\n  type: string;\n  description: string;\n  created_at: string;\n  status?: string;\n}\n\n// Define interface for agent specific metrics\ninterface AgentMetrics {\n  lastMonthSales: number;\n  presentWalletBalance: number;\n  thisMonthCollection: number;\n  thisMonthTransactionCount: number;\n  courseWalletBalance: number;\n  todayCollections: number;\n  todayTransactionCount: number;\n}\n\nfunction WalletBalances() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedSOCenter, setSelectedSOCenter] = useState<SOCenter | null>(null);\n  const [selectedAgent, setSelectedAgent] = useState<Agent | null>(null);\n\n  // Fetch SO Centers\n  const { data: soCenters = [], isLoading: loadingSoCenters } = useQuery<SOCenter[]>({\n    queryKey: ['/api/admin/so-centers'],\n  });\n\n  // Fetch Agents (only users with agent role, excluding so_center)\n  const { data: agents = [], isLoading: loadingAgents } = useQuery<Agent[]>({\n    queryKey: ['/api/admin/users'],\n    select: (users) => users.filter(user => user.role === 'agent')\n  });\n\n  // Fetch SO Center wallet details when selected\n  const { data: soCenterWallet, isLoading: loadingSOWallet } = useQuery<any>({\n    queryKey: ['/api/admin/wallet', selectedSOCenter?.id],\n    queryFn: async () => {\n      if (!selectedSOCenter) return null;\n      return apiRequest('GET', `/api/admin/wallet/${selectedSOCenter.id}`);\n    },\n    enabled: !!selectedSOCenter,\n  });\n\n  // Fetch Agent wallet details when selected\n  const { data: agentWallet, isLoading: loadingAgentWallet } = useQuery<any>({\n    queryKey: ['/api/admin/agent-wallet', selectedAgent?.id],\n    queryFn: async () => {\n      if (!selectedAgent) return null;\n      return apiRequest('GET', `/api/admin/wallet/${selectedAgent.id}`);\n    },\n    enabled: !!selectedAgent,\n  });\n\n  // Fetch Agent metrics\n  const { data: agentMetrics, isLoading: loadingAgentMetrics } = useQuery<AgentMetrics>({\n    queryKey: ['/api/admin/agent-metrics', selectedAgent?.id],\n    queryFn: async () => {\n      if (!selectedAgent) return null;\n      const response = await apiRequest('GET', `/api/admin/agent-metrics/${selectedAgent.id}`);\n      return await response.json();\n    },\n    enabled: !!selectedAgent,\n  });\n  \n  // Fetch SO Center metrics\n  const { data: soCenterMetrics, isLoading: loadingSoCenterMetrics } = useQuery<WalletMetrics>({\n    queryKey: ['/api/admin/so-center-metrics', selectedSOCenter?.id],\n    queryFn: async () => {\n      if (!selectedSOCenter) return null;\n      const response = await apiRequest('GET', `/api/admin/so-center-metrics/${selectedSOCenter.id}`);\n      return await response.json();\n    },\n    enabled: !!selectedSOCenter,\n  });\n\n  const formatCurrency = (amount: string | number) => {\n    const num = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return `₹${num.toLocaleString('en-IN', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-IN', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const filteredSoCenters = soCenters.filter(center =>\n    center.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    center.centerId.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const filteredAgents = agents.filter(agent =>\n    agent.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    agent.email.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const MetricsCard = ({ \n    title, \n    amount, \n    icon: Icon, \n    trend, \n    trendColor = 'text-green-600' \n  }: {\n    title: string;\n    amount: number;\n    icon: any;\n    trend?: string;\n    trendColor?: string;\n  }) => (\n    <Card className=\"border-l-4 border-l-blue-500\">\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n        <Icon className=\"h-4 w-4 text-blue-600\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold text-blue-700\">\n          {formatCurrency(amount)}\n        </div>\n        {trend && (\n          <p className={`text-xs ${trendColor}`}>{trend}</p>\n        )}\n      </CardContent>\n    </Card>\n  );\n\n  const TransactionsList = ({ transactions }: { transactions: WalletTransaction[] }) => (\n    <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n      {transactions.length === 0 ? (\n        <div className=\"text-center py-8 text-gray-500\">\n          <Wallet className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n          <p>No transactions found</p>\n        </div>\n      ) : (\n        transactions.map((transaction) => (\n          <div key={transaction.id} className=\"flex items-center gap-3 p-3 border rounded-lg bg-white\">\n            <div className=\"flex items-center justify-center w-8 h-8 rounded-full bg-blue-50\">\n              {transaction.type === 'credit' ? (\n                <ArrowUpRight className=\"h-4 w-4 text-green-600\" />\n              ) : (\n                <ArrowDownLeft className=\"h-4 w-4 text-red-600\" />\n              )}\n            </div>\n            <div className=\"flex-1\">\n              <div className=\"font-medium text-sm\">{transaction.description}</div>\n              <div className=\"text-xs text-gray-600\">\n                {formatDate(transaction.created_at)}\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"font-bold\">\n                {formatCurrency(transaction.amount)}\n              </div>\n              {transaction.status && (\n                <Badge variant={transaction.status === 'completed' ? 'default' : 'secondary'} className=\"text-xs\">\n                  {transaction.status}\n                </Badge>\n              )}\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n\n  return (\n    <DashboardLayout \n      title=\"Wallet Balances\" \n      subtitle=\"Monitor SO Centers and Agents wallet balances and transactions\"\n    >\n      <Tabs defaultValue=\"so-centers\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"so-centers\" className=\"flex items-center gap-2\">\n            <Building2 className=\"h-4 w-4\" />\n            SO Centers\n          </TabsTrigger>\n          <TabsTrigger value=\"agents\" className=\"flex items-center gap-2\">\n            <Users className=\"h-4 w-4\" />\n            Agents\n          </TabsTrigger>\n        </TabsList>\n\n        {/* SO Centers Tab */}\n        <TabsContent value=\"so-centers\" className=\"space-y-6\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"relative flex-1 max-w-md\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Search SO Centers...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* SO Centers List */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Building2 className=\"h-5 w-5\" />\n                  SO Centers ({filteredSoCenters.length})\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {loadingSoCenters ? (\n                  <div className=\"space-y-3\">\n                    {Array.from({ length: 5 }).map((_, i) => (\n                      <div key={i} className=\"p-3 border rounded-lg animate-pulse\">\n                        <div className=\"h-4 bg-gray-200 rounded w-2/3 mb-2\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                    {filteredSoCenters.map((center) => (\n                      <div\n                        key={center.id}\n                        className={`p-3 border rounded-lg cursor-pointer transition-colors ${\n                          selectedSOCenter?.id === center.id\n                            ? 'border-blue-500 bg-blue-50'\n                            : 'hover:bg-gray-50'\n                        }`}\n                        onClick={() => setSelectedSOCenter(center)}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <div className=\"font-medium\">{center.name}</div>\n                            <div className=\"text-sm text-gray-600\">{center.centerId}</div>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"font-bold text-green-600\">\n                              {formatCurrency(center.walletBalance || '0')}\n                            </div>\n                            <Badge variant={center.isActive ? 'default' : 'secondary'} className=\"text-xs\">\n                              {center.isActive ? 'Active' : 'Inactive'}\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* SO Center Details */}\n            <div className=\"space-y-6\">\n              {selectedSOCenter ? (\n                <>\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Wallet className=\"h-5 w-5\" />\n                        {selectedSOCenter.name} - Wallet Metrics\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {loadingSoCenterMetrics ? (\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          {Array.from({ length: 6 }).map((_, i) => (\n                            <div key={i} className=\"p-4 border rounded-lg animate-pulse\">\n                              <div className=\"h-4 bg-gray-200 rounded w-1/2 mb-2\"></div>\n                              <div className=\"h-6 bg-gray-200 rounded w-3/4\"></div>\n                            </div>\n                          ))}\n                        </div>\n                      ) : (\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <MetricsCard\n                            title=\"Last Month Collections\"\n                            amount={soCenterMetrics?.lastMonthCollections || 0}\n                            icon={TrendingUp}\n                            trend=\"+12% from prev month\"\n                          />\n                          <MetricsCard\n                            title=\"Last Month Pending\"\n                            amount={soCenterMetrics?.lastMonthPending || 0}\n                            icon={TrendingDown}\n                            trend=\"-5% from prev month\"\n                            trendColor=\"text-red-600\"\n                          />\n                          <MetricsCard\n                            title=\"Present Wallet Balance\"\n                            amount={parseFloat(selectedSOCenter.walletBalance || '0')}\n                            icon={Wallet}\n                          />\n                          <MetricsCard\n                            title=\"This Month Collection\"\n                            amount={soCenterMetrics?.thisMonthCollection || 0}\n                            icon={DollarSign}\n                            trend=\"+8% vs last month\"\n                          />\n                          <MetricsCard\n                            title=\"This Month Pending\"\n                            amount={soCenterMetrics?.thisMonthPending || 0}\n                            icon={Calendar}\n                            trend=\"-3% vs last month\"\n                            trendColor=\"text-red-600\"\n                          />\n                          <MetricsCard\n                            title=\"Today Collections\"\n                            amount={soCenterMetrics?.todayCollections || 0}\n                            icon={TrendingUp}\n                            trend=\"₹2,500 since morning\"\n                          />\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Recent Transactions</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <TransactionsList transactions={soCenterWallet?.transactions || []} />\n                    </CardContent>\n                  </Card>\n                </>\n              ) : (\n                <Card>\n                  <CardContent className=\"flex items-center justify-center py-16\">\n                    <div className=\"text-center\">\n                      <Building2 className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Select SO Center</h3>\n                      <p className=\"text-gray-600\">Choose an SO Center to view wallet metrics and transactions</p>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* Agents Tab */}\n        <TabsContent value=\"agents\" className=\"space-y-6\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"relative flex-1 max-w-md\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Search Agents...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Agents List */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"h-5 w-5\" />\n                  Agents ({filteredAgents.length})\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {loadingAgents ? (\n                  <div className=\"space-y-3\">\n                    {Array.from({ length: 5 }).map((_, i) => (\n                      <div key={i} className=\"p-3 border rounded-lg animate-pulse\">\n                        <div className=\"h-4 bg-gray-200 rounded w-2/3 mb-2\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                    {filteredAgents.map((agent) => (\n                      <div\n                        key={agent.id}\n                        className={`p-3 border rounded-lg cursor-pointer transition-colors ${\n                          selectedAgent?.id === agent.id\n                            ? 'border-blue-500 bg-blue-50'\n                            : 'hover:bg-gray-50'\n                        }`}\n                        onClick={() => setSelectedAgent(agent)}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <div className=\"font-medium\">{agent.name}</div>\n                            <div className=\"text-sm text-gray-600\">{agent.email}</div>\n                          </div>\n                          <div className=\"text-right\">\n                            <Badge variant=\"outline\" className=\"text-xs mb-1\">\n                              {agent.role.replace('_', ' ').toUpperCase()}\n                            </Badge>\n                            <Badge variant={agent.isActive ? 'default' : 'secondary'} className=\"text-xs\">\n                              {agent.isActive ? 'Active' : 'Inactive'}\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Agent Details */}\n            <div className=\"space-y-6\">\n              {selectedAgent ? (\n                <>\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Wallet className=\"h-5 w-5\" />\n                        {selectedAgent.name} - Wallet Metrics\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      {loadingAgentWallet || loadingAgentMetrics ? (\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          {Array.from({ length: 6 }).map((_, i) => (\n                            <div key={i} className=\"p-4 border rounded-lg animate-pulse\">\n                              <div className=\"h-4 bg-gray-200 rounded w-1/2 mb-2\"></div>\n                              <div className=\"h-6 bg-gray-200 rounded w-3/4\"></div>\n                            </div>\n                          ))}\n                        </div>\n                      ) : (\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <MetricsCard\n                            title=\"Last Month Collections\"\n                            amount={agentMetrics?.lastMonthSales || 0}\n                            icon={TrendingDown}\n                            trend=\"Course sales\"\n                            trendColor=\"text-blue-600\"\n                          />\n                          <MetricsCard\n                            title=\"Commission Wallet\"\n                            amount={agentMetrics?.presentWalletBalance || 0}\n                            icon={Wallet}\n                          />\n                          <MetricsCard\n                            title=\"This Month Commissions\"\n                            amount={agentMetrics?.thisMonthCollection || 0}\n                            icon={DollarSign}\n                            trend={`${agentMetrics?.thisMonthTransactionCount || 0} transactions`}\n                          />\n                          <MetricsCard\n                            title=\"Course Wallet Balance\"\n                            amount={agentMetrics?.courseWalletBalance || 0}\n                            icon={Calendar}\n                            trend=\"Total course value\"\n                            trendColor=\"text-blue-600\"\n                          />\n                          <MetricsCard\n                            title=\"Today Commissions\"\n                            amount={agentMetrics?.todayCollections || 0}\n                            icon={TrendingUp}\n                            trend={`${agentMetrics?.todayTransactionCount || 0} transactions today`}\n                          />\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Recent Transactions</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <TransactionsList transactions={agentWallet?.transactions || []} />\n                    </CardContent>\n                  </Card>\n                </>\n              ) : (\n                <Card>\n                  <CardContent className=\"flex items-center justify-center py-16\">\n                    <div className=\"text-center\">\n                      <Users className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Select Agent</h3>\n                      <p className=\"text-gray-600\">Choose an agent to view wallet metrics and transactions</p>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </DashboardLayout>\n  );\n}\n\nexport default WalletBalances;","size_bytes":21731},"client/src/pages/admin/StudentBalanceDues.tsx":{"content":"\nimport { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from '@/components/ui/select';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { \n  Search, \n  Filter,\n  Download,\n  Eye,\n  MapPin,\n  Building,\n  CreditCard,\n  AlertTriangle,\n  CheckCircle,\n  User,\n  Phone,\n  Calendar,\n  IndianRupee,\n  FileText\n} from 'lucide-react';\nimport { \n  BarChart, \n  Bar, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell\n} from 'recharts';\n\ninterface Student {\n  id: string;\n  name: string;\n  studentId: string;\n  fatherName: string;\n  fatherMobile: string;\n  className: string;\n  soCenterName: string;\n  paidAmount: string;\n  pendingAmount: string;\n  totalFeeAmount: string;\n  enrollmentDate: string;\n  stateName?: string;\n  districtName?: string;\n  mandalName?: string;\n  villageName?: string;\n}\n\ninterface Payment {\n  id: string;\n  amount: string;\n  paymentMethod: string;\n  description: string;\n  createdAt: string;\n  month?: string;\n  year?: number;\n  receiptNumber?: string;\n}\n\nexport default function StudentBalanceDues() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedState, setSelectedState] = useState('all');\n  const [selectedDistrict, setSelectedDistrict] = useState('all');\n  const [selectedMandal, setSelectedMandal] = useState('all');\n  const [selectedVillage, setSelectedVillage] = useState('all');\n  const [selectedCenter, setSelectedCenter] = useState('all');\n  const [selectedClass, setSelectedClass] = useState('all');\n  const [paymentStatus, setPaymentStatus] = useState('all'); // 'all', 'paid', 'due', 'partial'\n  const [selectedStudent, setSelectedStudent] = useState<Student | null>(null);\n\n  // Fetch all required data\n  const { data: students = [], isLoading: studentsLoading } = useQuery<Student[]>({\n    queryKey: ['/api/admin/students'],\n  });\n\n  const { data: states = [] } = useQuery({\n    queryKey: ['/api/admin/addresses/states'],\n  });\n\n  const { data: districts = [] } = useQuery({\n    queryKey: ['/api/admin/addresses/districts'],\n  });\n\n  const { data: mandals = [] } = useQuery({\n    queryKey: ['/api/admin/addresses/mandals'],\n  });\n\n  const { data: villages = [] } = useQuery({\n    queryKey: ['/api/admin/addresses/villages'],\n  });\n\n  const { data: soCenters = [] } = useQuery({\n    queryKey: ['/api/admin/so-centers'],\n  });\n\n  const { data: classes = [] } = useQuery({\n    queryKey: ['/api/classes'],\n  });\n\n  // Fetch payment history for selected student\n  const { data: studentPayments = [] } = useQuery<Payment[]>({\n    queryKey: [`/api/students/${selectedStudent?.id}/payments`],\n    enabled: !!selectedStudent?.id,\n  });\n\n  // Filter location data based on selections\n  const filteredDistricts = (districts as any[]).filter((district: any) => \n    selectedState === 'all' || district.stateId === selectedState\n  );\n\n  const filteredMandals = (mandals as any[]).filter((mandal: any) => \n    selectedDistrict === 'all' || mandal.districtId === selectedDistrict\n  );\n\n  const filteredVillages = (villages as any[]).filter((village: any) => \n    selectedMandal === 'all' || village.mandalId === selectedMandal\n  );\n\n  const filteredSoCenters = (soCenters as any[]).filter((center: any) => {\n    if (selectedState === 'all' && selectedDistrict === 'all' && selectedMandal === 'all' && selectedVillage === 'all') {\n      return true;\n    }\n    const stateMatch = selectedState === 'all' || center.stateName === (states as any[]).find(s => s.id === selectedState)?.name;\n    const districtMatch = selectedDistrict === 'all' || center.districtName === (districts as any[]).find(d => d.id === selectedDistrict)?.name;\n    const mandalMatch = selectedMandal === 'all' || center.mandalName === (mandals as any[]).find(m => m.id === selectedMandal)?.name;\n    const villageMatch = selectedVillage === 'all' || center.villageName === (villages as any[]).find(v => v.id === selectedVillage)?.name;\n    return stateMatch && districtMatch && mandalMatch && villageMatch;\n  });\n\n  // Filter students based on all criteria\n  const filteredStudents = students.filter((student: Student) => {\n    // Search filter\n    const matchesSearch = !searchTerm || \n      student.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      student.studentId.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      student.fatherName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      student.fatherMobile?.includes(searchTerm);\n\n    // Class filter\n    const matchesClass = selectedClass === 'all' || student.className === (classes as any[]).find(c => c.id === selectedClass)?.name;\n\n    // SO Center filter\n    const matchesCenter = selectedCenter === 'all' || student.soCenterName === (soCenters as any[]).find(c => c.id === selectedCenter)?.name;\n\n    // Payment status filter\n    const paidAmount = parseFloat(student.paidAmount || '0');\n    const totalAmount = parseFloat(student.totalFeeAmount || '0');\n    const pendingAmount = parseFloat(student.pendingAmount || '0');\n    \n    let matchesPaymentStatus = true;\n    if (paymentStatus === 'paid') {\n      matchesPaymentStatus = pendingAmount <= 0 && paidAmount > 0;\n    } else if (paymentStatus === 'due') {\n      matchesPaymentStatus = pendingAmount > 0;\n    } else if (paymentStatus === 'partial') {\n      matchesPaymentStatus = paidAmount > 0 && pendingAmount > 0;\n    }\n\n    // Location filter through SO center\n    let matchesLocation = true;\n    if (selectedState !== 'all' || selectedDistrict !== 'all' || selectedMandal !== 'all' || selectedVillage !== 'all') {\n      const studentCenter = (soCenters as any[]).find(c => c.name === student.soCenterName);\n      if (studentCenter) {\n        const stateMatch = selectedState === 'all' || studentCenter.stateName === (states as any[]).find(s => s.id === selectedState)?.name;\n        const districtMatch = selectedDistrict === 'all' || studentCenter.districtName === (districts as any[]).find(d => d.id === selectedDistrict)?.name;\n        const mandalMatch = selectedMandal === 'all' || studentCenter.mandalName === (mandals as any[]).find(m => m.id === selectedMandal)?.name;\n        const villageMatch = selectedVillage === 'all' || studentCenter.villageName === (villages as any[]).find(v => v.id === selectedVillage)?.name;\n        matchesLocation = stateMatch && districtMatch && mandalMatch && villageMatch;\n      } else {\n        matchesLocation = false;\n      }\n    }\n\n    return matchesSearch && matchesClass && matchesCenter && matchesPaymentStatus && matchesLocation;\n  });\n\n  // Reset cascading filters\n  const handleStateChange = (stateId: string) => {\n    setSelectedState(stateId);\n    setSelectedDistrict('all');\n    setSelectedMandal('all');\n    setSelectedVillage('all');\n    setSelectedCenter('all');\n  };\n\n  const handleDistrictChange = (districtId: string) => {\n    setSelectedDistrict(districtId);\n    setSelectedMandal('all');\n    setSelectedVillage('all');\n    setSelectedCenter('all');\n  };\n\n  const handleMandalChange = (mandalId: string) => {\n    setSelectedMandal(mandalId);\n    setSelectedVillage('all');\n    setSelectedCenter('all');\n  };\n\n  const handleVillageChange = (villageId: string) => {\n    setSelectedVillage(villageId);\n    setSelectedCenter('all');\n  };\n\n  const clearFilters = () => {\n    setSearchTerm('');\n    setSelectedState('all');\n    setSelectedDistrict('all');\n    setSelectedMandal('all');\n    setSelectedVillage('all');\n    setSelectedCenter('all');\n    setSelectedClass('all');\n    setPaymentStatus('all');\n  };\n\n  // Calculate summary statistics\n  const totalStudents = filteredStudents.length;\n  const totalPaidAmount = filteredStudents.reduce((sum, student) => sum + parseFloat(student.paidAmount || '0'), 0);\n  const totalPendingAmount = filteredStudents.reduce((sum, student) => sum + parseFloat(student.pendingAmount || '0'), 0);\n  const studentsWithDues = filteredStudents.filter(s => parseFloat(s.pendingAmount || '0') > 0).length;\n  const studentsFullyPaid = filteredStudents.filter(s => parseFloat(s.pendingAmount || '0') <= 0 && parseFloat(s.paidAmount || '0') > 0).length;\n\n  // Format currency\n  const formatCurrency = (amount: number) => {\n    return `₹${amount.toLocaleString('en-IN')}`;\n  };\n\n  // Format date\n  const formatDate = (dateString: string) => {\n    if (!dateString) return 'N/A';\n    return new Date(dateString).toLocaleDateString('en-GB');\n  };\n\n  // Get payment status badge\n  const getPaymentStatusBadge = (student: Student) => {\n    const paidAmount = parseFloat(student.paidAmount || '0');\n    const pendingAmount = parseFloat(student.pendingAmount || '0');\n\n    if (pendingAmount <= 0 && paidAmount > 0) {\n      return <Badge variant=\"default\" className=\"bg-green-600\">Fully Paid</Badge>;\n    } else if (paidAmount > 0 && pendingAmount > 0) {\n      return <Badge variant=\"secondary\" className=\"bg-yellow-600 text-white\">Partial</Badge>;\n    } else if (pendingAmount > 0) {\n      return <Badge variant=\"destructive\">Outstanding</Badge>;\n    } else {\n      return <Badge variant=\"outline\">No Fees</Badge>;\n    }\n  };\n\n  // Prepare chart data\n  const statusChartData = [\n    { name: 'Fully Paid', value: studentsFullyPaid, color: '#22c55e' },\n    { name: 'Outstanding', value: studentsWithDues, color: '#ef4444' },\n    { name: 'No Fees', value: totalStudents - studentsFullyPaid - studentsWithDues, color: '#6b7280' }\n  ].filter(item => item.value > 0);\n\n  if (studentsLoading) {\n    return (\n      <DashboardLayout title=\"Student Balance & Dues\" subtitle=\"Loading...\">\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout \n      title=\"Student Balance & Dues\" \n      subtitle=\"Comprehensive view of student payment status and outstanding balances\"\n    >\n      <div className=\"space-y-6\">\n        {/* Summary Statistics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Total Students</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{totalStudents}</p>\n                </div>\n                <User className=\"h-8 w-8 text-blue-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Total Collected</p>\n                  <p className=\"text-2xl font-bold text-green-600\">{formatCurrency(totalPaidAmount)}</p>\n                </div>\n                <CheckCircle className=\"h-8 w-8 text-green-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Total Outstanding</p>\n                  <p className=\"text-2xl font-bold text-red-600\">{formatCurrency(totalPendingAmount)}</p>\n                </div>\n                <AlertTriangle className=\"h-8 w-8 text-red-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Students with Dues</p>\n                  <p className=\"text-2xl font-bold text-orange-600\">{studentsWithDues}</p>\n                </div>\n                <IndianRupee className=\"h-8 w-8 text-orange-600\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Payment Status Chart */}\n        {statusChartData.length > 0 && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Payment Status Distribution</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={statusChartData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      outerRadius={80}\n                      dataKey=\"value\"\n                      label={({ name, value, percent }) => `${name}: ${value} (${(percent * 100).toFixed(1)}%)`}\n                    >\n                      {statusChartData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Filters Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Filter className=\"h-5 w-5\" />\n              Filters\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Search */}\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              <Input\n                placeholder=\"Search by name, student ID, father's name, or mobile...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n\n            {/* Location Filters */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <Select onValueChange={handleStateChange} value={selectedState}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select State\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All States</SelectItem>\n                  {(states as any[]).map((state: any) => (\n                    <SelectItem key={state.id} value={state.id}>\n                      {state.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select onValueChange={handleDistrictChange} value={selectedDistrict} disabled={selectedState === 'all'}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select District\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Districts</SelectItem>\n                  {filteredDistricts.map((district: any) => (\n                    <SelectItem key={district.id} value={district.id}>\n                      {district.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select onValueChange={handleMandalChange} value={selectedMandal} disabled={selectedDistrict === 'all'}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select Mandal\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Mandals</SelectItem>\n                  {filteredMandals.map((mandal: any) => (\n                    <SelectItem key={mandal.id} value={mandal.id}>\n                      {mandal.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select onValueChange={handleVillageChange} value={selectedVillage} disabled={selectedMandal === 'all'}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select Village\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Villages</SelectItem>\n                  {filteredVillages.map((village: any) => (\n                    <SelectItem key={village.id} value={village.id}>\n                      {village.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Other Filters */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Select onValueChange={setSelectedCenter} value={selectedCenter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select SO Center\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All SO Centers</SelectItem>\n                  {filteredSoCenters.map((center: any) => (\n                    <SelectItem key={center.id} value={center.id}>\n                      {center.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select onValueChange={setSelectedClass} value={selectedClass}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select Class\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Classes</SelectItem>\n                  {(classes as any[]).map((cls: any) => (\n                    <SelectItem key={cls.id} value={cls.id}>\n                      {cls.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select onValueChange={setPaymentStatus} value={paymentStatus}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Payment Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"paid\">Fully Paid</SelectItem>\n                  <SelectItem value=\"due\">Outstanding</SelectItem>\n                  <SelectItem value=\"partial\">Partial Payment</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex justify-end\">\n              <Button variant=\"outline\" onClick={clearFilters}>\n                <Filter className=\"h-4 w-4 mr-2\" />\n                Clear Filters\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Students Table */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex justify-between items-center\">\n              <CardTitle>Student Balance Details ({filteredStudents.length} students)</CardTitle>\n              <Button variant=\"outline\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export CSV\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b\">\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Student Details</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Contact & Location</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Academic Info</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Payment Status</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Balance Details</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-500\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredStudents.map((student) => {\n                    const paidAmount = parseFloat(student.paidAmount || '0');\n                    const pendingAmount = parseFloat(student.pendingAmount || '0');\n                    const totalAmount = parseFloat(student.totalFeeAmount || '0');\n                    \n                    return (\n                      <tr key={student.id} className=\"border-b hover:bg-gray-50\">\n                        <td className=\"py-4 px-4\">\n                          <div>\n                            <div className=\"font-medium text-gray-900\">{student.name}</div>\n                            <div className=\"text-sm text-gray-500\">ID: {student.studentId}</div>\n                          </div>\n                        </td>\n                        <td className=\"py-4 px-4\">\n                          <div className=\"text-sm\">\n                            <div className=\"font-medium\">{student.fatherName}</div>\n                            <div className=\"text-gray-500\">{student.fatherMobile}</div>\n                            <div className=\"text-xs text-gray-400\">\n                              {student.stateName && `${student.stateName}, ${student.districtName}`}\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"py-4 px-4\">\n                          <div className=\"text-sm\">\n                            <div className=\"font-medium\">{student.className}</div>\n                            <div className=\"text-gray-500\">{student.soCenterName}</div>\n                            <div className=\"text-xs text-gray-400\">\n                              Enrolled: {formatDate(student.enrollmentDate)}\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"py-4 px-4\">\n                          {getPaymentStatusBadge(student)}\n                        </td>\n                        <td className=\"py-4 px-4\">\n                          <div className=\"text-sm space-y-1\">\n                            <div className=\"text-green-600 font-medium\">\n                              Paid: {formatCurrency(paidAmount)}\n                            </div>\n                            {pendingAmount > 0 && (\n                              <div className=\"text-red-600 font-medium\">\n                                Due: {formatCurrency(pendingAmount)}\n                              </div>\n                            )}\n                            <div className=\"text-gray-500 text-xs\">\n                              Total: {formatCurrency(totalAmount)}\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"py-4 px-4\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => setSelectedStudent(student)}\n                          >\n                            <Eye className=\"h-4 w-4 mr-1\" />\n                            View History\n                          </Button>\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n\n              {filteredStudents.length === 0 && (\n                <div className=\"text-center py-12\">\n                  <User className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Students Found</h3>\n                  <p className=\"text-gray-600\">Try adjusting your filters to see student balance data.</p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Student Payment History Modal */}\n      {selectedStudent && (\n        <Dialog open={true} onOpenChange={() => setSelectedStudent(null)}>\n          <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <FileText className=\"h-5 w-5\" />\n                Payment History - {selectedStudent.name}\n              </DialogTitle>\n            </DialogHeader>\n\n            <Tabs defaultValue=\"summary\" className=\"space-y-4\">\n              <TabsList>\n                <TabsTrigger value=\"summary\">Summary</TabsTrigger>\n                <TabsTrigger value=\"history\">Payment History</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"summary\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  {/* Student Details */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg\">Student Information</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-600\">Name</label>\n                        <p className=\"text-gray-900\">{selectedStudent.name}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-600\">Student ID</label>\n                        <p className=\"text-gray-900\">{selectedStudent.studentId}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-600\">Father's Name</label>\n                        <p className=\"text-gray-900\">{selectedStudent.fatherName}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-600\">Mobile</label>\n                        <p className=\"text-gray-900\">{selectedStudent.fatherMobile}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-600\">Class</label>\n                        <p className=\"text-gray-900\">{selectedStudent.className}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-gray-600\">SO Center</label>\n                        <p className=\"text-gray-900\">{selectedStudent.soCenterName}</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Balance Details */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg\">Balance Summary</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"grid grid-cols-1 gap-4\">\n                        <div className=\"p-4 bg-green-50 rounded-lg border border-green-200\">\n                          <div className=\"text-sm font-medium text-green-700\">Amount Paid</div>\n                          <div className=\"text-2xl font-bold text-green-600\">\n                            {formatCurrency(parseFloat(selectedStudent.paidAmount || '0'))}\n                          </div>\n                        </div>\n                        \n                        {parseFloat(selectedStudent.pendingAmount || '0') > 0 && (\n                          <div className=\"p-4 bg-red-50 rounded-lg border border-red-200\">\n                            <div className=\"text-sm font-medium text-red-700\">Outstanding Amount</div>\n                            <div className=\"text-2xl font-bold text-red-600\">\n                              {formatCurrency(parseFloat(selectedStudent.pendingAmount || '0'))}\n                            </div>\n                          </div>\n                        )}\n                        \n                        <div className=\"p-4 bg-blue-50 rounded-lg border border-blue-200\">\n                          <div className=\"text-sm font-medium text-blue-700\">Total Fee Amount</div>\n                          <div className=\"text-2xl font-bold text-blue-600\">\n                            {formatCurrency(parseFloat(selectedStudent.totalFeeAmount || '0'))}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"pt-4 border-t\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"font-medium\">Payment Status:</span>\n                          {getPaymentStatusBadge(selectedStudent)}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"history\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Payment Transaction History</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {studentPayments.length > 0 ? (\n                      <div className=\"space-y-4\">\n                        {studentPayments.map((payment) => (\n                          <div key={payment.id} className=\"border rounded-lg p-4\">\n                            <div className=\"flex justify-between items-start mb-2\">\n                              <div>\n                                <div className=\"font-medium text-gray-900\">\n                                  {formatCurrency(parseFloat(payment.amount))}\n                                </div>\n                                <div className=\"text-sm text-gray-600\">\n                                  {payment.description || 'Fee Payment'}\n                                </div>\n                                {payment.receiptNumber && (\n                                  <div className=\"text-xs text-gray-500\">\n                                    Receipt: {payment.receiptNumber}\n                                  </div>\n                                )}\n                              </div>\n                              <div className=\"text-right\">\n                                <div className=\"text-sm font-medium text-gray-900\">\n                                  {payment.paymentMethod}\n                                </div>\n                                <div className=\"text-xs text-gray-500\">\n                                  {formatDate(payment.createdAt)}\n                                </div>\n                                {payment.month && payment.year && (\n                                  <div className=\"text-xs text-blue-600\">\n                                    {payment.month} {payment.year}\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <CreditCard className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Payment History</h3>\n                        <p className=\"text-gray-600\">No payments have been recorded for this student yet.</p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </DialogContent>\n        </Dialog>\n      )}\n    </DashboardLayout>\n  );\n}\n","size_bytes":31814}}}